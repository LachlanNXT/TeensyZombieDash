
solution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  0000224a  000022de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000224a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000224  00800194  00800194  00002372  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  00002372  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000446  00000000  00000000  00002552  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002115  00000000  00000000  00002998  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d4e  00000000  00000000  00004aad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018c4  00000000  00000000  000057fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  000070c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000661  00000000  00000000  00007380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011e3  00000000  00000000  000079e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000208  00000000  00000000  00008bc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	for (int i = 0; i<8; i++) {
	zDirection[i] = randInRange(0,3);
	}
}

void setupHero(void) {
       0:	45 c1       	rjmp	.+650    	; 0x28c <__ctors_end>
       2:	00 00       	nop
       4:	60 c1       	rjmp	.+704    	; 0x2c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c1       	rjmp	.+700    	; 0x2c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c1       	rjmp	.+696    	; 0x2c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c1       	rjmp	.+692    	; 0x2c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c1       	rjmp	.+688    	; 0x2c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c1       	rjmp	.+684    	; 0x2c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c1       	rjmp	.+680    	; 0x2c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c1       	rjmp	.+676    	; 0x2c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	81 c4       	rjmp	.+2306   	; 0x928 <__vector_9>
      26:	00 00       	nop
      28:	4e c1       	rjmp	.+668    	; 0x2c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c1       	rjmp	.+664    	; 0x2c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c1       	rjmp	.+660    	; 0x2c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c1       	rjmp	.+656    	; 0x2c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c1       	rjmp	.+652    	; 0x2c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c1       	rjmp	.+648    	; 0x2c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c1       	rjmp	.+644    	; 0x2c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c1       	rjmp	.+640    	; 0x2c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c1       	rjmp	.+636    	; 0x2c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c1       	rjmp	.+632    	; 0x2c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c1       	rjmp	.+628    	; 0x2c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c1       	rjmp	.+624    	; 0x2c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c1       	rjmp	.+620    	; 0x2c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_23>
      60:	32 c1       	rjmp	.+612    	; 0x2c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c1       	rjmp	.+608    	; 0x2c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c1       	rjmp	.+604    	; 0x2c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c1       	rjmp	.+600    	; 0x2c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c1       	rjmp	.+596    	; 0x2c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c1       	rjmp	.+592    	; 0x2c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c1       	rjmp	.+588    	; 0x2c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c1       	rjmp	.+584    	; 0x2c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c1       	rjmp	.+580    	; 0x2c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c1       	rjmp	.+576    	; 0x2c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c1       	rjmp	.+572    	; 0x2c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1c c1       	rjmp	.+568    	; 0x2c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1a c1       	rjmp	.+564    	; 0x2c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	18 c1       	rjmp	.+560    	; 0x2c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	16 c1       	rjmp	.+556    	; 0x2c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	14 c1       	rjmp	.+552    	; 0x2c6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	12 c1       	rjmp	.+548    	; 0x2c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	10 c1       	rjmp	.+544    	; 0x2c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0e c1       	rjmp	.+540    	; 0x2c6 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ASCII>:
      ac:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      bc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      cc:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      dc:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      ec:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      fc:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     10c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     11c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     12c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     13c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     14c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     15c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     16c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     17c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     18c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     19c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1ac:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1bc:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1cc:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1dc:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1ec:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1fc:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     20c:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     21c:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     22c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     23c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     24c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     25c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     26c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     27c:	00 00 41 36 08 00 10 08 08 10 08 78 46 41 46 78     ..A6.......xFAFx

0000028c <__ctors_end>:
     28c:	11 24       	eor	r1, r1
     28e:	1f be       	out	0x3f, r1	; 63
     290:	cf ef       	ldi	r28, 0xFF	; 255
     292:	da e0       	ldi	r29, 0x0A	; 10
     294:	de bf       	out	0x3e, r29	; 62
     296:	cd bf       	out	0x3d, r28	; 61

00000298 <__do_copy_data>:
     298:	11 e0       	ldi	r17, 0x01	; 1
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b1 e0       	ldi	r27, 0x01	; 1
     29e:	ea e4       	ldi	r30, 0x4A	; 74
     2a0:	f2 e2       	ldi	r31, 0x22	; 34
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <.do_copy_data_start>

000002a4 <.do_copy_data_loop>:
     2a4:	05 90       	lpm	r0, Z+
     2a6:	0d 92       	st	X+, r0

000002a8 <.do_copy_data_start>:
     2a8:	a4 39       	cpi	r26, 0x94	; 148
     2aa:	b1 07       	cpc	r27, r17
     2ac:	d9 f7       	brne	.-10     	; 0x2a4 <.do_copy_data_loop>

000002ae <__do_clear_bss>:
     2ae:	13 e0       	ldi	r17, 0x03	; 3
     2b0:	a4 e9       	ldi	r26, 0x94	; 148
     2b2:	b1 e0       	ldi	r27, 0x01	; 1
     2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <.do_clear_bss_start>

000002b6 <.do_clear_bss_loop>:
     2b6:	1d 92       	st	X+, r1

000002b8 <.do_clear_bss_start>:
     2b8:	a8 3b       	cpi	r26, 0xB8	; 184
     2ba:	b1 07       	cpc	r27, r17
     2bc:	e1 f7       	brne	.-8      	; 0x2b6 <.do_clear_bss_loop>
     2be:	0e 94 c1 09 	call	0x1382	; 0x1382 <main>
     2c2:	0c 94 23 11 	jmp	0x2246	; 0x2246 <_exit>

000002c6 <__bad_interrupt>:
     2c6:	9c ce       	rjmp	.-712    	; 0x0 <__vectors>

000002c8 <__mulsf3>:
     2c8:	a0 e2       	ldi	r26, 0x20	; 32
     2ca:	b0 e0       	ldi	r27, 0x00	; 0
     2cc:	ea e6       	ldi	r30, 0x6A	; 106
     2ce:	f1 e0       	ldi	r31, 0x01	; 1
     2d0:	0c 94 39 10 	jmp	0x2072	; 0x2072 <__prologue_saves__>
     2d4:	69 83       	std	Y+1, r22	; 0x01
     2d6:	7a 83       	std	Y+2, r23	; 0x02
     2d8:	8b 83       	std	Y+3, r24	; 0x03
     2da:	9c 83       	std	Y+4, r25	; 0x04
     2dc:	2d 83       	std	Y+5, r18	; 0x05
     2de:	3e 83       	std	Y+6, r19	; 0x06
     2e0:	4f 83       	std	Y+7, r20	; 0x07
     2e2:	58 87       	std	Y+8, r21	; 0x08
     2e4:	ce 01       	movw	r24, r28
     2e6:	01 96       	adiw	r24, 0x01	; 1
     2e8:	be 01       	movw	r22, r28
     2ea:	67 5f       	subi	r22, 0xF7	; 247
     2ec:	7f 4f       	sbci	r23, 0xFF	; 255
     2ee:	61 d2       	rcall	.+1218   	; 0x7b2 <__unpack_f>
     2f0:	ce 01       	movw	r24, r28
     2f2:	05 96       	adiw	r24, 0x05	; 5
     2f4:	be 01       	movw	r22, r28
     2f6:	6f 5e       	subi	r22, 0xEF	; 239
     2f8:	7f 4f       	sbci	r23, 0xFF	; 255
     2fa:	5b d2       	rcall	.+1206   	; 0x7b2 <__unpack_f>
     2fc:	99 85       	ldd	r25, Y+9	; 0x09
     2fe:	92 30       	cpi	r25, 0x02	; 2
     300:	88 f0       	brcs	.+34     	; 0x324 <__mulsf3+0x5c>
     302:	89 89       	ldd	r24, Y+17	; 0x11
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	c8 f0       	brcs	.+50     	; 0x33a <__mulsf3+0x72>
     308:	94 30       	cpi	r25, 0x04	; 4
     30a:	19 f4       	brne	.+6      	; 0x312 <__mulsf3+0x4a>
     30c:	82 30       	cpi	r24, 0x02	; 2
     30e:	51 f4       	brne	.+20     	; 0x324 <__mulsf3+0x5c>
     310:	04 c0       	rjmp	.+8      	; 0x31a <__mulsf3+0x52>
     312:	84 30       	cpi	r24, 0x04	; 4
     314:	29 f4       	brne	.+10     	; 0x320 <__mulsf3+0x58>
     316:	92 30       	cpi	r25, 0x02	; 2
     318:	81 f4       	brne	.+32     	; 0x33a <__mulsf3+0x72>
     31a:	87 e8       	ldi	r24, 0x87	; 135
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	c6 c0       	rjmp	.+396    	; 0x4ac <__mulsf3+0x1e4>
     320:	92 30       	cpi	r25, 0x02	; 2
     322:	49 f4       	brne	.+18     	; 0x336 <__mulsf3+0x6e>
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	9a 85       	ldd	r25, Y+10	; 0x0a
     328:	8a 89       	ldd	r24, Y+18	; 0x12
     32a:	98 13       	cpse	r25, r24
     32c:	21 e0       	ldi	r18, 0x01	; 1
     32e:	2a 87       	std	Y+10, r18	; 0x0a
     330:	ce 01       	movw	r24, r28
     332:	09 96       	adiw	r24, 0x09	; 9
     334:	bb c0       	rjmp	.+374    	; 0x4ac <__mulsf3+0x1e4>
     336:	82 30       	cpi	r24, 0x02	; 2
     338:	49 f4       	brne	.+18     	; 0x34c <__mulsf3+0x84>
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	9a 85       	ldd	r25, Y+10	; 0x0a
     33e:	8a 89       	ldd	r24, Y+18	; 0x12
     340:	98 13       	cpse	r25, r24
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	2a 8b       	std	Y+18, r18	; 0x12
     346:	ce 01       	movw	r24, r28
     348:	41 96       	adiw	r24, 0x11	; 17
     34a:	b0 c0       	rjmp	.+352    	; 0x4ac <__mulsf3+0x1e4>
     34c:	2d 84       	ldd	r2, Y+13	; 0x0d
     34e:	3e 84       	ldd	r3, Y+14	; 0x0e
     350:	4f 84       	ldd	r4, Y+15	; 0x0f
     352:	58 88       	ldd	r5, Y+16	; 0x10
     354:	6d 88       	ldd	r6, Y+21	; 0x15
     356:	7e 88       	ldd	r7, Y+22	; 0x16
     358:	8f 88       	ldd	r8, Y+23	; 0x17
     35a:	98 8c       	ldd	r9, Y+24	; 0x18
     35c:	ee 24       	eor	r14, r14
     35e:	ff 24       	eor	r15, r15
     360:	87 01       	movw	r16, r14
     362:	aa 24       	eor	r10, r10
     364:	bb 24       	eor	r11, r11
     366:	65 01       	movw	r12, r10
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	e0 e0       	ldi	r30, 0x00	; 0
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	c1 01       	movw	r24, r2
     376:	81 70       	andi	r24, 0x01	; 1
     378:	90 70       	andi	r25, 0x00	; 0
     37a:	89 2b       	or	r24, r25
     37c:	e9 f0       	breq	.+58     	; 0x3b8 <__mulsf3+0xf0>
     37e:	e6 0c       	add	r14, r6
     380:	f7 1c       	adc	r15, r7
     382:	08 1d       	adc	r16, r8
     384:	19 1d       	adc	r17, r9
     386:	9a 01       	movw	r18, r20
     388:	ab 01       	movw	r20, r22
     38a:	2a 0d       	add	r18, r10
     38c:	3b 1d       	adc	r19, r11
     38e:	4c 1d       	adc	r20, r12
     390:	5d 1d       	adc	r21, r13
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	a0 e0       	ldi	r26, 0x00	; 0
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e6 14       	cp	r14, r6
     39c:	f7 04       	cpc	r15, r7
     39e:	08 05       	cpc	r16, r8
     3a0:	19 05       	cpc	r17, r9
     3a2:	20 f4       	brcc	.+8      	; 0x3ac <__mulsf3+0xe4>
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	a0 e0       	ldi	r26, 0x00	; 0
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	ba 01       	movw	r22, r20
     3ae:	a9 01       	movw	r20, r18
     3b0:	48 0f       	add	r20, r24
     3b2:	59 1f       	adc	r21, r25
     3b4:	6a 1f       	adc	r22, r26
     3b6:	7b 1f       	adc	r23, r27
     3b8:	aa 0c       	add	r10, r10
     3ba:	bb 1c       	adc	r11, r11
     3bc:	cc 1c       	adc	r12, r12
     3be:	dd 1c       	adc	r13, r13
     3c0:	97 fe       	sbrs	r9, 7
     3c2:	08 c0       	rjmp	.+16     	; 0x3d4 <__mulsf3+0x10c>
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	a8 2a       	or	r10, r24
     3ce:	b9 2a       	or	r11, r25
     3d0:	ca 2a       	or	r12, r26
     3d2:	db 2a       	or	r13, r27
     3d4:	31 96       	adiw	r30, 0x01	; 1
     3d6:	e0 32       	cpi	r30, 0x20	; 32
     3d8:	f1 05       	cpc	r31, r1
     3da:	49 f0       	breq	.+18     	; 0x3ee <__mulsf3+0x126>
     3dc:	66 0c       	add	r6, r6
     3de:	77 1c       	adc	r7, r7
     3e0:	88 1c       	adc	r8, r8
     3e2:	99 1c       	adc	r9, r9
     3e4:	56 94       	lsr	r5
     3e6:	47 94       	ror	r4
     3e8:	37 94       	ror	r3
     3ea:	27 94       	ror	r2
     3ec:	c3 cf       	rjmp	.-122    	; 0x374 <__mulsf3+0xac>
     3ee:	fa 85       	ldd	r31, Y+10	; 0x0a
     3f0:	ea 89       	ldd	r30, Y+18	; 0x12
     3f2:	2b 89       	ldd	r18, Y+19	; 0x13
     3f4:	3c 89       	ldd	r19, Y+20	; 0x14
     3f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3f8:	9c 85       	ldd	r25, Y+12	; 0x0c
     3fa:	28 0f       	add	r18, r24
     3fc:	39 1f       	adc	r19, r25
     3fe:	2e 5f       	subi	r18, 0xFE	; 254
     400:	3f 4f       	sbci	r19, 0xFF	; 255
     402:	17 c0       	rjmp	.+46     	; 0x432 <__mulsf3+0x16a>
     404:	ca 01       	movw	r24, r20
     406:	81 70       	andi	r24, 0x01	; 1
     408:	90 70       	andi	r25, 0x00	; 0
     40a:	89 2b       	or	r24, r25
     40c:	61 f0       	breq	.+24     	; 0x426 <__mulsf3+0x15e>
     40e:	16 95       	lsr	r17
     410:	07 95       	ror	r16
     412:	f7 94       	ror	r15
     414:	e7 94       	ror	r14
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	a0 e0       	ldi	r26, 0x00	; 0
     41c:	b0 e8       	ldi	r27, 0x80	; 128
     41e:	e8 2a       	or	r14, r24
     420:	f9 2a       	or	r15, r25
     422:	0a 2b       	or	r16, r26
     424:	1b 2b       	or	r17, r27
     426:	76 95       	lsr	r23
     428:	67 95       	ror	r22
     42a:	57 95       	ror	r21
     42c:	47 95       	ror	r20
     42e:	2f 5f       	subi	r18, 0xFF	; 255
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	77 fd       	sbrc	r23, 7
     434:	e7 cf       	rjmp	.-50     	; 0x404 <__mulsf3+0x13c>
     436:	0c c0       	rjmp	.+24     	; 0x450 <__mulsf3+0x188>
     438:	44 0f       	add	r20, r20
     43a:	55 1f       	adc	r21, r21
     43c:	66 1f       	adc	r22, r22
     43e:	77 1f       	adc	r23, r23
     440:	17 fd       	sbrc	r17, 7
     442:	41 60       	ori	r20, 0x01	; 1
     444:	ee 0c       	add	r14, r14
     446:	ff 1c       	adc	r15, r15
     448:	00 1f       	adc	r16, r16
     44a:	11 1f       	adc	r17, r17
     44c:	21 50       	subi	r18, 0x01	; 1
     44e:	30 40       	sbci	r19, 0x00	; 0
     450:	40 30       	cpi	r20, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	59 07       	cpc	r21, r25
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	69 07       	cpc	r22, r25
     45a:	90 e4       	ldi	r25, 0x40	; 64
     45c:	79 07       	cpc	r23, r25
     45e:	60 f3       	brcs	.-40     	; 0x438 <__mulsf3+0x170>
     460:	2b 8f       	std	Y+27, r18	; 0x1b
     462:	3c 8f       	std	Y+28, r19	; 0x1c
     464:	db 01       	movw	r26, r22
     466:	ca 01       	movw	r24, r20
     468:	8f 77       	andi	r24, 0x7F	; 127
     46a:	90 70       	andi	r25, 0x00	; 0
     46c:	a0 70       	andi	r26, 0x00	; 0
     46e:	b0 70       	andi	r27, 0x00	; 0
     470:	80 34       	cpi	r24, 0x40	; 64
     472:	91 05       	cpc	r25, r1
     474:	a1 05       	cpc	r26, r1
     476:	b1 05       	cpc	r27, r1
     478:	61 f4       	brne	.+24     	; 0x492 <__mulsf3+0x1ca>
     47a:	47 fd       	sbrc	r20, 7
     47c:	0a c0       	rjmp	.+20     	; 0x492 <__mulsf3+0x1ca>
     47e:	e1 14       	cp	r14, r1
     480:	f1 04       	cpc	r15, r1
     482:	01 05       	cpc	r16, r1
     484:	11 05       	cpc	r17, r1
     486:	29 f0       	breq	.+10     	; 0x492 <__mulsf3+0x1ca>
     488:	40 5c       	subi	r20, 0xC0	; 192
     48a:	5f 4f       	sbci	r21, 0xFF	; 255
     48c:	6f 4f       	sbci	r22, 0xFF	; 255
     48e:	7f 4f       	sbci	r23, 0xFF	; 255
     490:	40 78       	andi	r20, 0x80	; 128
     492:	1a 8e       	std	Y+26, r1	; 0x1a
     494:	fe 17       	cp	r31, r30
     496:	11 f0       	breq	.+4      	; 0x49c <__mulsf3+0x1d4>
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	8a 8f       	std	Y+26, r24	; 0x1a
     49c:	4d 8f       	std	Y+29, r20	; 0x1d
     49e:	5e 8f       	std	Y+30, r21	; 0x1e
     4a0:	6f 8f       	std	Y+31, r22	; 0x1f
     4a2:	78 a3       	std	Y+32, r23	; 0x20
     4a4:	83 e0       	ldi	r24, 0x03	; 3
     4a6:	89 8f       	std	Y+25, r24	; 0x19
     4a8:	ce 01       	movw	r24, r28
     4aa:	49 96       	adiw	r24, 0x19	; 25
     4ac:	ad d0       	rcall	.+346    	; 0x608 <__pack_f>
     4ae:	a0 96       	adiw	r28, 0x20	; 32
     4b0:	e2 e1       	ldi	r30, 0x12	; 18
     4b2:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__epilogue_restores__>

000004b6 <__divsf3>:
     4b6:	a8 e1       	ldi	r26, 0x18	; 24
     4b8:	b0 e0       	ldi	r27, 0x00	; 0
     4ba:	e1 e6       	ldi	r30, 0x61	; 97
     4bc:	f2 e0       	ldi	r31, 0x02	; 2
     4be:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__prologue_saves__+0x10>
     4c2:	69 83       	std	Y+1, r22	; 0x01
     4c4:	7a 83       	std	Y+2, r23	; 0x02
     4c6:	8b 83       	std	Y+3, r24	; 0x03
     4c8:	9c 83       	std	Y+4, r25	; 0x04
     4ca:	2d 83       	std	Y+5, r18	; 0x05
     4cc:	3e 83       	std	Y+6, r19	; 0x06
     4ce:	4f 83       	std	Y+7, r20	; 0x07
     4d0:	58 87       	std	Y+8, r21	; 0x08
     4d2:	b9 e0       	ldi	r27, 0x09	; 9
     4d4:	eb 2e       	mov	r14, r27
     4d6:	f1 2c       	mov	r15, r1
     4d8:	ec 0e       	add	r14, r28
     4da:	fd 1e       	adc	r15, r29
     4dc:	ce 01       	movw	r24, r28
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	b7 01       	movw	r22, r14
     4e2:	67 d1       	rcall	.+718    	; 0x7b2 <__unpack_f>
     4e4:	8e 01       	movw	r16, r28
     4e6:	0f 5e       	subi	r16, 0xEF	; 239
     4e8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ea:	ce 01       	movw	r24, r28
     4ec:	05 96       	adiw	r24, 0x05	; 5
     4ee:	b8 01       	movw	r22, r16
     4f0:	60 d1       	rcall	.+704    	; 0x7b2 <__unpack_f>
     4f2:	29 85       	ldd	r18, Y+9	; 0x09
     4f4:	22 30       	cpi	r18, 0x02	; 2
     4f6:	08 f4       	brcc	.+2      	; 0x4fa <__divsf3+0x44>
     4f8:	7e c0       	rjmp	.+252    	; 0x5f6 <__divsf3+0x140>
     4fa:	39 89       	ldd	r19, Y+17	; 0x11
     4fc:	32 30       	cpi	r19, 0x02	; 2
     4fe:	10 f4       	brcc	.+4      	; 0x504 <__divsf3+0x4e>
     500:	b8 01       	movw	r22, r16
     502:	7c c0       	rjmp	.+248    	; 0x5fc <__divsf3+0x146>
     504:	8a 85       	ldd	r24, Y+10	; 0x0a
     506:	9a 89       	ldd	r25, Y+18	; 0x12
     508:	89 27       	eor	r24, r25
     50a:	8a 87       	std	Y+10, r24	; 0x0a
     50c:	24 30       	cpi	r18, 0x04	; 4
     50e:	11 f0       	breq	.+4      	; 0x514 <__divsf3+0x5e>
     510:	22 30       	cpi	r18, 0x02	; 2
     512:	31 f4       	brne	.+12     	; 0x520 <__divsf3+0x6a>
     514:	23 17       	cp	r18, r19
     516:	09 f0       	breq	.+2      	; 0x51a <__divsf3+0x64>
     518:	6e c0       	rjmp	.+220    	; 0x5f6 <__divsf3+0x140>
     51a:	67 e8       	ldi	r22, 0x87	; 135
     51c:	71 e0       	ldi	r23, 0x01	; 1
     51e:	6e c0       	rjmp	.+220    	; 0x5fc <__divsf3+0x146>
     520:	34 30       	cpi	r19, 0x04	; 4
     522:	39 f4       	brne	.+14     	; 0x532 <__divsf3+0x7c>
     524:	1d 86       	std	Y+13, r1	; 0x0d
     526:	1e 86       	std	Y+14, r1	; 0x0e
     528:	1f 86       	std	Y+15, r1	; 0x0f
     52a:	18 8a       	std	Y+16, r1	; 0x10
     52c:	1c 86       	std	Y+12, r1	; 0x0c
     52e:	1b 86       	std	Y+11, r1	; 0x0b
     530:	04 c0       	rjmp	.+8      	; 0x53a <__divsf3+0x84>
     532:	32 30       	cpi	r19, 0x02	; 2
     534:	21 f4       	brne	.+8      	; 0x53e <__divsf3+0x88>
     536:	84 e0       	ldi	r24, 0x04	; 4
     538:	89 87       	std	Y+9, r24	; 0x09
     53a:	b7 01       	movw	r22, r14
     53c:	5f c0       	rjmp	.+190    	; 0x5fc <__divsf3+0x146>
     53e:	2b 85       	ldd	r18, Y+11	; 0x0b
     540:	3c 85       	ldd	r19, Y+12	; 0x0c
     542:	8b 89       	ldd	r24, Y+19	; 0x13
     544:	9c 89       	ldd	r25, Y+20	; 0x14
     546:	28 1b       	sub	r18, r24
     548:	39 0b       	sbc	r19, r25
     54a:	3c 87       	std	Y+12, r19	; 0x0c
     54c:	2b 87       	std	Y+11, r18	; 0x0b
     54e:	ed 84       	ldd	r14, Y+13	; 0x0d
     550:	fe 84       	ldd	r15, Y+14	; 0x0e
     552:	0f 85       	ldd	r16, Y+15	; 0x0f
     554:	18 89       	ldd	r17, Y+16	; 0x10
     556:	ad 88       	ldd	r10, Y+21	; 0x15
     558:	be 88       	ldd	r11, Y+22	; 0x16
     55a:	cf 88       	ldd	r12, Y+23	; 0x17
     55c:	d8 8c       	ldd	r13, Y+24	; 0x18
     55e:	ea 14       	cp	r14, r10
     560:	fb 04       	cpc	r15, r11
     562:	0c 05       	cpc	r16, r12
     564:	1d 05       	cpc	r17, r13
     566:	40 f4       	brcc	.+16     	; 0x578 <__divsf3+0xc2>
     568:	ee 0c       	add	r14, r14
     56a:	ff 1c       	adc	r15, r15
     56c:	00 1f       	adc	r16, r16
     56e:	11 1f       	adc	r17, r17
     570:	21 50       	subi	r18, 0x01	; 1
     572:	30 40       	sbci	r19, 0x00	; 0
     574:	3c 87       	std	Y+12, r19	; 0x0c
     576:	2b 87       	std	Y+11, r18	; 0x0b
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e4       	ldi	r27, 0x40	; 64
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	ea 14       	cp	r14, r10
     58e:	fb 04       	cpc	r15, r11
     590:	0c 05       	cpc	r16, r12
     592:	1d 05       	cpc	r17, r13
     594:	40 f0       	brcs	.+16     	; 0x5a6 <__divsf3+0xf0>
     596:	28 2b       	or	r18, r24
     598:	39 2b       	or	r19, r25
     59a:	4a 2b       	or	r20, r26
     59c:	5b 2b       	or	r21, r27
     59e:	ea 18       	sub	r14, r10
     5a0:	fb 08       	sbc	r15, r11
     5a2:	0c 09       	sbc	r16, r12
     5a4:	1d 09       	sbc	r17, r13
     5a6:	b6 95       	lsr	r27
     5a8:	a7 95       	ror	r26
     5aa:	97 95       	ror	r25
     5ac:	87 95       	ror	r24
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	6f 5f       	subi	r22, 0xFF	; 255
     5b8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ba:	6f 31       	cpi	r22, 0x1F	; 31
     5bc:	71 05       	cpc	r23, r1
     5be:	31 f7       	brne	.-52     	; 0x58c <__divsf3+0xd6>
     5c0:	da 01       	movw	r26, r20
     5c2:	c9 01       	movw	r24, r18
     5c4:	8f 77       	andi	r24, 0x7F	; 127
     5c6:	90 70       	andi	r25, 0x00	; 0
     5c8:	a0 70       	andi	r26, 0x00	; 0
     5ca:	b0 70       	andi	r27, 0x00	; 0
     5cc:	80 34       	cpi	r24, 0x40	; 64
     5ce:	91 05       	cpc	r25, r1
     5d0:	a1 05       	cpc	r26, r1
     5d2:	b1 05       	cpc	r27, r1
     5d4:	61 f4       	brne	.+24     	; 0x5ee <__divsf3+0x138>
     5d6:	27 fd       	sbrc	r18, 7
     5d8:	0a c0       	rjmp	.+20     	; 0x5ee <__divsf3+0x138>
     5da:	e1 14       	cp	r14, r1
     5dc:	f1 04       	cpc	r15, r1
     5de:	01 05       	cpc	r16, r1
     5e0:	11 05       	cpc	r17, r1
     5e2:	29 f0       	breq	.+10     	; 0x5ee <__divsf3+0x138>
     5e4:	20 5c       	subi	r18, 0xC0	; 192
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	4f 4f       	sbci	r20, 0xFF	; 255
     5ea:	5f 4f       	sbci	r21, 0xFF	; 255
     5ec:	20 78       	andi	r18, 0x80	; 128
     5ee:	2d 87       	std	Y+13, r18	; 0x0d
     5f0:	3e 87       	std	Y+14, r19	; 0x0e
     5f2:	4f 87       	std	Y+15, r20	; 0x0f
     5f4:	58 8b       	std	Y+16, r21	; 0x10
     5f6:	be 01       	movw	r22, r28
     5f8:	67 5f       	subi	r22, 0xF7	; 247
     5fa:	7f 4f       	sbci	r23, 0xFF	; 255
     5fc:	cb 01       	movw	r24, r22
     5fe:	04 d0       	rcall	.+8      	; 0x608 <__pack_f>
     600:	68 96       	adiw	r28, 0x18	; 24
     602:	ea e0       	ldi	r30, 0x0A	; 10
     604:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__epilogue_restores__+0x10>

00000608 <__pack_f>:
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	fc 01       	movw	r30, r24
     614:	e4 80       	ldd	r14, Z+4	; 0x04
     616:	f5 80       	ldd	r15, Z+5	; 0x05
     618:	06 81       	ldd	r16, Z+6	; 0x06
     61a:	17 81       	ldd	r17, Z+7	; 0x07
     61c:	d1 80       	ldd	r13, Z+1	; 0x01
     61e:	80 81       	ld	r24, Z
     620:	82 30       	cpi	r24, 0x02	; 2
     622:	48 f4       	brcc	.+18     	; 0x636 <__pack_f+0x2e>
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	a0 e1       	ldi	r26, 0x10	; 16
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	e8 2a       	or	r14, r24
     62e:	f9 2a       	or	r15, r25
     630:	0a 2b       	or	r16, r26
     632:	1b 2b       	or	r17, r27
     634:	a5 c0       	rjmp	.+330    	; 0x780 <__pack_f+0x178>
     636:	84 30       	cpi	r24, 0x04	; 4
     638:	09 f4       	brne	.+2      	; 0x63c <__pack_f+0x34>
     63a:	9f c0       	rjmp	.+318    	; 0x77a <__pack_f+0x172>
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	21 f4       	brne	.+8      	; 0x648 <__pack_f+0x40>
     640:	ee 24       	eor	r14, r14
     642:	ff 24       	eor	r15, r15
     644:	87 01       	movw	r16, r14
     646:	05 c0       	rjmp	.+10     	; 0x652 <__pack_f+0x4a>
     648:	e1 14       	cp	r14, r1
     64a:	f1 04       	cpc	r15, r1
     64c:	01 05       	cpc	r16, r1
     64e:	11 05       	cpc	r17, r1
     650:	19 f4       	brne	.+6      	; 0x658 <__pack_f+0x50>
     652:	e0 e0       	ldi	r30, 0x00	; 0
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	96 c0       	rjmp	.+300    	; 0x784 <__pack_f+0x17c>
     658:	62 81       	ldd	r22, Z+2	; 0x02
     65a:	73 81       	ldd	r23, Z+3	; 0x03
     65c:	9f ef       	ldi	r25, 0xFF	; 255
     65e:	62 38       	cpi	r22, 0x82	; 130
     660:	79 07       	cpc	r23, r25
     662:	0c f0       	brlt	.+2      	; 0x666 <__pack_f+0x5e>
     664:	5b c0       	rjmp	.+182    	; 0x71c <__pack_f+0x114>
     666:	22 e8       	ldi	r18, 0x82	; 130
     668:	3f ef       	ldi	r19, 0xFF	; 255
     66a:	26 1b       	sub	r18, r22
     66c:	37 0b       	sbc	r19, r23
     66e:	2a 31       	cpi	r18, 0x1A	; 26
     670:	31 05       	cpc	r19, r1
     672:	2c f0       	brlt	.+10     	; 0x67e <__pack_f+0x76>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	2a c0       	rjmp	.+84     	; 0x6d2 <__pack_f+0xca>
     67e:	b8 01       	movw	r22, r16
     680:	a7 01       	movw	r20, r14
     682:	02 2e       	mov	r0, r18
     684:	04 c0       	rjmp	.+8      	; 0x68e <__pack_f+0x86>
     686:	76 95       	lsr	r23
     688:	67 95       	ror	r22
     68a:	57 95       	ror	r21
     68c:	47 95       	ror	r20
     68e:	0a 94       	dec	r0
     690:	d2 f7       	brpl	.-12     	; 0x686 <__pack_f+0x7e>
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	a0 e0       	ldi	r26, 0x00	; 0
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	04 c0       	rjmp	.+8      	; 0x6a4 <__pack_f+0x9c>
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	aa 1f       	adc	r26, r26
     6a2:	bb 1f       	adc	r27, r27
     6a4:	2a 95       	dec	r18
     6a6:	d2 f7       	brpl	.-12     	; 0x69c <__pack_f+0x94>
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	a1 09       	sbc	r26, r1
     6ac:	b1 09       	sbc	r27, r1
     6ae:	8e 21       	and	r24, r14
     6b0:	9f 21       	and	r25, r15
     6b2:	a0 23       	and	r26, r16
     6b4:	b1 23       	and	r27, r17
     6b6:	00 97       	sbiw	r24, 0x00	; 0
     6b8:	a1 05       	cpc	r26, r1
     6ba:	b1 05       	cpc	r27, r1
     6bc:	21 f0       	breq	.+8      	; 0x6c6 <__pack_f+0xbe>
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	a0 e0       	ldi	r26, 0x00	; 0
     6c4:	b0 e0       	ldi	r27, 0x00	; 0
     6c6:	9a 01       	movw	r18, r20
     6c8:	ab 01       	movw	r20, r22
     6ca:	28 2b       	or	r18, r24
     6cc:	39 2b       	or	r19, r25
     6ce:	4a 2b       	or	r20, r26
     6d0:	5b 2b       	or	r21, r27
     6d2:	da 01       	movw	r26, r20
     6d4:	c9 01       	movw	r24, r18
     6d6:	8f 77       	andi	r24, 0x7F	; 127
     6d8:	90 70       	andi	r25, 0x00	; 0
     6da:	a0 70       	andi	r26, 0x00	; 0
     6dc:	b0 70       	andi	r27, 0x00	; 0
     6de:	80 34       	cpi	r24, 0x40	; 64
     6e0:	91 05       	cpc	r25, r1
     6e2:	a1 05       	cpc	r26, r1
     6e4:	b1 05       	cpc	r27, r1
     6e6:	39 f4       	brne	.+14     	; 0x6f6 <__pack_f+0xee>
     6e8:	27 ff       	sbrs	r18, 7
     6ea:	09 c0       	rjmp	.+18     	; 0x6fe <__pack_f+0xf6>
     6ec:	20 5c       	subi	r18, 0xC0	; 192
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
     6f0:	4f 4f       	sbci	r20, 0xFF	; 255
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <__pack_f+0xf6>
     6f6:	21 5c       	subi	r18, 0xC1	; 193
     6f8:	3f 4f       	sbci	r19, 0xFF	; 255
     6fa:	4f 4f       	sbci	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	e0 e0       	ldi	r30, 0x00	; 0
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	20 30       	cpi	r18, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	3a 07       	cpc	r19, r26
     708:	a0 e0       	ldi	r26, 0x00	; 0
     70a:	4a 07       	cpc	r20, r26
     70c:	a0 e4       	ldi	r26, 0x40	; 64
     70e:	5a 07       	cpc	r21, r26
     710:	10 f0       	brcs	.+4      	; 0x716 <__pack_f+0x10e>
     712:	e1 e0       	ldi	r30, 0x01	; 1
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	79 01       	movw	r14, r18
     718:	8a 01       	movw	r16, r20
     71a:	27 c0       	rjmp	.+78     	; 0x76a <__pack_f+0x162>
     71c:	60 38       	cpi	r22, 0x80	; 128
     71e:	71 05       	cpc	r23, r1
     720:	64 f5       	brge	.+88     	; 0x77a <__pack_f+0x172>
     722:	fb 01       	movw	r30, r22
     724:	e1 58       	subi	r30, 0x81	; 129
     726:	ff 4f       	sbci	r31, 0xFF	; 255
     728:	d8 01       	movw	r26, r16
     72a:	c7 01       	movw	r24, r14
     72c:	8f 77       	andi	r24, 0x7F	; 127
     72e:	90 70       	andi	r25, 0x00	; 0
     730:	a0 70       	andi	r26, 0x00	; 0
     732:	b0 70       	andi	r27, 0x00	; 0
     734:	80 34       	cpi	r24, 0x40	; 64
     736:	91 05       	cpc	r25, r1
     738:	a1 05       	cpc	r26, r1
     73a:	b1 05       	cpc	r27, r1
     73c:	39 f4       	brne	.+14     	; 0x74c <__pack_f+0x144>
     73e:	e7 fe       	sbrs	r14, 7
     740:	0d c0       	rjmp	.+26     	; 0x75c <__pack_f+0x154>
     742:	80 e4       	ldi	r24, 0x40	; 64
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	a0 e0       	ldi	r26, 0x00	; 0
     748:	b0 e0       	ldi	r27, 0x00	; 0
     74a:	04 c0       	rjmp	.+8      	; 0x754 <__pack_f+0x14c>
     74c:	8f e3       	ldi	r24, 0x3F	; 63
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	a0 e0       	ldi	r26, 0x00	; 0
     752:	b0 e0       	ldi	r27, 0x00	; 0
     754:	e8 0e       	add	r14, r24
     756:	f9 1e       	adc	r15, r25
     758:	0a 1f       	adc	r16, r26
     75a:	1b 1f       	adc	r17, r27
     75c:	17 ff       	sbrs	r17, 7
     75e:	05 c0       	rjmp	.+10     	; 0x76a <__pack_f+0x162>
     760:	16 95       	lsr	r17
     762:	07 95       	ror	r16
     764:	f7 94       	ror	r15
     766:	e7 94       	ror	r14
     768:	31 96       	adiw	r30, 0x01	; 1
     76a:	87 e0       	ldi	r24, 0x07	; 7
     76c:	16 95       	lsr	r17
     76e:	07 95       	ror	r16
     770:	f7 94       	ror	r15
     772:	e7 94       	ror	r14
     774:	8a 95       	dec	r24
     776:	d1 f7       	brne	.-12     	; 0x76c <__pack_f+0x164>
     778:	05 c0       	rjmp	.+10     	; 0x784 <__pack_f+0x17c>
     77a:	ee 24       	eor	r14, r14
     77c:	ff 24       	eor	r15, r15
     77e:	87 01       	movw	r16, r14
     780:	ef ef       	ldi	r30, 0xFF	; 255
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	6e 2f       	mov	r22, r30
     786:	67 95       	ror	r22
     788:	66 27       	eor	r22, r22
     78a:	67 95       	ror	r22
     78c:	90 2f       	mov	r25, r16
     78e:	9f 77       	andi	r25, 0x7F	; 127
     790:	d7 94       	ror	r13
     792:	dd 24       	eor	r13, r13
     794:	d7 94       	ror	r13
     796:	8e 2f       	mov	r24, r30
     798:	86 95       	lsr	r24
     79a:	49 2f       	mov	r20, r25
     79c:	46 2b       	or	r20, r22
     79e:	58 2f       	mov	r21, r24
     7a0:	5d 29       	or	r21, r13
     7a2:	b7 01       	movw	r22, r14
     7a4:	ca 01       	movw	r24, r20
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	08 95       	ret

000007b2 <__unpack_f>:
     7b2:	fc 01       	movw	r30, r24
     7b4:	db 01       	movw	r26, r22
     7b6:	40 81       	ld	r20, Z
     7b8:	51 81       	ldd	r21, Z+1	; 0x01
     7ba:	22 81       	ldd	r18, Z+2	; 0x02
     7bc:	62 2f       	mov	r22, r18
     7be:	6f 77       	andi	r22, 0x7F	; 127
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	22 1f       	adc	r18, r18
     7c4:	22 27       	eor	r18, r18
     7c6:	22 1f       	adc	r18, r18
     7c8:	93 81       	ldd	r25, Z+3	; 0x03
     7ca:	89 2f       	mov	r24, r25
     7cc:	88 0f       	add	r24, r24
     7ce:	82 2b       	or	r24, r18
     7d0:	28 2f       	mov	r18, r24
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	99 1f       	adc	r25, r25
     7d6:	99 27       	eor	r25, r25
     7d8:	99 1f       	adc	r25, r25
     7da:	11 96       	adiw	r26, 0x01	; 1
     7dc:	9c 93       	st	X, r25
     7de:	11 97       	sbiw	r26, 0x01	; 1
     7e0:	21 15       	cp	r18, r1
     7e2:	31 05       	cpc	r19, r1
     7e4:	a9 f5       	brne	.+106    	; 0x850 <__unpack_f+0x9e>
     7e6:	41 15       	cp	r20, r1
     7e8:	51 05       	cpc	r21, r1
     7ea:	61 05       	cpc	r22, r1
     7ec:	71 05       	cpc	r23, r1
     7ee:	11 f4       	brne	.+4      	; 0x7f4 <__unpack_f+0x42>
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	37 c0       	rjmp	.+110    	; 0x862 <__unpack_f+0xb0>
     7f4:	82 e8       	ldi	r24, 0x82	; 130
     7f6:	9f ef       	ldi	r25, 0xFF	; 255
     7f8:	13 96       	adiw	r26, 0x03	; 3
     7fa:	9c 93       	st	X, r25
     7fc:	8e 93       	st	-X, r24
     7fe:	12 97       	sbiw	r26, 0x02	; 2
     800:	9a 01       	movw	r18, r20
     802:	ab 01       	movw	r20, r22
     804:	67 e0       	ldi	r22, 0x07	; 7
     806:	22 0f       	add	r18, r18
     808:	33 1f       	adc	r19, r19
     80a:	44 1f       	adc	r20, r20
     80c:	55 1f       	adc	r21, r21
     80e:	6a 95       	dec	r22
     810:	d1 f7       	brne	.-12     	; 0x806 <__unpack_f+0x54>
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	8c 93       	st	X, r24
     816:	0d c0       	rjmp	.+26     	; 0x832 <__unpack_f+0x80>
     818:	22 0f       	add	r18, r18
     81a:	33 1f       	adc	r19, r19
     81c:	44 1f       	adc	r20, r20
     81e:	55 1f       	adc	r21, r21
     820:	12 96       	adiw	r26, 0x02	; 2
     822:	8d 91       	ld	r24, X+
     824:	9c 91       	ld	r25, X
     826:	13 97       	sbiw	r26, 0x03	; 3
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	13 96       	adiw	r26, 0x03	; 3
     82c:	9c 93       	st	X, r25
     82e:	8e 93       	st	-X, r24
     830:	12 97       	sbiw	r26, 0x02	; 2
     832:	20 30       	cpi	r18, 0x00	; 0
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	38 07       	cpc	r19, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	48 07       	cpc	r20, r24
     83c:	80 e4       	ldi	r24, 0x40	; 64
     83e:	58 07       	cpc	r21, r24
     840:	58 f3       	brcs	.-42     	; 0x818 <__unpack_f+0x66>
     842:	14 96       	adiw	r26, 0x04	; 4
     844:	2d 93       	st	X+, r18
     846:	3d 93       	st	X+, r19
     848:	4d 93       	st	X+, r20
     84a:	5c 93       	st	X, r21
     84c:	17 97       	sbiw	r26, 0x07	; 7
     84e:	08 95       	ret
     850:	2f 3f       	cpi	r18, 0xFF	; 255
     852:	31 05       	cpc	r19, r1
     854:	79 f4       	brne	.+30     	; 0x874 <__unpack_f+0xc2>
     856:	41 15       	cp	r20, r1
     858:	51 05       	cpc	r21, r1
     85a:	61 05       	cpc	r22, r1
     85c:	71 05       	cpc	r23, r1
     85e:	19 f4       	brne	.+6      	; 0x866 <__unpack_f+0xb4>
     860:	84 e0       	ldi	r24, 0x04	; 4
     862:	8c 93       	st	X, r24
     864:	08 95       	ret
     866:	64 ff       	sbrs	r22, 4
     868:	03 c0       	rjmp	.+6      	; 0x870 <__unpack_f+0xbe>
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	8c 93       	st	X, r24
     86e:	12 c0       	rjmp	.+36     	; 0x894 <__unpack_f+0xe2>
     870:	1c 92       	st	X, r1
     872:	10 c0       	rjmp	.+32     	; 0x894 <__unpack_f+0xe2>
     874:	2f 57       	subi	r18, 0x7F	; 127
     876:	30 40       	sbci	r19, 0x00	; 0
     878:	13 96       	adiw	r26, 0x03	; 3
     87a:	3c 93       	st	X, r19
     87c:	2e 93       	st	-X, r18
     87e:	12 97       	sbiw	r26, 0x02	; 2
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	8c 93       	st	X, r24
     884:	87 e0       	ldi	r24, 0x07	; 7
     886:	44 0f       	add	r20, r20
     888:	55 1f       	adc	r21, r21
     88a:	66 1f       	adc	r22, r22
     88c:	77 1f       	adc	r23, r23
     88e:	8a 95       	dec	r24
     890:	d1 f7       	brne	.-12     	; 0x886 <__unpack_f+0xd4>
     892:	70 64       	ori	r23, 0x40	; 64
     894:	14 96       	adiw	r26, 0x04	; 4
     896:	4d 93       	st	X+, r20
     898:	5d 93       	st	X+, r21
     89a:	6d 93       	st	X+, r22
     89c:	7c 93       	st	X, r23
     89e:	17 97       	sbiw	r26, 0x07	; 7
     8a0:	08 95       	ret

000008a2 <buttonCheck>:
	}
}

void buttonCheck() {

	RIGHT = 0; LEFT = 0;
     8a2:	10 92 97 01 	sts	0x0197, r1
     8a6:	10 92 96 01 	sts	0x0196, r1
     8aa:	10 92 95 01 	sts	0x0195, r1
     8ae:	10 92 94 01 	sts	0x0194, r1
	
	if(PINB & 0b00000010) {
     8b2:	19 9b       	sbis	0x03, 1	; 3
     8b4:	11 c0       	rjmp	.+34     	; 0x8d8 <buttonCheck+0x36>
     8b6:	84 ef       	ldi	r24, 0xF4	; 244
     8b8:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8ba:	20 e9       	ldi	r18, 0x90	; 144
     8bc:	31 e0       	ldi	r19, 0x01	; 1
     8be:	f9 01       	movw	r30, r18
     8c0:	31 97       	sbiw	r30, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <buttonCheck+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c6:	d9 f7       	brne	.-10     	; 0x8be <buttonCheck+0x1c>
	_delay_ms(50);
	if(PINB & 0b00000010) {
     8c8:	19 9b       	sbis	0x03, 1	; 3
     8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <buttonCheck+0x36>
		// Send output to PORTD.
		//PORTB |= (1<<3); //PORTB = 0b11111111;
		RIGHT = 1;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	90 93 97 01 	sts	0x0197, r25
     8d4:	80 93 96 01 	sts	0x0196, r24
	}
	}
	
	if (PINB & 0b00000001 ) {
     8d8:	18 9b       	sbis	0x03, 0	; 3
     8da:	11 c0       	rjmp	.+34     	; 0x8fe <buttonCheck+0x5c>
     8dc:	84 ef       	ldi	r24, 0xF4	; 244
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	20 e9       	ldi	r18, 0x90	; 144
     8e2:	31 e0       	ldi	r19, 0x01	; 1
     8e4:	f9 01       	movw	r30, r18
     8e6:	31 97       	sbiw	r30, 0x01	; 1
     8e8:	f1 f7       	brne	.-4      	; 0x8e6 <buttonCheck+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ec:	d9 f7       	brne	.-10     	; 0x8e4 <buttonCheck+0x42>
	_delay_ms(50);
	if (PINB & 0b00000001 ) {
     8ee:	18 9b       	sbis	0x03, 0	; 3
     8f0:	06 c0       	rjmp	.+12     	; 0x8fe <buttonCheck+0x5c>
		//PORTB |= (1<<2);
		LEFT = 1;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	90 93 95 01 	sts	0x0195, r25
     8fa:	80 93 94 01 	sts	0x0194, r24
     8fe:	08 95       	ret

00000900 <PinChangeInit>:
}

void PinChangeInit(void)
{
	//Enable PCINT0 and PCINT1 (both buttons) in the PCMSK0 register
	PCMSK0 |= (1<<PCINT0);
     900:	eb e6       	ldi	r30, 0x6B	; 107
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	81 60       	ori	r24, 0x01	; 1
     908:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT1);
     90a:	80 81       	ld	r24, Z
     90c:	82 60       	ori	r24, 0x02	; 2
     90e:	80 83       	st	Z, r24

	//Enable Pin change interrupts in the Pin Change Interrupt Control Register
	PCICR |= (1<<PCIE0);
     910:	e8 e6       	ldi	r30, 0x68	; 104
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	81 60       	ori	r24, 0x01	; 1
     918:	80 83       	st	Z, r24
	
	//Set the PCINT0 and PCINT1 interrupts to trigger on rising edge
	EICRA |= ((1<<ISC00)&&(1<<ISC01)&&(1<<ISC10)&&(1<<ISC11));
     91a:	e9 e6       	ldi	r30, 0x69	; 105
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	81 60       	ori	r24, 0x01	; 1
     922:	80 83       	st	Z, r24
		
	//Ensure to enable global interrupts as well.
	sei();
     924:	78 94       	sei
}
     926:	08 95       	ret

00000928 <__vector_9>:

ISR(PCINT0_vect) {	
     928:	1f 92       	push	r1
     92a:	0f 92       	push	r0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	0f 92       	push	r0
     930:	11 24       	eor	r1, r1
     932:	8f 93       	push	r24
     934:	9f 93       	push	r25
	RIGHT = 0; LEFT = 0;
     936:	10 92 97 01 	sts	0x0197, r1
     93a:	10 92 96 01 	sts	0x0196, r1
     93e:	10 92 95 01 	sts	0x0195, r1
     942:	10 92 94 01 	sts	0x0194, r1
	
	if(PINB & 0b00000010) {
     946:	19 9b       	sbis	0x03, 1	; 3
     948:	06 c0       	rjmp	.+12     	; 0x956 <__vector_9+0x2e>
	//_delay_ms(50);
	//if(PINB & 0b00000010) {
		// Send output to PORTD.
		//PORTB |= (1<<3); //PORTB = 0b11111111;
		RIGHT = 1;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	90 93 97 01 	sts	0x0197, r25
     952:	80 93 96 01 	sts	0x0196, r24
	//}
	}
	
	if (PINB & 0b00000001 ) {
     956:	18 9b       	sbis	0x03, 0	; 3
     958:	06 c0       	rjmp	.+12     	; 0x966 <__vector_9+0x3e>
	//_delay_ms(50);
	//if (PINB & 0b00000001 ) {
		//PORTB |= (1<<2);
		LEFT = 1;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	90 93 95 01 	sts	0x0195, r25
     962:	80 93 94 01 	sts	0x0194, r24
	}
	clear();
	draw_character('*',heroX,heroY);
	refresh();
	*/
}
     966:	9f 91       	pop	r25
     968:	8f 91       	pop	r24
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0
     970:	1f 90       	pop	r1
     972:	18 95       	reti

00000974 <TimerInit>:

void TimerInit(void)
{
	//Set to Normal Timer Mode using TCCR0A and TCCR0B
	TCCR0A &= ~((1<<WGM01)|(WGM00));
     974:	84 b5       	in	r24, 0x24	; 36
     976:	8d 7f       	andi	r24, 0xFD	; 253
     978:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~((1<<WGM02));
     97a:	85 b5       	in	r24, 0x25	; 37
     97c:	87 7f       	andi	r24, 0xF7	; 247
     97e:	85 bd       	out	0x25, r24	; 37
	
	//Set Prescaler using TCCR0B, using Clock Speed find timer speed = 1/(Clock Speed/Prescaler)
	//Prescaler = 1024
	//Timer Speed = 128 nano seconds NOT 16MHZ
	//Timer Overflow Speed = 32640 nano seconds (Timer Speed * 255) - (255 since 8-bit timer) NOT 16MHZ
	TCCR0B |= (1<<CS02)|(1<<CS00);
     980:	85 b5       	in	r24, 0x25	; 37
     982:	85 60       	ori	r24, 0x05	; 5
     984:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~((1<<CS01));
     986:	85 b5       	in	r24, 0x25	; 37
     988:	8d 7f       	andi	r24, 0xFD	; 253
     98a:	85 bd       	out	0x25, r24	; 37
	
	//Enable TOIE0 interrupt in the TIMSK0 register
	TIMSK0 |= (1<<TOIE0);
     98c:	ee e6       	ldi	r30, 0x6E	; 110
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	81 60       	ori	r24, 0x01	; 1
     994:	80 83       	st	Z, r24
	
	//Ensure to enable global interrupts as well.
	sei();
     996:	78 94       	sei
}
     998:	08 95       	ret

0000099a <heroForward>:
		heroForward();
		collision();
	}
}

void heroForward(void) {
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
int HeroX = 1;
int HeroY = 0;
if (Direction == 0) {
     9a2:	80 91 6b 01 	lds	r24, 0x016B
     9a6:	90 91 6c 01 	lds	r25, 0x016C
     9aa:	89 2b       	or	r24, r25
     9ac:	19 f0       	breq	.+6      	; 0x9b4 <heroForward+0x1a>
     9ae:	21 e0       	ldi	r18, 0x01	; 1
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	1b c0       	rjmp	.+54     	; 0x9ea <heroForward+0x50>
	HeroY = 1;
	HeroX = 0;
	if (my_pointer -> y > screen_y-1) {
     9b4:	00 91 aa 01 	lds	r16, 0x01AA
     9b8:	10 91 ab 01 	lds	r17, 0x01AB
     9bc:	60 91 63 01 	lds	r22, 0x0163
     9c0:	70 91 64 01 	lds	r23, 0x0164
     9c4:	61 50       	subi	r22, 0x01	; 1
     9c6:	70 40       	sbci	r23, 0x00	; 0
     9c8:	88 27       	eor	r24, r24
     9ca:	77 fd       	sbrc	r23, 7
     9cc:	80 95       	com	r24
     9ce:	98 2f       	mov	r25, r24
     9d0:	91 d6       	rcall	.+3362   	; 0x16f4 <__floatsisf>
     9d2:	9b 01       	movw	r18, r22
     9d4:	ac 01       	movw	r20, r24
     9d6:	f8 01       	movw	r30, r16
     9d8:	64 81       	ldd	r22, Z+4	; 0x04
     9da:	75 81       	ldd	r23, Z+5	; 0x05
     9dc:	86 81       	ldd	r24, Z+6	; 0x06
     9de:	97 81       	ldd	r25, Z+7	; 0x07
     9e0:	39 d7       	rcall	.+3698   	; 0x1854 <__gesf2>
     9e2:	18 16       	cp	r1, r24
     9e4:	2c f4       	brge	.+10     	; 0x9f0 <heroForward+0x56>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	c0 e0       	ldi	r28, 0x00	; 0
     9ec:	d0 e0       	ldi	r29, 0x00	; 0
     9ee:	04 c0       	rjmp	.+8      	; 0x9f8 <heroForward+0x5e>
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	c1 e0       	ldi	r28, 0x01	; 1
     9f6:	d0 e0       	ldi	r29, 0x00	; 0
	HeroY = 0;
	}
}
if (Direction == 1) {
     9f8:	80 91 6b 01 	lds	r24, 0x016B
     9fc:	90 91 6c 01 	lds	r25, 0x016C
     a00:	01 97       	sbiw	r24, 0x01	; 1
     a02:	01 f5       	brne	.+64     	; 0xa44 <heroForward+0xaa>
	HeroX = 1;
	HeroY = 0;
	if (my_pointer -> x > screen_x-1) {
     a04:	00 91 aa 01 	lds	r16, 0x01AA
     a08:	10 91 ab 01 	lds	r17, 0x01AB
     a0c:	60 91 5f 01 	lds	r22, 0x015F
     a10:	70 91 60 01 	lds	r23, 0x0160
     a14:	61 50       	subi	r22, 0x01	; 1
     a16:	70 40       	sbci	r23, 0x00	; 0
     a18:	88 27       	eor	r24, r24
     a1a:	77 fd       	sbrc	r23, 7
     a1c:	80 95       	com	r24
     a1e:	98 2f       	mov	r25, r24
     a20:	69 d6       	rcall	.+3282   	; 0x16f4 <__floatsisf>
     a22:	9b 01       	movw	r18, r22
     a24:	ac 01       	movw	r20, r24
     a26:	f8 01       	movw	r30, r16
     a28:	60 81       	ld	r22, Z
     a2a:	71 81       	ldd	r23, Z+1	; 0x01
     a2c:	82 81       	ldd	r24, Z+2	; 0x02
     a2e:	93 81       	ldd	r25, Z+3	; 0x03
     a30:	11 d7       	rcall	.+3618   	; 0x1854 <__gesf2>
     a32:	18 16       	cp	r1, r24
     a34:	1c f4       	brge	.+6      	; 0xa3c <heroForward+0xa2>
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <heroForward+0xa6>
     a3c:	21 e0       	ldi	r18, 0x01	; 1
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	c0 e0       	ldi	r28, 0x00	; 0
     a42:	d0 e0       	ldi	r29, 0x00	; 0
	HeroX = 0;
	}
}
if (Direction == 2) {
     a44:	80 91 6b 01 	lds	r24, 0x016B
     a48:	90 91 6c 01 	lds	r25, 0x016C
     a4c:	02 97       	sbiw	r24, 0x02	; 2
     a4e:	c1 f4       	brne	.+48     	; 0xa80 <heroForward+0xe6>
	HeroY = -1;
	HeroX = 0;
	if (my_pointer -> y < 10) {
     a50:	e0 91 aa 01 	lds	r30, 0x01AA
     a54:	f0 91 ab 01 	lds	r31, 0x01AB
     a58:	64 81       	ldd	r22, Z+4	; 0x04
     a5a:	75 81       	ldd	r23, Z+5	; 0x05
     a5c:	86 81       	ldd	r24, Z+6	; 0x06
     a5e:	97 81       	ldd	r25, Z+7	; 0x07
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	40 e2       	ldi	r20, 0x20	; 32
     a66:	51 e4       	ldi	r21, 0x41	; 65
     a68:	13 d6       	rcall	.+3110   	; 0x1690 <__cmpsf2>
     a6a:	88 23       	and	r24, r24
     a6c:	2c f4       	brge	.+10     	; 0xa78 <heroForward+0xde>
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	c0 e0       	ldi	r28, 0x00	; 0
     a74:	d0 e0       	ldi	r29, 0x00	; 0
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <heroForward+0xe6>
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	cf ef       	ldi	r28, 0xFF	; 255
     a7e:	df ef       	ldi	r29, 0xFF	; 255
	HeroY = 0;
	}
}
if (Direction == 3) {
     a80:	80 91 6b 01 	lds	r24, 0x016B
     a84:	90 91 6c 01 	lds	r25, 0x016C
     a88:	03 97       	sbiw	r24, 0x03	; 3
     a8a:	b1 f4       	brne	.+44     	; 0xab8 <heroForward+0x11e>
	HeroX = -1;
	HeroY = 0;
	if (my_pointer -> x < 2) {
     a8c:	e0 91 aa 01 	lds	r30, 0x01AA
     a90:	f0 91 ab 01 	lds	r31, 0x01AB
     a94:	60 81       	ld	r22, Z
     a96:	71 81       	ldd	r23, Z+1	; 0x01
     a98:	82 81       	ldd	r24, Z+2	; 0x02
     a9a:	93 81       	ldd	r25, Z+3	; 0x03
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	50 e4       	ldi	r21, 0x40	; 64
     aa4:	f5 d5       	rcall	.+3050   	; 0x1690 <__cmpsf2>
     aa6:	88 23       	and	r24, r24
     aa8:	1c f4       	brge	.+6      	; 0xab0 <heroForward+0x116>
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <heroForward+0x11a>
     ab0:	2f ef       	ldi	r18, 0xFF	; 255
     ab2:	3f ef       	ldi	r19, 0xFF	; 255
     ab4:	c0 e0       	ldi	r28, 0x00	; 0
     ab6:	d0 e0       	ldi	r29, 0x00	; 0
	HeroX = 0;
	}
}

my_pointer -> x += HeroX;
     ab8:	00 91 aa 01 	lds	r16, 0x01AA
     abc:	10 91 ab 01 	lds	r17, 0x01AB
     ac0:	b9 01       	movw	r22, r18
     ac2:	88 27       	eor	r24, r24
     ac4:	77 fd       	sbrc	r23, 7
     ac6:	80 95       	com	r24
     ac8:	98 2f       	mov	r25, r24
     aca:	14 d6       	rcall	.+3112   	; 0x16f4 <__floatsisf>
     acc:	9b 01       	movw	r18, r22
     ace:	ac 01       	movw	r20, r24
     ad0:	f8 01       	movw	r30, r16
     ad2:	60 81       	ld	r22, Z
     ad4:	71 81       	ldd	r23, Z+1	; 0x01
     ad6:	82 81       	ldd	r24, Z+2	; 0x02
     ad8:	93 81       	ldd	r25, Z+3	; 0x03
     ada:	76 d5       	rcall	.+2796   	; 0x15c8 <__addsf3>
     adc:	f8 01       	movw	r30, r16
     ade:	60 83       	st	Z, r22
     ae0:	71 83       	std	Z+1, r23	; 0x01
     ae2:	82 83       	std	Z+2, r24	; 0x02
     ae4:	93 83       	std	Z+3, r25	; 0x03
my_pointer -> y += HeroY;
     ae6:	be 01       	movw	r22, r28
     ae8:	88 27       	eor	r24, r24
     aea:	77 fd       	sbrc	r23, 7
     aec:	80 95       	com	r24
     aee:	98 2f       	mov	r25, r24
     af0:	01 d6       	rcall	.+3074   	; 0x16f4 <__floatsisf>
     af2:	9b 01       	movw	r18, r22
     af4:	ac 01       	movw	r20, r24
     af6:	f8 01       	movw	r30, r16
     af8:	64 81       	ldd	r22, Z+4	; 0x04
     afa:	75 81       	ldd	r23, Z+5	; 0x05
     afc:	86 81       	ldd	r24, Z+6	; 0x06
     afe:	97 81       	ldd	r25, Z+7	; 0x07
     b00:	63 d5       	rcall	.+2758   	; 0x15c8 <__addsf3>
     b02:	f8 01       	movw	r30, r16
     b04:	64 83       	std	Z+4, r22	; 0x04
     b06:	75 83       	std	Z+5, r23	; 0x05
     b08:	86 83       	std	Z+6, r24	; 0x06
     b0a:	97 83       	std	Z+7, r25	; 0x07

}
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	08 95       	ret

00000b16 <collision>:
	int middle_y = screen_y/2 + 5;
	my_pointer -> x = middle_x;
	my_pointer -> y = middle_y;
}

void collision(void) {
     b16:	2f 92       	push	r2
     b18:	3f 92       	push	r3
     b1a:	4f 92       	push	r4
     b1c:	5f 92       	push	r5
     b1e:	6f 92       	push	r6
     b20:	7f 92       	push	r7
     b22:	8f 92       	push	r8
     b24:	9f 92       	push	r9
     b26:	af 92       	push	r10
     b28:	bf 92       	push	r11
     b2a:	cf 92       	push	r12
     b2c:	df 92       	push	r13
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29

	int middle_x = screen_x/2;
	int middle_y = screen_y/2;
	
	byte x = my_pointer -> x;
     b3a:	c0 90 aa 01 	lds	r12, 0x01AA
     b3e:	d0 90 ab 01 	lds	r13, 0x01AB
     b42:	f6 01       	movw	r30, r12
     b44:	60 81       	ld	r22, Z
     b46:	71 81       	ldd	r23, Z+1	; 0x01
     b48:	82 81       	ldd	r24, Z+2	; 0x02
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	a5 d5       	rcall	.+2890   	; 0x1698 <__fixunssfsi>
     b4e:	7b 01       	movw	r14, r22
     b50:	8c 01       	movw	r16, r24
	byte y = my_pointer -> y;
     b52:	f6 01       	movw	r30, r12
     b54:	64 81       	ldd	r22, Z+4	; 0x04
     b56:	75 81       	ldd	r23, Z+5	; 0x05
     b58:	86 81       	ldd	r24, Z+6	; 0x06
     b5a:	97 81       	ldd	r25, Z+7	; 0x07
     b5c:	9d d5       	rcall	.+2874   	; 0x1698 <__fixunssfsi>
	
	for (int i = 0; i<8; i++) {
		byte zx = zombie[i] -> x;
		byte zy = zombie[i] -> y;
		
		if (x > zx - width && x < zx + width && y > zy - height && y < zy + height) {
     b5e:	20 91 7d 01 	lds	r18, 0x017D
     b62:	62 2e       	mov	r6, r18
     b64:	77 24       	eor	r7, r7
     b66:	20 91 7e 01 	lds	r18, 0x017E
     b6a:	82 2e       	mov	r8, r18
     b6c:	99 24       	eor	r9, r9
		GAMEON = 0;
			if (Lives>0) {
     b6e:	40 90 7f 01 	lds	r4, 0x017F
     b72:	50 90 80 01 	lds	r5, 0x0180
     b76:	cc ea       	ldi	r28, 0xAC	; 172
     b78:	d1 e0       	ldi	r29, 0x01	; 1
	
	for (int i = 0; i<8; i++) {
		byte zx = zombie[i] -> x;
		byte zy = zombie[i] -> y;
		
		if (x > zx - width && x < zx + width && y > zy - height && y < zy + height) {
     b7a:	ae 2c       	mov	r10, r14
     b7c:	bb 24       	eor	r11, r11
     b7e:	c6 2e       	mov	r12, r22
     b80:	dd 24       	eor	r13, r13
		GAMEON = 0;
			if (Lives>0) {
				Touched = 1;
			}
			else {
				Over = 1;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	28 2e       	mov	r2, r24
     b86:	31 2c       	mov	r3, r1
	
	byte x = my_pointer -> x;
	byte y = my_pointer -> y;
	
	for (int i = 0; i<8; i++) {
		byte zx = zombie[i] -> x;
     b88:	e8 81       	ld	r30, Y
     b8a:	f9 81       	ldd	r31, Y+1	; 0x01
		byte zy = zombie[i] -> y;
     b8c:	e4 80       	ldd	r14, Z+4	; 0x04
     b8e:	f5 80       	ldd	r15, Z+5	; 0x05
     b90:	06 81       	ldd	r16, Z+6	; 0x06
     b92:	17 81       	ldd	r17, Z+7	; 0x07
		
		if (x > zx - width && x < zx + width && y > zy - height && y < zy + height) {
     b94:	60 81       	ld	r22, Z
     b96:	71 81       	ldd	r23, Z+1	; 0x01
     b98:	82 81       	ldd	r24, Z+2	; 0x02
     b9a:	93 81       	ldd	r25, Z+3	; 0x03
     b9c:	7d d5       	rcall	.+2810   	; 0x1698 <__fixunssfsi>
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	cb 01       	movw	r24, r22
     ba2:	86 19       	sub	r24, r6
     ba4:	97 09       	sbc	r25, r7
     ba6:	8a 15       	cp	r24, r10
     ba8:	9b 05       	cpc	r25, r11
     baa:	24 f5       	brge	.+72     	; 0xbf4 <collision+0xde>
     bac:	66 0d       	add	r22, r6
     bae:	77 1d       	adc	r23, r7
     bb0:	a6 16       	cp	r10, r22
     bb2:	b7 06       	cpc	r11, r23
     bb4:	fc f4       	brge	.+62     	; 0xbf4 <collision+0xde>
     bb6:	c8 01       	movw	r24, r16
     bb8:	b7 01       	movw	r22, r14
     bba:	6e d5       	rcall	.+2780   	; 0x1698 <__fixunssfsi>
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	cb 01       	movw	r24, r22
     bc0:	88 19       	sub	r24, r8
     bc2:	99 09       	sbc	r25, r9
     bc4:	8c 15       	cp	r24, r12
     bc6:	9d 05       	cpc	r25, r13
     bc8:	ac f4       	brge	.+42     	; 0xbf4 <collision+0xde>
     bca:	68 0d       	add	r22, r8
     bcc:	79 1d       	adc	r23, r9
     bce:	c6 16       	cp	r12, r22
     bd0:	d7 06       	cpc	r13, r23
     bd2:	84 f4       	brge	.+32     	; 0xbf4 <collision+0xde>
		GAMEON = 0;
     bd4:	10 92 a5 01 	sts	0x01A5, r1
     bd8:	10 92 a4 01 	sts	0x01A4, r1
			if (Lives>0) {
     bdc:	14 14       	cp	r1, r4
     bde:	15 04       	cpc	r1, r5
     be0:	2c f4       	brge	.+10     	; 0xbec <collision+0xd6>
				Touched = 1;
     be2:	30 92 bd 01 	sts	0x01BD, r3
     be6:	20 92 bc 01 	sts	0x01BC, r2
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <collision+0xde>
			}
			else {
				Over = 1;
     bec:	30 92 a9 01 	sts	0x01A9, r3
     bf0:	20 92 a8 01 	sts	0x01A8, r2
     bf4:	22 96       	adiw	r28, 0x02	; 2
	int middle_y = screen_y/2;
	
	byte x = my_pointer -> x;
	byte y = my_pointer -> y;
	
	for (int i = 0; i<8; i++) {
     bf6:	f1 e0       	ldi	r31, 0x01	; 1
     bf8:	cc 3b       	cpi	r28, 0xBC	; 188
     bfa:	df 07       	cpc	r29, r31
     bfc:	29 f6       	brne	.-118    	; 0xb88 <collision+0x72>
		}
	
	
	} 

}
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	df 90       	pop	r13
     c0c:	cf 90       	pop	r12
     c0e:	bf 90       	pop	r11
     c10:	af 90       	pop	r10
     c12:	9f 90       	pop	r9
     c14:	8f 90       	pop	r8
     c16:	7f 90       	pop	r7
     c18:	6f 90       	pop	r6
     c1a:	5f 90       	pop	r5
     c1c:	4f 90       	pop	r4
     c1e:	3f 90       	pop	r3
     c20:	2f 90       	pop	r2
     c22:	08 95       	ret

00000c24 <drawScreen>:
	}
	
}

void drawScreen(void) {
	draw_line(0,8,screen_x_Full,8);
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	68 e0       	ldi	r22, 0x08	; 8
     c28:	40 91 61 01 	lds	r20, 0x0161
     c2c:	28 e0       	ldi	r18, 0x08	; 8
     c2e:	51 d6       	rcall	.+3234   	; 0x18d2 <draw_line>
	draw_line(0,8,0,screen_y_Full);
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	68 e0       	ldi	r22, 0x08	; 8
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	20 91 65 01 	lds	r18, 0x0165
     c3a:	4b d6       	rcall	.+3222   	; 0x18d2 <draw_line>
	draw_line(screen_x_Full,8,screen_x_Full,screen_y_Full);
     c3c:	40 91 61 01 	lds	r20, 0x0161
     c40:	84 2f       	mov	r24, r20
     c42:	68 e0       	ldi	r22, 0x08	; 8
     c44:	20 91 65 01 	lds	r18, 0x0165
     c48:	44 d6       	rcall	.+3208   	; 0x18d2 <draw_line>
	draw_line(0,screen_y_Full,screen_x_Full,screen_y_Full);
     c4a:	20 91 65 01 	lds	r18, 0x0165
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	62 2f       	mov	r22, r18
     c52:	40 91 61 01 	lds	r20, 0x0161
     c56:	3d d6       	rcall	.+3194   	; 0x18d2 <draw_line>
	draw_string("L: ",0,0);
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <draw_string>
	draw_character((0x30 + Lives),11,0);
     c64:	80 91 7f 01 	lds	r24, 0x017F
     c68:	80 5d       	subi	r24, 0xD0	; 208
     c6a:	6b e0       	ldi	r22, 0x0B	; 11
     c6c:	40 e0       	ldi	r20, 0x00	; 0
     c6e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <draw_character>
	draw_string("S: ", 21,0);
     c72:	84 e0       	ldi	r24, 0x04	; 4
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	65 e1       	ldi	r22, 0x15	; 21
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <draw_string>
	draw_character((0x30 + Score),31,0);
     c7e:	80 91 a6 01 	lds	r24, 0x01A6
     c82:	80 5d       	subi	r24, 0xD0	; 208
     c84:	6f e1       	ldi	r22, 0x1F	; 31
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <draw_character>
	draw_character((0x30 + Direction),70,0);
     c8c:	80 91 6b 01 	lds	r24, 0x016B
     c90:	90 91 6c 01 	lds	r25, 0x016C
     c94:	80 5d       	subi	r24, 0xD0	; 208
     c96:	66 e4       	ldi	r22, 0x46	; 70
     c98:	40 e0       	ldi	r20, 0x00	; 0
     c9a:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <draw_character>

00000c9e <CountDown>:
	CountDown();
	Lives = 3;
	
}

void CountDown() {
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	13 e3       	ldi	r17, 0x33	; 51
     ca6:	c0 e9       	ldi	r28, 0x90	; 144
     ca8:	d1 e0       	ldi	r29, 0x01	; 1
	for (char i= 0x3; i>0x0; i--) {
		clear();
     caa:	d8 d5       	rcall	.+2992   	; 0x185c <clear>
		draw_string("Game Start In: ", 2,22); // 15*5 = 75 (84 - 75)/2 = 4
     cac:	88 e0       	ldi	r24, 0x08	; 8
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	62 e0       	ldi	r22, 0x02	; 2
     cb2:	46 e1       	ldi	r20, 0x16	; 22
     cb4:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <draw_string>
		draw_character((0x30 + i), 75,22);
     cb8:	81 2f       	mov	r24, r17
     cba:	6b e4       	ldi	r22, 0x4B	; 75
     cbc:	46 e1       	ldi	r20, 0x16	; 22
     cbe:	f0 d7       	rcall	.+4064   	; 0x1ca0 <draw_character>
		refresh();
     cc0:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <refresh>
     cc4:	80 e1       	ldi	r24, 0x10	; 16
     cc6:	97 e2       	ldi	r25, 0x27	; 39
     cc8:	fe 01       	movw	r30, r28
     cca:	31 97       	sbiw	r30, 0x01	; 1
     ccc:	f1 f7       	brne	.-4      	; 0xcca <CountDown+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd0:	d9 f7       	brne	.-10     	; 0xcc8 <CountDown+0x2a>
     cd2:	11 50       	subi	r17, 0x01	; 1
	Lives = 3;
	
}

void CountDown() {
	for (char i= 0x3; i>0x0; i--) {
     cd4:	10 33       	cpi	r17, 0x30	; 48
     cd6:	49 f7       	brne	.-46     	; 0xcaa <CountDown+0xc>
		draw_string("Game Start In: ", 2,22); // 15*5 = 75 (84 - 75)/2 = 4
		draw_character((0x30 + i), 75,22);
		refresh();
		_delay_ms(1000);
	}
}
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	08 95       	ret

00000ce0 <seedWithButtonPress>:
	return out;
}

void seedWithButtonPress() {
// turn on teensy LED
PORTD |= 0b01000000;
     ce0:	5e 9a       	sbi	0x0b, 6	; 11
// Configure port B for the buttons....
DDRB |= 0b00001100;
     ce2:	84 b1       	in	r24, 0x04	; 4
     ce4:	8c 60       	ori	r24, 0x0C	; 12
     ce6:	84 b9       	out	0x04, r24	; 4
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <seedWithButtonPress+0x12>
// Wait for the button press on SW0 while iterating the seed
unsigned int seed = 0;
while (!RIGHT && !LEFT) {
seed++;
     cee:	2f 5f       	subi	r18, 0xFF	; 255
     cf0:	3f 4f       	sbci	r19, 0xFF	; 255
PORTD |= 0b01000000;
// Configure port B for the buttons....
DDRB |= 0b00001100;
// Wait for the button press on SW0 while iterating the seed
unsigned int seed = 0;
while (!RIGHT && !LEFT) {
     cf2:	80 91 96 01 	lds	r24, 0x0196
     cf6:	90 91 97 01 	lds	r25, 0x0197
     cfa:	89 2b       	or	r24, r25
     cfc:	31 f4       	brne	.+12     	; 0xd0a <seedWithButtonPress+0x2a>
     cfe:	80 91 94 01 	lds	r24, 0x0194
     d02:	90 91 95 01 	lds	r25, 0x0195
     d06:	89 2b       	or	r24, r25
     d08:	91 f3       	breq	.-28     	; 0xcee <seedWithButtonPress+0xe>
seed++;
}
// Seed the random number generator
srand(seed);
     d0a:	c9 01       	movw	r24, r18
     d0c:	0e 94 bc 10 	call	0x2178	; 0x2178 <srand>
// What does dgbI do? where is it from?
// dbgI((int) seed, 10);
// turn off teensy LED
PORTD = 0b00000000;
     d10:	1b b8       	out	0x0b, r1	; 11
}
     d12:	08 95       	ret

00000d14 <randInRange>:
		LEFT = 0;
	}
	*/
}

int randInRange(int min, int max) {
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	8c 01       	movw	r16, r24
     d1e:	7b 01       	movw	r14, r22
	int out = min + rand()%(max+1 - min);
     d20:	0e 94 b9 10 	call	0x2172	; 0x2172 <rand>
     d24:	e0 1a       	sub	r14, r16
     d26:	f1 0a       	sbc	r15, r17
     d28:	08 94       	sec
     d2a:	e1 1c       	adc	r14, r1
     d2c:	f1 1c       	adc	r15, r1
     d2e:	b7 01       	movw	r22, r14
     d30:	0e 94 12 10 	call	0x2024	; 0x2024 <__divmodhi4>
     d34:	9c 01       	movw	r18, r24
     d36:	20 0f       	add	r18, r16
     d38:	31 1f       	adc	r19, r17
	return out;
}
     d3a:	c9 01       	movw	r24, r18
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	08 95       	ret

00000d46 <setupZombies>:
	draw_character((0x30 + Score),31,0);
	draw_character((0x30 + Direction),70,0);

}

void setupZombies(void ) {
     d46:	2f 92       	push	r2
     d48:	3f 92       	push	r3
     d4a:	4f 92       	push	r4
     d4c:	5f 92       	push	r5
     d4e:	6f 92       	push	r6
     d50:	7f 92       	push	r7
     d52:	8f 92       	push	r8
     d54:	9f 92       	push	r9
     d56:	af 92       	push	r10
     d58:	bf 92       	push	r11
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29

	int middle_x = screen_x/2;
     d6a:	80 91 5f 01 	lds	r24, 0x015F
     d6e:	90 91 60 01 	lds	r25, 0x0160
     d72:	62 e0       	ldi	r22, 0x02	; 2
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	0e 94 12 10 	call	0x2024	; 0x2024 <__divmodhi4>
     d7a:	4b 01       	movw	r8, r22
	int middle_y = screen_y/2 + 5;
     d7c:	80 91 63 01 	lds	r24, 0x0163
     d80:	90 91 64 01 	lds	r25, 0x0164
     d84:	62 e0       	ldi	r22, 0x02	; 2
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	0e 94 12 10 	call	0x2024	; 0x2024 <__divmodhi4>
     d8c:	1b 01       	movw	r2, r22
	byte x, y;
	
	for (int i = 0; i<2; i++) {
		x = randInRange(1,middle_x-10);
     d8e:	26 ef       	ldi	r18, 0xF6	; 246
     d90:	42 2e       	mov	r4, r18
     d92:	2f ef       	ldi	r18, 0xFF	; 255
     d94:	52 2e       	mov	r5, r18
     d96:	48 0c       	add	r4, r8
     d98:	59 1c       	adc	r5, r9
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	b2 01       	movw	r22, r4
     da0:	b9 df       	rcall	.-142    	; 0xd14 <randInRange>
     da2:	a8 2e       	mov	r10, r24
		y = randInRange(9, screen_y-1);
     da4:	60 91 63 01 	lds	r22, 0x0163
     da8:	70 91 64 01 	lds	r23, 0x0164
     dac:	61 50       	subi	r22, 0x01	; 1
     dae:	70 40       	sbci	r23, 0x00	; 0
     db0:	89 e0       	ldi	r24, 0x09	; 9
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	af df       	rcall	.-162    	; 0xd14 <randInRange>
     db6:	e8 2e       	mov	r14, r24
		zombie[i] -> x = x;
     db8:	60 90 ac 01 	lds	r6, 0x01AC
     dbc:	70 90 ad 01 	lds	r7, 0x01AD
     dc0:	bb 24       	eor	r11, r11
     dc2:	cc 24       	eor	r12, r12
     dc4:	dd 24       	eor	r13, r13
     dc6:	c6 01       	movw	r24, r12
     dc8:	b5 01       	movw	r22, r10
     dca:	92 d4       	rcall	.+2340   	; 0x16f0 <__floatunsisf>
     dcc:	f3 01       	movw	r30, r6
     dce:	60 83       	st	Z, r22
     dd0:	71 83       	std	Z+1, r23	; 0x01
     dd2:	82 83       	std	Z+2, r24	; 0x02
     dd4:	93 83       	std	Z+3, r25	; 0x03
		zombie[i] -> y = y;
     dd6:	ff 24       	eor	r15, r15
     dd8:	00 e0       	ldi	r16, 0x00	; 0
     dda:	10 e0       	ldi	r17, 0x00	; 0
     ddc:	c8 01       	movw	r24, r16
     dde:	b7 01       	movw	r22, r14
     de0:	87 d4       	rcall	.+2318   	; 0x16f0 <__floatunsisf>
     de2:	f3 01       	movw	r30, r6
     de4:	64 83       	std	Z+4, r22	; 0x04
     de6:	75 83       	std	Z+5, r23	; 0x05
     de8:	86 83       	std	Z+6, r24	; 0x06
     dea:	97 83       	std	Z+7, r25	; 0x07
	int middle_x = screen_x/2;
	int middle_y = screen_y/2 + 5;
	byte x, y;
	
	for (int i = 0; i<2; i++) {
		x = randInRange(1,middle_x-10);
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	b2 01       	movw	r22, r4
     df2:	90 df       	rcall	.-224    	; 0xd14 <randInRange>
     df4:	a8 2e       	mov	r10, r24
		y = randInRange(9, screen_y-1);
     df6:	60 91 63 01 	lds	r22, 0x0163
     dfa:	70 91 64 01 	lds	r23, 0x0164
     dfe:	61 50       	subi	r22, 0x01	; 1
     e00:	70 40       	sbci	r23, 0x00	; 0
     e02:	89 e0       	ldi	r24, 0x09	; 9
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	86 df       	rcall	.-244    	; 0xd14 <randInRange>
     e08:	e8 2e       	mov	r14, r24
		zombie[i] -> x = x;
     e0a:	60 90 ae 01 	lds	r6, 0x01AE
     e0e:	70 90 af 01 	lds	r7, 0x01AF
     e12:	bb 24       	eor	r11, r11
     e14:	cc 24       	eor	r12, r12
     e16:	dd 24       	eor	r13, r13
     e18:	c6 01       	movw	r24, r12
     e1a:	b5 01       	movw	r22, r10
     e1c:	69 d4       	rcall	.+2258   	; 0x16f0 <__floatunsisf>
     e1e:	f3 01       	movw	r30, r6
     e20:	60 83       	st	Z, r22
     e22:	71 83       	std	Z+1, r23	; 0x01
     e24:	82 83       	std	Z+2, r24	; 0x02
     e26:	93 83       	std	Z+3, r25	; 0x03
		zombie[i] -> y = y;
     e28:	ff 24       	eor	r15, r15
     e2a:	00 e0       	ldi	r16, 0x00	; 0
     e2c:	10 e0       	ldi	r17, 0x00	; 0
     e2e:	c8 01       	movw	r24, r16
     e30:	b7 01       	movw	r22, r14
     e32:	5e d4       	rcall	.+2236   	; 0x16f0 <__floatunsisf>
     e34:	f3 01       	movw	r30, r6
     e36:	64 83       	std	Z+4, r22	; 0x04
     e38:	75 83       	std	Z+5, r23	; 0x05
     e3a:	86 83       	std	Z+6, r24	; 0x06
     e3c:	97 83       	std	Z+7, r25	; 0x07
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(middle_x+10,screen_x);
     e3e:	8a e0       	ldi	r24, 0x0A	; 10
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	88 0e       	add	r8, r24
     e44:	99 1e       	adc	r9, r25
     e46:	60 91 5f 01 	lds	r22, 0x015F
     e4a:	70 91 60 01 	lds	r23, 0x0160
     e4e:	c4 01       	movw	r24, r8
     e50:	61 df       	rcall	.-318    	; 0xd14 <randInRange>
     e52:	a8 2e       	mov	r10, r24
		y = randInRange(9, screen_y-1);
     e54:	60 91 63 01 	lds	r22, 0x0163
     e58:	70 91 64 01 	lds	r23, 0x0164
     e5c:	61 50       	subi	r22, 0x01	; 1
     e5e:	70 40       	sbci	r23, 0x00	; 0
     e60:	89 e0       	ldi	r24, 0x09	; 9
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	57 df       	rcall	.-338    	; 0xd14 <randInRange>
     e66:	e8 2e       	mov	r14, r24
		zombie[i+2] -> x = x;
     e68:	60 90 b0 01 	lds	r6, 0x01B0
     e6c:	70 90 b1 01 	lds	r7, 0x01B1
     e70:	bb 24       	eor	r11, r11
     e72:	cc 24       	eor	r12, r12
     e74:	dd 24       	eor	r13, r13
     e76:	c6 01       	movw	r24, r12
     e78:	b5 01       	movw	r22, r10
     e7a:	3a d4       	rcall	.+2164   	; 0x16f0 <__floatunsisf>
     e7c:	f3 01       	movw	r30, r6
     e7e:	60 83       	st	Z, r22
     e80:	71 83       	std	Z+1, r23	; 0x01
     e82:	82 83       	std	Z+2, r24	; 0x02
     e84:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+2] -> y = y;
     e86:	ff 24       	eor	r15, r15
     e88:	00 e0       	ldi	r16, 0x00	; 0
     e8a:	10 e0       	ldi	r17, 0x00	; 0
     e8c:	c8 01       	movw	r24, r16
     e8e:	b7 01       	movw	r22, r14
     e90:	2f d4       	rcall	.+2142   	; 0x16f0 <__floatunsisf>
     e92:	f3 01       	movw	r30, r6
     e94:	64 83       	std	Z+4, r22	; 0x04
     e96:	75 83       	std	Z+5, r23	; 0x05
     e98:	86 83       	std	Z+6, r24	; 0x06
     e9a:	97 83       	std	Z+7, r25	; 0x07
		y = randInRange(9, screen_y-1);
		zombie[i] -> x = x;
		zombie[i] -> y = y;
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(middle_x+10,screen_x);
     e9c:	60 91 5f 01 	lds	r22, 0x015F
     ea0:	70 91 60 01 	lds	r23, 0x0160
     ea4:	c4 01       	movw	r24, r8
     ea6:	36 df       	rcall	.-404    	; 0xd14 <randInRange>
     ea8:	a8 2e       	mov	r10, r24
		y = randInRange(9, screen_y-1);
     eaa:	60 91 63 01 	lds	r22, 0x0163
     eae:	70 91 64 01 	lds	r23, 0x0164
     eb2:	61 50       	subi	r22, 0x01	; 1
     eb4:	70 40       	sbci	r23, 0x00	; 0
     eb6:	89 e0       	ldi	r24, 0x09	; 9
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	2c df       	rcall	.-424    	; 0xd14 <randInRange>
     ebc:	e8 2e       	mov	r14, r24
		zombie[i+2] -> x = x;
     ebe:	80 90 b2 01 	lds	r8, 0x01B2
     ec2:	90 90 b3 01 	lds	r9, 0x01B3
     ec6:	bb 24       	eor	r11, r11
     ec8:	cc 24       	eor	r12, r12
     eca:	dd 24       	eor	r13, r13
     ecc:	c6 01       	movw	r24, r12
     ece:	b5 01       	movw	r22, r10
     ed0:	0f d4       	rcall	.+2078   	; 0x16f0 <__floatunsisf>
     ed2:	f4 01       	movw	r30, r8
     ed4:	60 83       	st	Z, r22
     ed6:	71 83       	std	Z+1, r23	; 0x01
     ed8:	82 83       	std	Z+2, r24	; 0x02
     eda:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+2] -> y = y;
     edc:	ff 24       	eor	r15, r15
     ede:	00 e0       	ldi	r16, 0x00	; 0
     ee0:	10 e0       	ldi	r17, 0x00	; 0
     ee2:	c8 01       	movw	r24, r16
     ee4:	b7 01       	movw	r22, r14
     ee6:	04 d4       	rcall	.+2056   	; 0x16f0 <__floatunsisf>
     ee8:	f4 01       	movw	r30, r8
     eea:	64 83       	std	Z+4, r22	; 0x04
     eec:	75 83       	std	Z+5, r23	; 0x05
     eee:	86 83       	std	Z+6, r24	; 0x06
     ef0:	97 83       	std	Z+7, r25	; 0x07
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(1,screen_x);
     ef2:	60 91 5f 01 	lds	r22, 0x015F
     ef6:	70 91 60 01 	lds	r23, 0x0160
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0a df       	rcall	.-492    	; 0xd14 <randInRange>
     f00:	e8 2e       	mov	r14, r24
		y = randInRange(9, middle_y-10);
     f02:	9b ef       	ldi	r25, 0xFB	; 251
     f04:	69 2e       	mov	r6, r25
     f06:	9f ef       	ldi	r25, 0xFF	; 255
     f08:	79 2e       	mov	r7, r25
     f0a:	62 0c       	add	r6, r2
     f0c:	73 1c       	adc	r7, r3
     f0e:	89 e0       	ldi	r24, 0x09	; 9
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	b3 01       	movw	r22, r6
     f14:	ff de       	rcall	.-514    	; 0xd14 <randInRange>
     f16:	a8 2e       	mov	r10, r24
		zombie[i+4] -> x = x;
     f18:	80 90 b4 01 	lds	r8, 0x01B4
     f1c:	90 90 b5 01 	lds	r9, 0x01B5
     f20:	ff 24       	eor	r15, r15
     f22:	00 e0       	ldi	r16, 0x00	; 0
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	c8 01       	movw	r24, r16
     f28:	b7 01       	movw	r22, r14
     f2a:	e2 d3       	rcall	.+1988   	; 0x16f0 <__floatunsisf>
     f2c:	f4 01       	movw	r30, r8
     f2e:	60 83       	st	Z, r22
     f30:	71 83       	std	Z+1, r23	; 0x01
     f32:	82 83       	std	Z+2, r24	; 0x02
     f34:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+4] -> y = y;
     f36:	bb 24       	eor	r11, r11
     f38:	cc 24       	eor	r12, r12
     f3a:	dd 24       	eor	r13, r13
     f3c:	c6 01       	movw	r24, r12
     f3e:	b5 01       	movw	r22, r10
     f40:	d7 d3       	rcall	.+1966   	; 0x16f0 <__floatunsisf>
     f42:	f4 01       	movw	r30, r8
     f44:	64 83       	std	Z+4, r22	; 0x04
     f46:	75 83       	std	Z+5, r23	; 0x05
     f48:	86 83       	std	Z+6, r24	; 0x06
     f4a:	97 83       	std	Z+7, r25	; 0x07
		y = randInRange(9, screen_y-1);
		zombie[i+2] -> x = x;
		zombie[i+2] -> y = y;
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(1,screen_x);
     f4c:	60 91 5f 01 	lds	r22, 0x015F
     f50:	70 91 60 01 	lds	r23, 0x0160
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	dd de       	rcall	.-582    	; 0xd14 <randInRange>
     f5a:	e8 2e       	mov	r14, r24
		y = randInRange(9, middle_y-10);
     f5c:	89 e0       	ldi	r24, 0x09	; 9
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	b3 01       	movw	r22, r6
     f62:	d8 de       	rcall	.-592    	; 0xd14 <randInRange>
     f64:	a8 2e       	mov	r10, r24
		zombie[i+4] -> x = x;
     f66:	80 90 b6 01 	lds	r8, 0x01B6
     f6a:	90 90 b7 01 	lds	r9, 0x01B7
     f6e:	ff 24       	eor	r15, r15
     f70:	00 e0       	ldi	r16, 0x00	; 0
     f72:	10 e0       	ldi	r17, 0x00	; 0
     f74:	c8 01       	movw	r24, r16
     f76:	b7 01       	movw	r22, r14
     f78:	bb d3       	rcall	.+1910   	; 0x16f0 <__floatunsisf>
     f7a:	f4 01       	movw	r30, r8
     f7c:	60 83       	st	Z, r22
     f7e:	71 83       	std	Z+1, r23	; 0x01
     f80:	82 83       	std	Z+2, r24	; 0x02
     f82:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+4] -> y = y;
     f84:	bb 24       	eor	r11, r11
     f86:	cc 24       	eor	r12, r12
     f88:	dd 24       	eor	r13, r13
     f8a:	c6 01       	movw	r24, r12
     f8c:	b5 01       	movw	r22, r10
     f8e:	b0 d3       	rcall	.+1888   	; 0x16f0 <__floatunsisf>
     f90:	f4 01       	movw	r30, r8
     f92:	64 83       	std	Z+4, r22	; 0x04
     f94:	75 83       	std	Z+5, r23	; 0x05
     f96:	86 83       	std	Z+6, r24	; 0x06
     f98:	97 83       	std	Z+7, r25	; 0x07
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(1,screen_x);
     f9a:	60 91 5f 01 	lds	r22, 0x015F
     f9e:	70 91 60 01 	lds	r23, 0x0160
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	b6 de       	rcall	.-660    	; 0xd14 <randInRange>
     fa8:	a8 2e       	mov	r10, r24
		y = randInRange(middle_y+10,screen_y);
     faa:	8f e0       	ldi	r24, 0x0F	; 15
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	28 0e       	add	r2, r24
     fb0:	39 1e       	adc	r3, r25
     fb2:	60 91 63 01 	lds	r22, 0x0163
     fb6:	70 91 64 01 	lds	r23, 0x0164
     fba:	c1 01       	movw	r24, r2
     fbc:	ab de       	rcall	.-682    	; 0xd14 <randInRange>
     fbe:	e8 2e       	mov	r14, r24
		zombie[i+6] -> x = x;
     fc0:	80 90 b8 01 	lds	r8, 0x01B8
     fc4:	90 90 b9 01 	lds	r9, 0x01B9
     fc8:	bb 24       	eor	r11, r11
     fca:	cc 24       	eor	r12, r12
     fcc:	dd 24       	eor	r13, r13
     fce:	c6 01       	movw	r24, r12
     fd0:	b5 01       	movw	r22, r10
     fd2:	8e d3       	rcall	.+1820   	; 0x16f0 <__floatunsisf>
     fd4:	f4 01       	movw	r30, r8
     fd6:	60 83       	st	Z, r22
     fd8:	71 83       	std	Z+1, r23	; 0x01
     fda:	82 83       	std	Z+2, r24	; 0x02
     fdc:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+6] -> y = y;
     fde:	ff 24       	eor	r15, r15
     fe0:	00 e0       	ldi	r16, 0x00	; 0
     fe2:	10 e0       	ldi	r17, 0x00	; 0
     fe4:	c8 01       	movw	r24, r16
     fe6:	b7 01       	movw	r22, r14
     fe8:	83 d3       	rcall	.+1798   	; 0x16f0 <__floatunsisf>
     fea:	f4 01       	movw	r30, r8
     fec:	64 83       	std	Z+4, r22	; 0x04
     fee:	75 83       	std	Z+5, r23	; 0x05
     ff0:	86 83       	std	Z+6, r24	; 0x06
     ff2:	97 83       	std	Z+7, r25	; 0x07
		y = randInRange(9, middle_y-10);
		zombie[i+4] -> x = x;
		zombie[i+4] -> y = y;
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(1,screen_x);
     ff4:	60 91 5f 01 	lds	r22, 0x015F
     ff8:	70 91 60 01 	lds	r23, 0x0160
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	89 de       	rcall	.-750    	; 0xd14 <randInRange>
    1002:	e8 2e       	mov	r14, r24
		y = randInRange(middle_y+10,screen_y);
    1004:	60 91 63 01 	lds	r22, 0x0163
    1008:	70 91 64 01 	lds	r23, 0x0164
    100c:	c1 01       	movw	r24, r2
    100e:	82 de       	rcall	.-764    	; 0xd14 <randInRange>
    1010:	a8 2e       	mov	r10, r24
		zombie[i+6] -> x = x;
    1012:	80 90 ba 01 	lds	r8, 0x01BA
    1016:	90 90 bb 01 	lds	r9, 0x01BB
    101a:	ff 24       	eor	r15, r15
    101c:	00 e0       	ldi	r16, 0x00	; 0
    101e:	10 e0       	ldi	r17, 0x00	; 0
    1020:	c8 01       	movw	r24, r16
    1022:	b7 01       	movw	r22, r14
    1024:	65 d3       	rcall	.+1738   	; 0x16f0 <__floatunsisf>
    1026:	f4 01       	movw	r30, r8
    1028:	60 83       	st	Z, r22
    102a:	71 83       	std	Z+1, r23	; 0x01
    102c:	82 83       	std	Z+2, r24	; 0x02
    102e:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+6] -> y = y;
    1030:	bb 24       	eor	r11, r11
    1032:	cc 24       	eor	r12, r12
    1034:	dd 24       	eor	r13, r13
    1036:	c6 01       	movw	r24, r12
    1038:	b5 01       	movw	r22, r10
    103a:	5a d3       	rcall	.+1716   	; 0x16f0 <__floatunsisf>
    103c:	f4 01       	movw	r30, r8
    103e:	64 83       	std	Z+4, r22	; 0x04
    1040:	75 83       	std	Z+5, r23	; 0x05
    1042:	86 83       	std	Z+6, r24	; 0x06
    1044:	97 83       	std	Z+7, r25	; 0x07
    1046:	cd e6       	ldi	r28, 0x6D	; 109
    1048:	d1 e0       	ldi	r29, 0x01	; 1
	}
	for (int i = 0; i<8; i++) {
	zDirection[i] = randInRange(0,3);
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	63 e0       	ldi	r22, 0x03	; 3
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	60 de       	rcall	.-832    	; 0xd14 <randInRange>
    1054:	89 93       	st	Y+, r24
    1056:	99 93       	st	Y+, r25
		x = randInRange(1,screen_x);
		y = randInRange(middle_y+10,screen_y);
		zombie[i+6] -> x = x;
		zombie[i+6] -> y = y;
	}
	for (int i = 0; i<8; i++) {
    1058:	f1 e0       	ldi	r31, 0x01	; 1
    105a:	cd 37       	cpi	r28, 0x7D	; 125
    105c:	df 07       	cpc	r29, r31
    105e:	a9 f7       	brne	.-22     	; 0x104a <setupZombies+0x304>
	zDirection[i] = randInRange(0,3);
	}
}
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	bf 90       	pop	r11
    1072:	af 90       	pop	r10
    1074:	9f 90       	pop	r9
    1076:	8f 90       	pop	r8
    1078:	7f 90       	pop	r7
    107a:	6f 90       	pop	r6
    107c:	5f 90       	pop	r5
    107e:	4f 90       	pop	r4
    1080:	3f 90       	pop	r3
    1082:	2f 90       	pop	r2
    1084:	08 95       	ret

00001086 <zombiesForward>:
my_pointer -> x += HeroX;
my_pointer -> y += HeroY;

}

void zombiesForward(void) {
    1086:	6f 92       	push	r6
    1088:	7f 92       	push	r7
    108a:	8f 92       	push	r8
    108c:	9f 92       	push	r9
    108e:	af 92       	push	r10
    1090:	bf 92       	push	r11
    1092:	cf 92       	push	r12
    1094:	df 92       	push	r13
    1096:	ef 92       	push	r14
    1098:	ff 92       	push	r15
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	6c ea       	ldi	r22, 0xAC	; 172
    10a4:	a6 2e       	mov	r10, r22
    10a6:	61 e0       	ldi	r22, 0x01	; 1
    10a8:	b6 2e       	mov	r11, r22
    10aa:	5d e6       	ldi	r21, 0x6D	; 109
    10ac:	c5 2e       	mov	r12, r21
    10ae:	51 e0       	ldi	r21, 0x01	; 1
    10b0:	d5 2e       	mov	r13, r21
    10b2:	88 24       	eor	r8, r8
    10b4:	99 24       	eor	r9, r9
    10b6:	c0 e0       	ldi	r28, 0x00	; 0
    10b8:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i<8; i++) {
		range = randInRange(1,100);
		if (range < 6) {
			zDirection[i] = (zDirection[i]-1);
			if (zDirection[i] < 0) {
			zDirection[i] = 3;
    10ba:	43 e0       	ldi	r20, 0x03	; 3
    10bc:	64 2e       	mov	r6, r20
    10be:	71 2c       	mov	r7, r1

void zombiesForward(void) {
int range, ZX = 0;
int ZY = 0;
	for (int i = 0; i<8; i++) {
		range = randInRange(1,100);
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	64 e6       	ldi	r22, 0x64	; 100
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	25 de       	rcall	.-950    	; 0xd14 <randInRange>
		if (range < 6) {
    10ca:	86 30       	cpi	r24, 0x06	; 6
    10cc:	91 05       	cpc	r25, r1
    10ce:	6c f4       	brge	.+26     	; 0x10ea <zombiesForward+0x64>
			zDirection[i] = (zDirection[i]-1);
    10d0:	d6 01       	movw	r26, r12
    10d2:	8d 91       	ld	r24, X+
    10d4:	9c 91       	ld	r25, X
    10d6:	11 97       	sbiw	r26, 0x01	; 1
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	11 96       	adiw	r26, 0x01	; 1
    10dc:	9c 93       	st	X, r25
    10de:	8e 93       	st	-X, r24
			if (zDirection[i] < 0) {
    10e0:	97 ff       	sbrs	r25, 7
    10e2:	0f c0       	rjmp	.+30     	; 0x1102 <zombiesForward+0x7c>
			zDirection[i] = 3;
    10e4:	6d 92       	st	X+, r6
    10e6:	7c 92       	st	X, r7
    10e8:	0c c0       	rjmp	.+24     	; 0x1102 <zombiesForward+0x7c>
			}
		}
		else if (range > 95) {
    10ea:	80 36       	cpi	r24, 0x60	; 96
    10ec:	91 05       	cpc	r25, r1
    10ee:	4c f0       	brlt	.+18     	; 0x1102 <zombiesForward+0x7c>
			zDirection[i] = (zDirection[i]+1)%4;
    10f0:	f6 01       	movw	r30, r12
    10f2:	80 81       	ld	r24, Z
    10f4:	91 81       	ldd	r25, Z+1	; 0x01
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	64 e0       	ldi	r22, 0x04	; 4
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	93 d7       	rcall	.+3878   	; 0x2024 <__divmodhi4>
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	80 83       	st	Z, r24
		}
	
		if (zDirection[i] == 0) {
    1102:	d6 01       	movw	r26, r12
    1104:	ed 90       	ld	r14, X+
    1106:	fc 90       	ld	r15, X
    1108:	e1 14       	cp	r14, r1
    110a:	f1 04       	cpc	r15, r1
    110c:	f9 f4       	brne	.+62     	; 0x114c <zombiesForward+0xc6>
			ZY = 1;
			ZX = 0;
			if (zombie[i] -> y > screen_y-1) {
    110e:	f5 01       	movw	r30, r10
    1110:	00 81       	ld	r16, Z
    1112:	11 81       	ldd	r17, Z+1	; 0x01
    1114:	60 91 63 01 	lds	r22, 0x0163
    1118:	70 91 64 01 	lds	r23, 0x0164
    111c:	61 50       	subi	r22, 0x01	; 1
    111e:	70 40       	sbci	r23, 0x00	; 0
    1120:	88 27       	eor	r24, r24
    1122:	77 fd       	sbrc	r23, 7
    1124:	80 95       	com	r24
    1126:	98 2f       	mov	r25, r24
    1128:	e5 d2       	rcall	.+1482   	; 0x16f4 <__floatsisf>
    112a:	9b 01       	movw	r18, r22
    112c:	ac 01       	movw	r20, r24
    112e:	d8 01       	movw	r26, r16
    1130:	14 96       	adiw	r26, 0x04	; 4
    1132:	6d 91       	ld	r22, X+
    1134:	7d 91       	ld	r23, X+
    1136:	8d 91       	ld	r24, X+
    1138:	9c 91       	ld	r25, X
    113a:	17 97       	sbiw	r26, 0x07	; 7
    113c:	8b d3       	rcall	.+1814   	; 0x1854 <__gesf2>
    113e:	18 16       	cp	r1, r24
    1140:	0c f4       	brge	.+2      	; 0x1144 <zombiesForward+0xbe>
    1142:	52 c0       	rjmp	.+164    	; 0x11e8 <zombiesForward+0x162>
    1144:	88 24       	eor	r8, r8
    1146:	99 24       	eor	r9, r9
    1148:	c1 e0       	ldi	r28, 0x01	; 1
    114a:	d0 e0       	ldi	r29, 0x00	; 0
			ZY = 0;
			}
		}
		if (zDirection[i] == 1) {
    114c:	b1 e0       	ldi	r27, 0x01	; 1
    114e:	eb 16       	cp	r14, r27
    1150:	f1 04       	cpc	r15, r1
    1152:	d1 f4       	brne	.+52     	; 0x1188 <zombiesForward+0x102>
			ZX = 1;
			ZY = 0;
			if (zombie[i] -> x > screen_x-1) {
    1154:	f5 01       	movw	r30, r10
    1156:	00 81       	ld	r16, Z
    1158:	11 81       	ldd	r17, Z+1	; 0x01
    115a:	60 91 5f 01 	lds	r22, 0x015F
    115e:	70 91 60 01 	lds	r23, 0x0160
    1162:	61 50       	subi	r22, 0x01	; 1
    1164:	70 40       	sbci	r23, 0x00	; 0
    1166:	88 27       	eor	r24, r24
    1168:	77 fd       	sbrc	r23, 7
    116a:	80 95       	com	r24
    116c:	98 2f       	mov	r25, r24
    116e:	c2 d2       	rcall	.+1412   	; 0x16f4 <__floatsisf>
    1170:	9b 01       	movw	r18, r22
    1172:	ac 01       	movw	r20, r24
    1174:	d8 01       	movw	r26, r16
    1176:	6d 91       	ld	r22, X+
    1178:	7d 91       	ld	r23, X+
    117a:	8d 91       	ld	r24, X+
    117c:	9c 91       	ld	r25, X
    117e:	6a d3       	rcall	.+1748   	; 0x1854 <__gesf2>
    1180:	18 16       	cp	r1, r24
    1182:	0c f4       	brge	.+2      	; 0x1186 <zombiesForward+0x100>
    1184:	6c c0       	rjmp	.+216    	; 0x125e <zombiesForward+0x1d8>
    1186:	15 c0       	rjmp	.+42     	; 0x11b2 <zombiesForward+0x12c>
			ZX = 0;
			}
		}
		if (zDirection[i] == 2) {
    1188:	b2 e0       	ldi	r27, 0x02	; 2
    118a:	eb 16       	cp	r14, r27
    118c:	f1 04       	cpc	r15, r1
    118e:	b1 f4       	brne	.+44     	; 0x11bc <zombiesForward+0x136>
			ZY = -1;
			ZX = 0;
			if (zombie[i] -> y < 10) {
    1190:	d5 01       	movw	r26, r10
    1192:	ed 91       	ld	r30, X+
    1194:	fc 91       	ld	r31, X
    1196:	64 81       	ldd	r22, Z+4	; 0x04
    1198:	75 81       	ldd	r23, Z+5	; 0x05
    119a:	86 81       	ldd	r24, Z+6	; 0x06
    119c:	97 81       	ldd	r25, Z+7	; 0x07
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e2       	ldi	r20, 0x20	; 32
    11a4:	51 e4       	ldi	r21, 0x41	; 65
    11a6:	74 d2       	rcall	.+1256   	; 0x1690 <__cmpsf2>
    11a8:	87 fd       	sbrc	r24, 7
    11aa:	1e c0       	rjmp	.+60     	; 0x11e8 <zombiesForward+0x162>
    11ac:	cf ef       	ldi	r28, 0xFF	; 255
    11ae:	df ef       	ldi	r29, 0xFF	; 255
    11b0:	58 c0       	rjmp	.+176    	; 0x1262 <zombiesForward+0x1dc>
    11b2:	31 e0       	ldi	r19, 0x01	; 1
    11b4:	83 2e       	mov	r8, r19
    11b6:	91 2c       	mov	r9, r1
    11b8:	c0 e0       	ldi	r28, 0x00	; 0
    11ba:	d0 e0       	ldi	r29, 0x00	; 0
			ZY = 0;
			}
		}
		if (zDirection[i] == 3) {
    11bc:	b3 e0       	ldi	r27, 0x03	; 3
    11be:	eb 16       	cp	r14, r27
    11c0:	f1 04       	cpc	r15, r1
    11c2:	b1 f4       	brne	.+44     	; 0x11f0 <zombiesForward+0x16a>
			ZX = -1;
			ZY = 0;
			if (zombie[i] -> x < 2) {
    11c4:	d5 01       	movw	r26, r10
    11c6:	ed 91       	ld	r30, X+
    11c8:	fc 91       	ld	r31, X
    11ca:	60 81       	ld	r22, Z
    11cc:	71 81       	ldd	r23, Z+1	; 0x01
    11ce:	82 81       	ldd	r24, Z+2	; 0x02
    11d0:	93 81       	ldd	r25, Z+3	; 0x03
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e0       	ldi	r20, 0x00	; 0
    11d8:	50 e4       	ldi	r21, 0x40	; 64
    11da:	5a d2       	rcall	.+1204   	; 0x1690 <__cmpsf2>
    11dc:	87 fd       	sbrc	r24, 7
    11de:	04 c0       	rjmp	.+8      	; 0x11e8 <zombiesForward+0x162>
    11e0:	88 24       	eor	r8, r8
    11e2:	8a 94       	dec	r8
    11e4:	98 2c       	mov	r9, r8
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <zombiesForward+0x166>
    11e8:	88 24       	eor	r8, r8
    11ea:	99 24       	eor	r9, r9
    11ec:	c0 e0       	ldi	r28, 0x00	; 0
    11ee:	d0 e0       	ldi	r29, 0x00	; 0
			ZX = 0;
			}
		}

		zombie[i] -> x += ZX;
    11f0:	f5 01       	movw	r30, r10
    11f2:	01 91       	ld	r16, Z+
    11f4:	11 91       	ld	r17, Z+
    11f6:	5f 01       	movw	r10, r30
    11f8:	b4 01       	movw	r22, r8
    11fa:	88 27       	eor	r24, r24
    11fc:	77 fd       	sbrc	r23, 7
    11fe:	80 95       	com	r24
    1200:	98 2f       	mov	r25, r24
    1202:	78 d2       	rcall	.+1264   	; 0x16f4 <__floatsisf>
    1204:	9b 01       	movw	r18, r22
    1206:	ac 01       	movw	r20, r24
    1208:	d8 01       	movw	r26, r16
    120a:	6d 91       	ld	r22, X+
    120c:	7d 91       	ld	r23, X+
    120e:	8d 91       	ld	r24, X+
    1210:	9c 91       	ld	r25, X
    1212:	da d1       	rcall	.+948    	; 0x15c8 <__addsf3>
    1214:	f8 01       	movw	r30, r16
    1216:	60 83       	st	Z, r22
    1218:	71 83       	std	Z+1, r23	; 0x01
    121a:	82 83       	std	Z+2, r24	; 0x02
    121c:	93 83       	std	Z+3, r25	; 0x03
		zombie[i] -> y += ZY;
    121e:	be 01       	movw	r22, r28
    1220:	88 27       	eor	r24, r24
    1222:	77 fd       	sbrc	r23, 7
    1224:	80 95       	com	r24
    1226:	98 2f       	mov	r25, r24
    1228:	65 d2       	rcall	.+1226   	; 0x16f4 <__floatsisf>
    122a:	9b 01       	movw	r18, r22
    122c:	ac 01       	movw	r20, r24
    122e:	d8 01       	movw	r26, r16
    1230:	14 96       	adiw	r26, 0x04	; 4
    1232:	6d 91       	ld	r22, X+
    1234:	7d 91       	ld	r23, X+
    1236:	8d 91       	ld	r24, X+
    1238:	9c 91       	ld	r25, X
    123a:	17 97       	sbiw	r26, 0x07	; 7
    123c:	c5 d1       	rcall	.+906    	; 0x15c8 <__addsf3>
    123e:	f8 01       	movw	r30, r16
    1240:	64 83       	std	Z+4, r22	; 0x04
    1242:	75 83       	std	Z+5, r23	; 0x05
    1244:	86 83       	std	Z+6, r24	; 0x06
    1246:	97 83       	std	Z+7, r25	; 0x07
    1248:	82 e0       	ldi	r24, 0x02	; 2
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	c8 0e       	add	r12, r24
    124e:	d9 1e       	adc	r13, r25
}

void zombiesForward(void) {
int range, ZX = 0;
int ZY = 0;
	for (int i = 0; i<8; i++) {
    1250:	9c eb       	ldi	r25, 0xBC	; 188
    1252:	a9 16       	cp	r10, r25
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	b9 06       	cpc	r11, r25
    1258:	09 f0       	breq	.+2      	; 0x125c <zombiesForward+0x1d6>
    125a:	32 cf       	rjmp	.-412    	; 0x10c0 <zombiesForward+0x3a>
    125c:	05 c0       	rjmp	.+10     	; 0x1268 <zombiesForward+0x1e2>
		zombie[i] -> x += ZX;
		zombie[i] -> y += ZY;

	}
	
}
    125e:	c0 e0       	ldi	r28, 0x00	; 0
    1260:	d0 e0       	ldi	r29, 0x00	; 0
    1262:	88 24       	eor	r8, r8
    1264:	99 24       	eor	r9, r9
    1266:	c4 cf       	rjmp	.-120    	; 0x11f0 <zombiesForward+0x16a>
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	ff 90       	pop	r15
    1272:	ef 90       	pop	r14
    1274:	df 90       	pop	r13
    1276:	cf 90       	pop	r12
    1278:	bf 90       	pop	r11
    127a:	af 90       	pop	r10
    127c:	9f 90       	pop	r9
    127e:	8f 90       	pop	r8
    1280:	7f 90       	pop	r7
    1282:	6f 90       	pop	r6
    1284:	08 95       	ret

00001286 <__vector_23>:
	sei();
}


ISR(TIMER0_OVF_vect)
{
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	2f 93       	push	r18
    1292:	3f 93       	push	r19
    1294:	4f 93       	push	r20
    1296:	5f 93       	push	r21
    1298:	6f 93       	push	r22
    129a:	7f 93       	push	r23
    129c:	8f 93       	push	r24
    129e:	9f 93       	push	r25
    12a0:	af 93       	push	r26
    12a2:	bf 93       	push	r27
    12a4:	ef 93       	push	r30
    12a6:	ff 93       	push	r31
	//Clear the flag by writing a one
	TIFR0 |= (1<<TOV0);
    12a8:	a8 9a       	sbi	0x15, 0	; 21
	//Add one to our clockCounter
	clockCounter++;
    12aa:	80 91 a0 01 	lds	r24, 0x01A0
    12ae:	90 91 a1 01 	lds	r25, 0x01A1
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	90 93 a1 01 	sts	0x01A1, r25
    12b8:	80 93 a0 01 	sts	0x01A0, r24
	//DEBUG LED
	//PORTB ^= (1<<PINB2);
	//Check to see if our clockCounter is greater/equal to than our MAX_CLOCK_COUNTER_FOR_100MSECOND
	if(clockCounter >= MAX_CLOCK_COUNTER_FOR_100MSECOND && GAMEON)
    12bc:	80 91 a0 01 	lds	r24, 0x01A0
    12c0:	90 91 a1 01 	lds	r25, 0x01A1
    12c4:	05 97       	sbiw	r24, 0x05	; 5
    12c6:	04 f1       	brlt	.+64     	; 0x1308 <__vector_23+0x82>
    12c8:	80 91 a4 01 	lds	r24, 0x01A4
    12cc:	90 91 a5 01 	lds	r25, 0x01A5
    12d0:	89 2b       	or	r24, r25
    12d2:	d1 f0       	breq	.+52     	; 0x1308 <__vector_23+0x82>
	{
		//PORTB ^= (1<<PINB3);
		//Reset clockCounter
		clockCounter = 0;
    12d4:	10 92 a1 01 	sts	0x01A1, r1
    12d8:	10 92 a0 01 	sts	0x01A0, r1
		stepsCounter++;
    12dc:	80 91 a2 01 	lds	r24, 0x01A2
    12e0:	90 91 a3 01 	lds	r25, 0x01A3
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	90 93 a3 01 	sts	0x01A3, r25
    12ea:	80 93 a2 01 	sts	0x01A2, r24
		if (stepsCounter>9) {
    12ee:	80 91 a2 01 	lds	r24, 0x01A2
    12f2:	90 91 a3 01 	lds	r25, 0x01A3
    12f6:	0a 97       	sbiw	r24, 0x0a	; 10
    12f8:	2c f0       	brlt	.+10     	; 0x1304 <__vector_23+0x7e>
		stepsCounter = 0;
    12fa:	10 92 a3 01 	sts	0x01A3, r1
    12fe:	10 92 a2 01 	sts	0x01A2, r1
		zombiesForward();		
    1302:	c1 de       	rcall	.-638    	; 0x1086 <zombiesForward>
		}
		heroForward();
    1304:	4a db       	rcall	.-2412   	; 0x99a <heroForward>
		collision();
    1306:	07 dc       	rcall	.-2034   	; 0xb16 <collision>
	}
}
    1308:	ff 91       	pop	r31
    130a:	ef 91       	pop	r30
    130c:	bf 91       	pop	r27
    130e:	af 91       	pop	r26
    1310:	9f 91       	pop	r25
    1312:	8f 91       	pop	r24
    1314:	7f 91       	pop	r23
    1316:	6f 91       	pop	r22
    1318:	5f 91       	pop	r21
    131a:	4f 91       	pop	r20
    131c:	3f 91       	pop	r19
    131e:	2f 91       	pop	r18
    1320:	0f 90       	pop	r0
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	0f 90       	pop	r0
    1326:	1f 90       	pop	r1
    1328:	18 95       	reti

0000132a <setupGame>:
void setupGame() {

	// SW0 and SW1 are connected to pins B0 and B1
	// LED1 and LED2 connected to pins B2 and B3
	// 0 for input 1 for output
	DDRB |= 0b00001100;
    132a:	84 b1       	in	r24, 0x04	; 4
    132c:	8c 60       	ori	r24, 0x0C	; 12
    132e:	84 b9       	out	0x04, r24	; 4
    // Teensy LED is connected to D6
    DDRD |= 0b01000000;
    1330:	56 9a       	sbi	0x0a, 6	; 10
    // turn OFF LED initially
	PORTD |= 0b00000000;
    1332:	8b b1       	in	r24, 0x0b	; 11
    1334:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<2)||(1<<3); //not sure why this is here
    1336:	28 9a       	sbi	0x05, 0	; 5
	
	//initialise clock
	//CLKPR |= 1 << CLKPCE;
	//CLKPR |= 1 << CLKPS0;
	CPU_PRESCALE(CPU_16MHz);
    1338:	e1 e6       	ldi	r30, 0x61	; 97
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 e8       	ldi	r24, 0x80	; 128
    133e:	80 83       	st	Z, r24
    1340:	10 82       	st	Z, r1
	
	
	LCDInitialise(LCD_DEFAULT_CONTRAST);
    1342:	8f e3       	ldi	r24, 0x3F	; 63
    1344:	44 d5       	rcall	.+2696   	; 0x1dce <LCDInitialise>
	clear();
    1346:	8a d2       	rcall	.+1300   	; 0x185c <clear>
	
	PinChangeInit();
    1348:	db da       	rcall	.-2634   	; 0x900 <PinChangeInit>
	TimerInit();
    134a:	14 db       	rcall	.-2520   	; 0x974 <TimerInit>
	
	clear();
    134c:	87 d2       	rcall	.+1294   	; 0x185c <clear>
	draw_string("ZombieDash v1.0", 4,0); // 15*5 = 75 (84 - 75)/2 = 4
    134e:	8a e2       	ldi	r24, 0x2A	; 42
    1350:	91 e0       	ldi	r25, 0x01	; 1
    1352:	64 e0       	ldi	r22, 0x04	; 4
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	f4 d4       	rcall	.+2536   	; 0x1d40 <draw_string>
	draw_string("Lachlan Robinson", 2,9); // 16*5 = 80 (84 - 80)/2 = 2
    1358:	8a e3       	ldi	r24, 0x3A	; 58
    135a:	91 e0       	ldi	r25, 0x01	; 1
    135c:	62 e0       	ldi	r22, 0x02	; 2
    135e:	49 e0       	ldi	r20, 0x09	; 9
    1360:	ef d4       	rcall	.+2526   	; 0x1d40 <draw_string>
	draw_string("n8845409", 22, 28); // 8*5 = 40 (84 - 40)/2 = 22
    1362:	8b e4       	ldi	r24, 0x4B	; 75
    1364:	91 e0       	ldi	r25, 0x01	; 1
    1366:	66 e1       	ldi	r22, 0x16	; 22
    1368:	4c e1       	ldi	r20, 0x1C	; 28
    136a:	ea d4       	rcall	.+2516   	; 0x1d40 <draw_string>
	refresh();
    136c:	fe d4       	rcall	.+2556   	; 0x1d6a <refresh>
	
	seedWithButtonPress();
    136e:	b8 dc       	rcall	.-1680   	; 0xce0 <seedWithButtonPress>
	buttonCheck();
    1370:	98 da       	rcall	.-2768   	; 0x8a2 <buttonCheck>
	CountDown();
    1372:	95 dc       	rcall	.-1750   	; 0xc9e <CountDown>
	Lives = 3;
    1374:	83 e0       	ldi	r24, 0x03	; 3
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	90 93 80 01 	sts	0x0180, r25
    137c:	80 93 7f 01 	sts	0x017F, r24
	
}
    1380:	08 95       	ret

00001382 <main>:
#include "my_functions.h"

#define NUM_BLOCKS 10
#define MAX_CLOCK_COUNTER_FOR_100MSECOND 5

int main() {
    1382:	4f 92       	push	r4
    1384:	5f 92       	push	r5
    1386:	7f 92       	push	r7
    1388:	8f 92       	push	r8
    138a:	9f 92       	push	r9
    138c:	af 92       	push	r10
    138e:	bf 92       	push	r11
    1390:	cf 92       	push	r12
    1392:	df 92       	push	r13
    1394:	ef 92       	push	r14
    1396:	ff 92       	push	r15
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	c3 5c       	subi	r28, 0xC3	; 195
    13a6:	d0 40       	sbci	r29, 0x00	; 0
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
	
	// INSERT_CODE_HERE
	//draw_string("eWWZ begins!",0,0);

	// screen setup etc
	setupGame();
    13b2:	bb df       	rcall	.-138    	; 0x132a <setupGame>
	clear();
    13b4:	53 d2       	rcall	.+1190   	; 0x185c <clear>
	refresh();
    13b6:	d9 d4       	rcall	.+2482   	; 0x1d6a <refresh>
	// sprites
	byte bitHero [] = {
		BYTE( 10100000),
		BYTE( 11100000),
		BYTE( 10100000),
	};
    13b8:	de 01       	movw	r26, r28
    13ba:	11 96       	adiw	r26, 0x01	; 1
    13bc:	e4 e8       	ldi	r30, 0x84	; 132
    13be:	f1 e0       	ldi	r31, 0x01	; 1
    13c0:	83 e0       	ldi	r24, 0x03	; 3
    13c2:	01 90       	ld	r0, Z+
    13c4:	0d 92       	st	X+, r0
    13c6:	81 50       	subi	r24, 0x01	; 1
    13c8:	e1 f7       	brne	.-8      	; 0x13c2 <main+0x40>
		
	byte bitZombie [] = {
		BYTE( 11100000),
		BYTE( 01000000),
		BYTE( 11100000),
	};
    13ca:	de 01       	movw	r26, r28
    13cc:	14 96       	adiw	r26, 0x04	; 4
    13ce:	e1 e8       	ldi	r30, 0x81	; 129
    13d0:	f1 e0       	ldi	r31, 0x01	; 1
    13d2:	83 e0       	ldi	r24, 0x03	; 3
    13d4:	01 90       	ld	r0, Z+
    13d6:	0d 92       	st	X+, r0
    13d8:	81 50       	subi	r24, 0x01	; 1
    13da:	e1 f7       	brne	.-8      	; 0x13d4 <main+0x52>
	
	// screen parameters
	screen_x -= width;
    13dc:	80 91 7d 01 	lds	r24, 0x017D
    13e0:	20 91 5f 01 	lds	r18, 0x015F
    13e4:	30 91 60 01 	lds	r19, 0x0160
    13e8:	28 1b       	sub	r18, r24
    13ea:	31 09       	sbc	r19, r1
    13ec:	30 93 60 01 	sts	0x0160, r19
    13f0:	20 93 5f 01 	sts	0x015F, r18
	screen_y -= height;
    13f4:	40 91 7e 01 	lds	r20, 0x017E
    13f8:	80 91 63 01 	lds	r24, 0x0163
    13fc:	90 91 64 01 	lds	r25, 0x0164
    1400:	84 1b       	sub	r24, r20
    1402:	91 09       	sbc	r25, r1
    1404:	90 93 64 01 	sts	0x0164, r25
    1408:	80 93 63 01 	sts	0x0163, r24

	int middle_x = screen_x/2;
	int middle_y = screen_y/2 + 5;
    140c:	62 e0       	ldi	r22, 0x02	; 2
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	09 d6       	rcall	.+3090   	; 0x2024 <__divmodhi4>
    1412:	4b 01       	movw	r8, r22
    1414:	85 e0       	ldi	r24, 0x05	; 5
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	88 0e       	add	r8, r24
    141a:	99 1e       	adc	r9, r25
    141c:	9c e1       	ldi	r25, 0x1C	; 28
    141e:	c9 2e       	mov	r12, r25
    1420:	d1 2c       	mov	r13, r1
    1422:	cc 0e       	add	r12, r28
    1424:	dd 1e       	adc	r13, r29
    1426:	c9 01       	movw	r24, r18
    1428:	62 e0       	ldi	r22, 0x02	; 2
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	fb d5       	rcall	.+3062   	; 0x2024 <__divmodhi4>
    142e:	76 2e       	mov	r7, r22
    1430:	8c ea       	ldi	r24, 0xAC	; 172
    1432:	a8 2e       	mov	r10, r24
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	b8 2e       	mov	r11, r24
    1438:	16 2f       	mov	r17, r22
	
	// initiate zombie sprites
	Sprite zombies[8]; 
	for (int i = 0; i<8; i++) {
	zombie[i] = &zombies[i];
	init_sprite(zombie[i], middle_x + 3*i, middle_y, width, height, bitZombie);
    143a:	04 e0       	ldi	r16, 0x04	; 4
    143c:	40 2e       	mov	r4, r16
    143e:	51 2c       	mov	r5, r1
    1440:	4c 0e       	add	r4, r28
    1442:	5d 1e       	adc	r5, r29
	}*/
	
	// initiate zombie sprites
	Sprite zombies[8]; 
	for (int i = 0; i<8; i++) {
	zombie[i] = &zombies[i];
    1444:	f5 01       	movw	r30, r10
    1446:	c0 82       	st	Z, r12
    1448:	d1 82       	std	Z+1, r13	; 0x01
	init_sprite(zombie[i], middle_x + 3*i, middle_y, width, height, bitZombie);
    144a:	c6 01       	movw	r24, r12
    144c:	61 2f       	mov	r22, r17
    144e:	48 2d       	mov	r20, r8
    1450:	20 91 7d 01 	lds	r18, 0x017D
    1454:	00 91 7e 01 	lds	r16, 0x017E
    1458:	72 01       	movw	r14, r4
    145a:	ec d4       	rcall	.+2520   	; 0x1e34 <init_sprite>
    145c:	82 e0       	ldi	r24, 0x02	; 2
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	a8 0e       	add	r10, r24
    1462:	b9 1e       	adc	r11, r25
    1464:	e5 e1       	ldi	r30, 0x15	; 21
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	ce 0e       	add	r12, r30
    146a:	df 1e       	adc	r13, r31
    146c:	1d 5f       	subi	r17, 0xFD	; 253
	
	}*/
	
	// initiate zombie sprites
	Sprite zombies[8]; 
	for (int i = 0; i<8; i++) {
    146e:	fc eb       	ldi	r31, 0xBC	; 188
    1470:	af 16       	cp	r10, r31
    1472:	f1 e0       	ldi	r31, 0x01	; 1
    1474:	bf 06       	cpc	r11, r31
    1476:	31 f7       	brne	.-52     	; 0x1444 <main+0xc2>
	zombie[i] = &zombies[i];
	init_sprite(zombie[i], middle_x + 3*i, middle_y, width, height, bitZombie);
	}
	
	// place zombies randomly and randomise initial direction
	setupZombies();
    1478:	66 dc       	rcall	.-1844   	; 0xd46 <setupZombies>
	// Hero sprite parameters
	x = screen_x/2 - width;
	y = screen_y/2 + 9/2;
	
	Sprite my_sprite;
	my_pointer = &my_sprite;
    147a:	ce 01       	movw	r24, r28
    147c:	07 96       	adiw	r24, 0x07	; 7
    147e:	90 93 ab 01 	sts	0x01AB, r25
    1482:	80 93 aa 01 	sts	0x01AA, r24

	init_sprite(my_pointer, middle_x, middle_y, width, height, bitHero);
    1486:	67 2d       	mov	r22, r7
    1488:	48 2d       	mov	r20, r8
    148a:	20 91 7d 01 	lds	r18, 0x017D
    148e:	00 91 7e 01 	lds	r16, 0x017E
    1492:	7e 01       	movw	r14, r28
    1494:	08 94       	sec
    1496:	e1 1c       	adc	r14, r1
    1498:	f1 1c       	adc	r15, r1
    149a:	cc d4       	rcall	.+2456   	; 0x1e34 <init_sprite>
	draw_sprite(my_pointer);
    149c:	80 91 aa 01 	lds	r24, 0x01AA
    14a0:	90 91 ab 01 	lds	r25, 0x01AB
    14a4:	f7 d4       	rcall	.+2542   	; 0x1e94 <draw_sprite>
    14a6:	b0 ef       	ldi	r27, 0xF0	; 240
    14a8:	eb 2e       	mov	r14, r27
    14aa:	bf ef       	ldi	r27, 0xFF	; 255
    14ac:	fb 2e       	mov	r15, r27
    14ae:	ea 0c       	add	r14, r10
    14b0:	fb 1c       	adc	r15, r11
	for (int i = 0; i<8; i++) {
	draw_sprite(zombie[i]);
    14b2:	f7 01       	movw	r30, r14
    14b4:	81 91       	ld	r24, Z+
    14b6:	91 91       	ld	r25, Z+
    14b8:	7f 01       	movw	r14, r30
    14ba:	ec d4       	rcall	.+2520   	; 0x1e94 <draw_sprite>
	Sprite my_sprite;
	my_pointer = &my_sprite;

	init_sprite(my_pointer, middle_x, middle_y, width, height, bitHero);
	draw_sprite(my_pointer);
	for (int i = 0; i<8; i++) {
    14bc:	fc eb       	ldi	r31, 0xBC	; 188
    14be:	ef 16       	cp	r14, r31
    14c0:	f1 e0       	ldi	r31, 0x01	; 1
    14c2:	ff 06       	cpc	r15, r31
    14c4:	b1 f7       	brne	.-20     	; 0x14b2 <main+0x130>
	draw_sprite(zombie[i]);
	}
	
	refresh();
    14c6:	51 d4       	rcall	.+2210   	; 0x1d6a <refresh>
    14c8:	88 ee       	ldi	r24, 0xE8	; 232
    14ca:	93 e0       	ldi	r25, 0x03	; 3
    14cc:	20 e9       	ldi	r18, 0x90	; 144
    14ce:	31 e0       	ldi	r19, 0x01	; 1
    14d0:	f9 01       	movw	r30, r18
    14d2:	31 97       	sbiw	r30, 0x01	; 1
    14d4:	f1 f7       	brne	.-4      	; 0x14d2 <main+0x150>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d8:	d9 f7       	brne	.-10     	; 0x14d0 <main+0x14e>
	//int add = 1;
	
	// initialise vars
	int notRIGHT = 1;
	int notLEFT = 1;
	GAMEON = 1;
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	90 93 a5 01 	sts	0x01A5, r25
    14e2:	80 93 a4 01 	sts	0x01A4, r24
    14e6:	01 e0       	ldi	r16, 0x01	; 1
    14e8:	10 e0       	ldi	r17, 0x00	; 0
    14ea:	a1 e0       	ldi	r26, 0x01	; 1
    14ec:	ca 2e       	mov	r12, r26
    14ee:	d1 2c       	mov	r13, r1
		
		if (RIGHT && notRIGHT) {
			notRIGHT = 0;
			Direction = (Direction-1);
			if (Direction < 0) {
			Direction = 3;
    14f0:	f3 e0       	ldi	r31, 0x03	; 3
    14f2:	af 2e       	mov	r10, r31
    14f4:	b1 2c       	mov	r11, r1
    14f6:	5b c0       	rjmp	.+182    	; 0x15ae <main+0x22c>
		my_pointer -> y += add;
		my_pointer2 -> y -= add;
		if (my_pointer -> y < 1) add = -add;
		if (my_pointer -> y > screen_y) add = -add;
	*/
		clear();
    14f8:	b1 d1       	rcall	.+866    	; 0x185c <clear>

		if (RIGHT == 0) {
    14fa:	80 91 96 01 	lds	r24, 0x0196
    14fe:	90 91 97 01 	lds	r25, 0x0197
    1502:	89 2b       	or	r24, r25
    1504:	11 f4       	brne	.+4      	; 0x150a <main+0x188>
    1506:	01 e0       	ldi	r16, 0x01	; 1
    1508:	10 e0       	ldi	r17, 0x00	; 0
			notRIGHT = 1;
		}
		if (LEFT == 0) {
    150a:	80 91 94 01 	lds	r24, 0x0194
    150e:	90 91 95 01 	lds	r25, 0x0195
    1512:	89 2b       	or	r24, r25
    1514:	19 f4       	brne	.+6      	; 0x151c <main+0x19a>
    1516:	e1 e0       	ldi	r30, 0x01	; 1
    1518:	ce 2e       	mov	r12, r30
    151a:	d1 2c       	mov	r13, r1
			notLEFT = 1;
		}
		
		if (RIGHT && notRIGHT) {
    151c:	80 91 96 01 	lds	r24, 0x0196
    1520:	90 91 97 01 	lds	r25, 0x0197
    1524:	89 2b       	or	r24, r25
    1526:	c1 f0       	breq	.+48     	; 0x1558 <main+0x1d6>
    1528:	01 15       	cp	r16, r1
    152a:	11 05       	cpc	r17, r1
    152c:	a9 f0       	breq	.+42     	; 0x1558 <main+0x1d6>
			notRIGHT = 0;
			Direction = (Direction-1);
    152e:	80 91 6b 01 	lds	r24, 0x016B
    1532:	90 91 6c 01 	lds	r25, 0x016C
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	90 93 6c 01 	sts	0x016C, r25
    153c:	80 93 6b 01 	sts	0x016B, r24
			if (Direction < 0) {
    1540:	80 91 6b 01 	lds	r24, 0x016B
    1544:	90 91 6c 01 	lds	r25, 0x016C
    1548:	97 ff       	sbrs	r25, 7
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <main+0x1d2>
			Direction = 3;
    154c:	b0 92 6c 01 	sts	0x016C, r11
    1550:	a0 92 6b 01 	sts	0x016B, r10
    1554:	00 e0       	ldi	r16, 0x00	; 0
    1556:	10 e0       	ldi	r17, 0x00	; 0
			//bitmapb = bitmaptemp;
			//my_pointer -> bitmap = bitmapa;
			//my_pointer2 -> bitmap = bitmapb;
			
		}
		if (LEFT & notLEFT) {
    1558:	80 91 94 01 	lds	r24, 0x0194
    155c:	90 91 95 01 	lds	r25, 0x0195
    1560:	8c 21       	and	r24, r12
    1562:	9d 21       	and	r25, r13
    1564:	89 2b       	or	r24, r25
    1566:	71 f0       	breq	.+28     	; 0x1584 <main+0x202>
			notLEFT = 0;
			Direction = (Direction+1)%4;
    1568:	80 91 6b 01 	lds	r24, 0x016B
    156c:	90 91 6c 01 	lds	r25, 0x016C
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	64 e0       	ldi	r22, 0x04	; 4
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	56 d5       	rcall	.+2732   	; 0x2024 <__divmodhi4>
    1578:	90 93 6c 01 	sts	0x016C, r25
    157c:	80 93 6b 01 	sts	0x016B, r24
    1580:	cc 24       	eor	r12, r12
    1582:	dd 24       	eor	r13, r13
			
		}
		
		// Drawing and updating screen
		draw_sprite(my_pointer);
    1584:	80 91 aa 01 	lds	r24, 0x01AA
    1588:	90 91 ab 01 	lds	r25, 0x01AB
    158c:	83 d4       	rcall	.+2310   	; 0x1e94 <draw_sprite>
    158e:	7c ea       	ldi	r23, 0xAC	; 172
    1590:	e7 2e       	mov	r14, r23
    1592:	71 e0       	ldi	r23, 0x01	; 1
    1594:	f7 2e       	mov	r15, r23
		for (int i = 0; i<8; i++) {
		draw_sprite(zombie[i]);
    1596:	f7 01       	movw	r30, r14
    1598:	81 91       	ld	r24, Z+
    159a:	91 91       	ld	r25, Z+
    159c:	7f 01       	movw	r14, r30
    159e:	7a d4       	rcall	.+2292   	; 0x1e94 <draw_sprite>
			
		}
		
		// Drawing and updating screen
		draw_sprite(my_pointer);
		for (int i = 0; i<8; i++) {
    15a0:	fc eb       	ldi	r31, 0xBC	; 188
    15a2:	ef 16       	cp	r14, r31
    15a4:	f1 e0       	ldi	r31, 0x01	; 1
    15a6:	ff 06       	cpc	r15, r31
    15a8:	b1 f7       	brne	.-20     	; 0x1596 <main+0x214>
		draw_sprite(zombie[i]);
		}
		drawScreen();	
    15aa:	3c db       	rcall	.-2440   	; 0xc24 <drawScreen>
		refresh();
    15ac:	de d3       	rcall	.+1980   	; 0x1d6a <refresh>
	int notLEFT = 1;
	GAMEON = 1;
	
	while(1) {
	
	while(GAMEON){
    15ae:	80 91 a4 01 	lds	r24, 0x01A4
    15b2:	90 91 a5 01 	lds	r25, 0x01A5
    15b6:	89 2b       	or	r24, r25
    15b8:	09 f0       	breq	.+2      	; 0x15bc <main+0x23a>
    15ba:	9e cf       	rjmp	.-196    	; 0x14f8 <main+0x176>
		}
		drawScreen();	
		refresh();
	}
	
	while(GAMEON = 0) {
    15bc:	10 92 a5 01 	sts	0x01A5, r1
    15c0:	10 92 a4 01 	sts	0x01A4, r1
    15c4:	f4 cf       	rjmp	.-24     	; 0x15ae <main+0x22c>

000015c6 <__subsf3>:
    15c6:	50 58       	subi	r21, 0x80	; 128

000015c8 <__addsf3>:
    15c8:	bb 27       	eor	r27, r27
    15ca:	aa 27       	eor	r26, r26
    15cc:	0e d0       	rcall	.+28     	; 0x15ea <__addsf3x>
    15ce:	08 c1       	rjmp	.+528    	; 0x17e0 <__fp_round>
    15d0:	f9 d0       	rcall	.+498    	; 0x17c4 <__fp_pscA>
    15d2:	30 f0       	brcs	.+12     	; 0x15e0 <__addsf3+0x18>
    15d4:	fe d0       	rcall	.+508    	; 0x17d2 <__fp_pscB>
    15d6:	20 f0       	brcs	.+8      	; 0x15e0 <__addsf3+0x18>
    15d8:	31 f4       	brne	.+12     	; 0x15e6 <__addsf3+0x1e>
    15da:	9f 3f       	cpi	r25, 0xFF	; 255
    15dc:	11 f4       	brne	.+4      	; 0x15e2 <__addsf3+0x1a>
    15de:	1e f4       	brtc	.+6      	; 0x15e6 <__addsf3+0x1e>
    15e0:	ee c0       	rjmp	.+476    	; 0x17be <__fp_nan>
    15e2:	0e f4       	brtc	.+2      	; 0x15e6 <__addsf3+0x1e>
    15e4:	e0 95       	com	r30
    15e6:	e7 fb       	bst	r30, 7
    15e8:	e4 c0       	rjmp	.+456    	; 0x17b2 <__fp_inf>

000015ea <__addsf3x>:
    15ea:	e9 2f       	mov	r30, r25
    15ec:	0a d1       	rcall	.+532    	; 0x1802 <__fp_split3>
    15ee:	80 f3       	brcs	.-32     	; 0x15d0 <__addsf3+0x8>
    15f0:	ba 17       	cp	r27, r26
    15f2:	62 07       	cpc	r22, r18
    15f4:	73 07       	cpc	r23, r19
    15f6:	84 07       	cpc	r24, r20
    15f8:	95 07       	cpc	r25, r21
    15fa:	18 f0       	brcs	.+6      	; 0x1602 <__addsf3x+0x18>
    15fc:	71 f4       	brne	.+28     	; 0x161a <__addsf3x+0x30>
    15fe:	9e f5       	brtc	.+102    	; 0x1666 <__addsf3x+0x7c>
    1600:	22 c1       	rjmp	.+580    	; 0x1846 <__fp_zero>
    1602:	0e f4       	brtc	.+2      	; 0x1606 <__addsf3x+0x1c>
    1604:	e0 95       	com	r30
    1606:	0b 2e       	mov	r0, r27
    1608:	ba 2f       	mov	r27, r26
    160a:	a0 2d       	mov	r26, r0
    160c:	0b 01       	movw	r0, r22
    160e:	b9 01       	movw	r22, r18
    1610:	90 01       	movw	r18, r0
    1612:	0c 01       	movw	r0, r24
    1614:	ca 01       	movw	r24, r20
    1616:	a0 01       	movw	r20, r0
    1618:	11 24       	eor	r1, r1
    161a:	ff 27       	eor	r31, r31
    161c:	59 1b       	sub	r21, r25
    161e:	99 f0       	breq	.+38     	; 0x1646 <__addsf3x+0x5c>
    1620:	59 3f       	cpi	r21, 0xF9	; 249
    1622:	50 f4       	brcc	.+20     	; 0x1638 <__addsf3x+0x4e>
    1624:	50 3e       	cpi	r21, 0xE0	; 224
    1626:	68 f1       	brcs	.+90     	; 0x1682 <__addsf3x+0x98>
    1628:	1a 16       	cp	r1, r26
    162a:	f0 40       	sbci	r31, 0x00	; 0
    162c:	a2 2f       	mov	r26, r18
    162e:	23 2f       	mov	r18, r19
    1630:	34 2f       	mov	r19, r20
    1632:	44 27       	eor	r20, r20
    1634:	58 5f       	subi	r21, 0xF8	; 248
    1636:	f3 cf       	rjmp	.-26     	; 0x161e <__addsf3x+0x34>
    1638:	46 95       	lsr	r20
    163a:	37 95       	ror	r19
    163c:	27 95       	ror	r18
    163e:	a7 95       	ror	r26
    1640:	f0 40       	sbci	r31, 0x00	; 0
    1642:	53 95       	inc	r21
    1644:	c9 f7       	brne	.-14     	; 0x1638 <__addsf3x+0x4e>
    1646:	7e f4       	brtc	.+30     	; 0x1666 <__addsf3x+0x7c>
    1648:	1f 16       	cp	r1, r31
    164a:	ba 0b       	sbc	r27, r26
    164c:	62 0b       	sbc	r22, r18
    164e:	73 0b       	sbc	r23, r19
    1650:	84 0b       	sbc	r24, r20
    1652:	ba f0       	brmi	.+46     	; 0x1682 <__addsf3x+0x98>
    1654:	91 50       	subi	r25, 0x01	; 1
    1656:	a1 f0       	breq	.+40     	; 0x1680 <__addsf3x+0x96>
    1658:	ff 0f       	add	r31, r31
    165a:	bb 1f       	adc	r27, r27
    165c:	66 1f       	adc	r22, r22
    165e:	77 1f       	adc	r23, r23
    1660:	88 1f       	adc	r24, r24
    1662:	c2 f7       	brpl	.-16     	; 0x1654 <__addsf3x+0x6a>
    1664:	0e c0       	rjmp	.+28     	; 0x1682 <__addsf3x+0x98>
    1666:	ba 0f       	add	r27, r26
    1668:	62 1f       	adc	r22, r18
    166a:	73 1f       	adc	r23, r19
    166c:	84 1f       	adc	r24, r20
    166e:	48 f4       	brcc	.+18     	; 0x1682 <__addsf3x+0x98>
    1670:	87 95       	ror	r24
    1672:	77 95       	ror	r23
    1674:	67 95       	ror	r22
    1676:	b7 95       	ror	r27
    1678:	f7 95       	ror	r31
    167a:	9e 3f       	cpi	r25, 0xFE	; 254
    167c:	08 f0       	brcs	.+2      	; 0x1680 <__addsf3x+0x96>
    167e:	b3 cf       	rjmp	.-154    	; 0x15e6 <__addsf3+0x1e>
    1680:	93 95       	inc	r25
    1682:	88 0f       	add	r24, r24
    1684:	08 f0       	brcs	.+2      	; 0x1688 <__addsf3x+0x9e>
    1686:	99 27       	eor	r25, r25
    1688:	ee 0f       	add	r30, r30
    168a:	97 95       	ror	r25
    168c:	87 95       	ror	r24
    168e:	08 95       	ret

00001690 <__cmpsf2>:
    1690:	6c d0       	rcall	.+216    	; 0x176a <__fp_cmp>
    1692:	08 f4       	brcc	.+2      	; 0x1696 <__cmpsf2+0x6>
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	08 95       	ret

00001698 <__fixunssfsi>:
    1698:	bc d0       	rcall	.+376    	; 0x1812 <__fp_splitA>
    169a:	88 f0       	brcs	.+34     	; 0x16be <__fixunssfsi+0x26>
    169c:	9f 57       	subi	r25, 0x7F	; 127
    169e:	90 f0       	brcs	.+36     	; 0x16c4 <__fixunssfsi+0x2c>
    16a0:	b9 2f       	mov	r27, r25
    16a2:	99 27       	eor	r25, r25
    16a4:	b7 51       	subi	r27, 0x17	; 23
    16a6:	a0 f0       	brcs	.+40     	; 0x16d0 <__fixunssfsi+0x38>
    16a8:	d1 f0       	breq	.+52     	; 0x16de <__fixunssfsi+0x46>
    16aa:	66 0f       	add	r22, r22
    16ac:	77 1f       	adc	r23, r23
    16ae:	88 1f       	adc	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	1a f0       	brmi	.+6      	; 0x16ba <__fixunssfsi+0x22>
    16b4:	ba 95       	dec	r27
    16b6:	c9 f7       	brne	.-14     	; 0x16aa <__fixunssfsi+0x12>
    16b8:	12 c0       	rjmp	.+36     	; 0x16de <__fixunssfsi+0x46>
    16ba:	b1 30       	cpi	r27, 0x01	; 1
    16bc:	81 f0       	breq	.+32     	; 0x16de <__fixunssfsi+0x46>
    16be:	c3 d0       	rcall	.+390    	; 0x1846 <__fp_zero>
    16c0:	b1 e0       	ldi	r27, 0x01	; 1
    16c2:	08 95       	ret
    16c4:	c0 c0       	rjmp	.+384    	; 0x1846 <__fp_zero>
    16c6:	67 2f       	mov	r22, r23
    16c8:	78 2f       	mov	r23, r24
    16ca:	88 27       	eor	r24, r24
    16cc:	b8 5f       	subi	r27, 0xF8	; 248
    16ce:	39 f0       	breq	.+14     	; 0x16de <__fixunssfsi+0x46>
    16d0:	b9 3f       	cpi	r27, 0xF9	; 249
    16d2:	cc f3       	brlt	.-14     	; 0x16c6 <__fixunssfsi+0x2e>
    16d4:	86 95       	lsr	r24
    16d6:	77 95       	ror	r23
    16d8:	67 95       	ror	r22
    16da:	b3 95       	inc	r27
    16dc:	d9 f7       	brne	.-10     	; 0x16d4 <__fixunssfsi+0x3c>
    16de:	3e f4       	brtc	.+14     	; 0x16ee <__fixunssfsi+0x56>
    16e0:	90 95       	com	r25
    16e2:	80 95       	com	r24
    16e4:	70 95       	com	r23
    16e6:	61 95       	neg	r22
    16e8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ea:	8f 4f       	sbci	r24, 0xFF	; 255
    16ec:	9f 4f       	sbci	r25, 0xFF	; 255
    16ee:	08 95       	ret

000016f0 <__floatunsisf>:
    16f0:	e8 94       	clt
    16f2:	09 c0       	rjmp	.+18     	; 0x1706 <__floatsisf+0x12>

000016f4 <__floatsisf>:
    16f4:	97 fb       	bst	r25, 7
    16f6:	3e f4       	brtc	.+14     	; 0x1706 <__floatsisf+0x12>
    16f8:	90 95       	com	r25
    16fa:	80 95       	com	r24
    16fc:	70 95       	com	r23
    16fe:	61 95       	neg	r22
    1700:	7f 4f       	sbci	r23, 0xFF	; 255
    1702:	8f 4f       	sbci	r24, 0xFF	; 255
    1704:	9f 4f       	sbci	r25, 0xFF	; 255
    1706:	99 23       	and	r25, r25
    1708:	a9 f0       	breq	.+42     	; 0x1734 <__floatsisf+0x40>
    170a:	f9 2f       	mov	r31, r25
    170c:	96 e9       	ldi	r25, 0x96	; 150
    170e:	bb 27       	eor	r27, r27
    1710:	93 95       	inc	r25
    1712:	f6 95       	lsr	r31
    1714:	87 95       	ror	r24
    1716:	77 95       	ror	r23
    1718:	67 95       	ror	r22
    171a:	b7 95       	ror	r27
    171c:	f1 11       	cpse	r31, r1
    171e:	f8 cf       	rjmp	.-16     	; 0x1710 <__floatsisf+0x1c>
    1720:	fa f4       	brpl	.+62     	; 0x1760 <__floatsisf+0x6c>
    1722:	bb 0f       	add	r27, r27
    1724:	11 f4       	brne	.+4      	; 0x172a <__floatsisf+0x36>
    1726:	60 ff       	sbrs	r22, 0
    1728:	1b c0       	rjmp	.+54     	; 0x1760 <__floatsisf+0x6c>
    172a:	6f 5f       	subi	r22, 0xFF	; 255
    172c:	7f 4f       	sbci	r23, 0xFF	; 255
    172e:	8f 4f       	sbci	r24, 0xFF	; 255
    1730:	9f 4f       	sbci	r25, 0xFF	; 255
    1732:	16 c0       	rjmp	.+44     	; 0x1760 <__floatsisf+0x6c>
    1734:	88 23       	and	r24, r24
    1736:	11 f0       	breq	.+4      	; 0x173c <__floatsisf+0x48>
    1738:	96 e9       	ldi	r25, 0x96	; 150
    173a:	11 c0       	rjmp	.+34     	; 0x175e <__floatsisf+0x6a>
    173c:	77 23       	and	r23, r23
    173e:	21 f0       	breq	.+8      	; 0x1748 <__floatsisf+0x54>
    1740:	9e e8       	ldi	r25, 0x8E	; 142
    1742:	87 2f       	mov	r24, r23
    1744:	76 2f       	mov	r23, r22
    1746:	05 c0       	rjmp	.+10     	; 0x1752 <__floatsisf+0x5e>
    1748:	66 23       	and	r22, r22
    174a:	71 f0       	breq	.+28     	; 0x1768 <__floatsisf+0x74>
    174c:	96 e8       	ldi	r25, 0x86	; 134
    174e:	86 2f       	mov	r24, r22
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	2a f0       	brmi	.+10     	; 0x1760 <__floatsisf+0x6c>
    1756:	9a 95       	dec	r25
    1758:	66 0f       	add	r22, r22
    175a:	77 1f       	adc	r23, r23
    175c:	88 1f       	adc	r24, r24
    175e:	da f7       	brpl	.-10     	; 0x1756 <__floatsisf+0x62>
    1760:	88 0f       	add	r24, r24
    1762:	96 95       	lsr	r25
    1764:	87 95       	ror	r24
    1766:	97 f9       	bld	r25, 7
    1768:	08 95       	ret

0000176a <__fp_cmp>:
    176a:	99 0f       	add	r25, r25
    176c:	00 08       	sbc	r0, r0
    176e:	55 0f       	add	r21, r21
    1770:	aa 0b       	sbc	r26, r26
    1772:	e0 e8       	ldi	r30, 0x80	; 128
    1774:	fe ef       	ldi	r31, 0xFE	; 254
    1776:	16 16       	cp	r1, r22
    1778:	17 06       	cpc	r1, r23
    177a:	e8 07       	cpc	r30, r24
    177c:	f9 07       	cpc	r31, r25
    177e:	c0 f0       	brcs	.+48     	; 0x17b0 <__fp_cmp+0x46>
    1780:	12 16       	cp	r1, r18
    1782:	13 06       	cpc	r1, r19
    1784:	e4 07       	cpc	r30, r20
    1786:	f5 07       	cpc	r31, r21
    1788:	98 f0       	brcs	.+38     	; 0x17b0 <__fp_cmp+0x46>
    178a:	62 1b       	sub	r22, r18
    178c:	73 0b       	sbc	r23, r19
    178e:	84 0b       	sbc	r24, r20
    1790:	95 0b       	sbc	r25, r21
    1792:	39 f4       	brne	.+14     	; 0x17a2 <__fp_cmp+0x38>
    1794:	0a 26       	eor	r0, r26
    1796:	61 f0       	breq	.+24     	; 0x17b0 <__fp_cmp+0x46>
    1798:	23 2b       	or	r18, r19
    179a:	24 2b       	or	r18, r20
    179c:	25 2b       	or	r18, r21
    179e:	21 f4       	brne	.+8      	; 0x17a8 <__fp_cmp+0x3e>
    17a0:	08 95       	ret
    17a2:	0a 26       	eor	r0, r26
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <__fp_cmp+0x3e>
    17a6:	a1 40       	sbci	r26, 0x01	; 1
    17a8:	a6 95       	lsr	r26
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	81 1d       	adc	r24, r1
    17ae:	81 1d       	adc	r24, r1
    17b0:	08 95       	ret

000017b2 <__fp_inf>:
    17b2:	97 f9       	bld	r25, 7
    17b4:	9f 67       	ori	r25, 0x7F	; 127
    17b6:	80 e8       	ldi	r24, 0x80	; 128
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	08 95       	ret

000017be <__fp_nan>:
    17be:	9f ef       	ldi	r25, 0xFF	; 255
    17c0:	80 ec       	ldi	r24, 0xC0	; 192
    17c2:	08 95       	ret

000017c4 <__fp_pscA>:
    17c4:	00 24       	eor	r0, r0
    17c6:	0a 94       	dec	r0
    17c8:	16 16       	cp	r1, r22
    17ca:	17 06       	cpc	r1, r23
    17cc:	18 06       	cpc	r1, r24
    17ce:	09 06       	cpc	r0, r25
    17d0:	08 95       	ret

000017d2 <__fp_pscB>:
    17d2:	00 24       	eor	r0, r0
    17d4:	0a 94       	dec	r0
    17d6:	12 16       	cp	r1, r18
    17d8:	13 06       	cpc	r1, r19
    17da:	14 06       	cpc	r1, r20
    17dc:	05 06       	cpc	r0, r21
    17de:	08 95       	ret

000017e0 <__fp_round>:
    17e0:	09 2e       	mov	r0, r25
    17e2:	03 94       	inc	r0
    17e4:	00 0c       	add	r0, r0
    17e6:	11 f4       	brne	.+4      	; 0x17ec <__fp_round+0xc>
    17e8:	88 23       	and	r24, r24
    17ea:	52 f0       	brmi	.+20     	; 0x1800 <__fp_round+0x20>
    17ec:	bb 0f       	add	r27, r27
    17ee:	40 f4       	brcc	.+16     	; 0x1800 <__fp_round+0x20>
    17f0:	bf 2b       	or	r27, r31
    17f2:	11 f4       	brne	.+4      	; 0x17f8 <__fp_round+0x18>
    17f4:	60 ff       	sbrs	r22, 0
    17f6:	04 c0       	rjmp	.+8      	; 0x1800 <__fp_round+0x20>
    17f8:	6f 5f       	subi	r22, 0xFF	; 255
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	8f 4f       	sbci	r24, 0xFF	; 255
    17fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1800:	08 95       	ret

00001802 <__fp_split3>:
    1802:	57 fd       	sbrc	r21, 7
    1804:	90 58       	subi	r25, 0x80	; 128
    1806:	44 0f       	add	r20, r20
    1808:	55 1f       	adc	r21, r21
    180a:	59 f0       	breq	.+22     	; 0x1822 <__fp_splitA+0x10>
    180c:	5f 3f       	cpi	r21, 0xFF	; 255
    180e:	71 f0       	breq	.+28     	; 0x182c <__fp_splitA+0x1a>
    1810:	47 95       	ror	r20

00001812 <__fp_splitA>:
    1812:	88 0f       	add	r24, r24
    1814:	97 fb       	bst	r25, 7
    1816:	99 1f       	adc	r25, r25
    1818:	61 f0       	breq	.+24     	; 0x1832 <__fp_splitA+0x20>
    181a:	9f 3f       	cpi	r25, 0xFF	; 255
    181c:	79 f0       	breq	.+30     	; 0x183c <__fp_splitA+0x2a>
    181e:	87 95       	ror	r24
    1820:	08 95       	ret
    1822:	12 16       	cp	r1, r18
    1824:	13 06       	cpc	r1, r19
    1826:	14 06       	cpc	r1, r20
    1828:	55 1f       	adc	r21, r21
    182a:	f2 cf       	rjmp	.-28     	; 0x1810 <__fp_split3+0xe>
    182c:	46 95       	lsr	r20
    182e:	f1 df       	rcall	.-30     	; 0x1812 <__fp_splitA>
    1830:	08 c0       	rjmp	.+16     	; 0x1842 <__fp_splitA+0x30>
    1832:	16 16       	cp	r1, r22
    1834:	17 06       	cpc	r1, r23
    1836:	18 06       	cpc	r1, r24
    1838:	99 1f       	adc	r25, r25
    183a:	f1 cf       	rjmp	.-30     	; 0x181e <__fp_splitA+0xc>
    183c:	86 95       	lsr	r24
    183e:	71 05       	cpc	r23, r1
    1840:	61 05       	cpc	r22, r1
    1842:	08 94       	sec
    1844:	08 95       	ret

00001846 <__fp_zero>:
    1846:	e8 94       	clt

00001848 <__fp_szero>:
    1848:	bb 27       	eor	r27, r27
    184a:	66 27       	eor	r22, r22
    184c:	77 27       	eor	r23, r23
    184e:	cb 01       	movw	r24, r22
    1850:	97 f9       	bld	r25, 7
    1852:	08 95       	ret

00001854 <__gesf2>:
    1854:	8a df       	rcall	.-236    	; 0x176a <__fp_cmp>
    1856:	08 f4       	brcc	.+2      	; 0x185a <__gesf2+0x6>
    1858:	8f ef       	ldi	r24, 0xFF	; 255
    185a:	08 95       	ret

0000185c <clear>:
    185c:	e0 ec       	ldi	r30, 0xC0	; 192
    185e:	f1 e0       	ldi	r31, 0x01	; 1
    1860:	11 92       	st	Z+, r1
    1862:	83 e0       	ldi	r24, 0x03	; 3
    1864:	e8 3b       	cpi	r30, 0xB8	; 184
    1866:	f8 07       	cpc	r31, r24
    1868:	d9 f7       	brne	.-10     	; 0x1860 <clear+0x4>
    186a:	08 95       	ret

0000186c <set_pixel>:
    186c:	84 35       	cpi	r24, 0x54	; 84
    186e:	80 f5       	brcc	.+96     	; 0x18d0 <set_pixel+0x64>
    1870:	60 33       	cpi	r22, 0x30	; 48
    1872:	70 f5       	brcc	.+92     	; 0x18d0 <set_pixel+0x64>
    1874:	26 2f       	mov	r18, r22
    1876:	26 95       	lsr	r18
    1878:	26 95       	lsr	r18
    187a:	26 95       	lsr	r18
    187c:	67 70       	andi	r22, 0x07	; 7
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	44 23       	and	r20, r20
    1882:	99 f0       	breq	.+38     	; 0x18aa <set_pixel+0x3e>
    1884:	e4 e5       	ldi	r30, 0x54	; 84
    1886:	2e 9f       	mul	r18, r30
    1888:	f0 01       	movw	r30, r0
    188a:	11 24       	eor	r1, r1
    188c:	e8 0f       	add	r30, r24
    188e:	f9 1f       	adc	r31, r25
    1890:	e0 54       	subi	r30, 0x40	; 64
    1892:	fe 4f       	sbci	r31, 0xFE	; 254
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 c0       	rjmp	.+4      	; 0x189e <set_pixel+0x32>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	6a 95       	dec	r22
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <set_pixel+0x2e>
    18a2:	20 81       	ld	r18, Z
    18a4:	28 2b       	or	r18, r24
    18a6:	20 83       	st	Z, r18
    18a8:	08 95       	ret
    18aa:	e4 e5       	ldi	r30, 0x54	; 84
    18ac:	2e 9f       	mul	r18, r30
    18ae:	f0 01       	movw	r30, r0
    18b0:	11 24       	eor	r1, r1
    18b2:	e8 0f       	add	r30, r24
    18b4:	f9 1f       	adc	r31, r25
    18b6:	e0 54       	subi	r30, 0x40	; 64
    18b8:	fe 4f       	sbci	r31, 0xFE	; 254
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <set_pixel+0x58>
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	6a 95       	dec	r22
    18c6:	e2 f7       	brpl	.-8      	; 0x18c0 <set_pixel+0x54>
    18c8:	80 95       	com	r24
    18ca:	20 81       	ld	r18, Z
    18cc:	28 23       	and	r18, r24
    18ce:	20 83       	st	Z, r18
    18d0:	08 95       	ret

000018d2 <draw_line>:
    18d2:	2f 92       	push	r2
    18d4:	3f 92       	push	r3
    18d6:	4f 92       	push	r4
    18d8:	5f 92       	push	r5
    18da:	6f 92       	push	r6
    18dc:	7f 92       	push	r7
    18de:	8f 92       	push	r8
    18e0:	9f 92       	push	r9
    18e2:	af 92       	push	r10
    18e4:	bf 92       	push	r11
    18e6:	cf 92       	push	r12
    18e8:	df 92       	push	r13
    18ea:	ef 92       	push	r14
    18ec:	ff 92       	push	r15
    18ee:	0f 93       	push	r16
    18f0:	1f 93       	push	r17
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	66 97       	sbiw	r28, 0x16	; 22
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	c8 2e       	mov	r12, r24
    1908:	d6 2e       	mov	r13, r22
    190a:	49 87       	std	Y+9, r20	; 0x09
    190c:	2a 87       	std	Y+10, r18	; 0x0a
    190e:	84 17       	cp	r24, r20
    1910:	59 f4       	brne	.+22     	; 0x1928 <draw_line+0x56>
    1912:	16 2f       	mov	r17, r22
    1914:	05 c0       	rjmp	.+10     	; 0x1920 <draw_line+0x4e>
    1916:	8c 2d       	mov	r24, r12
    1918:	61 2f       	mov	r22, r17
    191a:	41 e0       	ldi	r20, 0x01	; 1
    191c:	a7 df       	rcall	.-178    	; 0x186c <set_pixel>
    191e:	1f 5f       	subi	r17, 0xFF	; 255
    1920:	2a 85       	ldd	r18, Y+10	; 0x0a
    1922:	21 17       	cp	r18, r17
    1924:	c0 f7       	brcc	.-16     	; 0x1916 <draw_line+0x44>
    1926:	a3 c1       	rjmp	.+838    	; 0x1c6e <draw_line+0x39c>
    1928:	3a 85       	ldd	r19, Y+10	; 0x0a
    192a:	63 17       	cp	r22, r19
    192c:	59 f4       	brne	.+22     	; 0x1944 <draw_line+0x72>
    192e:	18 2f       	mov	r17, r24
    1930:	05 c0       	rjmp	.+10     	; 0x193c <draw_line+0x6a>
    1932:	81 2f       	mov	r24, r17
    1934:	6d 2d       	mov	r22, r13
    1936:	41 e0       	ldi	r20, 0x01	; 1
    1938:	99 df       	rcall	.-206    	; 0x186c <set_pixel>
    193a:	1f 5f       	subi	r17, 0xFF	; 255
    193c:	49 85       	ldd	r20, Y+9	; 0x09
    193e:	41 17       	cp	r20, r17
    1940:	c0 f7       	brcc	.-16     	; 0x1932 <draw_line+0x60>
    1942:	95 c1       	rjmp	.+810    	; 0x1c6e <draw_line+0x39c>
    1944:	5a 85       	ldd	r21, Y+10	; 0x0a
    1946:	65 2f       	mov	r22, r21
    1948:	70 e0       	ldi	r23, 0x00	; 0
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	d0 de       	rcall	.-608    	; 0x16f0 <__floatunsisf>
    1950:	7b 01       	movw	r14, r22
    1952:	8c 01       	movw	r16, r24
    1954:	8d 2d       	mov	r24, r13
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9c 87       	std	Y+12, r25	; 0x0c
    195a:	8b 87       	std	Y+11, r24	; 0x0b
    195c:	fc 01       	movw	r30, r24
    195e:	bf 01       	movw	r22, r30
    1960:	88 27       	eor	r24, r24
    1962:	77 fd       	sbrc	r23, 7
    1964:	80 95       	com	r24
    1966:	98 2f       	mov	r25, r24
    1968:	c5 de       	rcall	.-630    	; 0x16f4 <__floatsisf>
    196a:	9b 01       	movw	r18, r22
    196c:	ac 01       	movw	r20, r24
    196e:	c8 01       	movw	r24, r16
    1970:	b7 01       	movw	r22, r14
    1972:	29 de       	rcall	.-942    	; 0x15c6 <__subsf3>
    1974:	1b 01       	movw	r2, r22
    1976:	2c 01       	movw	r4, r24
    1978:	f9 85       	ldd	r31, Y+9	; 0x09
    197a:	6f 2f       	mov	r22, r31
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	b6 de       	rcall	.-660    	; 0x16f0 <__floatunsisf>
    1984:	7b 01       	movw	r14, r22
    1986:	8c 01       	movw	r16, r24
    1988:	ac 2c       	mov	r10, r12
    198a:	bb 24       	eor	r11, r11
    198c:	b5 01       	movw	r22, r10
    198e:	88 27       	eor	r24, r24
    1990:	77 fd       	sbrc	r23, 7
    1992:	80 95       	com	r24
    1994:	98 2f       	mov	r25, r24
    1996:	ae de       	rcall	.-676    	; 0x16f4 <__floatsisf>
    1998:	9b 01       	movw	r18, r22
    199a:	ac 01       	movw	r20, r24
    199c:	c8 01       	movw	r24, r16
    199e:	b7 01       	movw	r22, r14
    19a0:	12 de       	rcall	.-988    	; 0x15c6 <__subsf3>
    19a2:	3b 01       	movw	r6, r22
    19a4:	4c 01       	movw	r8, r24
    19a6:	c2 01       	movw	r24, r4
    19a8:	b1 01       	movw	r22, r2
    19aa:	a4 01       	movw	r20, r8
    19ac:	93 01       	movw	r18, r6
    19ae:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__divsf3>
    19b2:	7b 01       	movw	r14, r22
    19b4:	8c 01       	movw	r16, r24
    19b6:	29 85       	ldd	r18, Y+9	; 0x09
    19b8:	c2 16       	cp	r12, r18
    19ba:	08 f0       	brcs	.+2      	; 0x19be <draw_line+0xec>
    19bc:	38 c0       	rjmp	.+112    	; 0x1a2e <draw_line+0x15c>
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e8       	ldi	r20, 0x80	; 128
    19c4:	5f e3       	ldi	r21, 0x3F	; 63
    19c6:	46 df       	rcall	.-372    	; 0x1854 <__gesf2>
    19c8:	18 16       	cp	r1, r24
    19ca:	24 f4       	brge	.+8      	; 0x19d4 <draw_line+0x102>
    19cc:	71 e0       	ldi	r23, 0x01	; 1
    19ce:	c7 2e       	mov	r12, r23
    19d0:	d1 2c       	mov	r13, r1
    19d2:	37 c1       	rjmp	.+622    	; 0x1c42 <draw_line+0x370>
    19d4:	c8 01       	movw	r24, r16
    19d6:	b7 01       	movw	r22, r14
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e8       	ldi	r20, 0x80	; 128
    19de:	5f e3       	ldi	r21, 0x3F	; 63
    19e0:	57 de       	rcall	.-850    	; 0x1690 <__cmpsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	64 f0       	brlt	.+24     	; 0x19fe <draw_line+0x12c>
    19e6:	c8 01       	movw	r24, r16
    19e8:	b7 01       	movw	r22, r14
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e0       	ldi	r20, 0x00	; 0
    19f0:	50 e0       	ldi	r21, 0x00	; 0
    19f2:	30 df       	rcall	.-416    	; 0x1854 <__gesf2>
    19f4:	18 16       	cp	r1, r24
    19f6:	1c f4       	brge	.+6      	; 0x19fe <draw_line+0x12c>
    19f8:	cc 24       	eor	r12, r12
    19fa:	dd 24       	eor	r13, r13
    19fc:	50 c0       	rjmp	.+160    	; 0x1a9e <draw_line+0x1cc>
    19fe:	c8 01       	movw	r24, r16
    1a00:	b7 01       	movw	r22, r14
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e0       	ldi	r20, 0x00	; 0
    1a08:	50 e0       	ldi	r21, 0x00	; 0
    1a0a:	42 de       	rcall	.-892    	; 0x1690 <__cmpsf2>
    1a0c:	18 16       	cp	r1, r24
    1a0e:	0c f4       	brge	.+2      	; 0x1a12 <draw_line+0x140>
    1a10:	11 c1       	rjmp	.+546    	; 0x1c34 <draw_line+0x362>
    1a12:	c8 01       	movw	r24, r16
    1a14:	b7 01       	movw	r22, r14
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e8       	ldi	r20, 0x80	; 128
    1a1c:	5f eb       	ldi	r21, 0xBF	; 191
    1a1e:	1a df       	rcall	.-460    	; 0x1854 <__gesf2>
    1a20:	18 16       	cp	r1, r24
    1a22:	0c f0       	brlt	.+2      	; 0x1a26 <draw_line+0x154>
    1a24:	07 c1       	rjmp	.+526    	; 0x1c34 <draw_line+0x362>
    1a26:	67 e0       	ldi	r22, 0x07	; 7
    1a28:	c6 2e       	mov	r12, r22
    1a2a:	d1 2c       	mov	r13, r1
    1a2c:	38 c0       	rjmp	.+112    	; 0x1a9e <draw_line+0x1cc>
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e8       	ldi	r20, 0x80	; 128
    1a34:	5f e3       	ldi	r21, 0x3F	; 63
    1a36:	0e df       	rcall	.-484    	; 0x1854 <__gesf2>
    1a38:	18 16       	cp	r1, r24
    1a3a:	24 f4       	brge	.+8      	; 0x1a44 <draw_line+0x172>
    1a3c:	55 e0       	ldi	r21, 0x05	; 5
    1a3e:	c5 2e       	mov	r12, r21
    1a40:	d1 2c       	mov	r13, r1
    1a42:	ff c0       	rjmp	.+510    	; 0x1c42 <draw_line+0x370>
    1a44:	c8 01       	movw	r24, r16
    1a46:	b7 01       	movw	r22, r14
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e8       	ldi	r20, 0x80	; 128
    1a4e:	5f e3       	ldi	r21, 0x3F	; 63
    1a50:	1f de       	rcall	.-962    	; 0x1690 <__cmpsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	6c f0       	brlt	.+26     	; 0x1a70 <draw_line+0x19e>
    1a56:	c8 01       	movw	r24, r16
    1a58:	b7 01       	movw	r22, r14
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	f8 de       	rcall	.-528    	; 0x1854 <__gesf2>
    1a64:	18 16       	cp	r1, r24
    1a66:	24 f4       	brge	.+8      	; 0x1a70 <draw_line+0x19e>
    1a68:	44 e0       	ldi	r20, 0x04	; 4
    1a6a:	c4 2e       	mov	r12, r20
    1a6c:	d1 2c       	mov	r13, r1
    1a6e:	17 c0       	rjmp	.+46     	; 0x1a9e <draw_line+0x1cc>
    1a70:	c8 01       	movw	r24, r16
    1a72:	b7 01       	movw	r22, r14
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	50 e0       	ldi	r21, 0x00	; 0
    1a7c:	09 de       	rcall	.-1006   	; 0x1690 <__cmpsf2>
    1a7e:	18 16       	cp	r1, r24
    1a80:	0c f4       	brge	.+2      	; 0x1a84 <draw_line+0x1b2>
    1a82:	dc c0       	rjmp	.+440    	; 0x1c3c <draw_line+0x36a>
    1a84:	c8 01       	movw	r24, r16
    1a86:	b7 01       	movw	r22, r14
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e8       	ldi	r20, 0x80	; 128
    1a8e:	5f eb       	ldi	r21, 0xBF	; 191
    1a90:	e1 de       	rcall	.-574    	; 0x1854 <__gesf2>
    1a92:	18 16       	cp	r1, r24
    1a94:	0c f0       	brlt	.+2      	; 0x1a98 <draw_line+0x1c6>
    1a96:	d2 c0       	rjmp	.+420    	; 0x1c3c <draw_line+0x36a>
    1a98:	33 e0       	ldi	r19, 0x03	; 3
    1a9a:	c3 2e       	mov	r12, r19
    1a9c:	d1 2c       	mov	r13, r1
    1a9e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1aa0:	5c 85       	ldd	r21, Y+12	; 0x0c
    1aa2:	5a 83       	std	Y+2, r21	; 0x02
    1aa4:	49 83       	std	Y+1, r20	; 0x01
    1aa6:	be 82       	std	Y+6, r11	; 0x06
    1aa8:	ad 82       	std	Y+5, r10	; 0x05
    1aaa:	99 85       	ldd	r25, Y+9	; 0x09
    1aac:	89 2f       	mov	r24, r25
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	9c 83       	std	Y+4, r25	; 0x04
    1ab2:	8b 83       	std	Y+3, r24	; 0x03
    1ab4:	17 01       	movw	r2, r14
    1ab6:	28 01       	movw	r4, r16
    1ab8:	e1 e0       	ldi	r30, 0x01	; 1
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	f8 87       	std	Y+8, r31	; 0x08
    1abe:	ef 83       	std	Y+7, r30	; 0x07
    1ac0:	f7 e0       	ldi	r31, 0x07	; 7
    1ac2:	cf 16       	cp	r12, r31
    1ac4:	d1 04       	cpc	r13, r1
    1ac6:	28 f4       	brcc	.+10     	; 0x1ad2 <draw_line+0x200>
    1ac8:	23 e0       	ldi	r18, 0x03	; 3
    1aca:	c2 16       	cp	r12, r18
    1acc:	d1 04       	cpc	r13, r1
    1ace:	40 f4       	brcc	.+16     	; 0x1ae0 <draw_line+0x20e>
    1ad0:	04 c0       	rjmp	.+8      	; 0x1ada <draw_line+0x208>
    1ad2:	37 e0       	ldi	r19, 0x07	; 7
    1ad4:	c3 16       	cp	r12, r19
    1ad6:	d1 04       	cpc	r13, r1
    1ad8:	29 f4       	brne	.+10     	; 0x1ae4 <draw_line+0x212>
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <draw_line+0x212>
    1ae0:	8f ef       	ldi	r24, 0xFF	; 255
    1ae2:	9f ef       	ldi	r25, 0xFF	; 255
    1ae4:	ad 80       	ldd	r10, Y+5	; 0x05
    1ae6:	be 80       	ldd	r11, Y+6	; 0x06
    1ae8:	0f 2e       	mov	r0, r31
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	6f 2e       	mov	r6, r31
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	7f 2e       	mov	r7, r31
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	8f 2e       	mov	r8, r31
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	9f 2e       	mov	r9, r31
    1afa:	f0 2d       	mov	r31, r0
    1afc:	a2 01       	movw	r20, r4
    1afe:	91 01       	movw	r18, r2
    1b00:	50 58       	subi	r21, 0x80	; 128
    1b02:	2d 87       	std	Y+13, r18	; 0x0d
    1b04:	3e 87       	std	Y+14, r19	; 0x0e
    1b06:	4f 87       	std	Y+15, r20	; 0x0f
    1b08:	58 8b       	std	Y+16, r21	; 0x10
    1b0a:	9c 01       	movw	r18, r24
    1b0c:	44 27       	eor	r20, r20
    1b0e:	37 fd       	sbrc	r19, 7
    1b10:	40 95       	com	r20
    1b12:	54 2f       	mov	r21, r20
    1b14:	29 8b       	std	Y+17, r18	; 0x11
    1b16:	3a 8b       	std	Y+18, r19	; 0x12
    1b18:	4b 8b       	std	Y+19, r20	; 0x13
    1b1a:	5c 8b       	std	Y+20, r21	; 0x14
    1b1c:	7a c0       	rjmp	.+244    	; 0x1c12 <draw_line+0x340>
    1b1e:	4f 81       	ldd	r20, Y+7	; 0x07
    1b20:	58 85       	ldd	r21, Y+8	; 0x08
    1b22:	45 2b       	or	r20, r21
    1b24:	19 f0       	breq	.+6      	; 0x1b2c <draw_line+0x25a>
    1b26:	8a 2d       	mov	r24, r10
    1b28:	69 81       	ldd	r22, Y+1	; 0x01
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <draw_line+0x25e>
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	6a 2d       	mov	r22, r10
    1b30:	41 e0       	ldi	r20, 0x01	; 1
    1b32:	9c de       	rcall	.-712    	; 0x186c <set_pixel>
    1b34:	c2 01       	movw	r24, r4
    1b36:	b1 01       	movw	r22, r2
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	50 e0       	ldi	r21, 0x00	; 0
    1b40:	89 de       	rcall	.-750    	; 0x1854 <__gesf2>
    1b42:	88 23       	and	r24, r24
    1b44:	1c f0       	brlt	.+6      	; 0x1b4c <draw_line+0x27a>
    1b46:	a2 01       	movw	r20, r4
    1b48:	91 01       	movw	r18, r2
    1b4a:	04 c0       	rjmp	.+8      	; 0x1b54 <draw_line+0x282>
    1b4c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b4e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b50:	4f 85       	ldd	r20, Y+15	; 0x0f
    1b52:	58 89       	ldd	r21, Y+16	; 0x10
    1b54:	c4 01       	movw	r24, r8
    1b56:	b3 01       	movw	r22, r6
    1b58:	37 dd       	rcall	.-1426   	; 0x15c8 <__addsf3>
    1b5a:	3b 01       	movw	r6, r22
    1b5c:	4c 01       	movw	r8, r24
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	5f e3       	ldi	r21, 0x3F	; 63
    1b66:	76 de       	rcall	.-788    	; 0x1854 <__gesf2>
    1b68:	18 16       	cp	r1, r24
    1b6a:	0c f0       	brlt	.+2      	; 0x1b6e <draw_line+0x29c>
    1b6c:	44 c0       	rjmp	.+136    	; 0x1bf6 <draw_line+0x324>
    1b6e:	69 89       	ldd	r22, Y+17	; 0x11
    1b70:	7a 89       	ldd	r23, Y+18	; 0x12
    1b72:	8b 89       	ldd	r24, Y+19	; 0x13
    1b74:	9c 89       	ldd	r25, Y+20	; 0x14
    1b76:	be dd       	rcall	.-1156   	; 0x16f4 <__floatsisf>
    1b78:	9b 01       	movw	r18, r22
    1b7a:	ac 01       	movw	r20, r24
    1b7c:	c2 01       	movw	r24, r4
    1b7e:	b1 01       	movw	r22, r2
    1b80:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__mulsf3>
    1b84:	7b 01       	movw	r14, r22
    1b86:	8c 01       	movw	r16, r24
    1b88:	1e 8a       	std	Y+22, r1	; 0x16
    1b8a:	1d 8a       	std	Y+21, r1	; 0x15
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	50 e0       	ldi	r21, 0x00	; 0
    1b94:	5f de       	rcall	.-834    	; 0x1854 <__gesf2>
    1b96:	18 16       	cp	r1, r24
    1b98:	24 f4       	brge	.+8      	; 0x1ba2 <draw_line+0x2d0>
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9e 8b       	std	Y+22, r25	; 0x16
    1ba0:	8d 8b       	std	Y+21, r24	; 0x15
    1ba2:	cc 24       	eor	r12, r12
    1ba4:	dd 24       	eor	r13, r13
    1ba6:	c8 01       	movw	r24, r16
    1ba8:	b7 01       	movw	r22, r14
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	50 e0       	ldi	r21, 0x00	; 0
    1bb2:	6e dd       	rcall	.-1316   	; 0x1690 <__cmpsf2>
    1bb4:	88 23       	and	r24, r24
    1bb6:	1c f4       	brge	.+6      	; 0x1bbe <draw_line+0x2ec>
    1bb8:	21 e0       	ldi	r18, 0x01	; 1
    1bba:	c2 2e       	mov	r12, r18
    1bbc:	d1 2c       	mov	r13, r1
    1bbe:	ed 89       	ldd	r30, Y+21	; 0x15
    1bc0:	fe 89       	ldd	r31, Y+22	; 0x16
    1bc2:	ec 19       	sub	r30, r12
    1bc4:	fd 09       	sbc	r31, r13
    1bc6:	31 97       	sbiw	r30, 0x01	; 1
    1bc8:	39 f4       	brne	.+14     	; 0x1bd8 <draw_line+0x306>
    1bca:	29 81       	ldd	r18, Y+1	; 0x01
    1bcc:	3a 81       	ldd	r19, Y+2	; 0x02
    1bce:	2f 5f       	subi	r18, 0xFF	; 255
    1bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd2:	3a 83       	std	Y+2, r19	; 0x02
    1bd4:	29 83       	std	Y+1, r18	; 0x01
    1bd6:	06 c0       	rjmp	.+12     	; 0x1be4 <draw_line+0x312>
    1bd8:	49 81       	ldd	r20, Y+1	; 0x01
    1bda:	5a 81       	ldd	r21, Y+2	; 0x02
    1bdc:	41 50       	subi	r20, 0x01	; 1
    1bde:	50 40       	sbci	r21, 0x00	; 0
    1be0:	5a 83       	std	Y+2, r21	; 0x02
    1be2:	49 83       	std	Y+1, r20	; 0x01
    1be4:	c4 01       	movw	r24, r8
    1be6:	b3 01       	movw	r22, r6
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e8       	ldi	r20, 0x80	; 128
    1bee:	5f e3       	ldi	r21, 0x3F	; 63
    1bf0:	ea dc       	rcall	.-1580   	; 0x15c6 <__subsf3>
    1bf2:	3b 01       	movw	r6, r22
    1bf4:	4c 01       	movw	r8, r24
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	ed 81       	ldd	r30, Y+5	; 0x05
    1bfc:	fe 81       	ldd	r31, Y+6	; 0x06
    1bfe:	e8 17       	cp	r30, r24
    1c00:	f9 07       	cpc	r31, r25
    1c02:	20 f4       	brcc	.+8      	; 0x1c0c <draw_line+0x33a>
    1c04:	08 94       	sec
    1c06:	a1 1c       	adc	r10, r1
    1c08:	b1 1c       	adc	r11, r1
    1c0a:	03 c0       	rjmp	.+6      	; 0x1c12 <draw_line+0x340>
    1c0c:	08 94       	sec
    1c0e:	a1 08       	sbc	r10, r1
    1c10:	b1 08       	sbc	r11, r1
    1c12:	2b 81       	ldd	r18, Y+3	; 0x03
    1c14:	3c 81       	ldd	r19, Y+4	; 0x04
    1c16:	4d 81       	ldd	r20, Y+5	; 0x05
    1c18:	5e 81       	ldd	r21, Y+6	; 0x06
    1c1a:	42 17       	cp	r20, r18
    1c1c:	53 07       	cpc	r21, r19
    1c1e:	20 f4       	brcc	.+8      	; 0x1c28 <draw_line+0x356>
    1c20:	2a 15       	cp	r18, r10
    1c22:	3b 05       	cpc	r19, r11
    1c24:	20 f1       	brcs	.+72     	; 0x1c6e <draw_line+0x39c>
    1c26:	7b cf       	rjmp	.-266    	; 0x1b1e <draw_line+0x24c>
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2c:	a8 16       	cp	r10, r24
    1c2e:	b9 06       	cpc	r11, r25
    1c30:	f0 f0       	brcs	.+60     	; 0x1c6e <draw_line+0x39c>
    1c32:	75 cf       	rjmp	.-278    	; 0x1b1e <draw_line+0x24c>
    1c34:	96 e0       	ldi	r25, 0x06	; 6
    1c36:	c9 2e       	mov	r12, r25
    1c38:	d1 2c       	mov	r13, r1
    1c3a:	03 c0       	rjmp	.+6      	; 0x1c42 <draw_line+0x370>
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	c8 2e       	mov	r12, r24
    1c40:	d1 2c       	mov	r13, r1
    1c42:	c4 01       	movw	r24, r8
    1c44:	b3 01       	movw	r22, r6
    1c46:	a2 01       	movw	r20, r4
    1c48:	91 01       	movw	r18, r2
    1c4a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__divsf3>
    1c4e:	1b 01       	movw	r2, r22
    1c50:	2c 01       	movw	r4, r24
    1c52:	ba 82       	std	Y+2, r11	; 0x02
    1c54:	a9 82       	std	Y+1, r10	; 0x01
    1c56:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c58:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c5a:	fe 83       	std	Y+6, r31	; 0x06
    1c5c:	ed 83       	std	Y+5, r30	; 0x05
    1c5e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c60:	23 2f       	mov	r18, r19
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	3c 83       	std	Y+4, r19	; 0x04
    1c66:	2b 83       	std	Y+3, r18	; 0x03
    1c68:	18 86       	std	Y+8, r1	; 0x08
    1c6a:	1f 82       	std	Y+7, r1	; 0x07
    1c6c:	29 cf       	rjmp	.-430    	; 0x1ac0 <draw_line+0x1ee>
    1c6e:	66 96       	adiw	r28, 0x16	; 22
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	ff 90       	pop	r15
    1c84:	ef 90       	pop	r14
    1c86:	df 90       	pop	r13
    1c88:	cf 90       	pop	r12
    1c8a:	bf 90       	pop	r11
    1c8c:	af 90       	pop	r10
    1c8e:	9f 90       	pop	r9
    1c90:	8f 90       	pop	r8
    1c92:	7f 90       	pop	r7
    1c94:	6f 90       	pop	r6
    1c96:	5f 90       	pop	r5
    1c98:	4f 90       	pop	r4
    1c9a:	3f 90       	pop	r3
    1c9c:	2f 90       	pop	r2
    1c9e:	08 95       	ret

00001ca0 <draw_character>:
    1ca0:	8f 92       	push	r8
    1ca2:	9f 92       	push	r9
    1ca4:	af 92       	push	r10
    1ca6:	bf 92       	push	r11
    1ca8:	cf 92       	push	r12
    1caa:	df 92       	push	r13
    1cac:	ef 92       	push	r14
    1cae:	ff 92       	push	r15
    1cb0:	0f 93       	push	r16
    1cb2:	1f 93       	push	r17
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	d6 2e       	mov	r13, r22
    1cba:	c4 2e       	mov	r12, r20
    1cbc:	95 e0       	ldi	r25, 0x05	; 5
    1cbe:	89 9f       	mul	r24, r25
    1cc0:	c0 01       	movw	r24, r0
    1cc2:	11 24       	eor	r1, r1
    1cc4:	8c 01       	movw	r16, r24
    1cc6:	04 5f       	subi	r16, 0xF4	; 244
    1cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cca:	f1 e0       	ldi	r31, 0x01	; 1
    1ccc:	8f 2e       	mov	r8, r31
    1cce:	91 2c       	mov	r9, r1
    1cd0:	e1 e1       	ldi	r30, 0x11	; 17
    1cd2:	ae 2e       	mov	r10, r30
    1cd4:	e0 e0       	ldi	r30, 0x00	; 0
    1cd6:	be 2e       	mov	r11, r30
    1cd8:	a8 0e       	add	r10, r24
    1cda:	b9 1e       	adc	r11, r25
    1cdc:	1d c0       	rjmp	.+58     	; 0x1d18 <draw_character+0x78>
    1cde:	6c 2d       	mov	r22, r12
    1ce0:	6c 0f       	add	r22, r28
    1ce2:	a4 01       	movw	r20, r8
    1ce4:	0c 2e       	mov	r0, r28
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <draw_character+0x4c>
    1ce8:	44 0f       	add	r20, r20
    1cea:	55 1f       	adc	r21, r21
    1cec:	0a 94       	dec	r0
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <draw_character+0x48>
    1cf0:	4e 21       	and	r20, r14
    1cf2:	5f 21       	and	r21, r15
    1cf4:	0c 2e       	mov	r0, r28
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <draw_character+0x5c>
    1cf8:	55 95       	asr	r21
    1cfa:	47 95       	ror	r20
    1cfc:	0a 94       	dec	r0
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <draw_character+0x58>
    1d00:	8d 2d       	mov	r24, r13
    1d02:	b4 dd       	rcall	.-1176   	; 0x186c <set_pixel>
    1d04:	21 96       	adiw	r28, 0x01	; 1
    1d06:	c8 30       	cpi	r28, 0x08	; 8
    1d08:	d1 05       	cpc	r29, r1
    1d0a:	49 f7       	brne	.-46     	; 0x1cde <draw_character+0x3e>
    1d0c:	0f 5f       	subi	r16, 0xFF	; 255
    1d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d10:	d3 94       	inc	r13
    1d12:	0a 15       	cp	r16, r10
    1d14:	1b 05       	cpc	r17, r11
    1d16:	39 f0       	breq	.+14     	; 0x1d26 <draw_character+0x86>
    1d18:	c0 e0       	ldi	r28, 0x00	; 0
    1d1a:	d0 e0       	ldi	r29, 0x00	; 0
    1d1c:	f8 01       	movw	r30, r16
    1d1e:	84 91       	lpm	r24, Z+
    1d20:	e8 2e       	mov	r14, r24
    1d22:	ff 24       	eor	r15, r15
    1d24:	dc cf       	rjmp	.-72     	; 0x1cde <draw_character+0x3e>
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	1f 91       	pop	r17
    1d2c:	0f 91       	pop	r16
    1d2e:	ff 90       	pop	r15
    1d30:	ef 90       	pop	r14
    1d32:	df 90       	pop	r13
    1d34:	cf 90       	pop	r12
    1d36:	bf 90       	pop	r11
    1d38:	af 90       	pop	r10
    1d3a:	9f 90       	pop	r9
    1d3c:	8f 90       	pop	r8
    1d3e:	08 95       	ret

00001d40 <draw_string>:
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	ec 01       	movw	r28, r24
    1d4a:	16 2f       	mov	r17, r22
    1d4c:	04 2f       	mov	r16, r20
    1d4e:	05 c0       	rjmp	.+10     	; 0x1d5a <draw_string+0x1a>
    1d50:	61 2f       	mov	r22, r17
    1d52:	40 2f       	mov	r20, r16
    1d54:	a5 df       	rcall	.-182    	; 0x1ca0 <draw_character>
    1d56:	21 96       	adiw	r28, 0x01	; 1
    1d58:	1b 5f       	subi	r17, 0xFB	; 251
    1d5a:	88 81       	ld	r24, Y
    1d5c:	88 23       	and	r24, r24
    1d5e:	c1 f7       	brne	.-16     	; 0x1d50 <draw_string+0x10>
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	1f 91       	pop	r17
    1d66:	0f 91       	pop	r16
    1d68:	08 95       	ret

00001d6a <refresh>:
    1d6a:	cf 93       	push	r28
    1d6c:	df 93       	push	r29
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	55 d0       	rcall	.+170    	; 0x1e1e <LCDPosition>
    1d74:	c0 ec       	ldi	r28, 0xC0	; 192
    1d76:	d1 e0       	ldi	r29, 0x01	; 1
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	69 91       	ld	r22, Y+
    1d7c:	07 d0       	rcall	.+14     	; 0x1d8c <LCDWrite>
    1d7e:	83 e0       	ldi	r24, 0x03	; 3
    1d80:	c8 3b       	cpi	r28, 0xB8	; 184
    1d82:	d8 07       	cpc	r29, r24
    1d84:	c9 f7       	brne	.-14     	; 0x1d78 <refresh+0xe>
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	08 95       	ret

00001d8c <LCDWrite>:
    1d8c:	95 b1       	in	r25, 0x05	; 5
    1d8e:	82 95       	swap	r24
    1d90:	88 0f       	add	r24, r24
    1d92:	80 7e       	andi	r24, 0xE0	; 224
    1d94:	9f 7d       	andi	r25, 0xDF	; 223
    1d96:	98 2b       	or	r25, r24
    1d98:	95 b9       	out	0x05, r25	; 5
    1d9a:	5f 98       	cbi	0x0b, 7	; 11
    1d9c:	27 e0       	ldi	r18, 0x07	; 7
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	70 e0       	ldi	r23, 0x00	; 0
    1da2:	8f 98       	cbi	0x11, 7	; 17
    1da4:	cb 01       	movw	r24, r22
    1da6:	02 2e       	mov	r0, r18
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <LCDWrite+0x22>
    1daa:	95 95       	asr	r25
    1dac:	87 95       	ror	r24
    1dae:	0a 94       	dec	r0
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <LCDWrite+0x1e>
    1db2:	80 ff       	sbrs	r24, 0
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <LCDWrite+0x2e>
    1db6:	2e 9a       	sbi	0x05, 6	; 5
    1db8:	01 c0       	rjmp	.+2      	; 0x1dbc <LCDWrite+0x30>
    1dba:	2e 98       	cbi	0x05, 6	; 5
    1dbc:	8f 9a       	sbi	0x11, 7	; 17
    1dbe:	21 50       	subi	r18, 0x01	; 1
    1dc0:	30 40       	sbci	r19, 0x00	; 0
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	2f 3f       	cpi	r18, 0xFF	; 255
    1dc6:	38 07       	cpc	r19, r24
    1dc8:	61 f7       	brne	.-40     	; 0x1da2 <LCDWrite+0x16>
    1dca:	5f 9a       	sbi	0x0b, 7	; 11
    1dcc:	08 95       	ret

00001dce <LCDInitialise>:
    1dce:	1f 93       	push	r17
    1dd0:	18 2f       	mov	r17, r24
    1dd2:	57 9a       	sbi	0x0a, 7	; 10
    1dd4:	24 9a       	sbi	0x04, 4	; 4
    1dd6:	25 9a       	sbi	0x04, 5	; 4
    1dd8:	26 9a       	sbi	0x04, 6	; 4
    1dda:	87 9a       	sbi	0x10, 7	; 16
    1ddc:	2c 98       	cbi	0x05, 4	; 5
    1dde:	5f 9a       	sbi	0x0b, 7	; 11
    1de0:	2c 9a       	sbi	0x05, 4	; 5
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	61 e2       	ldi	r22, 0x21	; 33
    1de6:	d2 df       	rcall	.-92     	; 0x1d8c <LCDWrite>
    1de8:	10 68       	ori	r17, 0x80	; 128
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	61 2f       	mov	r22, r17
    1dee:	ce df       	rcall	.-100    	; 0x1d8c <LCDWrite>
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	64 e0       	ldi	r22, 0x04	; 4
    1df4:	cb df       	rcall	.-106    	; 0x1d8c <LCDWrite>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	63 e1       	ldi	r22, 0x13	; 19
    1dfa:	c8 df       	rcall	.-112    	; 0x1d8c <LCDWrite>
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	6c e0       	ldi	r22, 0x0C	; 12
    1e00:	c5 df       	rcall	.-118    	; 0x1d8c <LCDWrite>
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	60 e2       	ldi	r22, 0x20	; 32
    1e06:	c2 df       	rcall	.-124    	; 0x1d8c <LCDWrite>
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	6c e0       	ldi	r22, 0x0C	; 12
    1e0c:	bf df       	rcall	.-130    	; 0x1d8c <LCDWrite>
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	60 e4       	ldi	r22, 0x40	; 64
    1e12:	bc df       	rcall	.-136    	; 0x1d8c <LCDWrite>
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	60 e8       	ldi	r22, 0x80	; 128
    1e18:	b9 df       	rcall	.-142    	; 0x1d8c <LCDWrite>
    1e1a:	1f 91       	pop	r17
    1e1c:	08 95       	ret

00001e1e <LCDPosition>:
    1e1e:	1f 93       	push	r17
    1e20:	18 2f       	mov	r17, r24
    1e22:	60 64       	ori	r22, 0x40	; 64
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	b2 df       	rcall	.-156    	; 0x1d8c <LCDWrite>
    1e28:	10 68       	ori	r17, 0x80	; 128
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	61 2f       	mov	r22, r17
    1e2e:	ae df       	rcall	.-164    	; 0x1d8c <LCDWrite>
    1e30:	1f 91       	pop	r17
    1e32:	08 95       	ret

00001e34 <init_sprite>:
    1e34:	8f 92       	push	r8
    1e36:	9f 92       	push	r9
    1e38:	af 92       	push	r10
    1e3a:	bf 92       	push	r11
    1e3c:	cf 92       	push	r12
    1e3e:	df 92       	push	r13
    1e40:	ef 92       	push	r14
    1e42:	ff 92       	push	r15
    1e44:	0f 93       	push	r16
    1e46:	1f 93       	push	r17
    1e48:	4c 01       	movw	r8, r24
    1e4a:	a4 2e       	mov	r10, r20
    1e4c:	12 2f       	mov	r17, r18
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	4d dc       	rcall	.-1894   	; 0x16f0 <__floatunsisf>
    1e56:	f4 01       	movw	r30, r8
    1e58:	60 83       	st	Z, r22
    1e5a:	71 83       	std	Z+1, r23	; 0x01
    1e5c:	82 83       	std	Z+2, r24	; 0x02
    1e5e:	93 83       	std	Z+3, r25	; 0x03
    1e60:	bb 24       	eor	r11, r11
    1e62:	cc 24       	eor	r12, r12
    1e64:	dd 24       	eor	r13, r13
    1e66:	c6 01       	movw	r24, r12
    1e68:	b5 01       	movw	r22, r10
    1e6a:	42 dc       	rcall	.-1916   	; 0x16f0 <__floatunsisf>
    1e6c:	f4 01       	movw	r30, r8
    1e6e:	64 83       	std	Z+4, r22	; 0x04
    1e70:	75 83       	std	Z+5, r23	; 0x05
    1e72:	86 83       	std	Z+6, r24	; 0x06
    1e74:	97 83       	std	Z+7, r25	; 0x07
    1e76:	10 87       	std	Z+8, r17	; 0x08
    1e78:	01 87       	std	Z+9, r16	; 0x09
    1e7a:	f4 86       	std	Z+12, r15	; 0x0c
    1e7c:	e3 86       	std	Z+11, r14	; 0x0b
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	ff 90       	pop	r15
    1e84:	ef 90       	pop	r14
    1e86:	df 90       	pop	r13
    1e88:	cf 90       	pop	r12
    1e8a:	bf 90       	pop	r11
    1e8c:	af 90       	pop	r10
    1e8e:	9f 90       	pop	r9
    1e90:	8f 90       	pop	r8
    1e92:	08 95       	ret

00001e94 <draw_sprite>:
    1e94:	2f 92       	push	r2
    1e96:	3f 92       	push	r3
    1e98:	4f 92       	push	r4
    1e9a:	5f 92       	push	r5
    1e9c:	7f 92       	push	r7
    1e9e:	8f 92       	push	r8
    1ea0:	9f 92       	push	r9
    1ea2:	af 92       	push	r10
    1ea4:	bf 92       	push	r11
    1ea6:	cf 92       	push	r12
    1ea8:	df 92       	push	r13
    1eaa:	ef 92       	push	r14
    1eac:	ff 92       	push	r15
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <draw_sprite+0x24>
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <draw_sprite+0x26>
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	2c 01       	movw	r4, r24
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	1a 96       	adiw	r26, 0x0a	; 10
    1ec4:	8c 91       	ld	r24, X
    1ec6:	88 23       	and	r24, r24
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <draw_sprite+0x38>
    1eca:	96 c0       	rjmp	.+300    	; 0x1ff8 <draw_sprite+0x164>
    1ecc:	22 24       	eor	r2, r2
    1ece:	33 24       	eor	r3, r3
    1ed0:	1a 82       	std	Y+2, r1	; 0x02
    1ed2:	19 82       	std	Y+1, r1	; 0x01
    1ed4:	87 c0       	rjmp	.+270    	; 0x1fe4 <draw_sprite+0x150>
    1ed6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eda:	bf 01       	movw	r22, r30
    1edc:	88 27       	eor	r24, r24
    1ede:	77 fd       	sbrc	r23, 7
    1ee0:	80 95       	com	r24
    1ee2:	98 2f       	mov	r25, r24
    1ee4:	07 dc       	rcall	.-2034   	; 0x16f4 <__floatsisf>
    1ee6:	d2 01       	movw	r26, r4
    1ee8:	14 96       	adiw	r26, 0x04	; 4
    1eea:	2d 91       	ld	r18, X+
    1eec:	3d 91       	ld	r19, X+
    1eee:	4d 91       	ld	r20, X+
    1ef0:	5c 91       	ld	r21, X
    1ef2:	17 97       	sbiw	r26, 0x07	; 7
    1ef4:	69 db       	rcall	.-2350   	; 0x15c8 <__addsf3>
    1ef6:	5b 01       	movw	r10, r22
    1ef8:	6c 01       	movw	r12, r24
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e0       	ldi	r20, 0x00	; 0
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	c6 db       	rcall	.-2164   	; 0x1690 <__cmpsf2>
    1f04:	87 fd       	sbrc	r24, 7
    1f06:	68 c0       	rjmp	.+208    	; 0x1fd8 <draw_sprite+0x144>
    1f08:	c6 01       	movw	r24, r12
    1f0a:	b5 01       	movw	r22, r10
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e4       	ldi	r20, 0x40	; 64
    1f12:	52 e4       	ldi	r21, 0x42	; 66
    1f14:	9f dc       	rcall	.-1730   	; 0x1854 <__gesf2>
    1f16:	87 ff       	sbrs	r24, 7
    1f18:	6f c0       	rjmp	.+222    	; 0x1ff8 <draw_sprite+0x164>
    1f1a:	1c 82       	std	Y+4, r1	; 0x04
    1f1c:	1b 82       	std	Y+3, r1	; 0x03
    1f1e:	45 c0       	rjmp	.+138    	; 0x1faa <draw_sprite+0x116>
    1f20:	d2 01       	movw	r26, r4
    1f22:	1b 96       	adiw	r26, 0x0b	; 11
    1f24:	ed 91       	ld	r30, X+
    1f26:	fc 91       	ld	r31, X
    1f28:	1c 97       	sbiw	r26, 0x0c	; 12
    1f2a:	e2 0d       	add	r30, r2
    1f2c:	f3 1d       	adc	r31, r3
    1f2e:	70 80       	ld	r7, Z
    1f30:	eb 81       	ldd	r30, Y+3	; 0x03
    1f32:	fc 81       	ldd	r31, Y+4	; 0x04
    1f34:	bf 01       	movw	r22, r30
    1f36:	88 27       	eor	r24, r24
    1f38:	77 fd       	sbrc	r23, 7
    1f3a:	80 95       	com	r24
    1f3c:	98 2f       	mov	r25, r24
    1f3e:	da db       	rcall	.-2124   	; 0x16f4 <__floatsisf>
    1f40:	d2 01       	movw	r26, r4
    1f42:	2d 91       	ld	r18, X+
    1f44:	3d 91       	ld	r19, X+
    1f46:	4d 91       	ld	r20, X+
    1f48:	5c 91       	ld	r21, X
    1f4a:	3e db       	rcall	.-2436   	; 0x15c8 <__addsf3>
    1f4c:	7b 01       	movw	r14, r22
    1f4e:	8c 01       	movw	r16, r24
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e0       	ldi	r20, 0x00	; 0
    1f56:	50 e0       	ldi	r21, 0x00	; 0
    1f58:	7d dc       	rcall	.-1798   	; 0x1854 <__gesf2>
    1f5a:	88 23       	and	r24, r24
    1f5c:	cc f0       	brlt	.+50     	; 0x1f90 <draw_sprite+0xfc>
    1f5e:	c8 01       	movw	r24, r16
    1f60:	b7 01       	movw	r22, r14
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	48 ea       	ldi	r20, 0xA8	; 168
    1f68:	52 e4       	ldi	r21, 0x42	; 66
    1f6a:	92 db       	rcall	.-2268   	; 0x1690 <__cmpsf2>
    1f6c:	88 23       	and	r24, r24
    1f6e:	84 f4       	brge	.+32     	; 0x1f90 <draw_sprite+0xfc>
    1f70:	78 20       	and	r7, r8
    1f72:	71 f0       	breq	.+28     	; 0x1f90 <draw_sprite+0xfc>
    1f74:	c8 01       	movw	r24, r16
    1f76:	b7 01       	movw	r22, r14
    1f78:	8f db       	rcall	.-2274   	; 0x1698 <__fixunssfsi>
    1f7a:	7b 01       	movw	r14, r22
    1f7c:	8c 01       	movw	r16, r24
    1f7e:	c6 01       	movw	r24, r12
    1f80:	b5 01       	movw	r22, r10
    1f82:	8a db       	rcall	.-2284   	; 0x1698 <__fixunssfsi>
    1f84:	9b 01       	movw	r18, r22
    1f86:	ac 01       	movw	r20, r24
    1f88:	8e 2d       	mov	r24, r14
    1f8a:	62 2f       	mov	r22, r18
    1f8c:	41 e0       	ldi	r20, 0x01	; 1
    1f8e:	6e dc       	rcall	.-1828   	; 0x186c <set_pixel>
    1f90:	eb 81       	ldd	r30, Y+3	; 0x03
    1f92:	fc 81       	ldd	r31, Y+4	; 0x04
    1f94:	31 96       	adiw	r30, 0x01	; 1
    1f96:	fc 83       	std	Y+4, r31	; 0x04
    1f98:	eb 83       	std	Y+3, r30	; 0x03
    1f9a:	cf 01       	movw	r24, r30
    1f9c:	87 70       	andi	r24, 0x07	; 7
    1f9e:	90 70       	andi	r25, 0x00	; 0
    1fa0:	89 2b       	or	r24, r25
    1fa2:	39 f4       	brne	.+14     	; 0x1fb2 <draw_sprite+0x11e>
    1fa4:	08 94       	sec
    1fa6:	21 1c       	adc	r2, r1
    1fa8:	31 1c       	adc	r3, r1
    1faa:	90 e8       	ldi	r25, 0x80	; 128
    1fac:	89 2e       	mov	r8, r25
    1fae:	91 2c       	mov	r9, r1
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <draw_sprite+0x122>
    1fb2:	95 94       	asr	r9
    1fb4:	87 94       	ror	r8
    1fb6:	d2 01       	movw	r26, r4
    1fb8:	18 96       	adiw	r26, 0x08	; 8
    1fba:	8c 91       	ld	r24, X
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	eb 81       	ldd	r30, Y+3	; 0x03
    1fc0:	fc 81       	ldd	r31, Y+4	; 0x04
    1fc2:	e8 17       	cp	r30, r24
    1fc4:	f9 07       	cpc	r31, r25
    1fc6:	0c f4       	brge	.+2      	; 0x1fca <draw_sprite+0x136>
    1fc8:	ab cf       	rjmp	.-170    	; 0x1f20 <draw_sprite+0x8c>
    1fca:	87 70       	andi	r24, 0x07	; 7
    1fcc:	90 70       	andi	r25, 0x00	; 0
    1fce:	89 2b       	or	r24, r25
    1fd0:	19 f0       	breq	.+6      	; 0x1fd8 <draw_sprite+0x144>
    1fd2:	08 94       	sec
    1fd4:	21 1c       	adc	r2, r1
    1fd6:	31 1c       	adc	r3, r1
    1fd8:	29 81       	ldd	r18, Y+1	; 0x01
    1fda:	3a 81       	ldd	r19, Y+2	; 0x02
    1fdc:	2f 5f       	subi	r18, 0xFF	; 255
    1fde:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe0:	3a 83       	std	Y+2, r19	; 0x02
    1fe2:	29 83       	std	Y+1, r18	; 0x01
    1fe4:	d2 01       	movw	r26, r4
    1fe6:	19 96       	adiw	r26, 0x09	; 9
    1fe8:	8c 91       	ld	r24, X
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	e9 81       	ldd	r30, Y+1	; 0x01
    1fee:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff0:	e8 17       	cp	r30, r24
    1ff2:	f9 07       	cpc	r31, r25
    1ff4:	0c f4       	brge	.+2      	; 0x1ff8 <draw_sprite+0x164>
    1ff6:	6f cf       	rjmp	.-290    	; 0x1ed6 <draw_sprite+0x42>
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	ff 90       	pop	r15
    200a:	ef 90       	pop	r14
    200c:	df 90       	pop	r13
    200e:	cf 90       	pop	r12
    2010:	bf 90       	pop	r11
    2012:	af 90       	pop	r10
    2014:	9f 90       	pop	r9
    2016:	8f 90       	pop	r8
    2018:	7f 90       	pop	r7
    201a:	5f 90       	pop	r5
    201c:	4f 90       	pop	r4
    201e:	3f 90       	pop	r3
    2020:	2f 90       	pop	r2
    2022:	08 95       	ret

00002024 <__divmodhi4>:
    2024:	97 fb       	bst	r25, 7
    2026:	09 2e       	mov	r0, r25
    2028:	07 26       	eor	r0, r23
    202a:	0a d0       	rcall	.+20     	; 0x2040 <__divmodhi4_neg1>
    202c:	77 fd       	sbrc	r23, 7
    202e:	04 d0       	rcall	.+8      	; 0x2038 <__divmodhi4_neg2>
    2030:	0c d0       	rcall	.+24     	; 0x204a <__udivmodhi4>
    2032:	06 d0       	rcall	.+12     	; 0x2040 <__divmodhi4_neg1>
    2034:	00 20       	and	r0, r0
    2036:	1a f4       	brpl	.+6      	; 0x203e <__divmodhi4_exit>

00002038 <__divmodhi4_neg2>:
    2038:	70 95       	com	r23
    203a:	61 95       	neg	r22
    203c:	7f 4f       	sbci	r23, 0xFF	; 255

0000203e <__divmodhi4_exit>:
    203e:	08 95       	ret

00002040 <__divmodhi4_neg1>:
    2040:	f6 f7       	brtc	.-4      	; 0x203e <__divmodhi4_exit>
    2042:	90 95       	com	r25
    2044:	81 95       	neg	r24
    2046:	9f 4f       	sbci	r25, 0xFF	; 255
    2048:	08 95       	ret

0000204a <__udivmodhi4>:
    204a:	aa 1b       	sub	r26, r26
    204c:	bb 1b       	sub	r27, r27
    204e:	51 e1       	ldi	r21, 0x11	; 17
    2050:	07 c0       	rjmp	.+14     	; 0x2060 <__udivmodhi4_ep>

00002052 <__udivmodhi4_loop>:
    2052:	aa 1f       	adc	r26, r26
    2054:	bb 1f       	adc	r27, r27
    2056:	a6 17       	cp	r26, r22
    2058:	b7 07       	cpc	r27, r23
    205a:	10 f0       	brcs	.+4      	; 0x2060 <__udivmodhi4_ep>
    205c:	a6 1b       	sub	r26, r22
    205e:	b7 0b       	sbc	r27, r23

00002060 <__udivmodhi4_ep>:
    2060:	88 1f       	adc	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	5a 95       	dec	r21
    2066:	a9 f7       	brne	.-22     	; 0x2052 <__udivmodhi4_loop>
    2068:	80 95       	com	r24
    206a:	90 95       	com	r25
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	08 95       	ret

00002072 <__prologue_saves__>:
    2072:	2f 92       	push	r2
    2074:	3f 92       	push	r3
    2076:	4f 92       	push	r4
    2078:	5f 92       	push	r5
    207a:	6f 92       	push	r6
    207c:	7f 92       	push	r7
    207e:	8f 92       	push	r8
    2080:	9f 92       	push	r9
    2082:	af 92       	push	r10
    2084:	bf 92       	push	r11
    2086:	cf 92       	push	r12
    2088:	df 92       	push	r13
    208a:	ef 92       	push	r14
    208c:	ff 92       	push	r15
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	ca 1b       	sub	r28, r26
    209c:	db 0b       	sbc	r29, r27
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	09 94       	ijmp

000020aa <__epilogue_restores__>:
    20aa:	2a 88       	ldd	r2, Y+18	; 0x12
    20ac:	39 88       	ldd	r3, Y+17	; 0x11
    20ae:	48 88       	ldd	r4, Y+16	; 0x10
    20b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    20b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    20b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    20b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    20b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    20ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    20bc:	b9 84       	ldd	r11, Y+9	; 0x09
    20be:	c8 84       	ldd	r12, Y+8	; 0x08
    20c0:	df 80       	ldd	r13, Y+7	; 0x07
    20c2:	ee 80       	ldd	r14, Y+6	; 0x06
    20c4:	fd 80       	ldd	r15, Y+5	; 0x05
    20c6:	0c 81       	ldd	r16, Y+4	; 0x04
    20c8:	1b 81       	ldd	r17, Y+3	; 0x03
    20ca:	aa 81       	ldd	r26, Y+2	; 0x02
    20cc:	b9 81       	ldd	r27, Y+1	; 0x01
    20ce:	ce 0f       	add	r28, r30
    20d0:	d1 1d       	adc	r29, r1
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	ed 01       	movw	r28, r26
    20de:	08 95       	ret

000020e0 <do_rand>:
    20e0:	a0 e0       	ldi	r26, 0x00	; 0
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e5 e7       	ldi	r30, 0x75	; 117
    20e6:	f0 e1       	ldi	r31, 0x10	; 16
    20e8:	cc cf       	rjmp	.-104    	; 0x2082 <__prologue_saves__+0x10>
    20ea:	ec 01       	movw	r28, r24
    20ec:	a8 80       	ld	r10, Y
    20ee:	b9 80       	ldd	r11, Y+1	; 0x01
    20f0:	ca 80       	ldd	r12, Y+2	; 0x02
    20f2:	db 80       	ldd	r13, Y+3	; 0x03
    20f4:	a1 14       	cp	r10, r1
    20f6:	b1 04       	cpc	r11, r1
    20f8:	c1 04       	cpc	r12, r1
    20fa:	d1 04       	cpc	r13, r1
    20fc:	41 f4       	brne	.+16     	; 0x210e <do_rand+0x2e>
    20fe:	84 e2       	ldi	r24, 0x24	; 36
    2100:	a8 2e       	mov	r10, r24
    2102:	89 ed       	ldi	r24, 0xD9	; 217
    2104:	b8 2e       	mov	r11, r24
    2106:	8b e5       	ldi	r24, 0x5B	; 91
    2108:	c8 2e       	mov	r12, r24
    210a:	87 e0       	ldi	r24, 0x07	; 7
    210c:	d8 2e       	mov	r13, r24
    210e:	c6 01       	movw	r24, r12
    2110:	b5 01       	movw	r22, r10
    2112:	2d e1       	ldi	r18, 0x1D	; 29
    2114:	33 ef       	ldi	r19, 0xF3	; 243
    2116:	41 e0       	ldi	r20, 0x01	; 1
    2118:	50 e0       	ldi	r21, 0x00	; 0
    211a:	58 d0       	rcall	.+176    	; 0x21cc <__divmodsi4>
    211c:	27 ea       	ldi	r18, 0xA7	; 167
    211e:	31 e4       	ldi	r19, 0x41	; 65
    2120:	40 e0       	ldi	r20, 0x00	; 0
    2122:	50 e0       	ldi	r21, 0x00	; 0
    2124:	34 d0       	rcall	.+104    	; 0x218e <__mulsi3>
    2126:	7b 01       	movw	r14, r22
    2128:	8c 01       	movw	r16, r24
    212a:	c6 01       	movw	r24, r12
    212c:	b5 01       	movw	r22, r10
    212e:	2d e1       	ldi	r18, 0x1D	; 29
    2130:	33 ef       	ldi	r19, 0xF3	; 243
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	50 e0       	ldi	r21, 0x00	; 0
    2136:	4a d0       	rcall	.+148    	; 0x21cc <__divmodsi4>
    2138:	ca 01       	movw	r24, r20
    213a:	b9 01       	movw	r22, r18
    213c:	2c ee       	ldi	r18, 0xEC	; 236
    213e:	34 ef       	ldi	r19, 0xF4	; 244
    2140:	4f ef       	ldi	r20, 0xFF	; 255
    2142:	5f ef       	ldi	r21, 0xFF	; 255
    2144:	24 d0       	rcall	.+72     	; 0x218e <__mulsi3>
    2146:	6e 0d       	add	r22, r14
    2148:	7f 1d       	adc	r23, r15
    214a:	80 1f       	adc	r24, r16
    214c:	91 1f       	adc	r25, r17
    214e:	97 ff       	sbrs	r25, 7
    2150:	04 c0       	rjmp	.+8      	; 0x215a <do_rand+0x7a>
    2152:	61 50       	subi	r22, 0x01	; 1
    2154:	70 40       	sbci	r23, 0x00	; 0
    2156:	80 40       	sbci	r24, 0x00	; 0
    2158:	90 48       	sbci	r25, 0x80	; 128
    215a:	68 83       	st	Y, r22
    215c:	79 83       	std	Y+1, r23	; 0x01
    215e:	8a 83       	std	Y+2, r24	; 0x02
    2160:	9b 83       	std	Y+3, r25	; 0x03
    2162:	9b 01       	movw	r18, r22
    2164:	3f 77       	andi	r19, 0x7F	; 127
    2166:	c9 01       	movw	r24, r18
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	ea e0       	ldi	r30, 0x0A	; 10
    216e:	a5 cf       	rjmp	.-182    	; 0x20ba <__epilogue_restores__+0x10>

00002170 <rand_r>:
    2170:	b7 cf       	rjmp	.-146    	; 0x20e0 <do_rand>

00002172 <rand>:
    2172:	8f e8       	ldi	r24, 0x8F	; 143
    2174:	91 e0       	ldi	r25, 0x01	; 1
    2176:	b4 cf       	rjmp	.-152    	; 0x20e0 <do_rand>

00002178 <srand>:
    2178:	a0 e0       	ldi	r26, 0x00	; 0
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	80 93 8f 01 	sts	0x018F, r24
    2180:	90 93 90 01 	sts	0x0190, r25
    2184:	a0 93 91 01 	sts	0x0191, r26
    2188:	b0 93 92 01 	sts	0x0192, r27
    218c:	08 95       	ret

0000218e <__mulsi3>:
    218e:	62 9f       	mul	r22, r18
    2190:	d0 01       	movw	r26, r0
    2192:	73 9f       	mul	r23, r19
    2194:	f0 01       	movw	r30, r0
    2196:	82 9f       	mul	r24, r18
    2198:	e0 0d       	add	r30, r0
    219a:	f1 1d       	adc	r31, r1
    219c:	64 9f       	mul	r22, r20
    219e:	e0 0d       	add	r30, r0
    21a0:	f1 1d       	adc	r31, r1
    21a2:	92 9f       	mul	r25, r18
    21a4:	f0 0d       	add	r31, r0
    21a6:	83 9f       	mul	r24, r19
    21a8:	f0 0d       	add	r31, r0
    21aa:	74 9f       	mul	r23, r20
    21ac:	f0 0d       	add	r31, r0
    21ae:	65 9f       	mul	r22, r21
    21b0:	f0 0d       	add	r31, r0
    21b2:	99 27       	eor	r25, r25
    21b4:	72 9f       	mul	r23, r18
    21b6:	b0 0d       	add	r27, r0
    21b8:	e1 1d       	adc	r30, r1
    21ba:	f9 1f       	adc	r31, r25
    21bc:	63 9f       	mul	r22, r19
    21be:	b0 0d       	add	r27, r0
    21c0:	e1 1d       	adc	r30, r1
    21c2:	f9 1f       	adc	r31, r25
    21c4:	bd 01       	movw	r22, r26
    21c6:	cf 01       	movw	r24, r30
    21c8:	11 24       	eor	r1, r1
    21ca:	08 95       	ret

000021cc <__divmodsi4>:
    21cc:	97 fb       	bst	r25, 7
    21ce:	09 2e       	mov	r0, r25
    21d0:	05 26       	eor	r0, r21
    21d2:	0e d0       	rcall	.+28     	; 0x21f0 <__divmodsi4_neg1>
    21d4:	57 fd       	sbrc	r21, 7
    21d6:	04 d0       	rcall	.+8      	; 0x21e0 <__divmodsi4_neg2>
    21d8:	14 d0       	rcall	.+40     	; 0x2202 <__udivmodsi4>
    21da:	0a d0       	rcall	.+20     	; 0x21f0 <__divmodsi4_neg1>
    21dc:	00 1c       	adc	r0, r0
    21de:	38 f4       	brcc	.+14     	; 0x21ee <__divmodsi4_exit>

000021e0 <__divmodsi4_neg2>:
    21e0:	50 95       	com	r21
    21e2:	40 95       	com	r20
    21e4:	30 95       	com	r19
    21e6:	21 95       	neg	r18
    21e8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ea:	4f 4f       	sbci	r20, 0xFF	; 255
    21ec:	5f 4f       	sbci	r21, 0xFF	; 255

000021ee <__divmodsi4_exit>:
    21ee:	08 95       	ret

000021f0 <__divmodsi4_neg1>:
    21f0:	f6 f7       	brtc	.-4      	; 0x21ee <__divmodsi4_exit>
    21f2:	90 95       	com	r25
    21f4:	80 95       	com	r24
    21f6:	70 95       	com	r23
    21f8:	61 95       	neg	r22
    21fa:	7f 4f       	sbci	r23, 0xFF	; 255
    21fc:	8f 4f       	sbci	r24, 0xFF	; 255
    21fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2200:	08 95       	ret

00002202 <__udivmodsi4>:
    2202:	a1 e2       	ldi	r26, 0x21	; 33
    2204:	1a 2e       	mov	r1, r26
    2206:	aa 1b       	sub	r26, r26
    2208:	bb 1b       	sub	r27, r27
    220a:	fd 01       	movw	r30, r26
    220c:	0d c0       	rjmp	.+26     	; 0x2228 <__udivmodsi4_ep>

0000220e <__udivmodsi4_loop>:
    220e:	aa 1f       	adc	r26, r26
    2210:	bb 1f       	adc	r27, r27
    2212:	ee 1f       	adc	r30, r30
    2214:	ff 1f       	adc	r31, r31
    2216:	a2 17       	cp	r26, r18
    2218:	b3 07       	cpc	r27, r19
    221a:	e4 07       	cpc	r30, r20
    221c:	f5 07       	cpc	r31, r21
    221e:	20 f0       	brcs	.+8      	; 0x2228 <__udivmodsi4_ep>
    2220:	a2 1b       	sub	r26, r18
    2222:	b3 0b       	sbc	r27, r19
    2224:	e4 0b       	sbc	r30, r20
    2226:	f5 0b       	sbc	r31, r21

00002228 <__udivmodsi4_ep>:
    2228:	66 1f       	adc	r22, r22
    222a:	77 1f       	adc	r23, r23
    222c:	88 1f       	adc	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	1a 94       	dec	r1
    2232:	69 f7       	brne	.-38     	; 0x220e <__udivmodsi4_loop>
    2234:	60 95       	com	r22
    2236:	70 95       	com	r23
    2238:	80 95       	com	r24
    223a:	90 95       	com	r25
    223c:	9b 01       	movw	r18, r22
    223e:	ac 01       	movw	r20, r24
    2240:	bd 01       	movw	r22, r26
    2242:	cf 01       	movw	r24, r30
    2244:	08 95       	ret

00002246 <_exit>:
    2246:	f8 94       	cli

00002248 <__stop_program>:
    2248:	ff cf       	rjmp	.-2      	; 0x2248 <__stop_program>
