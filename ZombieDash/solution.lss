
solution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  00003370  00003404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003370  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000246  008001f0  008001f0  000034f4  2**0
                  ALLOC
  3 .debug_aranges 00000208  00000000  00000000  000034f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000626  00000000  00000000  000036fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002696  00000000  00000000  00003d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d81  00000000  00000000  000063b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001fef  00000000  00000000  00007139  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  00009128  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000826  00000000  00000000  00009438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000177b  00000000  00000000  00009c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000278  00000000  00000000  0000b3d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c1       	rjmp	.+650    	; 0x28c <__ctors_end>
       2:	00 00       	nop
       4:	60 c1       	rjmp	.+704    	; 0x2c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c1       	rjmp	.+700    	; 0x2c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c1       	rjmp	.+696    	; 0x2c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c1       	rjmp	.+692    	; 0x2c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c1       	rjmp	.+688    	; 0x2c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c1       	rjmp	.+684    	; 0x2c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c1       	rjmp	.+680    	; 0x2c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c1       	rjmp	.+676    	; 0x2c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	81 c4       	rjmp	.+2306   	; 0x928 <__vector_9>
      26:	00 00       	nop
      28:	4e c1       	rjmp	.+668    	; 0x2c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c1       	rjmp	.+664    	; 0x2c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c1       	rjmp	.+660    	; 0x2c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c1       	rjmp	.+656    	; 0x2c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c1       	rjmp	.+652    	; 0x2c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c1       	rjmp	.+648    	; 0x2c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c1       	rjmp	.+644    	; 0x2c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c1       	rjmp	.+640    	; 0x2c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c1       	rjmp	.+636    	; 0x2c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c1       	rjmp	.+632    	; 0x2c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c1       	rjmp	.+628    	; 0x2c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c1       	rjmp	.+624    	; 0x2c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c1       	rjmp	.+620    	; 0x2c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__vector_23>
      60:	32 c1       	rjmp	.+612    	; 0x2c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c1       	rjmp	.+608    	; 0x2c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c1       	rjmp	.+604    	; 0x2c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c1       	rjmp	.+600    	; 0x2c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c1       	rjmp	.+596    	; 0x2c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c1       	rjmp	.+592    	; 0x2c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c1       	rjmp	.+588    	; 0x2c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c1       	rjmp	.+584    	; 0x2c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c1       	rjmp	.+580    	; 0x2c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c1       	rjmp	.+576    	; 0x2c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c1       	rjmp	.+572    	; 0x2c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1c c1       	rjmp	.+568    	; 0x2c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1a c1       	rjmp	.+564    	; 0x2c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	18 c1       	rjmp	.+560    	; 0x2c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	16 c1       	rjmp	.+556    	; 0x2c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	14 c1       	rjmp	.+552    	; 0x2c6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	12 c1       	rjmp	.+548    	; 0x2c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	10 c1       	rjmp	.+544    	; 0x2c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0e c1       	rjmp	.+540    	; 0x2c6 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ASCII>:
      ac:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      bc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      cc:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      dc:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      ec:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      fc:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     10c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     11c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     12c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     13c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     14c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     15c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     16c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     17c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     18c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     19c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1ac:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1bc:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1cc:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1dc:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1ec:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1fc:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     20c:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     21c:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     22c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     23c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     24c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     25c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     26c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     27c:	00 00 41 36 08 00 10 08 08 10 08 78 46 41 46 78     ..A6.......xFAFx

0000028c <__ctors_end>:
     28c:	11 24       	eor	r1, r1
     28e:	1f be       	out	0x3f, r1	; 63
     290:	cf ef       	ldi	r28, 0xFF	; 255
     292:	da e0       	ldi	r29, 0x0A	; 10
     294:	de bf       	out	0x3e, r29	; 62
     296:	cd bf       	out	0x3d, r28	; 61

00000298 <__do_copy_data>:
     298:	11 e0       	ldi	r17, 0x01	; 1
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b1 e0       	ldi	r27, 0x01	; 1
     29e:	e0 e7       	ldi	r30, 0x70	; 112
     2a0:	f3 e3       	ldi	r31, 0x33	; 51
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <.do_copy_data_start>

000002a4 <.do_copy_data_loop>:
     2a4:	05 90       	lpm	r0, Z+
     2a6:	0d 92       	st	X+, r0

000002a8 <.do_copy_data_start>:
     2a8:	a0 3f       	cpi	r26, 0xF0	; 240
     2aa:	b1 07       	cpc	r27, r17
     2ac:	d9 f7       	brne	.-10     	; 0x2a4 <.do_copy_data_loop>

000002ae <__do_clear_bss>:
     2ae:	14 e0       	ldi	r17, 0x04	; 4
     2b0:	a0 ef       	ldi	r26, 0xF0	; 240
     2b2:	b1 e0       	ldi	r27, 0x01	; 1
     2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <.do_clear_bss_start>

000002b6 <.do_clear_bss_loop>:
     2b6:	1d 92       	st	X+, r1

000002b8 <.do_clear_bss_start>:
     2b8:	a6 33       	cpi	r26, 0x36	; 54
     2ba:	b1 07       	cpc	r27, r17
     2bc:	e1 f7       	brne	.-8      	; 0x2b6 <.do_clear_bss_loop>
     2be:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <main>
     2c2:	0c 94 b6 19 	jmp	0x336c	; 0x336c <_exit>

000002c6 <__bad_interrupt>:
     2c6:	9c ce       	rjmp	.-712    	; 0x0 <__vectors>

000002c8 <__mulsf3>:
     2c8:	a0 e2       	ldi	r26, 0x20	; 32
     2ca:	b0 e0       	ldi	r27, 0x00	; 0
     2cc:	ea e6       	ldi	r30, 0x6A	; 106
     2ce:	f1 e0       	ldi	r31, 0x01	; 1
     2d0:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__prologue_saves__>
     2d4:	69 83       	std	Y+1, r22	; 0x01
     2d6:	7a 83       	std	Y+2, r23	; 0x02
     2d8:	8b 83       	std	Y+3, r24	; 0x03
     2da:	9c 83       	std	Y+4, r25	; 0x04
     2dc:	2d 83       	std	Y+5, r18	; 0x05
     2de:	3e 83       	std	Y+6, r19	; 0x06
     2e0:	4f 83       	std	Y+7, r20	; 0x07
     2e2:	58 87       	std	Y+8, r21	; 0x08
     2e4:	ce 01       	movw	r24, r28
     2e6:	01 96       	adiw	r24, 0x01	; 1
     2e8:	be 01       	movw	r22, r28
     2ea:	67 5f       	subi	r22, 0xF7	; 247
     2ec:	7f 4f       	sbci	r23, 0xFF	; 255
     2ee:	61 d2       	rcall	.+1218   	; 0x7b2 <__unpack_f>
     2f0:	ce 01       	movw	r24, r28
     2f2:	05 96       	adiw	r24, 0x05	; 5
     2f4:	be 01       	movw	r22, r28
     2f6:	6f 5e       	subi	r22, 0xEF	; 239
     2f8:	7f 4f       	sbci	r23, 0xFF	; 255
     2fa:	5b d2       	rcall	.+1206   	; 0x7b2 <__unpack_f>
     2fc:	99 85       	ldd	r25, Y+9	; 0x09
     2fe:	92 30       	cpi	r25, 0x02	; 2
     300:	88 f0       	brcs	.+34     	; 0x324 <__mulsf3+0x5c>
     302:	89 89       	ldd	r24, Y+17	; 0x11
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	c8 f0       	brcs	.+50     	; 0x33a <__mulsf3+0x72>
     308:	94 30       	cpi	r25, 0x04	; 4
     30a:	19 f4       	brne	.+6      	; 0x312 <__mulsf3+0x4a>
     30c:	82 30       	cpi	r24, 0x02	; 2
     30e:	51 f4       	brne	.+20     	; 0x324 <__mulsf3+0x5c>
     310:	04 c0       	rjmp	.+8      	; 0x31a <__mulsf3+0x52>
     312:	84 30       	cpi	r24, 0x04	; 4
     314:	29 f4       	brne	.+10     	; 0x320 <__mulsf3+0x58>
     316:	92 30       	cpi	r25, 0x02	; 2
     318:	81 f4       	brne	.+32     	; 0x33a <__mulsf3+0x72>
     31a:	83 ee       	ldi	r24, 0xE3	; 227
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	c6 c0       	rjmp	.+396    	; 0x4ac <__mulsf3+0x1e4>
     320:	92 30       	cpi	r25, 0x02	; 2
     322:	49 f4       	brne	.+18     	; 0x336 <__mulsf3+0x6e>
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	9a 85       	ldd	r25, Y+10	; 0x0a
     328:	8a 89       	ldd	r24, Y+18	; 0x12
     32a:	98 13       	cpse	r25, r24
     32c:	21 e0       	ldi	r18, 0x01	; 1
     32e:	2a 87       	std	Y+10, r18	; 0x0a
     330:	ce 01       	movw	r24, r28
     332:	09 96       	adiw	r24, 0x09	; 9
     334:	bb c0       	rjmp	.+374    	; 0x4ac <__mulsf3+0x1e4>
     336:	82 30       	cpi	r24, 0x02	; 2
     338:	49 f4       	brne	.+18     	; 0x34c <__mulsf3+0x84>
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	9a 85       	ldd	r25, Y+10	; 0x0a
     33e:	8a 89       	ldd	r24, Y+18	; 0x12
     340:	98 13       	cpse	r25, r24
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	2a 8b       	std	Y+18, r18	; 0x12
     346:	ce 01       	movw	r24, r28
     348:	41 96       	adiw	r24, 0x11	; 17
     34a:	b0 c0       	rjmp	.+352    	; 0x4ac <__mulsf3+0x1e4>
     34c:	2d 84       	ldd	r2, Y+13	; 0x0d
     34e:	3e 84       	ldd	r3, Y+14	; 0x0e
     350:	4f 84       	ldd	r4, Y+15	; 0x0f
     352:	58 88       	ldd	r5, Y+16	; 0x10
     354:	6d 88       	ldd	r6, Y+21	; 0x15
     356:	7e 88       	ldd	r7, Y+22	; 0x16
     358:	8f 88       	ldd	r8, Y+23	; 0x17
     35a:	98 8c       	ldd	r9, Y+24	; 0x18
     35c:	ee 24       	eor	r14, r14
     35e:	ff 24       	eor	r15, r15
     360:	87 01       	movw	r16, r14
     362:	aa 24       	eor	r10, r10
     364:	bb 24       	eor	r11, r11
     366:	65 01       	movw	r12, r10
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	e0 e0       	ldi	r30, 0x00	; 0
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	c1 01       	movw	r24, r2
     376:	81 70       	andi	r24, 0x01	; 1
     378:	90 70       	andi	r25, 0x00	; 0
     37a:	89 2b       	or	r24, r25
     37c:	e9 f0       	breq	.+58     	; 0x3b8 <__mulsf3+0xf0>
     37e:	e6 0c       	add	r14, r6
     380:	f7 1c       	adc	r15, r7
     382:	08 1d       	adc	r16, r8
     384:	19 1d       	adc	r17, r9
     386:	9a 01       	movw	r18, r20
     388:	ab 01       	movw	r20, r22
     38a:	2a 0d       	add	r18, r10
     38c:	3b 1d       	adc	r19, r11
     38e:	4c 1d       	adc	r20, r12
     390:	5d 1d       	adc	r21, r13
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	a0 e0       	ldi	r26, 0x00	; 0
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e6 14       	cp	r14, r6
     39c:	f7 04       	cpc	r15, r7
     39e:	08 05       	cpc	r16, r8
     3a0:	19 05       	cpc	r17, r9
     3a2:	20 f4       	brcc	.+8      	; 0x3ac <__mulsf3+0xe4>
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	a0 e0       	ldi	r26, 0x00	; 0
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	ba 01       	movw	r22, r20
     3ae:	a9 01       	movw	r20, r18
     3b0:	48 0f       	add	r20, r24
     3b2:	59 1f       	adc	r21, r25
     3b4:	6a 1f       	adc	r22, r26
     3b6:	7b 1f       	adc	r23, r27
     3b8:	aa 0c       	add	r10, r10
     3ba:	bb 1c       	adc	r11, r11
     3bc:	cc 1c       	adc	r12, r12
     3be:	dd 1c       	adc	r13, r13
     3c0:	97 fe       	sbrs	r9, 7
     3c2:	08 c0       	rjmp	.+16     	; 0x3d4 <__mulsf3+0x10c>
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	a8 2a       	or	r10, r24
     3ce:	b9 2a       	or	r11, r25
     3d0:	ca 2a       	or	r12, r26
     3d2:	db 2a       	or	r13, r27
     3d4:	31 96       	adiw	r30, 0x01	; 1
     3d6:	e0 32       	cpi	r30, 0x20	; 32
     3d8:	f1 05       	cpc	r31, r1
     3da:	49 f0       	breq	.+18     	; 0x3ee <__mulsf3+0x126>
     3dc:	66 0c       	add	r6, r6
     3de:	77 1c       	adc	r7, r7
     3e0:	88 1c       	adc	r8, r8
     3e2:	99 1c       	adc	r9, r9
     3e4:	56 94       	lsr	r5
     3e6:	47 94       	ror	r4
     3e8:	37 94       	ror	r3
     3ea:	27 94       	ror	r2
     3ec:	c3 cf       	rjmp	.-122    	; 0x374 <__mulsf3+0xac>
     3ee:	fa 85       	ldd	r31, Y+10	; 0x0a
     3f0:	ea 89       	ldd	r30, Y+18	; 0x12
     3f2:	2b 89       	ldd	r18, Y+19	; 0x13
     3f4:	3c 89       	ldd	r19, Y+20	; 0x14
     3f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3f8:	9c 85       	ldd	r25, Y+12	; 0x0c
     3fa:	28 0f       	add	r18, r24
     3fc:	39 1f       	adc	r19, r25
     3fe:	2e 5f       	subi	r18, 0xFE	; 254
     400:	3f 4f       	sbci	r19, 0xFF	; 255
     402:	17 c0       	rjmp	.+46     	; 0x432 <__mulsf3+0x16a>
     404:	ca 01       	movw	r24, r20
     406:	81 70       	andi	r24, 0x01	; 1
     408:	90 70       	andi	r25, 0x00	; 0
     40a:	89 2b       	or	r24, r25
     40c:	61 f0       	breq	.+24     	; 0x426 <__mulsf3+0x15e>
     40e:	16 95       	lsr	r17
     410:	07 95       	ror	r16
     412:	f7 94       	ror	r15
     414:	e7 94       	ror	r14
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	a0 e0       	ldi	r26, 0x00	; 0
     41c:	b0 e8       	ldi	r27, 0x80	; 128
     41e:	e8 2a       	or	r14, r24
     420:	f9 2a       	or	r15, r25
     422:	0a 2b       	or	r16, r26
     424:	1b 2b       	or	r17, r27
     426:	76 95       	lsr	r23
     428:	67 95       	ror	r22
     42a:	57 95       	ror	r21
     42c:	47 95       	ror	r20
     42e:	2f 5f       	subi	r18, 0xFF	; 255
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	77 fd       	sbrc	r23, 7
     434:	e7 cf       	rjmp	.-50     	; 0x404 <__mulsf3+0x13c>
     436:	0c c0       	rjmp	.+24     	; 0x450 <__mulsf3+0x188>
     438:	44 0f       	add	r20, r20
     43a:	55 1f       	adc	r21, r21
     43c:	66 1f       	adc	r22, r22
     43e:	77 1f       	adc	r23, r23
     440:	17 fd       	sbrc	r17, 7
     442:	41 60       	ori	r20, 0x01	; 1
     444:	ee 0c       	add	r14, r14
     446:	ff 1c       	adc	r15, r15
     448:	00 1f       	adc	r16, r16
     44a:	11 1f       	adc	r17, r17
     44c:	21 50       	subi	r18, 0x01	; 1
     44e:	30 40       	sbci	r19, 0x00	; 0
     450:	40 30       	cpi	r20, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	59 07       	cpc	r21, r25
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	69 07       	cpc	r22, r25
     45a:	90 e4       	ldi	r25, 0x40	; 64
     45c:	79 07       	cpc	r23, r25
     45e:	60 f3       	brcs	.-40     	; 0x438 <__mulsf3+0x170>
     460:	2b 8f       	std	Y+27, r18	; 0x1b
     462:	3c 8f       	std	Y+28, r19	; 0x1c
     464:	db 01       	movw	r26, r22
     466:	ca 01       	movw	r24, r20
     468:	8f 77       	andi	r24, 0x7F	; 127
     46a:	90 70       	andi	r25, 0x00	; 0
     46c:	a0 70       	andi	r26, 0x00	; 0
     46e:	b0 70       	andi	r27, 0x00	; 0
     470:	80 34       	cpi	r24, 0x40	; 64
     472:	91 05       	cpc	r25, r1
     474:	a1 05       	cpc	r26, r1
     476:	b1 05       	cpc	r27, r1
     478:	61 f4       	brne	.+24     	; 0x492 <__mulsf3+0x1ca>
     47a:	47 fd       	sbrc	r20, 7
     47c:	0a c0       	rjmp	.+20     	; 0x492 <__mulsf3+0x1ca>
     47e:	e1 14       	cp	r14, r1
     480:	f1 04       	cpc	r15, r1
     482:	01 05       	cpc	r16, r1
     484:	11 05       	cpc	r17, r1
     486:	29 f0       	breq	.+10     	; 0x492 <__mulsf3+0x1ca>
     488:	40 5c       	subi	r20, 0xC0	; 192
     48a:	5f 4f       	sbci	r21, 0xFF	; 255
     48c:	6f 4f       	sbci	r22, 0xFF	; 255
     48e:	7f 4f       	sbci	r23, 0xFF	; 255
     490:	40 78       	andi	r20, 0x80	; 128
     492:	1a 8e       	std	Y+26, r1	; 0x1a
     494:	fe 17       	cp	r31, r30
     496:	11 f0       	breq	.+4      	; 0x49c <__mulsf3+0x1d4>
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	8a 8f       	std	Y+26, r24	; 0x1a
     49c:	4d 8f       	std	Y+29, r20	; 0x1d
     49e:	5e 8f       	std	Y+30, r21	; 0x1e
     4a0:	6f 8f       	std	Y+31, r22	; 0x1f
     4a2:	78 a3       	std	Y+32, r23	; 0x20
     4a4:	83 e0       	ldi	r24, 0x03	; 3
     4a6:	89 8f       	std	Y+25, r24	; 0x19
     4a8:	ce 01       	movw	r24, r28
     4aa:	49 96       	adiw	r24, 0x19	; 25
     4ac:	ad d0       	rcall	.+346    	; 0x608 <__pack_f>
     4ae:	a0 96       	adiw	r28, 0x20	; 32
     4b0:	e2 e1       	ldi	r30, 0x12	; 18
     4b2:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__epilogue_restores__>

000004b6 <__divsf3>:
     4b6:	a8 e1       	ldi	r26, 0x18	; 24
     4b8:	b0 e0       	ldi	r27, 0x00	; 0
     4ba:	e1 e6       	ldi	r30, 0x61	; 97
     4bc:	f2 e0       	ldi	r31, 0x02	; 2
     4be:	0c 94 d4 18 	jmp	0x31a8	; 0x31a8 <__prologue_saves__+0x10>
     4c2:	69 83       	std	Y+1, r22	; 0x01
     4c4:	7a 83       	std	Y+2, r23	; 0x02
     4c6:	8b 83       	std	Y+3, r24	; 0x03
     4c8:	9c 83       	std	Y+4, r25	; 0x04
     4ca:	2d 83       	std	Y+5, r18	; 0x05
     4cc:	3e 83       	std	Y+6, r19	; 0x06
     4ce:	4f 83       	std	Y+7, r20	; 0x07
     4d0:	58 87       	std	Y+8, r21	; 0x08
     4d2:	b9 e0       	ldi	r27, 0x09	; 9
     4d4:	eb 2e       	mov	r14, r27
     4d6:	f1 2c       	mov	r15, r1
     4d8:	ec 0e       	add	r14, r28
     4da:	fd 1e       	adc	r15, r29
     4dc:	ce 01       	movw	r24, r28
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	b7 01       	movw	r22, r14
     4e2:	67 d1       	rcall	.+718    	; 0x7b2 <__unpack_f>
     4e4:	8e 01       	movw	r16, r28
     4e6:	0f 5e       	subi	r16, 0xEF	; 239
     4e8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ea:	ce 01       	movw	r24, r28
     4ec:	05 96       	adiw	r24, 0x05	; 5
     4ee:	b8 01       	movw	r22, r16
     4f0:	60 d1       	rcall	.+704    	; 0x7b2 <__unpack_f>
     4f2:	29 85       	ldd	r18, Y+9	; 0x09
     4f4:	22 30       	cpi	r18, 0x02	; 2
     4f6:	08 f4       	brcc	.+2      	; 0x4fa <__divsf3+0x44>
     4f8:	7e c0       	rjmp	.+252    	; 0x5f6 <__divsf3+0x140>
     4fa:	39 89       	ldd	r19, Y+17	; 0x11
     4fc:	32 30       	cpi	r19, 0x02	; 2
     4fe:	10 f4       	brcc	.+4      	; 0x504 <__divsf3+0x4e>
     500:	b8 01       	movw	r22, r16
     502:	7c c0       	rjmp	.+248    	; 0x5fc <__divsf3+0x146>
     504:	8a 85       	ldd	r24, Y+10	; 0x0a
     506:	9a 89       	ldd	r25, Y+18	; 0x12
     508:	89 27       	eor	r24, r25
     50a:	8a 87       	std	Y+10, r24	; 0x0a
     50c:	24 30       	cpi	r18, 0x04	; 4
     50e:	11 f0       	breq	.+4      	; 0x514 <__divsf3+0x5e>
     510:	22 30       	cpi	r18, 0x02	; 2
     512:	31 f4       	brne	.+12     	; 0x520 <__divsf3+0x6a>
     514:	23 17       	cp	r18, r19
     516:	09 f0       	breq	.+2      	; 0x51a <__divsf3+0x64>
     518:	6e c0       	rjmp	.+220    	; 0x5f6 <__divsf3+0x140>
     51a:	63 ee       	ldi	r22, 0xE3	; 227
     51c:	71 e0       	ldi	r23, 0x01	; 1
     51e:	6e c0       	rjmp	.+220    	; 0x5fc <__divsf3+0x146>
     520:	34 30       	cpi	r19, 0x04	; 4
     522:	39 f4       	brne	.+14     	; 0x532 <__divsf3+0x7c>
     524:	1d 86       	std	Y+13, r1	; 0x0d
     526:	1e 86       	std	Y+14, r1	; 0x0e
     528:	1f 86       	std	Y+15, r1	; 0x0f
     52a:	18 8a       	std	Y+16, r1	; 0x10
     52c:	1c 86       	std	Y+12, r1	; 0x0c
     52e:	1b 86       	std	Y+11, r1	; 0x0b
     530:	04 c0       	rjmp	.+8      	; 0x53a <__divsf3+0x84>
     532:	32 30       	cpi	r19, 0x02	; 2
     534:	21 f4       	brne	.+8      	; 0x53e <__divsf3+0x88>
     536:	84 e0       	ldi	r24, 0x04	; 4
     538:	89 87       	std	Y+9, r24	; 0x09
     53a:	b7 01       	movw	r22, r14
     53c:	5f c0       	rjmp	.+190    	; 0x5fc <__divsf3+0x146>
     53e:	2b 85       	ldd	r18, Y+11	; 0x0b
     540:	3c 85       	ldd	r19, Y+12	; 0x0c
     542:	8b 89       	ldd	r24, Y+19	; 0x13
     544:	9c 89       	ldd	r25, Y+20	; 0x14
     546:	28 1b       	sub	r18, r24
     548:	39 0b       	sbc	r19, r25
     54a:	3c 87       	std	Y+12, r19	; 0x0c
     54c:	2b 87       	std	Y+11, r18	; 0x0b
     54e:	ed 84       	ldd	r14, Y+13	; 0x0d
     550:	fe 84       	ldd	r15, Y+14	; 0x0e
     552:	0f 85       	ldd	r16, Y+15	; 0x0f
     554:	18 89       	ldd	r17, Y+16	; 0x10
     556:	ad 88       	ldd	r10, Y+21	; 0x15
     558:	be 88       	ldd	r11, Y+22	; 0x16
     55a:	cf 88       	ldd	r12, Y+23	; 0x17
     55c:	d8 8c       	ldd	r13, Y+24	; 0x18
     55e:	ea 14       	cp	r14, r10
     560:	fb 04       	cpc	r15, r11
     562:	0c 05       	cpc	r16, r12
     564:	1d 05       	cpc	r17, r13
     566:	40 f4       	brcc	.+16     	; 0x578 <__divsf3+0xc2>
     568:	ee 0c       	add	r14, r14
     56a:	ff 1c       	adc	r15, r15
     56c:	00 1f       	adc	r16, r16
     56e:	11 1f       	adc	r17, r17
     570:	21 50       	subi	r18, 0x01	; 1
     572:	30 40       	sbci	r19, 0x00	; 0
     574:	3c 87       	std	Y+12, r19	; 0x0c
     576:	2b 87       	std	Y+11, r18	; 0x0b
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e4       	ldi	r27, 0x40	; 64
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	ea 14       	cp	r14, r10
     58e:	fb 04       	cpc	r15, r11
     590:	0c 05       	cpc	r16, r12
     592:	1d 05       	cpc	r17, r13
     594:	40 f0       	brcs	.+16     	; 0x5a6 <__divsf3+0xf0>
     596:	28 2b       	or	r18, r24
     598:	39 2b       	or	r19, r25
     59a:	4a 2b       	or	r20, r26
     59c:	5b 2b       	or	r21, r27
     59e:	ea 18       	sub	r14, r10
     5a0:	fb 08       	sbc	r15, r11
     5a2:	0c 09       	sbc	r16, r12
     5a4:	1d 09       	sbc	r17, r13
     5a6:	b6 95       	lsr	r27
     5a8:	a7 95       	ror	r26
     5aa:	97 95       	ror	r25
     5ac:	87 95       	ror	r24
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	6f 5f       	subi	r22, 0xFF	; 255
     5b8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ba:	6f 31       	cpi	r22, 0x1F	; 31
     5bc:	71 05       	cpc	r23, r1
     5be:	31 f7       	brne	.-52     	; 0x58c <__divsf3+0xd6>
     5c0:	da 01       	movw	r26, r20
     5c2:	c9 01       	movw	r24, r18
     5c4:	8f 77       	andi	r24, 0x7F	; 127
     5c6:	90 70       	andi	r25, 0x00	; 0
     5c8:	a0 70       	andi	r26, 0x00	; 0
     5ca:	b0 70       	andi	r27, 0x00	; 0
     5cc:	80 34       	cpi	r24, 0x40	; 64
     5ce:	91 05       	cpc	r25, r1
     5d0:	a1 05       	cpc	r26, r1
     5d2:	b1 05       	cpc	r27, r1
     5d4:	61 f4       	brne	.+24     	; 0x5ee <__divsf3+0x138>
     5d6:	27 fd       	sbrc	r18, 7
     5d8:	0a c0       	rjmp	.+20     	; 0x5ee <__divsf3+0x138>
     5da:	e1 14       	cp	r14, r1
     5dc:	f1 04       	cpc	r15, r1
     5de:	01 05       	cpc	r16, r1
     5e0:	11 05       	cpc	r17, r1
     5e2:	29 f0       	breq	.+10     	; 0x5ee <__divsf3+0x138>
     5e4:	20 5c       	subi	r18, 0xC0	; 192
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	4f 4f       	sbci	r20, 0xFF	; 255
     5ea:	5f 4f       	sbci	r21, 0xFF	; 255
     5ec:	20 78       	andi	r18, 0x80	; 128
     5ee:	2d 87       	std	Y+13, r18	; 0x0d
     5f0:	3e 87       	std	Y+14, r19	; 0x0e
     5f2:	4f 87       	std	Y+15, r20	; 0x0f
     5f4:	58 8b       	std	Y+16, r21	; 0x10
     5f6:	be 01       	movw	r22, r28
     5f8:	67 5f       	subi	r22, 0xF7	; 247
     5fa:	7f 4f       	sbci	r23, 0xFF	; 255
     5fc:	cb 01       	movw	r24, r22
     5fe:	04 d0       	rcall	.+8      	; 0x608 <__pack_f>
     600:	68 96       	adiw	r28, 0x18	; 24
     602:	ea e0       	ldi	r30, 0x0A	; 10
     604:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <__epilogue_restores__+0x10>

00000608 <__pack_f>:
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	fc 01       	movw	r30, r24
     614:	e4 80       	ldd	r14, Z+4	; 0x04
     616:	f5 80       	ldd	r15, Z+5	; 0x05
     618:	06 81       	ldd	r16, Z+6	; 0x06
     61a:	17 81       	ldd	r17, Z+7	; 0x07
     61c:	d1 80       	ldd	r13, Z+1	; 0x01
     61e:	80 81       	ld	r24, Z
     620:	82 30       	cpi	r24, 0x02	; 2
     622:	48 f4       	brcc	.+18     	; 0x636 <__pack_f+0x2e>
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	a0 e1       	ldi	r26, 0x10	; 16
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	e8 2a       	or	r14, r24
     62e:	f9 2a       	or	r15, r25
     630:	0a 2b       	or	r16, r26
     632:	1b 2b       	or	r17, r27
     634:	a5 c0       	rjmp	.+330    	; 0x780 <__pack_f+0x178>
     636:	84 30       	cpi	r24, 0x04	; 4
     638:	09 f4       	brne	.+2      	; 0x63c <__pack_f+0x34>
     63a:	9f c0       	rjmp	.+318    	; 0x77a <__pack_f+0x172>
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	21 f4       	brne	.+8      	; 0x648 <__pack_f+0x40>
     640:	ee 24       	eor	r14, r14
     642:	ff 24       	eor	r15, r15
     644:	87 01       	movw	r16, r14
     646:	05 c0       	rjmp	.+10     	; 0x652 <__pack_f+0x4a>
     648:	e1 14       	cp	r14, r1
     64a:	f1 04       	cpc	r15, r1
     64c:	01 05       	cpc	r16, r1
     64e:	11 05       	cpc	r17, r1
     650:	19 f4       	brne	.+6      	; 0x658 <__pack_f+0x50>
     652:	e0 e0       	ldi	r30, 0x00	; 0
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	96 c0       	rjmp	.+300    	; 0x784 <__pack_f+0x17c>
     658:	62 81       	ldd	r22, Z+2	; 0x02
     65a:	73 81       	ldd	r23, Z+3	; 0x03
     65c:	9f ef       	ldi	r25, 0xFF	; 255
     65e:	62 38       	cpi	r22, 0x82	; 130
     660:	79 07       	cpc	r23, r25
     662:	0c f0       	brlt	.+2      	; 0x666 <__pack_f+0x5e>
     664:	5b c0       	rjmp	.+182    	; 0x71c <__pack_f+0x114>
     666:	22 e8       	ldi	r18, 0x82	; 130
     668:	3f ef       	ldi	r19, 0xFF	; 255
     66a:	26 1b       	sub	r18, r22
     66c:	37 0b       	sbc	r19, r23
     66e:	2a 31       	cpi	r18, 0x1A	; 26
     670:	31 05       	cpc	r19, r1
     672:	2c f0       	brlt	.+10     	; 0x67e <__pack_f+0x76>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	2a c0       	rjmp	.+84     	; 0x6d2 <__pack_f+0xca>
     67e:	b8 01       	movw	r22, r16
     680:	a7 01       	movw	r20, r14
     682:	02 2e       	mov	r0, r18
     684:	04 c0       	rjmp	.+8      	; 0x68e <__pack_f+0x86>
     686:	76 95       	lsr	r23
     688:	67 95       	ror	r22
     68a:	57 95       	ror	r21
     68c:	47 95       	ror	r20
     68e:	0a 94       	dec	r0
     690:	d2 f7       	brpl	.-12     	; 0x686 <__pack_f+0x7e>
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	a0 e0       	ldi	r26, 0x00	; 0
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	04 c0       	rjmp	.+8      	; 0x6a4 <__pack_f+0x9c>
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	aa 1f       	adc	r26, r26
     6a2:	bb 1f       	adc	r27, r27
     6a4:	2a 95       	dec	r18
     6a6:	d2 f7       	brpl	.-12     	; 0x69c <__pack_f+0x94>
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	a1 09       	sbc	r26, r1
     6ac:	b1 09       	sbc	r27, r1
     6ae:	8e 21       	and	r24, r14
     6b0:	9f 21       	and	r25, r15
     6b2:	a0 23       	and	r26, r16
     6b4:	b1 23       	and	r27, r17
     6b6:	00 97       	sbiw	r24, 0x00	; 0
     6b8:	a1 05       	cpc	r26, r1
     6ba:	b1 05       	cpc	r27, r1
     6bc:	21 f0       	breq	.+8      	; 0x6c6 <__pack_f+0xbe>
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	a0 e0       	ldi	r26, 0x00	; 0
     6c4:	b0 e0       	ldi	r27, 0x00	; 0
     6c6:	9a 01       	movw	r18, r20
     6c8:	ab 01       	movw	r20, r22
     6ca:	28 2b       	or	r18, r24
     6cc:	39 2b       	or	r19, r25
     6ce:	4a 2b       	or	r20, r26
     6d0:	5b 2b       	or	r21, r27
     6d2:	da 01       	movw	r26, r20
     6d4:	c9 01       	movw	r24, r18
     6d6:	8f 77       	andi	r24, 0x7F	; 127
     6d8:	90 70       	andi	r25, 0x00	; 0
     6da:	a0 70       	andi	r26, 0x00	; 0
     6dc:	b0 70       	andi	r27, 0x00	; 0
     6de:	80 34       	cpi	r24, 0x40	; 64
     6e0:	91 05       	cpc	r25, r1
     6e2:	a1 05       	cpc	r26, r1
     6e4:	b1 05       	cpc	r27, r1
     6e6:	39 f4       	brne	.+14     	; 0x6f6 <__pack_f+0xee>
     6e8:	27 ff       	sbrs	r18, 7
     6ea:	09 c0       	rjmp	.+18     	; 0x6fe <__pack_f+0xf6>
     6ec:	20 5c       	subi	r18, 0xC0	; 192
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
     6f0:	4f 4f       	sbci	r20, 0xFF	; 255
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <__pack_f+0xf6>
     6f6:	21 5c       	subi	r18, 0xC1	; 193
     6f8:	3f 4f       	sbci	r19, 0xFF	; 255
     6fa:	4f 4f       	sbci	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	e0 e0       	ldi	r30, 0x00	; 0
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	20 30       	cpi	r18, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	3a 07       	cpc	r19, r26
     708:	a0 e0       	ldi	r26, 0x00	; 0
     70a:	4a 07       	cpc	r20, r26
     70c:	a0 e4       	ldi	r26, 0x40	; 64
     70e:	5a 07       	cpc	r21, r26
     710:	10 f0       	brcs	.+4      	; 0x716 <__pack_f+0x10e>
     712:	e1 e0       	ldi	r30, 0x01	; 1
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	79 01       	movw	r14, r18
     718:	8a 01       	movw	r16, r20
     71a:	27 c0       	rjmp	.+78     	; 0x76a <__pack_f+0x162>
     71c:	60 38       	cpi	r22, 0x80	; 128
     71e:	71 05       	cpc	r23, r1
     720:	64 f5       	brge	.+88     	; 0x77a <__pack_f+0x172>
     722:	fb 01       	movw	r30, r22
     724:	e1 58       	subi	r30, 0x81	; 129
     726:	ff 4f       	sbci	r31, 0xFF	; 255
     728:	d8 01       	movw	r26, r16
     72a:	c7 01       	movw	r24, r14
     72c:	8f 77       	andi	r24, 0x7F	; 127
     72e:	90 70       	andi	r25, 0x00	; 0
     730:	a0 70       	andi	r26, 0x00	; 0
     732:	b0 70       	andi	r27, 0x00	; 0
     734:	80 34       	cpi	r24, 0x40	; 64
     736:	91 05       	cpc	r25, r1
     738:	a1 05       	cpc	r26, r1
     73a:	b1 05       	cpc	r27, r1
     73c:	39 f4       	brne	.+14     	; 0x74c <__pack_f+0x144>
     73e:	e7 fe       	sbrs	r14, 7
     740:	0d c0       	rjmp	.+26     	; 0x75c <__pack_f+0x154>
     742:	80 e4       	ldi	r24, 0x40	; 64
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	a0 e0       	ldi	r26, 0x00	; 0
     748:	b0 e0       	ldi	r27, 0x00	; 0
     74a:	04 c0       	rjmp	.+8      	; 0x754 <__pack_f+0x14c>
     74c:	8f e3       	ldi	r24, 0x3F	; 63
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	a0 e0       	ldi	r26, 0x00	; 0
     752:	b0 e0       	ldi	r27, 0x00	; 0
     754:	e8 0e       	add	r14, r24
     756:	f9 1e       	adc	r15, r25
     758:	0a 1f       	adc	r16, r26
     75a:	1b 1f       	adc	r17, r27
     75c:	17 ff       	sbrs	r17, 7
     75e:	05 c0       	rjmp	.+10     	; 0x76a <__pack_f+0x162>
     760:	16 95       	lsr	r17
     762:	07 95       	ror	r16
     764:	f7 94       	ror	r15
     766:	e7 94       	ror	r14
     768:	31 96       	adiw	r30, 0x01	; 1
     76a:	87 e0       	ldi	r24, 0x07	; 7
     76c:	16 95       	lsr	r17
     76e:	07 95       	ror	r16
     770:	f7 94       	ror	r15
     772:	e7 94       	ror	r14
     774:	8a 95       	dec	r24
     776:	d1 f7       	brne	.-12     	; 0x76c <__pack_f+0x164>
     778:	05 c0       	rjmp	.+10     	; 0x784 <__pack_f+0x17c>
     77a:	ee 24       	eor	r14, r14
     77c:	ff 24       	eor	r15, r15
     77e:	87 01       	movw	r16, r14
     780:	ef ef       	ldi	r30, 0xFF	; 255
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	6e 2f       	mov	r22, r30
     786:	67 95       	ror	r22
     788:	66 27       	eor	r22, r22
     78a:	67 95       	ror	r22
     78c:	90 2f       	mov	r25, r16
     78e:	9f 77       	andi	r25, 0x7F	; 127
     790:	d7 94       	ror	r13
     792:	dd 24       	eor	r13, r13
     794:	d7 94       	ror	r13
     796:	8e 2f       	mov	r24, r30
     798:	86 95       	lsr	r24
     79a:	49 2f       	mov	r20, r25
     79c:	46 2b       	or	r20, r22
     79e:	58 2f       	mov	r21, r24
     7a0:	5d 29       	or	r21, r13
     7a2:	b7 01       	movw	r22, r14
     7a4:	ca 01       	movw	r24, r20
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	08 95       	ret

000007b2 <__unpack_f>:
     7b2:	fc 01       	movw	r30, r24
     7b4:	db 01       	movw	r26, r22
     7b6:	40 81       	ld	r20, Z
     7b8:	51 81       	ldd	r21, Z+1	; 0x01
     7ba:	22 81       	ldd	r18, Z+2	; 0x02
     7bc:	62 2f       	mov	r22, r18
     7be:	6f 77       	andi	r22, 0x7F	; 127
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	22 1f       	adc	r18, r18
     7c4:	22 27       	eor	r18, r18
     7c6:	22 1f       	adc	r18, r18
     7c8:	93 81       	ldd	r25, Z+3	; 0x03
     7ca:	89 2f       	mov	r24, r25
     7cc:	88 0f       	add	r24, r24
     7ce:	82 2b       	or	r24, r18
     7d0:	28 2f       	mov	r18, r24
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	99 1f       	adc	r25, r25
     7d6:	99 27       	eor	r25, r25
     7d8:	99 1f       	adc	r25, r25
     7da:	11 96       	adiw	r26, 0x01	; 1
     7dc:	9c 93       	st	X, r25
     7de:	11 97       	sbiw	r26, 0x01	; 1
     7e0:	21 15       	cp	r18, r1
     7e2:	31 05       	cpc	r19, r1
     7e4:	a9 f5       	brne	.+106    	; 0x850 <__unpack_f+0x9e>
     7e6:	41 15       	cp	r20, r1
     7e8:	51 05       	cpc	r21, r1
     7ea:	61 05       	cpc	r22, r1
     7ec:	71 05       	cpc	r23, r1
     7ee:	11 f4       	brne	.+4      	; 0x7f4 <__unpack_f+0x42>
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	37 c0       	rjmp	.+110    	; 0x862 <__unpack_f+0xb0>
     7f4:	82 e8       	ldi	r24, 0x82	; 130
     7f6:	9f ef       	ldi	r25, 0xFF	; 255
     7f8:	13 96       	adiw	r26, 0x03	; 3
     7fa:	9c 93       	st	X, r25
     7fc:	8e 93       	st	-X, r24
     7fe:	12 97       	sbiw	r26, 0x02	; 2
     800:	9a 01       	movw	r18, r20
     802:	ab 01       	movw	r20, r22
     804:	67 e0       	ldi	r22, 0x07	; 7
     806:	22 0f       	add	r18, r18
     808:	33 1f       	adc	r19, r19
     80a:	44 1f       	adc	r20, r20
     80c:	55 1f       	adc	r21, r21
     80e:	6a 95       	dec	r22
     810:	d1 f7       	brne	.-12     	; 0x806 <__unpack_f+0x54>
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	8c 93       	st	X, r24
     816:	0d c0       	rjmp	.+26     	; 0x832 <__unpack_f+0x80>
     818:	22 0f       	add	r18, r18
     81a:	33 1f       	adc	r19, r19
     81c:	44 1f       	adc	r20, r20
     81e:	55 1f       	adc	r21, r21
     820:	12 96       	adiw	r26, 0x02	; 2
     822:	8d 91       	ld	r24, X+
     824:	9c 91       	ld	r25, X
     826:	13 97       	sbiw	r26, 0x03	; 3
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	13 96       	adiw	r26, 0x03	; 3
     82c:	9c 93       	st	X, r25
     82e:	8e 93       	st	-X, r24
     830:	12 97       	sbiw	r26, 0x02	; 2
     832:	20 30       	cpi	r18, 0x00	; 0
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	38 07       	cpc	r19, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	48 07       	cpc	r20, r24
     83c:	80 e4       	ldi	r24, 0x40	; 64
     83e:	58 07       	cpc	r21, r24
     840:	58 f3       	brcs	.-42     	; 0x818 <__unpack_f+0x66>
     842:	14 96       	adiw	r26, 0x04	; 4
     844:	2d 93       	st	X+, r18
     846:	3d 93       	st	X+, r19
     848:	4d 93       	st	X+, r20
     84a:	5c 93       	st	X, r21
     84c:	17 97       	sbiw	r26, 0x07	; 7
     84e:	08 95       	ret
     850:	2f 3f       	cpi	r18, 0xFF	; 255
     852:	31 05       	cpc	r19, r1
     854:	79 f4       	brne	.+30     	; 0x874 <__unpack_f+0xc2>
     856:	41 15       	cp	r20, r1
     858:	51 05       	cpc	r21, r1
     85a:	61 05       	cpc	r22, r1
     85c:	71 05       	cpc	r23, r1
     85e:	19 f4       	brne	.+6      	; 0x866 <__unpack_f+0xb4>
     860:	84 e0       	ldi	r24, 0x04	; 4
     862:	8c 93       	st	X, r24
     864:	08 95       	ret
     866:	64 ff       	sbrs	r22, 4
     868:	03 c0       	rjmp	.+6      	; 0x870 <__unpack_f+0xbe>
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	8c 93       	st	X, r24
     86e:	12 c0       	rjmp	.+36     	; 0x894 <__unpack_f+0xe2>
     870:	1c 92       	st	X, r1
     872:	10 c0       	rjmp	.+32     	; 0x894 <__unpack_f+0xe2>
     874:	2f 57       	subi	r18, 0x7F	; 127
     876:	30 40       	sbci	r19, 0x00	; 0
     878:	13 96       	adiw	r26, 0x03	; 3
     87a:	3c 93       	st	X, r19
     87c:	2e 93       	st	-X, r18
     87e:	12 97       	sbiw	r26, 0x02	; 2
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	8c 93       	st	X, r24
     884:	87 e0       	ldi	r24, 0x07	; 7
     886:	44 0f       	add	r20, r20
     888:	55 1f       	adc	r21, r21
     88a:	66 1f       	adc	r22, r22
     88c:	77 1f       	adc	r23, r23
     88e:	8a 95       	dec	r24
     890:	d1 f7       	brne	.-12     	; 0x886 <__unpack_f+0xd4>
     892:	70 64       	ori	r23, 0x40	; 64
     894:	14 96       	adiw	r26, 0x04	; 4
     896:	4d 93       	st	X+, r20
     898:	5d 93       	st	X+, r21
     89a:	6d 93       	st	X+, r22
     89c:	7c 93       	st	X, r23
     89e:	17 97       	sbiw	r26, 0x07	; 7
     8a0:	08 95       	ret

000008a2 <buttonCheck>:
	}
}

void buttonCheck() {

	RIGHT = 0; LEFT = 0;
     8a2:	10 92 f3 01 	sts	0x01F3, r1
     8a6:	10 92 f2 01 	sts	0x01F2, r1
     8aa:	10 92 f1 01 	sts	0x01F1, r1
     8ae:	10 92 f0 01 	sts	0x01F0, r1
	
	if(PINB & 0b00000010) {
     8b2:	19 9b       	sbis	0x03, 1	; 3
     8b4:	11 c0       	rjmp	.+34     	; 0x8d8 <buttonCheck+0x36>
     8b6:	84 ef       	ldi	r24, 0xF4	; 244
     8b8:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8ba:	20 e9       	ldi	r18, 0x90	; 144
     8bc:	31 e0       	ldi	r19, 0x01	; 1
     8be:	f9 01       	movw	r30, r18
     8c0:	31 97       	sbiw	r30, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <buttonCheck+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c6:	d9 f7       	brne	.-10     	; 0x8be <buttonCheck+0x1c>
	_delay_ms(50);
	if(PINB & 0b00000010) {
     8c8:	19 9b       	sbis	0x03, 1	; 3
     8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <buttonCheck+0x36>
		// Send output to PORTD.
		//PORTB |= (1<<3); //PORTB = 0b11111111;
		RIGHT = 1;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	90 93 f3 01 	sts	0x01F3, r25
     8d4:	80 93 f2 01 	sts	0x01F2, r24
	}
	}
	
	if (PINB & 0b00000001 ) {
     8d8:	18 9b       	sbis	0x03, 0	; 3
     8da:	11 c0       	rjmp	.+34     	; 0x8fe <buttonCheck+0x5c>
     8dc:	84 ef       	ldi	r24, 0xF4	; 244
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	20 e9       	ldi	r18, 0x90	; 144
     8e2:	31 e0       	ldi	r19, 0x01	; 1
     8e4:	f9 01       	movw	r30, r18
     8e6:	31 97       	sbiw	r30, 0x01	; 1
     8e8:	f1 f7       	brne	.-4      	; 0x8e6 <buttonCheck+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ec:	d9 f7       	brne	.-10     	; 0x8e4 <buttonCheck+0x42>
	_delay_ms(50);
	if (PINB & 0b00000001 ) {
     8ee:	18 9b       	sbis	0x03, 0	; 3
     8f0:	06 c0       	rjmp	.+12     	; 0x8fe <buttonCheck+0x5c>
		//PORTB |= (1<<2);
		LEFT = 1;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	90 93 f1 01 	sts	0x01F1, r25
     8fa:	80 93 f0 01 	sts	0x01F0, r24
     8fe:	08 95       	ret

00000900 <PinChangeInit>:
}

void PinChangeInit(void)
{
	//Enable PCINT0 and PCINT1 (both buttons) in the PCMSK0 register
	PCMSK0 |= (1<<PCINT0);
     900:	eb e6       	ldi	r30, 0x6B	; 107
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	81 60       	ori	r24, 0x01	; 1
     908:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT1);
     90a:	80 81       	ld	r24, Z
     90c:	82 60       	ori	r24, 0x02	; 2
     90e:	80 83       	st	Z, r24

	//Enable Pin change interrupts in the Pin Change Interrupt Control Register
	PCICR |= (1<<PCIE0);
     910:	e8 e6       	ldi	r30, 0x68	; 104
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	81 60       	ori	r24, 0x01	; 1
     918:	80 83       	st	Z, r24
	
	//Set the PCINT0 and PCINT1 interrupts to trigger on rising edge
	EICRA |= ((1<<ISC00)&&(1<<ISC01)&&(1<<ISC10)&&(1<<ISC11));
     91a:	e9 e6       	ldi	r30, 0x69	; 105
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	81 60       	ori	r24, 0x01	; 1
     922:	80 83       	st	Z, r24
		
	//Ensure to enable global interrupts as well.
	sei();
     924:	78 94       	sei
}
     926:	08 95       	ret

00000928 <__vector_9>:

ISR(PCINT0_vect) {	
     928:	1f 92       	push	r1
     92a:	0f 92       	push	r0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	0f 92       	push	r0
     930:	11 24       	eor	r1, r1
     932:	8f 93       	push	r24
     934:	9f 93       	push	r25
	RIGHT = 0; LEFT = 0;
     936:	10 92 f3 01 	sts	0x01F3, r1
     93a:	10 92 f2 01 	sts	0x01F2, r1
     93e:	10 92 f1 01 	sts	0x01F1, r1
     942:	10 92 f0 01 	sts	0x01F0, r1
	
	if(PINB & 0b00000010) {
     946:	19 9b       	sbis	0x03, 1	; 3
     948:	06 c0       	rjmp	.+12     	; 0x956 <__vector_9+0x2e>
	//_delay_ms(50);
	//if(PINB & 0b00000010) {
		// Send output to PORTD.
		//PORTB |= (1<<3); //PORTB = 0b11111111;
		RIGHT = 1;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	90 93 f3 01 	sts	0x01F3, r25
     952:	80 93 f2 01 	sts	0x01F2, r24
	//}
	}
	
	if (PINB & 0b00000001 ) {
     956:	18 9b       	sbis	0x03, 0	; 3
     958:	06 c0       	rjmp	.+12     	; 0x966 <__vector_9+0x3e>
	//_delay_ms(50);
	//if (PINB & 0b00000001 ) {
		//PORTB |= (1<<2);
		LEFT = 1;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	90 93 f1 01 	sts	0x01F1, r25
     962:	80 93 f0 01 	sts	0x01F0, r24
	}
	clear();
	draw_character('*',heroX,heroY);
	refresh();
	*/
}
     966:	9f 91       	pop	r25
     968:	8f 91       	pop	r24
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0
     970:	1f 90       	pop	r1
     972:	18 95       	reti

00000974 <TimerInit>:

void TimerInit(void)
{
	//Set to Normal Timer Mode using TCCR0A and TCCR0B
	TCCR0A &= ~((1<<WGM01)|(WGM00));
     974:	84 b5       	in	r24, 0x24	; 36
     976:	8d 7f       	andi	r24, 0xFD	; 253
     978:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~((1<<WGM02));
     97a:	85 b5       	in	r24, 0x25	; 37
     97c:	87 7f       	andi	r24, 0xF7	; 247
     97e:	85 bd       	out	0x25, r24	; 37
	
	//Set Prescaler using TCCR0B, using Clock Speed find timer speed = 1/(Clock Speed/Prescaler)
	//Prescaler = 1024
	//Timer Speed = 128 nano seconds NOT 16MHZ
	//Timer Overflow Speed = 32640 nano seconds (Timer Speed * 255) - (255 since 8-bit timer) NOT 16MHZ
	TCCR0B |= (1<<CS02)|(1<<CS00);
     980:	85 b5       	in	r24, 0x25	; 37
     982:	85 60       	ori	r24, 0x05	; 5
     984:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~((1<<CS01));
     986:	85 b5       	in	r24, 0x25	; 37
     988:	8d 7f       	andi	r24, 0xFD	; 253
     98a:	85 bd       	out	0x25, r24	; 37
	
	//Enable TOIE0 interrupt in the TIMSK0 register
	TIMSK0 |= (1<<TOIE0);
     98c:	ee e6       	ldi	r30, 0x6E	; 110
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	81 60       	ori	r24, 0x01	; 1
     994:	80 83       	st	Z, r24
	
	//Ensure to enable global interrupts as well.
	sei();
     996:	78 94       	sei
}
     998:	08 95       	ret

0000099a <setupHero>:
	zombie[i] -> is_visible = 1;
	}
	}
}

void setupHero(void) {
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
	int middle_x = screen_x/2;
	int middle_y = screen_y/2 + 5;
     9a6:	80 91 8a 01 	lds	r24, 0x018A
     9aa:	90 91 8b 01 	lds	r25, 0x018B
     9ae:	62 e0       	ldi	r22, 0x02	; 2
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
     9b6:	7b 01       	movw	r14, r22
     9b8:	85 e0       	ldi	r24, 0x05	; 5
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	e8 0e       	add	r14, r24
     9be:	f9 1e       	adc	r15, r25
	my_pointer -> x = middle_x;
     9c0:	c0 90 24 02 	lds	r12, 0x0224
     9c4:	d0 90 25 02 	lds	r13, 0x0225
     9c8:	80 91 86 01 	lds	r24, 0x0186
     9cc:	90 91 87 01 	lds	r25, 0x0187
     9d0:	62 e0       	ldi	r22, 0x02	; 2
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
     9d8:	88 27       	eor	r24, r24
     9da:	77 fd       	sbrc	r23, 7
     9dc:	80 95       	com	r24
     9de:	98 2f       	mov	r25, r24
     9e0:	0e 94 0d 14 	call	0x281a	; 0x281a <__floatsisf>
     9e4:	f6 01       	movw	r30, r12
     9e6:	60 83       	st	Z, r22
     9e8:	71 83       	std	Z+1, r23	; 0x01
     9ea:	82 83       	std	Z+2, r24	; 0x02
     9ec:	93 83       	std	Z+3, r25	; 0x03
	my_pointer -> y = middle_y;
     9ee:	00 27       	eor	r16, r16
     9f0:	f7 fc       	sbrc	r15, 7
     9f2:	00 95       	com	r16
     9f4:	10 2f       	mov	r17, r16
     9f6:	c8 01       	movw	r24, r16
     9f8:	b7 01       	movw	r22, r14
     9fa:	0e 94 0d 14 	call	0x281a	; 0x281a <__floatsisf>
     9fe:	f6 01       	movw	r30, r12
     a00:	64 83       	std	Z+4, r22	; 0x04
     a02:	75 83       	std	Z+5, r23	; 0x05
     a04:	86 83       	std	Z+6, r24	; 0x06
     a06:	97 83       	std	Z+7, r25	; 0x07
	my_pointer -> is_visible = 1;
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	82 87       	std	Z+10, r24	; 0x0a
}
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ff 90       	pop	r15
     a12:	ef 90       	pop	r14
     a14:	df 90       	pop	r13
     a16:	cf 90       	pop	r12
     a18:	08 95       	ret

00000a1a <isInPit>:
	draw_line(pitLeft,pitTop,pitLeft,pitBottom);
	draw_line(pitRight,pitTop,pitRight,pitBottom);
	
}

int isInPit(Sprite *sprite) {
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	8c 01       	movw	r16, r24
	int x = sprite -> x;
     a20:	dc 01       	movw	r26, r24
     a22:	6d 91       	ld	r22, X+
     a24:	7d 91       	ld	r23, X+
     a26:	8d 91       	ld	r24, X+
     a28:	9c 91       	ld	r25, X
     a2a:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__fixsfsi>
     a2e:	fb 01       	movw	r30, r22
	int y = sprite -> y;
     a30:	d8 01       	movw	r26, r16
     a32:	14 96       	adiw	r26, 0x04	; 4
     a34:	4d 91       	ld	r20, X+
     a36:	5d 91       	ld	r21, X+
     a38:	6d 91       	ld	r22, X+
     a3a:	7c 91       	ld	r23, X
     a3c:	17 97       	sbiw	r26, 0x07	; 7
	if ((x > pitLeft && x < pitRight - width +1 && y > pitTop && y < pitBottom - height +1)) {
     a3e:	80 91 22 02 	lds	r24, 0x0222
     a42:	90 91 23 02 	lds	r25, 0x0223
     a46:	8e 17       	cp	r24, r30
     a48:	9f 07       	cpc	r25, r31
     a4a:	44 f5       	brge	.+80     	; 0xa9c <isInPit+0x82>
     a4c:	20 91 aa 01 	lds	r18, 0x01AA
     a50:	80 91 1a 02 	lds	r24, 0x021A
     a54:	90 91 1b 02 	lds	r25, 0x021B
     a58:	82 1b       	sub	r24, r18
     a5a:	91 09       	sbc	r25, r1
     a5c:	8e 17       	cp	r24, r30
     a5e:	9f 07       	cpc	r25, r31
     a60:	ec f0       	brlt	.+58     	; 0xa9c <isInPit+0x82>
	
}

int isInPit(Sprite *sprite) {
	int x = sprite -> x;
	int y = sprite -> y;
     a62:	cb 01       	movw	r24, r22
     a64:	ba 01       	movw	r22, r20
     a66:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__fixsfsi>
	if ((x > pitLeft && x < pitRight - width +1 && y > pitTop && y < pitBottom - height +1)) {
     a6a:	80 91 2a 02 	lds	r24, 0x022A
     a6e:	90 91 2b 02 	lds	r25, 0x022B
     a72:	86 17       	cp	r24, r22
     a74:	97 07       	cpc	r25, r23
     a76:	94 f4       	brge	.+36     	; 0xa9c <isInPit+0x82>
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	20 91 ab 01 	lds	r18, 0x01AB
     a7e:	80 91 20 02 	lds	r24, 0x0220
     a82:	90 91 21 02 	lds	r25, 0x0221
     a86:	82 1b       	sub	r24, r18
     a88:	91 09       	sbc	r25, r1
     a8a:	86 17       	cp	r24, r22
     a8c:	97 07       	cpc	r25, r23
     a8e:	0c f4       	brge	.+2      	; 0xa92 <isInPit+0x78>
     a90:	31 e0       	ldi	r19, 0x01	; 1
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	38 27       	eor	r19, r24
     a96:	23 2f       	mov	r18, r19
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <isInPit+0x86>
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
	}
	else {
	return 0;
	}

}
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	08 95       	ret

00000aa8 <heroForward>:
		}
		heroForward();
	}
}

void heroForward(void) {
     aa8:	6f 92       	push	r6
     aaa:	7f 92       	push	r7
     aac:	8f 92       	push	r8
     aae:	9f 92       	push	r9
     ab0:	af 92       	push	r10
     ab2:	bf 92       	push	r11
     ab4:	cf 92       	push	r12
     ab6:	df 92       	push	r13
     ab8:	ef 92       	push	r14
     aba:	ff 92       	push	r15
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
	int HeroX = 1;
	int HeroY = 0;
	int Up,Down,Left,Right;
	
	// is hero in pit?
	if (isInPit(my_pointer)) {
     ac4:	00 91 24 02 	lds	r16, 0x0224
     ac8:	10 91 25 02 	lds	r17, 0x0225
     acc:	c8 01       	movw	r24, r16
     ace:	a5 df       	rcall	.-182    	; 0xa1a <isInPit>
     ad0:	89 2b       	or	r24, r25
     ad2:	e9 f0       	breq	.+58     	; 0xb0e <__stack+0xf>
	Up = pitTop+2;
     ad4:	60 90 2a 02 	lds	r6, 0x022A
     ad8:	70 90 2b 02 	lds	r7, 0x022B
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	68 0e       	add	r6, r24
     ae2:	79 1e       	adc	r7, r25
	Down = pitBottom - 4;
     ae4:	a0 90 20 02 	lds	r10, 0x0220
     ae8:	b0 90 21 02 	lds	r11, 0x0221
     aec:	ec ef       	ldi	r30, 0xFC	; 252
     aee:	ff ef       	ldi	r31, 0xFF	; 255
     af0:	ae 0e       	add	r10, r30
     af2:	bf 1e       	adc	r11, r31
	Left = pitLeft+2;
     af4:	80 90 22 02 	lds	r8, 0x0222
     af8:	90 90 23 02 	lds	r9, 0x0223
     afc:	88 0e       	add	r8, r24
     afe:	99 1e       	adc	r9, r25
	Right = pitRight -4;
     b00:	c0 90 1a 02 	lds	r12, 0x021A
     b04:	d0 90 1b 02 	lds	r13, 0x021B
     b08:	ce 0e       	add	r12, r30
     b0a:	df 1e       	adc	r13, r31
     b0c:	14 c0       	rjmp	.+40     	; 0xb36 <__stack+0x37>
	} else {
	Up = 10;
	Down = screen_y-1;
     b0e:	a0 90 8a 01 	lds	r10, 0x018A
     b12:	b0 90 8b 01 	lds	r11, 0x018B
     b16:	08 94       	sec
     b18:	a1 08       	sbc	r10, r1
     b1a:	b1 08       	sbc	r11, r1
	Left = 2;
	Right = screen_x-1;
     b1c:	c0 90 86 01 	lds	r12, 0x0186
     b20:	d0 90 87 01 	lds	r13, 0x0187
     b24:	08 94       	sec
     b26:	c1 08       	sbc	r12, r1
     b28:	d1 08       	sbc	r13, r1
     b2a:	3a e0       	ldi	r19, 0x0A	; 10
     b2c:	63 2e       	mov	r6, r19
     b2e:	71 2c       	mov	r7, r1
     b30:	22 e0       	ldi	r18, 0x02	; 2
     b32:	82 2e       	mov	r8, r18
     b34:	91 2c       	mov	r9, r1
	}

	// update direction of movement
	if (Direction == 0) {
     b36:	80 91 92 01 	lds	r24, 0x0192
     b3a:	90 91 93 01 	lds	r25, 0x0193
     b3e:	89 2b       	or	r24, r25
     b40:	21 f0       	breq	.+8      	; 0xb4a <__stack+0x4b>
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	e9 2e       	mov	r14, r25
     b46:	f1 2c       	mov	r15, r1
     b48:	39 c0       	rjmp	.+114    	; 0xbbc <__stack+0xbd>
		sword -> bitmap = bitSwordDown;
     b4a:	c0 91 16 02 	lds	r28, 0x0216
     b4e:	d0 91 17 02 	lds	r29, 0x0217
     b52:	87 eb       	ldi	r24, 0xB7	; 183
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	9c 87       	std	Y+12, r25	; 0x0c
     b58:	8b 87       	std	Y+11, r24	; 0x0b
		if (gotSword) {
     b5a:	80 91 12 02 	lds	r24, 0x0212
     b5e:	90 91 13 02 	lds	r25, 0x0213
     b62:	89 2b       	or	r24, r25
     b64:	b9 f0       	breq	.+46     	; 0xb94 <__stack+0x95>
		sword -> x = my_pointer -> x;
     b66:	f8 01       	movw	r30, r16
     b68:	80 81       	ld	r24, Z
     b6a:	91 81       	ldd	r25, Z+1	; 0x01
     b6c:	a2 81       	ldd	r26, Z+2	; 0x02
     b6e:	b3 81       	ldd	r27, Z+3	; 0x03
     b70:	88 83       	st	Y, r24
     b72:	99 83       	std	Y+1, r25	; 0x01
     b74:	aa 83       	std	Y+2, r26	; 0x02
     b76:	bb 83       	std	Y+3, r27	; 0x03
		sword -> y = my_pointer -> y + 4;
     b78:	64 81       	ldd	r22, Z+4	; 0x04
     b7a:	75 81       	ldd	r23, Z+5	; 0x05
     b7c:	86 81       	ldd	r24, Z+6	; 0x06
     b7e:	97 81       	ldd	r25, Z+7	; 0x07
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	40 e8       	ldi	r20, 0x80	; 128
     b86:	50 e4       	ldi	r21, 0x40	; 64
     b88:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__addsf3>
     b8c:	6c 83       	std	Y+4, r22	; 0x04
     b8e:	7d 83       	std	Y+5, r23	; 0x05
     b90:	8e 83       	std	Y+6, r24	; 0x06
     b92:	9f 83       	std	Y+7, r25	; 0x07
		}
		HeroY = 1;
		HeroX = 0;
		if (my_pointer -> y > Down) {
     b94:	b5 01       	movw	r22, r10
     b96:	88 27       	eor	r24, r24
     b98:	77 fd       	sbrc	r23, 7
     b9a:	80 95       	com	r24
     b9c:	98 2f       	mov	r25, r24
     b9e:	0e 94 0d 14 	call	0x281a	; 0x281a <__floatsisf>
     ba2:	9b 01       	movw	r18, r22
     ba4:	ac 01       	movw	r20, r24
     ba6:	f8 01       	movw	r30, r16
     ba8:	64 81       	ldd	r22, Z+4	; 0x04
     baa:	75 81       	ldd	r23, Z+5	; 0x05
     bac:	86 81       	ldd	r24, Z+6	; 0x06
     bae:	97 81       	ldd	r25, Z+7	; 0x07
     bb0:	0e 94 bd 14 	call	0x297a	; 0x297a <__gesf2>
     bb4:	18 16       	cp	r1, r24
     bb6:	2c f4       	brge	.+10     	; 0xbc2 <__stack+0xc3>
     bb8:	ee 24       	eor	r14, r14
     bba:	ff 24       	eor	r15, r15
     bbc:	c0 e0       	ldi	r28, 0x00	; 0
     bbe:	d0 e0       	ldi	r29, 0x00	; 0
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <__stack+0xcb>
     bc2:	ee 24       	eor	r14, r14
     bc4:	ff 24       	eor	r15, r15
     bc6:	c1 e0       	ldi	r28, 0x01	; 1
     bc8:	d0 e0       	ldi	r29, 0x00	; 0
		HeroY = 0;
		}
	}
	if (Direction == 1) {
     bca:	80 91 92 01 	lds	r24, 0x0192
     bce:	90 91 93 01 	lds	r25, 0x0193
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <__stack+0xd9>
     bd6:	40 c0       	rjmp	.+128    	; 0xc58 <__stack+0x159>
		sword -> bitmap = bitSwordRight;
     bd8:	c0 91 16 02 	lds	r28, 0x0216
     bdc:	d0 91 17 02 	lds	r29, 0x0217
     be0:	81 eb       	ldi	r24, 0xB1	; 177
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	9c 87       	std	Y+12, r25	; 0x0c
     be6:	8b 87       	std	Y+11, r24	; 0x0b
		if (gotSword) {
     be8:	80 91 12 02 	lds	r24, 0x0212
     bec:	90 91 13 02 	lds	r25, 0x0213
     bf0:	89 2b       	or	r24, r25
     bf2:	c1 f0       	breq	.+48     	; 0xc24 <__stack+0x125>
		sword -> x = my_pointer -> x + 4;
     bf4:	f8 01       	movw	r30, r16
     bf6:	60 81       	ld	r22, Z
     bf8:	71 81       	ldd	r23, Z+1	; 0x01
     bfa:	82 81       	ldd	r24, Z+2	; 0x02
     bfc:	93 81       	ldd	r25, Z+3	; 0x03
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e8       	ldi	r20, 0x80	; 128
     c04:	50 e4       	ldi	r21, 0x40	; 64
     c06:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__addsf3>
     c0a:	68 83       	st	Y, r22
     c0c:	79 83       	std	Y+1, r23	; 0x01
     c0e:	8a 83       	std	Y+2, r24	; 0x02
     c10:	9b 83       	std	Y+3, r25	; 0x03
		sword -> y = my_pointer -> y;
     c12:	f8 01       	movw	r30, r16
     c14:	84 81       	ldd	r24, Z+4	; 0x04
     c16:	95 81       	ldd	r25, Z+5	; 0x05
     c18:	a6 81       	ldd	r26, Z+6	; 0x06
     c1a:	b7 81       	ldd	r27, Z+7	; 0x07
     c1c:	8c 83       	std	Y+4, r24	; 0x04
     c1e:	9d 83       	std	Y+5, r25	; 0x05
     c20:	ae 83       	std	Y+6, r26	; 0x06
     c22:	bf 83       	std	Y+7, r27	; 0x07
		}
		HeroX = 1;
		HeroY = 0;
		if (my_pointer -> x > Right) {
     c24:	b6 01       	movw	r22, r12
     c26:	88 27       	eor	r24, r24
     c28:	77 fd       	sbrc	r23, 7
     c2a:	80 95       	com	r24
     c2c:	98 2f       	mov	r25, r24
     c2e:	0e 94 0d 14 	call	0x281a	; 0x281a <__floatsisf>
     c32:	9b 01       	movw	r18, r22
     c34:	ac 01       	movw	r20, r24
     c36:	f8 01       	movw	r30, r16
     c38:	60 81       	ld	r22, Z
     c3a:	71 81       	ldd	r23, Z+1	; 0x01
     c3c:	82 81       	ldd	r24, Z+2	; 0x02
     c3e:	93 81       	ldd	r25, Z+3	; 0x03
     c40:	0e 94 bd 14 	call	0x297a	; 0x297a <__gesf2>
     c44:	18 16       	cp	r1, r24
     c46:	1c f4       	brge	.+6      	; 0xc4e <__stack+0x14f>
     c48:	ee 24       	eor	r14, r14
     c4a:	ff 24       	eor	r15, r15
     c4c:	03 c0       	rjmp	.+6      	; 0xc54 <__stack+0x155>
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	e8 2e       	mov	r14, r24
     c52:	f1 2c       	mov	r15, r1
     c54:	c0 e0       	ldi	r28, 0x00	; 0
     c56:	d0 e0       	ldi	r29, 0x00	; 0
		HeroX = 0;
		}
	}
	if (Direction == 2) {
     c58:	80 91 92 01 	lds	r24, 0x0192
     c5c:	90 91 93 01 	lds	r25, 0x0193
     c60:	02 97       	sbiw	r24, 0x02	; 2
     c62:	09 f0       	breq	.+2      	; 0xc66 <__stack+0x167>
     c64:	40 c0       	rjmp	.+128    	; 0xce6 <__stack+0x1e7>
		sword -> bitmap = bitSwordUp;
     c66:	c0 91 16 02 	lds	r28, 0x0216
     c6a:	d0 91 17 02 	lds	r29, 0x0217
     c6e:	84 eb       	ldi	r24, 0xB4	; 180
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	9c 87       	std	Y+12, r25	; 0x0c
     c74:	8b 87       	std	Y+11, r24	; 0x0b
		if (gotSword) {
     c76:	80 91 12 02 	lds	r24, 0x0212
     c7a:	90 91 13 02 	lds	r25, 0x0213
     c7e:	89 2b       	or	r24, r25
     c80:	b9 f0       	breq	.+46     	; 0xcb0 <__stack+0x1b1>
		sword -> x = my_pointer -> x;
     c82:	f8 01       	movw	r30, r16
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	a2 81       	ldd	r26, Z+2	; 0x02
     c8a:	b3 81       	ldd	r27, Z+3	; 0x03
     c8c:	88 83       	st	Y, r24
     c8e:	99 83       	std	Y+1, r25	; 0x01
     c90:	aa 83       	std	Y+2, r26	; 0x02
     c92:	bb 83       	std	Y+3, r27	; 0x03
		sword -> y = my_pointer -> y - 4;
     c94:	64 81       	ldd	r22, Z+4	; 0x04
     c96:	75 81       	ldd	r23, Z+5	; 0x05
     c98:	86 81       	ldd	r24, Z+6	; 0x06
     c9a:	97 81       	ldd	r25, Z+7	; 0x07
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 e8       	ldi	r20, 0x80	; 128
     ca2:	50 e4       	ldi	r21, 0x40	; 64
     ca4:	0e 94 71 13 	call	0x26e2	; 0x26e2 <__subsf3>
     ca8:	6c 83       	std	Y+4, r22	; 0x04
     caa:	7d 83       	std	Y+5, r23	; 0x05
     cac:	8e 83       	std	Y+6, r24	; 0x06
     cae:	9f 83       	std	Y+7, r25	; 0x07
		}
		HeroY = -1;
		HeroX = 0;
		if (my_pointer -> y < Up) {
     cb0:	b3 01       	movw	r22, r6
     cb2:	88 27       	eor	r24, r24
     cb4:	77 fd       	sbrc	r23, 7
     cb6:	80 95       	com	r24
     cb8:	98 2f       	mov	r25, r24
     cba:	0e 94 0d 14 	call	0x281a	; 0x281a <__floatsisf>
     cbe:	9b 01       	movw	r18, r22
     cc0:	ac 01       	movw	r20, r24
     cc2:	f8 01       	movw	r30, r16
     cc4:	64 81       	ldd	r22, Z+4	; 0x04
     cc6:	75 81       	ldd	r23, Z+5	; 0x05
     cc8:	86 81       	ldd	r24, Z+6	; 0x06
     cca:	97 81       	ldd	r25, Z+7	; 0x07
     ccc:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__cmpsf2>
     cd0:	88 23       	and	r24, r24
     cd2:	2c f4       	brge	.+10     	; 0xcde <__stack+0x1df>
     cd4:	ee 24       	eor	r14, r14
     cd6:	ff 24       	eor	r15, r15
     cd8:	c0 e0       	ldi	r28, 0x00	; 0
     cda:	d0 e0       	ldi	r29, 0x00	; 0
     cdc:	04 c0       	rjmp	.+8      	; 0xce6 <__stack+0x1e7>
     cde:	ee 24       	eor	r14, r14
     ce0:	ff 24       	eor	r15, r15
     ce2:	cf ef       	ldi	r28, 0xFF	; 255
     ce4:	df ef       	ldi	r29, 0xFF	; 255
		HeroY = 0;
		}
	}
	if (Direction == 3) {
     ce6:	80 91 92 01 	lds	r24, 0x0192
     cea:	90 91 93 01 	lds	r25, 0x0193
     cee:	03 97       	sbiw	r24, 0x03	; 3
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <__stack+0x1f5>
     cf2:	40 c0       	rjmp	.+128    	; 0xd74 <__stack+0x275>
		sword -> bitmap = bitSwordLeft;
     cf4:	c0 91 16 02 	lds	r28, 0x0216
     cf8:	d0 91 17 02 	lds	r29, 0x0217
     cfc:	8e ea       	ldi	r24, 0xAE	; 174
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	9c 87       	std	Y+12, r25	; 0x0c
     d02:	8b 87       	std	Y+11, r24	; 0x0b
		if (gotSword) {
     d04:	80 91 12 02 	lds	r24, 0x0212
     d08:	90 91 13 02 	lds	r25, 0x0213
     d0c:	89 2b       	or	r24, r25
     d0e:	c1 f0       	breq	.+48     	; 0xd40 <__stack+0x241>
		sword -> x = my_pointer -> x - 4;
     d10:	f8 01       	movw	r30, r16
     d12:	60 81       	ld	r22, Z
     d14:	71 81       	ldd	r23, Z+1	; 0x01
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e8       	ldi	r20, 0x80	; 128
     d20:	50 e4       	ldi	r21, 0x40	; 64
     d22:	0e 94 71 13 	call	0x26e2	; 0x26e2 <__subsf3>
     d26:	68 83       	st	Y, r22
     d28:	79 83       	std	Y+1, r23	; 0x01
     d2a:	8a 83       	std	Y+2, r24	; 0x02
     d2c:	9b 83       	std	Y+3, r25	; 0x03
		sword -> y = my_pointer -> y;
     d2e:	f8 01       	movw	r30, r16
     d30:	84 81       	ldd	r24, Z+4	; 0x04
     d32:	95 81       	ldd	r25, Z+5	; 0x05
     d34:	a6 81       	ldd	r26, Z+6	; 0x06
     d36:	b7 81       	ldd	r27, Z+7	; 0x07
     d38:	8c 83       	std	Y+4, r24	; 0x04
     d3a:	9d 83       	std	Y+5, r25	; 0x05
     d3c:	ae 83       	std	Y+6, r26	; 0x06
     d3e:	bf 83       	std	Y+7, r27	; 0x07
		}
		HeroX = -1;
		HeroY = 0;
		if (my_pointer -> x < Left) {
     d40:	b4 01       	movw	r22, r8
     d42:	88 27       	eor	r24, r24
     d44:	77 fd       	sbrc	r23, 7
     d46:	80 95       	com	r24
     d48:	98 2f       	mov	r25, r24
     d4a:	0e 94 0d 14 	call	0x281a	; 0x281a <__floatsisf>
     d4e:	9b 01       	movw	r18, r22
     d50:	ac 01       	movw	r20, r24
     d52:	f8 01       	movw	r30, r16
     d54:	60 81       	ld	r22, Z
     d56:	71 81       	ldd	r23, Z+1	; 0x01
     d58:	82 81       	ldd	r24, Z+2	; 0x02
     d5a:	93 81       	ldd	r25, Z+3	; 0x03
     d5c:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__cmpsf2>
     d60:	88 23       	and	r24, r24
     d62:	1c f4       	brge	.+6      	; 0xd6a <__stack+0x26b>
     d64:	ee 24       	eor	r14, r14
     d66:	ff 24       	eor	r15, r15
     d68:	03 c0       	rjmp	.+6      	; 0xd70 <__stack+0x271>
     d6a:	ee 24       	eor	r14, r14
     d6c:	ea 94       	dec	r14
     d6e:	fe 2c       	mov	r15, r14
     d70:	c0 e0       	ldi	r28, 0x00	; 0
     d72:	d0 e0       	ldi	r29, 0x00	; 0
		HeroX = 0;
		}
	}
	
	if (isInPit(my_pointer)) {
     d74:	c8 01       	movw	r24, r16
     d76:	51 de       	rcall	.-862    	; 0xa1a <isInPit>
     d78:	89 2b       	or	r24, r25
     d7a:	09 f4       	brne	.+2      	; 0xd7e <__stack+0x27f>
     d7c:	81 c0       	rjmp	.+258    	; 0xe80 <__stack+0x381>
		int x = my_pointer -> x;
     d7e:	f8 01       	movw	r30, r16
     d80:	60 81       	ld	r22, Z
     d82:	71 81       	ldd	r23, Z+1	; 0x01
     d84:	82 81       	ldd	r24, Z+2	; 0x02
     d86:	93 81       	ldd	r25, Z+3	; 0x03
     d88:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__fixsfsi>
		int y = my_pointer -> y;
     d8c:	f8 01       	movw	r30, r16
     d8e:	24 81       	ldd	r18, Z+4	; 0x04
     d90:	35 81       	ldd	r19, Z+5	; 0x05
     d92:	46 81       	ldd	r20, Z+6	; 0x06
     d94:	57 81       	ldd	r21, Z+7	; 0x07
		if (LEFT && RIGHT && x > Right ) {
     d96:	80 91 f0 01 	lds	r24, 0x01F0
     d9a:	90 91 f1 01 	lds	r25, 0x01F1
     d9e:	89 2b       	or	r24, r25
     da0:	99 f0       	breq	.+38     	; 0xdc8 <__stack+0x2c9>
     da2:	80 91 f2 01 	lds	r24, 0x01F2
     da6:	90 91 f3 01 	lds	r25, 0x01F3
     daa:	89 2b       	or	r24, r25
     dac:	69 f0       	breq	.+26     	; 0xdc8 <__stack+0x2c9>
     dae:	c6 16       	cp	r12, r22
     db0:	d7 06       	cpc	r13, r23
     db2:	54 f4       	brge	.+20     	; 0xdc8 <__stack+0x2c9>
		
		my_pointer -> x = Right + 4;	
     db4:	84 e0       	ldi	r24, 0x04	; 4
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	c8 0e       	add	r12, r24
     dba:	d9 1e       	adc	r13, r25
     dbc:	b6 01       	movw	r22, r12
     dbe:	88 27       	eor	r24, r24
     dc0:	77 fd       	sbrc	r23, 7
     dc2:	80 95       	com	r24
     dc4:	98 2f       	mov	r25, r24
     dc6:	18 c0       	rjmp	.+48     	; 0xdf8 <__stack+0x2f9>
		
		} else if (LEFT && RIGHT && x < Left ) {
     dc8:	80 91 f0 01 	lds	r24, 0x01F0
     dcc:	90 91 f1 01 	lds	r25, 0x01F1
     dd0:	89 2b       	or	r24, r25
     dd2:	d1 f0       	breq	.+52     	; 0xe08 <__stack+0x309>
     dd4:	80 91 f2 01 	lds	r24, 0x01F2
     dd8:	90 91 f3 01 	lds	r25, 0x01F3
     ddc:	89 2b       	or	r24, r25
     dde:	a1 f0       	breq	.+40     	; 0xe08 <__stack+0x309>
     de0:	68 15       	cp	r22, r8
     de2:	79 05       	cpc	r23, r9
     de4:	8c f4       	brge	.+34     	; 0xe08 <__stack+0x309>
		
		my_pointer -> x = Left - 4;
     de6:	8c ef       	ldi	r24, 0xFC	; 252
     de8:	9f ef       	ldi	r25, 0xFF	; 255
     dea:	88 0e       	add	r8, r24
     dec:	99 1e       	adc	r9, r25
     dee:	b4 01       	movw	r22, r8
     df0:	88 27       	eor	r24, r24
     df2:	77 fd       	sbrc	r23, 7
     df4:	80 95       	com	r24
     df6:	98 2f       	mov	r25, r24
     df8:	0e 94 0d 14 	call	0x281a	; 0x281a <__floatsisf>
     dfc:	f8 01       	movw	r30, r16
     dfe:	60 83       	st	Z, r22
     e00:	71 83       	std	Z+1, r23	; 0x01
     e02:	82 83       	std	Z+2, r24	; 0x02
     e04:	93 83       	std	Z+3, r25	; 0x03
     e06:	3c c0       	rjmp	.+120    	; 0xe80 <__stack+0x381>
		}
	}
	
	if (isInPit(my_pointer)) {
		int x = my_pointer -> x;
		int y = my_pointer -> y;
     e08:	ca 01       	movw	r24, r20
     e0a:	b9 01       	movw	r22, r18
     e0c:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__fixsfsi>
		
		} else if (LEFT && RIGHT && x < Left ) {
		
		my_pointer -> x = Left - 4;
		
		} else if (LEFT && RIGHT && y < Up ) {
     e10:	80 91 f0 01 	lds	r24, 0x01F0
     e14:	90 91 f1 01 	lds	r25, 0x01F1
     e18:	89 2b       	or	r24, r25
     e1a:	99 f0       	breq	.+38     	; 0xe42 <__stack+0x343>
     e1c:	80 91 f2 01 	lds	r24, 0x01F2
     e20:	90 91 f3 01 	lds	r25, 0x01F3
     e24:	89 2b       	or	r24, r25
     e26:	69 f0       	breq	.+26     	; 0xe42 <__stack+0x343>
     e28:	66 15       	cp	r22, r6
     e2a:	77 05       	cpc	r23, r7
     e2c:	54 f4       	brge	.+20     	; 0xe42 <__stack+0x343>
		
		my_pointer -> y = Up - 4;
     e2e:	8c ef       	ldi	r24, 0xFC	; 252
     e30:	9f ef       	ldi	r25, 0xFF	; 255
     e32:	68 0e       	add	r6, r24
     e34:	79 1e       	adc	r7, r25
     e36:	b3 01       	movw	r22, r6
     e38:	88 27       	eor	r24, r24
     e3a:	77 fd       	sbrc	r23, 7
     e3c:	80 95       	com	r24
     e3e:	98 2f       	mov	r25, r24
     e40:	18 c0       	rjmp	.+48     	; 0xe72 <__stack+0x373>
		
		} else if (LEFT && RIGHT && y > Down ) {
     e42:	80 91 f0 01 	lds	r24, 0x01F0
     e46:	90 91 f1 01 	lds	r25, 0x01F1
     e4a:	89 2b       	or	r24, r25
     e4c:	c9 f0       	breq	.+50     	; 0xe80 <__stack+0x381>
     e4e:	80 91 f2 01 	lds	r24, 0x01F2
     e52:	90 91 f3 01 	lds	r25, 0x01F3
     e56:	89 2b       	or	r24, r25
     e58:	99 f0       	breq	.+38     	; 0xe80 <__stack+0x381>
     e5a:	a6 16       	cp	r10, r22
     e5c:	b7 06       	cpc	r11, r23
     e5e:	84 f4       	brge	.+32     	; 0xe80 <__stack+0x381>
		
		my_pointer -> y = Down + 4;
     e60:	84 e0       	ldi	r24, 0x04	; 4
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	a8 0e       	add	r10, r24
     e66:	b9 1e       	adc	r11, r25
     e68:	b5 01       	movw	r22, r10
     e6a:	88 27       	eor	r24, r24
     e6c:	77 fd       	sbrc	r23, 7
     e6e:	80 95       	com	r24
     e70:	98 2f       	mov	r25, r24
     e72:	0e 94 0d 14 	call	0x281a	; 0x281a <__floatsisf>
     e76:	f8 01       	movw	r30, r16
     e78:	64 83       	std	Z+4, r22	; 0x04
     e7a:	75 83       	std	Z+5, r23	; 0x05
     e7c:	86 83       	std	Z+6, r24	; 0x06
     e7e:	97 83       	std	Z+7, r25	; 0x07
		
		}
	}	
		
	my_pointer -> x += HeroX;
     e80:	b7 01       	movw	r22, r14
     e82:	88 27       	eor	r24, r24
     e84:	77 fd       	sbrc	r23, 7
     e86:	80 95       	com	r24
     e88:	98 2f       	mov	r25, r24
     e8a:	0e 94 0d 14 	call	0x281a	; 0x281a <__floatsisf>
     e8e:	9b 01       	movw	r18, r22
     e90:	ac 01       	movw	r20, r24
     e92:	f8 01       	movw	r30, r16
     e94:	60 81       	ld	r22, Z
     e96:	71 81       	ldd	r23, Z+1	; 0x01
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__addsf3>
     ea0:	f8 01       	movw	r30, r16
     ea2:	60 83       	st	Z, r22
     ea4:	71 83       	std	Z+1, r23	; 0x01
     ea6:	82 83       	std	Z+2, r24	; 0x02
     ea8:	93 83       	std	Z+3, r25	; 0x03
	my_pointer -> y += HeroY;
     eaa:	be 01       	movw	r22, r28
     eac:	88 27       	eor	r24, r24
     eae:	77 fd       	sbrc	r23, 7
     eb0:	80 95       	com	r24
     eb2:	98 2f       	mov	r25, r24
     eb4:	0e 94 0d 14 	call	0x281a	; 0x281a <__floatsisf>
     eb8:	9b 01       	movw	r18, r22
     eba:	ac 01       	movw	r20, r24
     ebc:	f8 01       	movw	r30, r16
     ebe:	64 81       	ldd	r22, Z+4	; 0x04
     ec0:	75 81       	ldd	r23, Z+5	; 0x05
     ec2:	86 81       	ldd	r24, Z+6	; 0x06
     ec4:	97 81       	ldd	r25, Z+7	; 0x07
     ec6:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__addsf3>
     eca:	f8 01       	movw	r30, r16
     ecc:	64 83       	std	Z+4, r22	; 0x04
     ece:	75 83       	std	Z+5, r23	; 0x05
     ed0:	86 83       	std	Z+6, r24	; 0x06
     ed2:	97 83       	std	Z+7, r25	; 0x07

}
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	ff 90       	pop	r15
     ede:	ef 90       	pop	r14
     ee0:	df 90       	pop	r13
     ee2:	cf 90       	pop	r12
     ee4:	bf 90       	pop	r11
     ee6:	af 90       	pop	r10
     ee8:	9f 90       	pop	r9
     eea:	8f 90       	pop	r8
     eec:	7f 90       	pop	r7
     eee:	6f 90       	pop	r6
     ef0:	08 95       	ret

00000ef2 <chooseDifficulty>:
	grenadeDropped = 0;
	grenadeExploded = 0;

}

void chooseDifficulty(void) {
     ef2:	ef 92       	push	r14
     ef4:	ff 92       	push	r15
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
	
	int notRIGHT = 1;
	int notLEFT = 1;
	int middle_x = screen_x/2;
     efe:	80 91 86 01 	lds	r24, 0x0186
     f02:	90 91 87 01 	lds	r25, 0x0187
     f06:	62 e0       	ldi	r22, 0x02	; 2
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
     f0e:	16 2f       	mov	r17, r22
	int middle_y = screen_y/2;
     f10:	80 91 8a 01 	lds	r24, 0x018A
     f14:	90 91 8b 01 	lds	r25, 0x018B
     f18:	62 e0       	ldi	r22, 0x02	; 2
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
     f20:	06 2f       	mov	r16, r22
	difficulty = 0;
     f22:	10 92 0f 02 	sts	0x020F, r1
     f26:	10 92 0e 02 	sts	0x020E, r1
	clear();
     f2a:	0e 94 c1 14 	call	0x2982	; 0x2982 <clear>
	draw_string("Standard", middle_x - 4*5, middle_y);
     f2e:	5c ee       	ldi	r21, 0xEC	; 236
     f30:	f5 2e       	mov	r15, r21
     f32:	f1 0e       	add	r15, r17
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	6f 2d       	mov	r22, r15
     f3a:	40 2f       	mov	r20, r16
     f3c:	0e 94 33 17 	call	0x2e66	; 0x2e66 <draw_string>
	refresh();
     f40:	0e 94 48 17 	call	0x2e90	; 0x2e90 <refresh>
	//_delay_ms(3000);
	buttonCheck();
     f44:	ae dc       	rcall	.-1700   	; 0x8a2 <buttonCheck>
     f46:	c1 e0       	ldi	r28, 0x01	; 1
     f48:	d0 e0       	ldi	r29, 0x00	; 0
     f4a:	47 ee       	ldi	r20, 0xE7	; 231
     f4c:	e4 2e       	mov	r14, r20
     f4e:	e1 0e       	add	r14, r17
     f50:	10 2f       	mov	r17, r16
     f52:	19 50       	subi	r17, 0x09	; 9
     f54:	42 c0       	rjmp	.+132    	; 0xfda <chooseDifficulty+0xe8>
	
	while ( (LEFT == 0) && (notLEFT) ) {
	
		clear();
     f56:	0e 94 c1 14 	call	0x2982	; 0x2982 <clear>
		if (RIGHT == 0) {
     f5a:	80 91 f2 01 	lds	r24, 0x01F2
     f5e:	90 91 f3 01 	lds	r25, 0x01F3
     f62:	89 2b       	or	r24, r25
     f64:	11 f4       	brne	.+4      	; 0xf6a <chooseDifficulty+0x78>
     f66:	c1 e0       	ldi	r28, 0x01	; 1
     f68:	d0 e0       	ldi	r29, 0x00	; 0
			notRIGHT = 1;
		}
		if (LEFT == 0) {
     f6a:	80 91 f0 01 	lds	r24, 0x01F0
     f6e:	90 91 f1 01 	lds	r25, 0x01F1
			notLEFT = 1;
		}
		if (RIGHT && notRIGHT) {
     f72:	80 91 f2 01 	lds	r24, 0x01F2
     f76:	90 91 f3 01 	lds	r25, 0x01F3
     f7a:	89 2b       	or	r24, r25
     f7c:	89 f0       	breq	.+34     	; 0xfa0 <chooseDifficulty+0xae>
     f7e:	20 97       	sbiw	r28, 0x00	; 0
     f80:	79 f0       	breq	.+30     	; 0xfa0 <chooseDifficulty+0xae>
			notRIGHT = 0;
			difficulty = (difficulty+1)%2;
     f82:	80 91 0e 02 	lds	r24, 0x020E
     f86:	90 91 0f 02 	lds	r25, 0x020F
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	62 e0       	ldi	r22, 0x02	; 2
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
     f94:	90 93 0f 02 	sts	0x020F, r25
     f98:	80 93 0e 02 	sts	0x020E, r24
     f9c:	c0 e0       	ldi	r28, 0x00	; 0
     f9e:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (difficulty == 0) {
     fa0:	80 91 0e 02 	lds	r24, 0x020E
     fa4:	90 91 0f 02 	lds	r25, 0x020F
     fa8:	89 2b       	or	r24, r25
     faa:	49 f4       	brne	.+18     	; 0xfbe <chooseDifficulty+0xcc>
		draw_string("Difficulty:", middle_x - 5*5, middle_y-9);
     fac:	89 e0       	ldi	r24, 0x09	; 9
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	6e 2d       	mov	r22, r14
     fb2:	41 2f       	mov	r20, r17
     fb4:	0e 94 33 17 	call	0x2e66	; 0x2e66 <draw_string>
		draw_string("Standard", middle_x - 4*5, middle_y);
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	08 c0       	rjmp	.+16     	; 0xfce <chooseDifficulty+0xdc>
		}
		else {
		draw_string("Difficulty:", middle_x - 5*5, middle_y-9);
     fbe:	89 e0       	ldi	r24, 0x09	; 9
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	6e 2d       	mov	r22, r14
     fc4:	41 2f       	mov	r20, r17
     fc6:	0e 94 33 17 	call	0x2e66	; 0x2e66 <draw_string>
		draw_string("Advanced", middle_x - 4*5, middle_y);
     fca:	85 e1       	ldi	r24, 0x15	; 21
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	6f 2d       	mov	r22, r15
     fd0:	40 2f       	mov	r20, r16
     fd2:	0e 94 33 17 	call	0x2e66	; 0x2e66 <draw_string>
		}
		refresh();
     fd6:	0e 94 48 17 	call	0x2e90	; 0x2e90 <refresh>
	draw_string("Standard", middle_x - 4*5, middle_y);
	refresh();
	//_delay_ms(3000);
	buttonCheck();
	
	while ( (LEFT == 0) && (notLEFT) ) {
     fda:	80 91 f0 01 	lds	r24, 0x01F0
     fde:	90 91 f1 01 	lds	r25, 0x01F1
     fe2:	89 2b       	or	r24, r25
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <chooseDifficulty+0xf6>
     fe6:	b7 cf       	rjmp	.-146    	; 0xf56 <chooseDifficulty+0x64>
		}
		refresh();
	
	}
	//difficulty = toggle;
}
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	08 95       	ret

00000ff6 <drawPit>:

}

void drawPit(void) {

	draw_line(pitLeft,pitTop,pitRight,pitTop);
     ff6:	20 91 2a 02 	lds	r18, 0x022A
     ffa:	80 91 22 02 	lds	r24, 0x0222
     ffe:	62 2f       	mov	r22, r18
    1000:	40 91 1a 02 	lds	r20, 0x021A
    1004:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <draw_line>
	draw_line(pitLeft,pitBottom,pitRight,pitBottom);
    1008:	20 91 20 02 	lds	r18, 0x0220
    100c:	80 91 22 02 	lds	r24, 0x0222
    1010:	62 2f       	mov	r22, r18
    1012:	40 91 1a 02 	lds	r20, 0x021A
    1016:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <draw_line>
	draw_line(pitLeft,pitTop,pitLeft,pitBottom);
    101a:	40 91 22 02 	lds	r20, 0x0222
    101e:	84 2f       	mov	r24, r20
    1020:	60 91 2a 02 	lds	r22, 0x022A
    1024:	20 91 20 02 	lds	r18, 0x0220
    1028:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <draw_line>
	draw_line(pitRight,pitTop,pitRight,pitBottom);
    102c:	40 91 1a 02 	lds	r20, 0x021A
    1030:	84 2f       	mov	r24, r20
    1032:	60 91 2a 02 	lds	r22, 0x022A
    1036:	20 91 20 02 	lds	r18, 0x0220
    103a:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <draw_line>

0000103e <drawScreen>:

	}
	
}

void drawScreen(void) {
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
	draw_line(0,8,screen_x_Full,8);
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	68 e0       	ldi	r22, 0x08	; 8
    1046:	40 91 88 01 	lds	r20, 0x0188
    104a:	28 e0       	ldi	r18, 0x08	; 8
    104c:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <draw_line>
	draw_line(0,8,0,screen_y_Full);
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	68 e0       	ldi	r22, 0x08	; 8
    1054:	40 e0       	ldi	r20, 0x00	; 0
    1056:	20 91 8c 01 	lds	r18, 0x018C
    105a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <draw_line>
	draw_line(screen_x_Full,8,screen_x_Full,screen_y_Full);
    105e:	40 91 88 01 	lds	r20, 0x0188
    1062:	84 2f       	mov	r24, r20
    1064:	68 e0       	ldi	r22, 0x08	; 8
    1066:	20 91 8c 01 	lds	r18, 0x018C
    106a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <draw_line>
	draw_line(0,screen_y_Full,screen_x_Full,screen_y_Full);
    106e:	20 91 8c 01 	lds	r18, 0x018C
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	62 2f       	mov	r22, r18
    1076:	40 91 88 01 	lds	r20, 0x0188
    107a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <draw_line>
	draw_string("L: ",0,0);
    107e:	8e e1       	ldi	r24, 0x1E	; 30
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	0e 94 33 17 	call	0x2e66	; 0x2e66 <draw_string>
	draw_character((0x30 + Lives),11,0);
    108a:	80 91 ac 01 	lds	r24, 0x01AC
    108e:	80 5d       	subi	r24, 0xD0	; 208
    1090:	6b e0       	ldi	r22, 0x0B	; 11
    1092:	40 e0       	ldi	r20, 0x00	; 0
    1094:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <draw_character>
	draw_string("S: ", 21,0);
    1098:	82 e2       	ldi	r24, 0x22	; 34
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	65 e1       	ldi	r22, 0x15	; 21
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	0e 94 33 17 	call	0x2e66	; 0x2e66 <draw_string>
	int temp = Score/10;
    10a4:	00 91 10 02 	lds	r16, 0x0210
    10a8:	10 91 11 02 	lds	r17, 0x0211
	draw_character((0x30 + Score%10),37,0);
    10ac:	c8 01       	movw	r24, r16
    10ae:	6a e0       	ldi	r22, 0x0A	; 10
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    10b6:	80 5d       	subi	r24, 0xD0	; 208
    10b8:	65 e2       	ldi	r22, 0x25	; 37
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <draw_character>
	//if (Score > 9) 
	draw_character((0x30 + temp),31,0); //
    10c0:	c8 01       	movw	r24, r16
    10c2:	6a e0       	ldi	r22, 0x0A	; 10
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    10ca:	86 2f       	mov	r24, r22
    10cc:	80 5d       	subi	r24, 0xD0	; 208
    10ce:	6f e1       	ldi	r22, 0x1F	; 31
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <draw_character>
	//draw_character((0x30 + scoreCounter),40,0);
	draw_character((0x30 + Direction),78,0);
    10d6:	80 91 92 01 	lds	r24, 0x0192
    10da:	90 91 93 01 	lds	r25, 0x0193
    10de:	80 5d       	subi	r24, 0xD0	; 208
    10e0:	6e e4       	ldi	r22, 0x4E	; 78
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <draw_character>
	draw_character((0x30 + isInPit(my_pointer)),70,0);
    10e8:	80 91 24 02 	lds	r24, 0x0224
    10ec:	90 91 25 02 	lds	r25, 0x0225
    10f0:	94 dc       	rcall	.-1752   	; 0xa1a <isInPit>
    10f2:	80 5d       	subi	r24, 0xD0	; 208
    10f4:	66 e4       	ldi	r22, 0x46	; 70
    10f6:	40 e0       	ldi	r20, 0x00	; 0
    10f8:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <draw_character>

}
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	08 95       	ret

00001102 <CountDown>:
	Score = 0;
	activeZombies = numZombies;
	
}

void CountDown() {
    1102:	1f 93       	push	r17
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	13 e3       	ldi	r17, 0x33	; 51
    110a:	c0 e9       	ldi	r28, 0x90	; 144
    110c:	d1 e0       	ldi	r29, 0x01	; 1
	for (char i= 0x3; i>0x0; i--) {
		clear();
    110e:	0e 94 c1 14 	call	0x2982	; 0x2982 <clear>
		draw_string("Game Start In: ", 2,22); // 15*5 = 75 (84 - 75)/2 = 4
    1112:	86 e2       	ldi	r24, 0x26	; 38
    1114:	91 e0       	ldi	r25, 0x01	; 1
    1116:	62 e0       	ldi	r22, 0x02	; 2
    1118:	46 e1       	ldi	r20, 0x16	; 22
    111a:	0e 94 33 17 	call	0x2e66	; 0x2e66 <draw_string>
		draw_character((0x30 + i), 75,22);
    111e:	81 2f       	mov	r24, r17
    1120:	6b e4       	ldi	r22, 0x4B	; 75
    1122:	46 e1       	ldi	r20, 0x16	; 22
    1124:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <draw_character>
		refresh();
    1128:	0e 94 48 17 	call	0x2e90	; 0x2e90 <refresh>
    112c:	80 e1       	ldi	r24, 0x10	; 16
    112e:	97 e2       	ldi	r25, 0x27	; 39
    1130:	fe 01       	movw	r30, r28
    1132:	31 97       	sbiw	r30, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <CountDown+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1136:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1138:	d9 f7       	brne	.-10     	; 0x1130 <CountDown+0x2e>
    113a:	11 50       	subi	r17, 0x01	; 1
	activeZombies = numZombies;
	
}

void CountDown() {
	for (char i= 0x3; i>0x0; i--) {
    113c:	10 33       	cpi	r17, 0x30	; 48
    113e:	39 f7       	brne	.-50     	; 0x110e <CountDown+0xc>
		draw_string("Game Start In: ", 2,22); // 15*5 = 75 (84 - 75)/2 = 4
		draw_character((0x30 + i), 75,22);
		refresh();
		_delay_ms(1000);
	}
}
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	1f 91       	pop	r17
    1146:	08 95       	ret

00001148 <seedWithButtonPress>:
	return out;
}

void seedWithButtonPress() {
// turn on teensy LED
PORTD |= 0b01000000;
    1148:	5e 9a       	sbi	0x0b, 6	; 11
// Configure port B for the buttons....
DDRB |= 0b00001100;
    114a:	84 b1       	in	r24, 0x04	; 4
    114c:	8c 60       	ori	r24, 0x0C	; 12
    114e:	84 b9       	out	0x04, r24	; 4
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	02 c0       	rjmp	.+4      	; 0x115a <seedWithButtonPress+0x12>
// Wait for the button press on SW0 while iterating the seed
unsigned int seed = 0;
while (!RIGHT && !LEFT) {
seed++;
    1156:	2f 5f       	subi	r18, 0xFF	; 255
    1158:	3f 4f       	sbci	r19, 0xFF	; 255
PORTD |= 0b01000000;
// Configure port B for the buttons....
DDRB |= 0b00001100;
// Wait for the button press on SW0 while iterating the seed
unsigned int seed = 0;
while (!RIGHT && !LEFT) {
    115a:	80 91 f2 01 	lds	r24, 0x01F2
    115e:	90 91 f3 01 	lds	r25, 0x01F3
    1162:	89 2b       	or	r24, r25
    1164:	31 f4       	brne	.+12     	; 0x1172 <seedWithButtonPress+0x2a>
    1166:	80 91 f0 01 	lds	r24, 0x01F0
    116a:	90 91 f1 01 	lds	r25, 0x01F1
    116e:	89 2b       	or	r24, r25
    1170:	91 f3       	breq	.-28     	; 0x1156 <seedWithButtonPress+0xe>
seed++;
}
// Seed the random number generator
srand(seed);
    1172:	c9 01       	movw	r24, r18
    1174:	0e 94 4f 19 	call	0x329e	; 0x329e <srand>
// What does dgbI do? where is it from?
// dbgI((int) seed, 10);
// turn off teensy LED
PORTD = 0b00000000;
    1178:	1b b8       	out	0x0b, r1	; 11
}
    117a:	08 95       	ret

0000117c <randInRange>:
		LEFT = 0;
	}
	*/
}

int randInRange(int min, int max) {
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	8c 01       	movw	r16, r24
    1186:	7b 01       	movw	r14, r22
	int out = min + rand()%(max+1 - min);
    1188:	0e 94 4c 19 	call	0x3298	; 0x3298 <rand>
    118c:	e0 1a       	sub	r14, r16
    118e:	f1 0a       	sbc	r15, r17
    1190:	08 94       	sec
    1192:	e1 1c       	adc	r14, r1
    1194:	f1 1c       	adc	r15, r1
    1196:	b7 01       	movw	r22, r14
    1198:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    119c:	9c 01       	movw	r18, r24
    119e:	20 0f       	add	r18, r16
    11a0:	31 1f       	adc	r19, r17
	return out;
}
    11a2:	c9 01       	movw	r24, r18
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	08 95       	ret

000011ae <setupGrenade>:
	sword -> x = x;
	sword -> y = y;
	sword -> is_visible = 1;
}

void setupGrenade(void) {
    11ae:	8f 92       	push	r8
    11b0:	9f 92       	push	r9
    11b2:	af 92       	push	r10
    11b4:	bf 92       	push	r11
    11b6:	cf 92       	push	r12
    11b8:	df 92       	push	r13
    11ba:	ef 92       	push	r14
    11bc:	ff 92       	push	r15
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
	int x = randInRange(2,screen_x);
    11c2:	60 91 86 01 	lds	r22, 0x0186
    11c6:	70 91 87 01 	lds	r23, 0x0187
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	d6 df       	rcall	.-84     	; 0x117c <randInRange>
    11d0:	7c 01       	movw	r14, r24
	int y = randInRange(9,screen_y);
    11d2:	60 91 8a 01 	lds	r22, 0x018A
    11d6:	70 91 8b 01 	lds	r23, 0x018B
    11da:	89 e0       	ldi	r24, 0x09	; 9
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	ce df       	rcall	.-100    	; 0x117c <randInRange>
    11e0:	5c 01       	movw	r10, r24
	grenade -> x = x;
    11e2:	80 90 1c 02 	lds	r8, 0x021C
    11e6:	90 90 1d 02 	lds	r9, 0x021D
    11ea:	00 27       	eor	r16, r16
    11ec:	f7 fc       	sbrc	r15, 7
    11ee:	00 95       	com	r16
    11f0:	10 2f       	mov	r17, r16
    11f2:	c8 01       	movw	r24, r16
    11f4:	b7 01       	movw	r22, r14
    11f6:	0e 94 0d 14 	call	0x281a	; 0x281a <__floatsisf>
    11fa:	f4 01       	movw	r30, r8
    11fc:	60 83       	st	Z, r22
    11fe:	71 83       	std	Z+1, r23	; 0x01
    1200:	82 83       	std	Z+2, r24	; 0x02
    1202:	93 83       	std	Z+3, r25	; 0x03
	grenade -> y = y;
    1204:	cc 24       	eor	r12, r12
    1206:	b7 fc       	sbrc	r11, 7
    1208:	c0 94       	com	r12
    120a:	dc 2c       	mov	r13, r12
    120c:	c6 01       	movw	r24, r12
    120e:	b5 01       	movw	r22, r10
    1210:	0e 94 0d 14 	call	0x281a	; 0x281a <__floatsisf>
    1214:	f4 01       	movw	r30, r8
    1216:	64 83       	std	Z+4, r22	; 0x04
    1218:	75 83       	std	Z+5, r23	; 0x05
    121a:	86 83       	std	Z+6, r24	; 0x06
    121c:	97 83       	std	Z+7, r25	; 0x07
	grenade -> is_visible = 1;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	82 87       	std	Z+10, r24	; 0x0a
}
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	bf 90       	pop	r11
    1230:	af 90       	pop	r10
    1232:	9f 90       	pop	r9
    1234:	8f 90       	pop	r8
    1236:	08 95       	ret

00001238 <setupSword>:
	return 0;
	}

}

void setupSword(void) {
    1238:	8f 92       	push	r8
    123a:	9f 92       	push	r9
    123c:	af 92       	push	r10
    123e:	bf 92       	push	r11
    1240:	cf 92       	push	r12
    1242:	df 92       	push	r13
    1244:	ef 92       	push	r14
    1246:	ff 92       	push	r15
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
	int x = randInRange(2,screen_x);
    124c:	60 91 86 01 	lds	r22, 0x0186
    1250:	70 91 87 01 	lds	r23, 0x0187
    1254:	82 e0       	ldi	r24, 0x02	; 2
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	91 df       	rcall	.-222    	; 0x117c <randInRange>
    125a:	7c 01       	movw	r14, r24
	int y = randInRange(9,screen_y);
    125c:	60 91 8a 01 	lds	r22, 0x018A
    1260:	70 91 8b 01 	lds	r23, 0x018B
    1264:	89 e0       	ldi	r24, 0x09	; 9
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	89 df       	rcall	.-238    	; 0x117c <randInRange>
    126a:	5c 01       	movw	r10, r24
	sword -> x = x;
    126c:	80 90 16 02 	lds	r8, 0x0216
    1270:	90 90 17 02 	lds	r9, 0x0217
    1274:	00 27       	eor	r16, r16
    1276:	f7 fc       	sbrc	r15, 7
    1278:	00 95       	com	r16
    127a:	10 2f       	mov	r17, r16
    127c:	c8 01       	movw	r24, r16
    127e:	b7 01       	movw	r22, r14
    1280:	0e 94 0d 14 	call	0x281a	; 0x281a <__floatsisf>
    1284:	f4 01       	movw	r30, r8
    1286:	60 83       	st	Z, r22
    1288:	71 83       	std	Z+1, r23	; 0x01
    128a:	82 83       	std	Z+2, r24	; 0x02
    128c:	93 83       	std	Z+3, r25	; 0x03
	sword -> y = y;
    128e:	cc 24       	eor	r12, r12
    1290:	b7 fc       	sbrc	r11, 7
    1292:	c0 94       	com	r12
    1294:	dc 2c       	mov	r13, r12
    1296:	c6 01       	movw	r24, r12
    1298:	b5 01       	movw	r22, r10
    129a:	0e 94 0d 14 	call	0x281a	; 0x281a <__floatsisf>
    129e:	f4 01       	movw	r30, r8
    12a0:	64 83       	std	Z+4, r22	; 0x04
    12a2:	75 83       	std	Z+5, r23	; 0x05
    12a4:	86 83       	std	Z+6, r24	; 0x06
    12a6:	97 83       	std	Z+7, r25	; 0x07
	sword -> is_visible = 1;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	82 87       	std	Z+10, r24	; 0x0a
}
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	ff 90       	pop	r15
    12b2:	ef 90       	pop	r14
    12b4:	df 90       	pop	r13
    12b6:	cf 90       	pop	r12
    12b8:	bf 90       	pop	r11
    12ba:	af 90       	pop	r10
    12bc:	9f 90       	pop	r9
    12be:	8f 90       	pop	r8
    12c0:	08 95       	ret

000012c2 <setupPit>:
	grenade -> is_visible = 0;
	}
	
}

void setupPit(void) {
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17

	int pitwidth = randInRange(6,12);
    12ca:	86 e0       	ldi	r24, 0x06	; 6
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	6c e0       	ldi	r22, 0x0C	; 12
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	54 df       	rcall	.-344    	; 0x117c <randInRange>
    12d4:	8c 01       	movw	r16, r24
	int pitheight = randInRange(6,12);
    12d6:	86 e0       	ldi	r24, 0x06	; 6
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	6c e0       	ldi	r22, 0x0C	; 12
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	4e df       	rcall	.-356    	; 0x117c <randInRange>
    12e0:	7c 01       	movw	r14, r24
	pitLeft = randInRange(20,screen_x_Full-20);
    12e2:	60 91 88 01 	lds	r22, 0x0188
    12e6:	70 91 89 01 	lds	r23, 0x0189
    12ea:	64 51       	subi	r22, 0x14	; 20
    12ec:	70 40       	sbci	r23, 0x00	; 0
    12ee:	84 e1       	ldi	r24, 0x14	; 20
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	44 df       	rcall	.-376    	; 0x117c <randInRange>
    12f4:	90 93 23 02 	sts	0x0223, r25
    12f8:	80 93 22 02 	sts	0x0222, r24
	pitRight = pitLeft + pitwidth;
    12fc:	80 0f       	add	r24, r16
    12fe:	91 1f       	adc	r25, r17
    1300:	90 93 1b 02 	sts	0x021B, r25
    1304:	80 93 1a 02 	sts	0x021A, r24
	pitTop = randInRange(9+20,screen_y_Full-20);
    1308:	60 91 8c 01 	lds	r22, 0x018C
    130c:	70 91 8d 01 	lds	r23, 0x018D
    1310:	64 51       	subi	r22, 0x14	; 20
    1312:	70 40       	sbci	r23, 0x00	; 0
    1314:	8d e1       	ldi	r24, 0x1D	; 29
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	31 df       	rcall	.-414    	; 0x117c <randInRange>
    131a:	90 93 2b 02 	sts	0x022B, r25
    131e:	80 93 2a 02 	sts	0x022A, r24
	pitBottom = pitTop + pitheight;
    1322:	8e 0d       	add	r24, r14
    1324:	9f 1d       	adc	r25, r15
    1326:	90 93 21 02 	sts	0x0221, r25
    132a:	80 93 20 02 	sts	0x0220, r24
	drawPit();
    132e:	63 de       	rcall	.-826    	; 0xff6 <drawPit>

}
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	08 95       	ret

0000133a <setupZombies>:
	draw_character((0x30 + Direction),78,0);
	draw_character((0x30 + isInPit(my_pointer)),70,0);

}

void setupZombies(void ) {
    133a:	2f 92       	push	r2
    133c:	3f 92       	push	r3
    133e:	4f 92       	push	r4
    1340:	5f 92       	push	r5
    1342:	6f 92       	push	r6
    1344:	7f 92       	push	r7
    1346:	8f 92       	push	r8
    1348:	9f 92       	push	r9
    134a:	af 92       	push	r10
    134c:	bf 92       	push	r11
    134e:	cf 92       	push	r12
    1350:	df 92       	push	r13
    1352:	ef 92       	push	r14
    1354:	ff 92       	push	r15
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	00 d0       	rcall	.+0      	; 0x1360 <setupZombies+0x26>
    1360:	00 d0       	rcall	.+0      	; 0x1362 <setupZombies+0x28>
    1362:	00 d0       	rcall	.+0      	; 0x1364 <setupZombies+0x2a>
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62

	int middle_x = screen_x/2;
    1368:	80 91 86 01 	lds	r24, 0x0186
    136c:	90 91 87 01 	lds	r25, 0x0187
    1370:	62 e0       	ldi	r22, 0x02	; 2
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    1378:	6d 83       	std	Y+5, r22	; 0x05
    137a:	7e 83       	std	Y+6, r23	; 0x06
	int middle_y = screen_y/2 + 5;
    137c:	80 91 8a 01 	lds	r24, 0x018A
    1380:	90 91 8b 01 	lds	r25, 0x018B
    1384:	62 e0       	ldi	r22, 0x02	; 2
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    138c:	1b 01       	movw	r2, r22
    138e:	85 e0       	ldi	r24, 0x05	; 5
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	28 0e       	add	r2, r24
    1394:	39 1e       	adc	r3, r25
    1396:	ac e2       	ldi	r26, 0x2C	; 44
    1398:	b2 e0       	ldi	r27, 0x02	; 2
    139a:	ba 83       	std	Y+2, r27	; 0x02
    139c:	a9 83       	std	Y+1, r26	; 0x01
    139e:	2d 01       	movw	r4, r26
    13a0:	66 24       	eor	r6, r6
    13a2:	77 24       	eor	r7, r7
	byte x, y;
	
	for (int i = 0; i<numZombies/4; i++) {
		x = randInRange(1,middle_x-10);
    13a4:	ed 81       	ldd	r30, Y+5	; 0x05
    13a6:	fe 81       	ldd	r31, Y+6	; 0x06
    13a8:	3a 97       	sbiw	r30, 0x0a	; 10
    13aa:	fc 83       	std	Y+4, r31	; 0x04
    13ac:	eb 83       	std	Y+3, r30	; 0x03
    13ae:	31 c0       	rjmp	.+98     	; 0x1412 <setupZombies+0xd8>
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	6b 81       	ldd	r22, Y+3	; 0x03
    13b6:	7c 81       	ldd	r23, Y+4	; 0x04
    13b8:	e1 de       	rcall	.-574    	; 0x117c <randInRange>
    13ba:	a8 2e       	mov	r10, r24
		y = randInRange(9, screen_y-1);
    13bc:	60 91 8a 01 	lds	r22, 0x018A
    13c0:	70 91 8b 01 	lds	r23, 0x018B
    13c4:	61 50       	subi	r22, 0x01	; 1
    13c6:	70 40       	sbci	r23, 0x00	; 0
    13c8:	89 e0       	ldi	r24, 0x09	; 9
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	d7 de       	rcall	.-594    	; 0x117c <randInRange>
    13ce:	e8 2e       	mov	r14, r24
		zombie[i] -> x = x;
    13d0:	d2 01       	movw	r26, r4
    13d2:	8d 90       	ld	r8, X+
    13d4:	9d 90       	ld	r9, X+
    13d6:	2d 01       	movw	r4, r26
    13d8:	bb 24       	eor	r11, r11
    13da:	cc 24       	eor	r12, r12
    13dc:	dd 24       	eor	r13, r13
    13de:	c6 01       	movw	r24, r12
    13e0:	b5 01       	movw	r22, r10
    13e2:	0e 94 0b 14 	call	0x2816	; 0x2816 <__floatunsisf>
    13e6:	f4 01       	movw	r30, r8
    13e8:	60 83       	st	Z, r22
    13ea:	71 83       	std	Z+1, r23	; 0x01
    13ec:	82 83       	std	Z+2, r24	; 0x02
    13ee:	93 83       	std	Z+3, r25	; 0x03
		zombie[i] -> y = y;
    13f0:	ff 24       	eor	r15, r15
    13f2:	00 e0       	ldi	r16, 0x00	; 0
    13f4:	10 e0       	ldi	r17, 0x00	; 0
    13f6:	c8 01       	movw	r24, r16
    13f8:	b7 01       	movw	r22, r14
    13fa:	0e 94 0b 14 	call	0x2816	; 0x2816 <__floatunsisf>
    13fe:	d4 01       	movw	r26, r8
    1400:	14 96       	adiw	r26, 0x04	; 4
    1402:	6d 93       	st	X+, r22
    1404:	7d 93       	st	X+, r23
    1406:	8d 93       	st	X+, r24
    1408:	9c 93       	st	X, r25
    140a:	17 97       	sbiw	r26, 0x07	; 7

	int middle_x = screen_x/2;
	int middle_y = screen_y/2 + 5;
	byte x, y;
	
	for (int i = 0; i<numZombies/4; i++) {
    140c:	08 94       	sec
    140e:	61 1c       	adc	r6, r1
    1410:	71 1c       	adc	r7, r1
    1412:	80 91 a8 01 	lds	r24, 0x01A8
    1416:	90 91 a9 01 	lds	r25, 0x01A9
    141a:	64 e0       	ldi	r22, 0x04	; 4
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    1422:	66 16       	cp	r6, r22
    1424:	77 06       	cpc	r7, r23
    1426:	24 f2       	brlt	.-120    	; 0x13b0 <setupZombies+0x76>
    1428:	66 24       	eor	r6, r6
    142a:	77 24       	eor	r7, r7
		y = randInRange(9, screen_y-1);
		zombie[i] -> x = x;
		zombie[i] -> y = y;
	}
	for (int i = 0; i<numZombies/4; i++) {
		x = randInRange(middle_x+10,screen_x);
    142c:	4d 80       	ldd	r4, Y+5	; 0x05
    142e:	5e 80       	ldd	r5, Y+6	; 0x06
    1430:	ea e0       	ldi	r30, 0x0A	; 10
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	4e 0e       	add	r4, r30
    1436:	5f 1e       	adc	r5, r31
    1438:	3e c0       	rjmp	.+124    	; 0x14b6 <setupZombies+0x17c>
    143a:	60 91 86 01 	lds	r22, 0x0186
    143e:	70 91 87 01 	lds	r23, 0x0187
    1442:	c2 01       	movw	r24, r4
    1444:	9b de       	rcall	.-714    	; 0x117c <randInRange>
    1446:	a8 2e       	mov	r10, r24
		y = randInRange(9, screen_y-1);
    1448:	60 91 8a 01 	lds	r22, 0x018A
    144c:	70 91 8b 01 	lds	r23, 0x018B
    1450:	61 50       	subi	r22, 0x01	; 1
    1452:	70 40       	sbci	r23, 0x00	; 0
    1454:	89 e0       	ldi	r24, 0x09	; 9
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	91 de       	rcall	.-734    	; 0x117c <randInRange>
    145a:	e8 2e       	mov	r14, r24
		zombie[i+(numZombies/4)] -> x = x;
    145c:	80 91 a8 01 	lds	r24, 0x01A8
    1460:	90 91 a9 01 	lds	r25, 0x01A9
    1464:	64 e0       	ldi	r22, 0x04	; 4
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    146c:	fb 01       	movw	r30, r22
    146e:	e6 0d       	add	r30, r6
    1470:	f7 1d       	adc	r31, r7
    1472:	ee 0f       	add	r30, r30
    1474:	ff 1f       	adc	r31, r31
    1476:	e4 5d       	subi	r30, 0xD4	; 212
    1478:	fd 4f       	sbci	r31, 0xFD	; 253
    147a:	80 80       	ld	r8, Z
    147c:	91 80       	ldd	r9, Z+1	; 0x01
    147e:	bb 24       	eor	r11, r11
    1480:	cc 24       	eor	r12, r12
    1482:	dd 24       	eor	r13, r13
    1484:	c6 01       	movw	r24, r12
    1486:	b5 01       	movw	r22, r10
    1488:	0e 94 0b 14 	call	0x2816	; 0x2816 <__floatunsisf>
    148c:	d4 01       	movw	r26, r8
    148e:	6d 93       	st	X+, r22
    1490:	7d 93       	st	X+, r23
    1492:	8d 93       	st	X+, r24
    1494:	9c 93       	st	X, r25
    1496:	13 97       	sbiw	r26, 0x03	; 3
		zombie[i+(numZombies/4)] -> y = y;
    1498:	ff 24       	eor	r15, r15
    149a:	00 e0       	ldi	r16, 0x00	; 0
    149c:	10 e0       	ldi	r17, 0x00	; 0
    149e:	c8 01       	movw	r24, r16
    14a0:	b7 01       	movw	r22, r14
    14a2:	0e 94 0b 14 	call	0x2816	; 0x2816 <__floatunsisf>
    14a6:	f4 01       	movw	r30, r8
    14a8:	64 83       	std	Z+4, r22	; 0x04
    14aa:	75 83       	std	Z+5, r23	; 0x05
    14ac:	86 83       	std	Z+6, r24	; 0x06
    14ae:	97 83       	std	Z+7, r25	; 0x07
		x = randInRange(1,middle_x-10);
		y = randInRange(9, screen_y-1);
		zombie[i] -> x = x;
		zombie[i] -> y = y;
	}
	for (int i = 0; i<numZombies/4; i++) {
    14b0:	08 94       	sec
    14b2:	61 1c       	adc	r6, r1
    14b4:	71 1c       	adc	r7, r1
    14b6:	80 91 a8 01 	lds	r24, 0x01A8
    14ba:	90 91 a9 01 	lds	r25, 0x01A9
    14be:	64 e0       	ldi	r22, 0x04	; 4
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    14c6:	66 16       	cp	r6, r22
    14c8:	77 06       	cpc	r7, r23
    14ca:	0c f4       	brge	.+2      	; 0x14ce <setupZombies+0x194>
    14cc:	b6 cf       	rjmp	.-148    	; 0x143a <setupZombies+0x100>
    14ce:	44 24       	eor	r4, r4
    14d0:	55 24       	eor	r5, r5
		zombie[i+(numZombies/4)] -> x = x;
		zombie[i+(numZombies/4)] -> y = y;
	}
	for (int i = 0; i<numZombies/4; i++) {
		x = randInRange(1,screen_x);
		y = randInRange(9, middle_y-10);
    14d2:	b6 ef       	ldi	r27, 0xF6	; 246
    14d4:	6b 2e       	mov	r6, r27
    14d6:	bf ef       	ldi	r27, 0xFF	; 255
    14d8:	7b 2e       	mov	r7, r27
    14da:	62 0c       	add	r6, r2
    14dc:	73 1c       	adc	r7, r3
    14de:	3a c0       	rjmp	.+116    	; 0x1554 <setupZombies+0x21a>
		y = randInRange(9, screen_y-1);
		zombie[i+(numZombies/4)] -> x = x;
		zombie[i+(numZombies/4)] -> y = y;
	}
	for (int i = 0; i<numZombies/4; i++) {
		x = randInRange(1,screen_x);
    14e0:	60 91 86 01 	lds	r22, 0x0186
    14e4:	70 91 87 01 	lds	r23, 0x0187
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	47 de       	rcall	.-882    	; 0x117c <randInRange>
    14ee:	e8 2e       	mov	r14, r24
		y = randInRange(9, middle_y-10);
    14f0:	89 e0       	ldi	r24, 0x09	; 9
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	b3 01       	movw	r22, r6
    14f6:	42 de       	rcall	.-892    	; 0x117c <randInRange>
    14f8:	a8 2e       	mov	r10, r24
		zombie[i+(numZombies/2)] -> x = x;
    14fa:	80 91 a8 01 	lds	r24, 0x01A8
    14fe:	90 91 a9 01 	lds	r25, 0x01A9
    1502:	62 e0       	ldi	r22, 0x02	; 2
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    150a:	fb 01       	movw	r30, r22
    150c:	e4 0d       	add	r30, r4
    150e:	f5 1d       	adc	r31, r5
    1510:	ee 0f       	add	r30, r30
    1512:	ff 1f       	adc	r31, r31
    1514:	e4 5d       	subi	r30, 0xD4	; 212
    1516:	fd 4f       	sbci	r31, 0xFD	; 253
    1518:	80 80       	ld	r8, Z
    151a:	91 80       	ldd	r9, Z+1	; 0x01
    151c:	ff 24       	eor	r15, r15
    151e:	00 e0       	ldi	r16, 0x00	; 0
    1520:	10 e0       	ldi	r17, 0x00	; 0
    1522:	c8 01       	movw	r24, r16
    1524:	b7 01       	movw	r22, r14
    1526:	0e 94 0b 14 	call	0x2816	; 0x2816 <__floatunsisf>
    152a:	d4 01       	movw	r26, r8
    152c:	6d 93       	st	X+, r22
    152e:	7d 93       	st	X+, r23
    1530:	8d 93       	st	X+, r24
    1532:	9c 93       	st	X, r25
    1534:	13 97       	sbiw	r26, 0x03	; 3
		zombie[i+(numZombies/2)] -> y = y;
    1536:	bb 24       	eor	r11, r11
    1538:	cc 24       	eor	r12, r12
    153a:	dd 24       	eor	r13, r13
    153c:	c6 01       	movw	r24, r12
    153e:	b5 01       	movw	r22, r10
    1540:	0e 94 0b 14 	call	0x2816	; 0x2816 <__floatunsisf>
    1544:	f4 01       	movw	r30, r8
    1546:	64 83       	std	Z+4, r22	; 0x04
    1548:	75 83       	std	Z+5, r23	; 0x05
    154a:	86 83       	std	Z+6, r24	; 0x06
    154c:	97 83       	std	Z+7, r25	; 0x07
		x = randInRange(middle_x+10,screen_x);
		y = randInRange(9, screen_y-1);
		zombie[i+(numZombies/4)] -> x = x;
		zombie[i+(numZombies/4)] -> y = y;
	}
	for (int i = 0; i<numZombies/4; i++) {
    154e:	08 94       	sec
    1550:	41 1c       	adc	r4, r1
    1552:	51 1c       	adc	r5, r1
    1554:	80 91 a8 01 	lds	r24, 0x01A8
    1558:	90 91 a9 01 	lds	r25, 0x01A9
    155c:	64 e0       	ldi	r22, 0x04	; 4
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    1564:	46 16       	cp	r4, r22
    1566:	57 06       	cpc	r5, r23
    1568:	0c f4       	brge	.+2      	; 0x156c <setupZombies+0x232>
    156a:	ba cf       	rjmp	.-140    	; 0x14e0 <setupZombies+0x1a6>
    156c:	44 24       	eor	r4, r4
    156e:	55 24       	eor	r5, r5
		zombie[i+(numZombies/2)] -> x = x;
		zombie[i+(numZombies/2)] -> y = y;
	}
	for (int i = 0; i<numZombies/4; i++) {
		x = randInRange(1,screen_x);
		y = randInRange(middle_y+10,screen_y);
    1570:	ea e0       	ldi	r30, 0x0A	; 10
    1572:	6e 2e       	mov	r6, r30
    1574:	71 2c       	mov	r7, r1
    1576:	62 0c       	add	r6, r2
    1578:	73 1c       	adc	r7, r3
    157a:	41 c0       	rjmp	.+130    	; 0x15fe <setupZombies+0x2c4>
		y = randInRange(9, middle_y-10);
		zombie[i+(numZombies/2)] -> x = x;
		zombie[i+(numZombies/2)] -> y = y;
	}
	for (int i = 0; i<numZombies/4; i++) {
		x = randInRange(1,screen_x);
    157c:	60 91 86 01 	lds	r22, 0x0186
    1580:	70 91 87 01 	lds	r23, 0x0187
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	f9 dd       	rcall	.-1038   	; 0x117c <randInRange>
    158a:	e8 2e       	mov	r14, r24
		y = randInRange(middle_y+10,screen_y);
    158c:	60 91 8a 01 	lds	r22, 0x018A
    1590:	70 91 8b 01 	lds	r23, 0x018B
    1594:	c3 01       	movw	r24, r6
    1596:	f2 dd       	rcall	.-1052   	; 0x117c <randInRange>
    1598:	a8 2e       	mov	r10, r24
		zombie[i+(3*numZombies/4)] -> x = x;
    159a:	20 91 a8 01 	lds	r18, 0x01A8
    159e:	30 91 a9 01 	lds	r19, 0x01A9
    15a2:	c9 01       	movw	r24, r18
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	82 0f       	add	r24, r18
    15aa:	93 1f       	adc	r25, r19
    15ac:	64 e0       	ldi	r22, 0x04	; 4
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    15b4:	fb 01       	movw	r30, r22
    15b6:	e4 0d       	add	r30, r4
    15b8:	f5 1d       	adc	r31, r5
    15ba:	ee 0f       	add	r30, r30
    15bc:	ff 1f       	adc	r31, r31
    15be:	e4 5d       	subi	r30, 0xD4	; 212
    15c0:	fd 4f       	sbci	r31, 0xFD	; 253
    15c2:	80 80       	ld	r8, Z
    15c4:	91 80       	ldd	r9, Z+1	; 0x01
    15c6:	ff 24       	eor	r15, r15
    15c8:	00 e0       	ldi	r16, 0x00	; 0
    15ca:	10 e0       	ldi	r17, 0x00	; 0
    15cc:	c8 01       	movw	r24, r16
    15ce:	b7 01       	movw	r22, r14
    15d0:	0e 94 0b 14 	call	0x2816	; 0x2816 <__floatunsisf>
    15d4:	d4 01       	movw	r26, r8
    15d6:	6d 93       	st	X+, r22
    15d8:	7d 93       	st	X+, r23
    15da:	8d 93       	st	X+, r24
    15dc:	9c 93       	st	X, r25
    15de:	13 97       	sbiw	r26, 0x03	; 3
		zombie[i+(3*numZombies/4)] -> y = y;
    15e0:	bb 24       	eor	r11, r11
    15e2:	cc 24       	eor	r12, r12
    15e4:	dd 24       	eor	r13, r13
    15e6:	c6 01       	movw	r24, r12
    15e8:	b5 01       	movw	r22, r10
    15ea:	0e 94 0b 14 	call	0x2816	; 0x2816 <__floatunsisf>
    15ee:	f4 01       	movw	r30, r8
    15f0:	64 83       	std	Z+4, r22	; 0x04
    15f2:	75 83       	std	Z+5, r23	; 0x05
    15f4:	86 83       	std	Z+6, r24	; 0x06
    15f6:	97 83       	std	Z+7, r25	; 0x07
		x = randInRange(1,screen_x);
		y = randInRange(9, middle_y-10);
		zombie[i+(numZombies/2)] -> x = x;
		zombie[i+(numZombies/2)] -> y = y;
	}
	for (int i = 0; i<numZombies/4; i++) {
    15f8:	08 94       	sec
    15fa:	41 1c       	adc	r4, r1
    15fc:	51 1c       	adc	r5, r1
    15fe:	80 91 a8 01 	lds	r24, 0x01A8
    1602:	90 91 a9 01 	lds	r25, 0x01A9
    1606:	64 e0       	ldi	r22, 0x04	; 4
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    160e:	46 16       	cp	r4, r22
    1610:	57 06       	cpc	r5, r23
    1612:	0c f4       	brge	.+2      	; 0x1616 <setupZombies+0x2dc>
    1614:	b3 cf       	rjmp	.-154    	; 0x157c <setupZombies+0x242>
    1616:	04 e9       	ldi	r16, 0x94	; 148
    1618:	11 e0       	ldi	r17, 0x01	; 1
    161a:	66 24       	eor	r6, r6
    161c:	77 24       	eor	r7, r7
		zombie[i+(3*numZombies/4)] -> y = y;
	}
	for (int i = 0; i<numZombies; i++) {
	zDirection[i] = randInRange(0,3);
	if (notOver == 0) {
	zombie[i] -> is_visible = 1;
    161e:	ee 24       	eor	r14, r14
    1620:	e3 94       	inc	r14
    1622:	1d c0       	rjmp	.+58     	; 0x165e <setupZombies+0x324>
		y = randInRange(middle_y+10,screen_y);
		zombie[i+(3*numZombies/4)] -> x = x;
		zombie[i+(3*numZombies/4)] -> y = y;
	}
	for (int i = 0; i<numZombies; i++) {
	zDirection[i] = randInRange(0,3);
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	63 e0       	ldi	r22, 0x03	; 3
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	a7 dd       	rcall	.-1202   	; 0x117c <randInRange>
    162e:	d8 01       	movw	r26, r16
    1630:	8d 93       	st	X+, r24
    1632:	9c 93       	st	X, r25
	if (notOver == 0) {
    1634:	80 91 08 02 	lds	r24, 0x0208
    1638:	90 91 09 02 	lds	r25, 0x0209
    163c:	89 2b       	or	r24, r25
    163e:	29 f4       	brne	.+10     	; 0x164a <setupZombies+0x310>
	zombie[i] -> is_visible = 1;
    1640:	a9 81       	ldd	r26, Y+1	; 0x01
    1642:	ba 81       	ldd	r27, Y+2	; 0x02
    1644:	ed 91       	ld	r30, X+
    1646:	fc 91       	ld	r31, X
    1648:	e2 86       	std	Z+10, r14	; 0x0a
		x = randInRange(1,screen_x);
		y = randInRange(middle_y+10,screen_y);
		zombie[i+(3*numZombies/4)] -> x = x;
		zombie[i+(3*numZombies/4)] -> y = y;
	}
	for (int i = 0; i<numZombies; i++) {
    164a:	08 94       	sec
    164c:	61 1c       	adc	r6, r1
    164e:	71 1c       	adc	r7, r1
    1650:	0e 5f       	subi	r16, 0xFE	; 254
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	e9 81       	ldd	r30, Y+1	; 0x01
    1656:	fa 81       	ldd	r31, Y+2	; 0x02
    1658:	32 96       	adiw	r30, 0x02	; 2
    165a:	fa 83       	std	Y+2, r31	; 0x02
    165c:	e9 83       	std	Y+1, r30	; 0x01
    165e:	80 91 a8 01 	lds	r24, 0x01A8
    1662:	90 91 a9 01 	lds	r25, 0x01A9
    1666:	68 16       	cp	r6, r24
    1668:	79 06       	cpc	r7, r25
    166a:	e4 f2       	brlt	.-72     	; 0x1624 <setupZombies+0x2ea>
	zDirection[i] = randInRange(0,3);
	if (notOver == 0) {
	zombie[i] -> is_visible = 1;
	}
	}
}
    166c:	26 96       	adiw	r28, 0x06	; 6
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	cf 90       	pop	r12
    1688:	bf 90       	pop	r11
    168a:	af 90       	pop	r10
    168c:	9f 90       	pop	r9
    168e:	8f 90       	pop	r8
    1690:	7f 90       	pop	r7
    1692:	6f 90       	pop	r6
    1694:	5f 90       	pop	r5
    1696:	4f 90       	pop	r4
    1698:	3f 90       	pop	r3
    169a:	2f 90       	pop	r2
    169c:	08 95       	ret

0000169e <zombiesForward>:
	my_pointer -> x += HeroX;
	my_pointer -> y += HeroY;

}

void zombiesForward(void) {
    169e:	2f 92       	push	r2
    16a0:	3f 92       	push	r3
    16a2:	4f 92       	push	r4
    16a4:	5f 92       	push	r5
    16a6:	6f 92       	push	r6
    16a8:	7f 92       	push	r7
    16aa:	8f 92       	push	r8
    16ac:	9f 92       	push	r9
    16ae:	af 92       	push	r10
    16b0:	bf 92       	push	r11
    16b2:	cf 92       	push	r12
    16b4:	df 92       	push	r13
    16b6:	ef 92       	push	r14
    16b8:	ff 92       	push	r15
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <zombiesForward+0x26>
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <zombiesForward+0x28>
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	2c e2       	ldi	r18, 0x2C	; 44
    16cc:	32 e0       	ldi	r19, 0x02	; 2
    16ce:	3a 83       	std	Y+2, r19	; 0x02
    16d0:	29 83       	std	Y+1, r18	; 0x01
    16d2:	64 e9       	ldi	r22, 0x94	; 148
    16d4:	66 2e       	mov	r6, r22
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	76 2e       	mov	r7, r22
    16da:	44 24       	eor	r4, r4
    16dc:	55 24       	eor	r5, r5
    16de:	cc 24       	eor	r12, r12
    16e0:	dd 24       	eor	r13, r13
    16e2:	22 24       	eor	r2, r2
    16e4:	33 24       	eor	r3, r3
    16e6:	fc c0       	rjmp	.+504    	; 0x18e0 <zombiesForward+0x242>
	
	//for all zombies
	for (int i = 0; i<numZombies; i++) {
		
		// change of direction with probability 5% each way
		range = randInRange(1,100);
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	64 e6       	ldi	r22, 0x64	; 100
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	45 dd       	rcall	.-1398   	; 0x117c <randInRange>
		if (range < 6) {
    16f2:	86 30       	cpi	r24, 0x06	; 6
    16f4:	91 05       	cpc	r25, r1
    16f6:	6c f4       	brge	.+26     	; 0x1712 <zombiesForward+0x74>
			zDirection[i] = (zDirection[i]-1);
    16f8:	f3 01       	movw	r30, r6
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	91 83       	std	Z+1, r25	; 0x01
    1702:	80 83       	st	Z, r24
			if (zDirection[i] < 0) {
    1704:	97 ff       	sbrs	r25, 7
    1706:	12 c0       	rjmp	.+36     	; 0x172c <zombiesForward+0x8e>
			zDirection[i] = 3;
    1708:	23 e0       	ldi	r18, 0x03	; 3
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	31 83       	std	Z+1, r19	; 0x01
    170e:	20 83       	st	Z, r18
    1710:	0d c0       	rjmp	.+26     	; 0x172c <zombiesForward+0x8e>
			}
		}
		else if (range > 95) {
    1712:	80 36       	cpi	r24, 0x60	; 96
    1714:	91 05       	cpc	r25, r1
    1716:	54 f0       	brlt	.+20     	; 0x172c <zombiesForward+0x8e>
			zDirection[i] = (zDirection[i]+1)%4;
    1718:	f3 01       	movw	r30, r6
    171a:	80 81       	ld	r24, Z
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	01 96       	adiw	r24, 0x01	; 1
    1720:	64 e0       	ldi	r22, 0x04	; 4
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    1728:	91 83       	std	Z+1, r25	; 0x01
    172a:	80 83       	st	Z, r24
		}
		
		// is zombie in pit?
		if (isInPit(zombie[i])) {
    172c:	e9 81       	ldd	r30, Y+1	; 0x01
    172e:	fa 81       	ldd	r31, Y+2	; 0x02
    1730:	a0 80       	ld	r10, Z
    1732:	b1 80       	ldd	r11, Z+1	; 0x01
    1734:	c5 01       	movw	r24, r10
    1736:	71 d9       	rcall	.-3358   	; 0xa1a <isInPit>
    1738:	89 2b       	or	r24, r25
    173a:	f1 f0       	breq	.+60     	; 0x1778 <zombiesForward+0xda>
			Up = pitTop+2;
    173c:	e0 90 2a 02 	lds	r14, 0x022A
    1740:	f0 90 2b 02 	lds	r15, 0x022B
    1744:	22 e0       	ldi	r18, 0x02	; 2
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	e2 0e       	add	r14, r18
    174a:	f3 1e       	adc	r15, r19
			Down = pitBottom - 4;
    174c:	20 91 20 02 	lds	r18, 0x0220
    1750:	30 91 21 02 	lds	r19, 0x0221
    1754:	24 50       	subi	r18, 0x04	; 4
    1756:	30 40       	sbci	r19, 0x00	; 0
			Left = pitLeft+2;
    1758:	80 90 22 02 	lds	r8, 0x0222
    175c:	90 90 23 02 	lds	r9, 0x0223
    1760:	82 e0       	ldi	r24, 0x02	; 2
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	88 0e       	add	r8, r24
    1766:	99 1e       	adc	r9, r25
			Right = pitRight -4;
    1768:	e0 91 1a 02 	lds	r30, 0x021A
    176c:	f0 91 1b 02 	lds	r31, 0x021B
    1770:	34 97       	sbiw	r30, 0x04	; 4
    1772:	fc 83       	std	Y+4, r31	; 0x04
    1774:	eb 83       	std	Y+3, r30	; 0x03
    1776:	13 c0       	rjmp	.+38     	; 0x179e <zombiesForward+0x100>
		} else {
			Up = 10;
			Down = screen_y-1;
    1778:	20 91 8a 01 	lds	r18, 0x018A
    177c:	30 91 8b 01 	lds	r19, 0x018B
    1780:	21 50       	subi	r18, 0x01	; 1
    1782:	30 40       	sbci	r19, 0x00	; 0
			Left = 2;
			Right = screen_x-1;
    1784:	80 91 86 01 	lds	r24, 0x0186
    1788:	90 91 87 01 	lds	r25, 0x0187
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	9c 83       	std	Y+4, r25	; 0x04
    1790:	8b 83       	std	Y+3, r24	; 0x03
    1792:	5a e0       	ldi	r21, 0x0A	; 10
    1794:	e5 2e       	mov	r14, r21
    1796:	f1 2c       	mov	r15, r1
    1798:	42 e0       	ldi	r20, 0x02	; 2
    179a:	84 2e       	mov	r8, r20
    179c:	91 2c       	mov	r9, r1
		}
	
		if (zDirection[i] == 0) {
    179e:	f3 01       	movw	r30, r6
    17a0:	00 81       	ld	r16, Z
    17a2:	11 81       	ldd	r17, Z+1	; 0x01
    17a4:	01 15       	cp	r16, r1
    17a6:	11 05       	cpc	r17, r1
    17a8:	c1 f4       	brne	.+48     	; 0x17da <zombiesForward+0x13c>
			ZY = 1;
			ZX = 0;
			if ((zombie[i] -> y > Down)) {
    17aa:	b9 01       	movw	r22, r18
    17ac:	88 27       	eor	r24, r24
    17ae:	77 fd       	sbrc	r23, 7
    17b0:	80 95       	com	r24
    17b2:	98 2f       	mov	r25, r24
    17b4:	0e 94 0d 14 	call	0x281a	; 0x281a <__floatsisf>
    17b8:	9b 01       	movw	r18, r22
    17ba:	ac 01       	movw	r20, r24
    17bc:	f5 01       	movw	r30, r10
    17be:	64 81       	ldd	r22, Z+4	; 0x04
    17c0:	75 81       	ldd	r23, Z+5	; 0x05
    17c2:	86 81       	ldd	r24, Z+6	; 0x06
    17c4:	97 81       	ldd	r25, Z+7	; 0x07
    17c6:	0e 94 bd 14 	call	0x297a	; 0x297a <__gesf2>
    17ca:	18 16       	cp	r1, r24
    17cc:	0c f4       	brge	.+2      	; 0x17d0 <zombiesForward+0x132>
    17ce:	51 c0       	rjmp	.+162    	; 0x1872 <zombiesForward+0x1d4>
    17d0:	44 24       	eor	r4, r4
    17d2:	55 24       	eor	r5, r5
    17d4:	91 e0       	ldi	r25, 0x01	; 1
    17d6:	c9 2e       	mov	r12, r25
    17d8:	d1 2c       	mov	r13, r1
			ZY = 0;
			}
		}
		if (zDirection[i] == 1) {
    17da:	01 30       	cpi	r16, 0x01	; 1
    17dc:	11 05       	cpc	r17, r1
    17de:	b1 f4       	brne	.+44     	; 0x180c <zombiesForward+0x16e>
			ZX = 1;
			ZY = 0;
			if ((zombie[i] -> x > Right)) {
    17e0:	2b 81       	ldd	r18, Y+3	; 0x03
    17e2:	3c 81       	ldd	r19, Y+4	; 0x04
    17e4:	b9 01       	movw	r22, r18
    17e6:	88 27       	eor	r24, r24
    17e8:	77 fd       	sbrc	r23, 7
    17ea:	80 95       	com	r24
    17ec:	98 2f       	mov	r25, r24
    17ee:	0e 94 0d 14 	call	0x281a	; 0x281a <__floatsisf>
    17f2:	9b 01       	movw	r18, r22
    17f4:	ac 01       	movw	r20, r24
    17f6:	f5 01       	movw	r30, r10
    17f8:	60 81       	ld	r22, Z
    17fa:	71 81       	ldd	r23, Z+1	; 0x01
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	93 81       	ldd	r25, Z+3	; 0x03
    1800:	0e 94 bd 14 	call	0x297a	; 0x297a <__gesf2>
    1804:	18 16       	cp	r1, r24
    1806:	0c f4       	brge	.+2      	; 0x180a <zombiesForward+0x16c>
    1808:	74 c0       	rjmp	.+232    	; 0x18f2 <zombiesForward+0x254>
    180a:	17 c0       	rjmp	.+46     	; 0x183a <zombiesForward+0x19c>
			ZX = 0;
			}
		}
		if (zDirection[i] == 2) {
    180c:	02 30       	cpi	r16, 0x02	; 2
    180e:	11 05       	cpc	r17, r1
    1810:	c9 f4       	brne	.+50     	; 0x1844 <zombiesForward+0x1a6>
			ZY = -1;
			ZX = 0;
			if ((zombie[i] -> y < Up)) {
    1812:	b7 01       	movw	r22, r14
    1814:	88 27       	eor	r24, r24
    1816:	77 fd       	sbrc	r23, 7
    1818:	80 95       	com	r24
    181a:	98 2f       	mov	r25, r24
    181c:	fe d7       	rcall	.+4092   	; 0x281a <__floatsisf>
    181e:	9b 01       	movw	r18, r22
    1820:	ac 01       	movw	r20, r24
    1822:	f5 01       	movw	r30, r10
    1824:	64 81       	ldd	r22, Z+4	; 0x04
    1826:	75 81       	ldd	r23, Z+5	; 0x05
    1828:	86 81       	ldd	r24, Z+6	; 0x06
    182a:	97 81       	ldd	r25, Z+7	; 0x07
    182c:	bf d7       	rcall	.+3966   	; 0x27ac <__cmpsf2>
    182e:	87 fd       	sbrc	r24, 7
    1830:	20 c0       	rjmp	.+64     	; 0x1872 <zombiesForward+0x1d4>
    1832:	cc 24       	eor	r12, r12
    1834:	ca 94       	dec	r12
    1836:	dc 2c       	mov	r13, r12
    1838:	5e c0       	rjmp	.+188    	; 0x18f6 <zombiesForward+0x258>
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	48 2e       	mov	r4, r24
    183e:	51 2c       	mov	r5, r1
    1840:	cc 24       	eor	r12, r12
    1842:	dd 24       	eor	r13, r13
			ZY = 0;
			}
		}
		if (zDirection[i] == 3) {
    1844:	03 30       	cpi	r16, 0x03	; 3
    1846:	11 05       	cpc	r17, r1
    1848:	c1 f4       	brne	.+48     	; 0x187a <zombiesForward+0x1dc>
			ZX = -1;
			ZY = 0;
			if ((zombie[i] -> x < Left)) {
    184a:	b4 01       	movw	r22, r8
    184c:	88 27       	eor	r24, r24
    184e:	77 fd       	sbrc	r23, 7
    1850:	80 95       	com	r24
    1852:	98 2f       	mov	r25, r24
    1854:	e2 d7       	rcall	.+4036   	; 0x281a <__floatsisf>
    1856:	9b 01       	movw	r18, r22
    1858:	ac 01       	movw	r20, r24
    185a:	f5 01       	movw	r30, r10
    185c:	60 81       	ld	r22, Z
    185e:	71 81       	ldd	r23, Z+1	; 0x01
    1860:	82 81       	ldd	r24, Z+2	; 0x02
    1862:	93 81       	ldd	r25, Z+3	; 0x03
    1864:	a3 d7       	rcall	.+3910   	; 0x27ac <__cmpsf2>
    1866:	87 fd       	sbrc	r24, 7
    1868:	04 c0       	rjmp	.+8      	; 0x1872 <zombiesForward+0x1d4>
    186a:	44 24       	eor	r4, r4
    186c:	4a 94       	dec	r4
    186e:	54 2c       	mov	r5, r4
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <zombiesForward+0x1d8>
    1872:	44 24       	eor	r4, r4
    1874:	55 24       	eor	r5, r5
    1876:	cc 24       	eor	r12, r12
    1878:	dd 24       	eor	r13, r13
			ZX = 0;
			}
		}

		zombie[i] -> x += ZX;
    187a:	b2 01       	movw	r22, r4
    187c:	88 27       	eor	r24, r24
    187e:	77 fd       	sbrc	r23, 7
    1880:	80 95       	com	r24
    1882:	98 2f       	mov	r25, r24
    1884:	ca d7       	rcall	.+3988   	; 0x281a <__floatsisf>
    1886:	9b 01       	movw	r18, r22
    1888:	ac 01       	movw	r20, r24
    188a:	f5 01       	movw	r30, r10
    188c:	60 81       	ld	r22, Z
    188e:	71 81       	ldd	r23, Z+1	; 0x01
    1890:	82 81       	ldd	r24, Z+2	; 0x02
    1892:	93 81       	ldd	r25, Z+3	; 0x03
    1894:	27 d7       	rcall	.+3662   	; 0x26e4 <__addsf3>
    1896:	f5 01       	movw	r30, r10
    1898:	60 83       	st	Z, r22
    189a:	71 83       	std	Z+1, r23	; 0x01
    189c:	82 83       	std	Z+2, r24	; 0x02
    189e:	93 83       	std	Z+3, r25	; 0x03
		zombie[i] -> y += ZY;
    18a0:	e9 81       	ldd	r30, Y+1	; 0x01
    18a2:	fa 81       	ldd	r31, Y+2	; 0x02
    18a4:	01 91       	ld	r16, Z+
    18a6:	11 91       	ld	r17, Z+
    18a8:	fa 83       	std	Y+2, r31	; 0x02
    18aa:	e9 83       	std	Y+1, r30	; 0x01
    18ac:	b6 01       	movw	r22, r12
    18ae:	88 27       	eor	r24, r24
    18b0:	77 fd       	sbrc	r23, 7
    18b2:	80 95       	com	r24
    18b4:	98 2f       	mov	r25, r24
    18b6:	b1 d7       	rcall	.+3938   	; 0x281a <__floatsisf>
    18b8:	9b 01       	movw	r18, r22
    18ba:	ac 01       	movw	r20, r24
    18bc:	f8 01       	movw	r30, r16
    18be:	64 81       	ldd	r22, Z+4	; 0x04
    18c0:	75 81       	ldd	r23, Z+5	; 0x05
    18c2:	86 81       	ldd	r24, Z+6	; 0x06
    18c4:	97 81       	ldd	r25, Z+7	; 0x07
    18c6:	0e d7       	rcall	.+3612   	; 0x26e4 <__addsf3>
    18c8:	f8 01       	movw	r30, r16
    18ca:	64 83       	std	Z+4, r22	; 0x04
    18cc:	75 83       	std	Z+5, r23	; 0x05
    18ce:	86 83       	std	Z+6, r24	; 0x06
    18d0:	97 83       	std	Z+7, r25	; 0x07
	int range, ZX = 0;
	int ZY = 0;
	int Up,Left,Down,Right;
	
	//for all zombies
	for (int i = 0; i<numZombies; i++) {
    18d2:	08 94       	sec
    18d4:	21 1c       	adc	r2, r1
    18d6:	31 1c       	adc	r3, r1
    18d8:	22 e0       	ldi	r18, 0x02	; 2
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	62 0e       	add	r6, r18
    18de:	73 1e       	adc	r7, r19
    18e0:	80 91 a8 01 	lds	r24, 0x01A8
    18e4:	90 91 a9 01 	lds	r25, 0x01A9
    18e8:	28 16       	cp	r2, r24
    18ea:	39 06       	cpc	r3, r25
    18ec:	0c f4       	brge	.+2      	; 0x18f0 <zombiesForward+0x252>
    18ee:	fc ce       	rjmp	.-520    	; 0x16e8 <zombiesForward+0x4a>
    18f0:	05 c0       	rjmp	.+10     	; 0x18fc <zombiesForward+0x25e>
		zombie[i] -> x += ZX;
		zombie[i] -> y += ZY;

	}
	
}
    18f2:	cc 24       	eor	r12, r12
    18f4:	dd 24       	eor	r13, r13
    18f6:	44 24       	eor	r4, r4
    18f8:	55 24       	eor	r5, r5
    18fa:	bf cf       	rjmp	.-130    	; 0x187a <zombiesForward+0x1dc>
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	ff 90       	pop	r15
    190e:	ef 90       	pop	r14
    1910:	df 90       	pop	r13
    1912:	cf 90       	pop	r12
    1914:	bf 90       	pop	r11
    1916:	af 90       	pop	r10
    1918:	9f 90       	pop	r9
    191a:	8f 90       	pop	r8
    191c:	7f 90       	pop	r7
    191e:	6f 90       	pop	r6
    1920:	5f 90       	pop	r5
    1922:	4f 90       	pop	r4
    1924:	3f 90       	pop	r3
    1926:	2f 90       	pop	r2
    1928:	08 95       	ret

0000192a <__vector_23>:
	sei();
}


ISR(TIMER0_OVF_vect)
{
    192a:	1f 92       	push	r1
    192c:	0f 92       	push	r0
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	0f 92       	push	r0
    1932:	11 24       	eor	r1, r1
    1934:	2f 93       	push	r18
    1936:	3f 93       	push	r19
    1938:	4f 93       	push	r20
    193a:	5f 93       	push	r21
    193c:	6f 93       	push	r22
    193e:	7f 93       	push	r23
    1940:	8f 93       	push	r24
    1942:	9f 93       	push	r25
    1944:	af 93       	push	r26
    1946:	bf 93       	push	r27
    1948:	ef 93       	push	r30
    194a:	ff 93       	push	r31
	//Clear the flag by writing a one
	TIFR0 |= (1<<TOV0);
    194c:	a8 9a       	sbi	0x15, 0	; 21
	//Add one to our clockCounter
	clockCounter++;
    194e:	80 91 fc 01 	lds	r24, 0x01FC
    1952:	90 91 fd 01 	lds	r25, 0x01FD
    1956:	01 96       	adiw	r24, 0x01	; 1
    1958:	90 93 fd 01 	sts	0x01FD, r25
    195c:	80 93 fc 01 	sts	0x01FC, r24
	//DEBUG LED
	//PORTB ^= (1<<PINB2);
	//Check to see if our clockCounter is greater/equal to than our MAX_CLOCK_COUNTER_FOR_100MSECOND
	if(clockCounter >= MAX_CLOCK_COUNTER_FOR_100MSECOND && GAMEON)
    1960:	80 91 fc 01 	lds	r24, 0x01FC
    1964:	90 91 fd 01 	lds	r25, 0x01FD
    1968:	05 97       	sbiw	r24, 0x05	; 5
    196a:	0c f4       	brge	.+2      	; 0x196e <__vector_23+0x44>
    196c:	88 c0       	rjmp	.+272    	; 0x1a7e <__vector_23+0x154>
    196e:	80 91 06 02 	lds	r24, 0x0206
    1972:	90 91 07 02 	lds	r25, 0x0207
    1976:	89 2b       	or	r24, r25
    1978:	09 f4       	brne	.+2      	; 0x197c <__vector_23+0x52>
    197a:	81 c0       	rjmp	.+258    	; 0x1a7e <__vector_23+0x154>
	{
		//PORTB ^= (1<<PINB3);
		//Reset clockCounter
		clockCounter = 0;
    197c:	10 92 fd 01 	sts	0x01FD, r1
    1980:	10 92 fc 01 	sts	0x01FC, r1
		stepsCounter++;
    1984:	80 91 fe 01 	lds	r24, 0x01FE
    1988:	90 91 ff 01 	lds	r25, 0x01FF
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	90 93 ff 01 	sts	0x01FF, r25
    1992:	80 93 fe 01 	sts	0x01FE, r24
		if (stepsCounter>zombieSteps) {
    1996:	20 91 fe 01 	lds	r18, 0x01FE
    199a:	30 91 ff 01 	lds	r19, 0x01FF
    199e:	80 91 a6 01 	lds	r24, 0x01A6
    19a2:	90 91 a7 01 	lds	r25, 0x01A7
    19a6:	82 17       	cp	r24, r18
    19a8:	93 07       	cpc	r25, r19
    19aa:	34 f5       	brge	.+76     	; 0x19f8 <__vector_23+0xce>
		scoreCounter++;
    19ac:	80 91 00 02 	lds	r24, 0x0200
    19b0:	90 91 01 02 	lds	r25, 0x0201
    19b4:	01 96       	adiw	r24, 0x01	; 1
    19b6:	90 93 01 02 	sts	0x0201, r25
    19ba:	80 93 00 02 	sts	0x0200, r24
		explosionCounter++;
    19be:	80 91 04 02 	lds	r24, 0x0204
    19c2:	90 91 05 02 	lds	r25, 0x0205
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	90 93 05 02 	sts	0x0205, r25
    19cc:	80 93 04 02 	sts	0x0204, r24
		if (grenadeDropped) {
    19d0:	80 91 0a 02 	lds	r24, 0x020A
    19d4:	90 91 0b 02 	lds	r25, 0x020B
    19d8:	89 2b       	or	r24, r25
    19da:	49 f0       	breq	.+18     	; 0x19ee <__vector_23+0xc4>
		grenadeCounter++;
    19dc:	80 91 02 02 	lds	r24, 0x0202
    19e0:	90 91 03 02 	lds	r25, 0x0203
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	90 93 03 02 	sts	0x0203, r25
    19ea:	80 93 02 02 	sts	0x0202, r24
		}
		stepsCounter = 0;
    19ee:	10 92 ff 01 	sts	0x01FF, r1
    19f2:	10 92 fe 01 	sts	0x01FE, r1
		zombiesForward();		
    19f6:	53 de       	rcall	.-858    	; 0x169e <zombiesForward>
		}
		if (scoreCounter>5) {
    19f8:	80 91 00 02 	lds	r24, 0x0200
    19fc:	90 91 01 02 	lds	r25, 0x0201
    1a00:	06 97       	sbiw	r24, 0x06	; 6
    1a02:	6c f0       	brlt	.+26     	; 0x1a1e <__vector_23+0xf4>
		scoreCounter = 0;
    1a04:	10 92 01 02 	sts	0x0201, r1
    1a08:	10 92 00 02 	sts	0x0200, r1
		Score++;
    1a0c:	80 91 10 02 	lds	r24, 0x0210
    1a10:	90 91 11 02 	lds	r25, 0x0211
    1a14:	01 96       	adiw	r24, 0x01	; 1
    1a16:	90 93 11 02 	sts	0x0211, r25
    1a1a:	80 93 10 02 	sts	0x0210, r24
		}
		if ((grenadeCounter>3) & gotGrenade) {
    1a1e:	80 91 02 02 	lds	r24, 0x0202
    1a22:	90 91 03 02 	lds	r25, 0x0203
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	04 97       	sbiw	r24, 0x04	; 4
    1a2c:	14 f0       	brlt	.+4      	; 0x1a32 <__vector_23+0x108>
    1a2e:	21 e0       	ldi	r18, 0x01	; 1
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	80 91 14 02 	lds	r24, 0x0214
    1a36:	90 91 15 02 	lds	r25, 0x0215
    1a3a:	28 23       	and	r18, r24
    1a3c:	39 23       	and	r19, r25
    1a3e:	23 2b       	or	r18, r19
    1a40:	71 f0       	breq	.+28     	; 0x1a5e <__vector_23+0x134>
		grenadeCounter = 0;
    1a42:	10 92 03 02 	sts	0x0203, r1
    1a46:	10 92 02 02 	sts	0x0202, r1
		grenadeDropped = 0;
    1a4a:	10 92 0b 02 	sts	0x020B, r1
    1a4e:	10 92 0a 02 	sts	0x020A, r1
		grenadeExploded = 1;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	90 93 0d 02 	sts	0x020D, r25
    1a5a:	80 93 0c 02 	sts	0x020C, r24
		}
		if (explosionCounter>3) {
    1a5e:	80 91 04 02 	lds	r24, 0x0204
    1a62:	90 91 05 02 	lds	r25, 0x0205
    1a66:	04 97       	sbiw	r24, 0x04	; 4
    1a68:	4c f0       	brlt	.+18     	; 0x1a7c <__vector_23+0x152>
		explosion -> is_visible = 0;
    1a6a:	e0 91 26 02 	lds	r30, 0x0226
    1a6e:	f0 91 27 02 	lds	r31, 0x0227
    1a72:	12 86       	std	Z+10, r1	; 0x0a
		explosionCounter = 0;		
    1a74:	10 92 05 02 	sts	0x0205, r1
    1a78:	10 92 04 02 	sts	0x0204, r1
		}
		heroForward();
    1a7c:	15 d8       	rcall	.-4054   	; 0xaa8 <heroForward>
	}
}
    1a7e:	ff 91       	pop	r31
    1a80:	ef 91       	pop	r30
    1a82:	bf 91       	pop	r27
    1a84:	af 91       	pop	r26
    1a86:	9f 91       	pop	r25
    1a88:	8f 91       	pop	r24
    1a8a:	7f 91       	pop	r23
    1a8c:	6f 91       	pop	r22
    1a8e:	5f 91       	pop	r21
    1a90:	4f 91       	pop	r20
    1a92:	3f 91       	pop	r19
    1a94:	2f 91       	pop	r18
    1a96:	0f 90       	pop	r0
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	0f 90       	pop	r0
    1a9c:	1f 90       	pop	r1
    1a9e:	18 95       	reti

00001aa0 <setupGame>:
void setupGame() {

	// SW0 and SW1 are connected to pins B0 and B1
	// LED1 and LED2 connected to pins B2 and B3
	// 0 for input 1 for output
	DDRB |= 0b00001100;
    1aa0:	84 b1       	in	r24, 0x04	; 4
    1aa2:	8c 60       	ori	r24, 0x0C	; 12
    1aa4:	84 b9       	out	0x04, r24	; 4
    // Teensy LED is connected to D6
    DDRD |= 0b01000000;
    1aa6:	56 9a       	sbi	0x0a, 6	; 10
    // turn OFF LED initially
	PORTD |= 0b00000000;
    1aa8:	8b b1       	in	r24, 0x0b	; 11
    1aaa:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<2)||(1<<3); //not sure why this is here
    1aac:	28 9a       	sbi	0x05, 0	; 5
	
	//initialise clock
	//CLKPR |= 1 << CLKPCE;
	//CLKPR |= 1 << CLKPS0;
	CPU_PRESCALE(CPU_16MHz);
    1aae:	80 e8       	ldi	r24, 0x80	; 128
    1ab0:	80 93 61 00 	sts	0x0061, r24
    1ab4:	10 92 61 00 	sts	0x0061, r1
	
	
	LCDInitialise(LCD_DEFAULT_CONTRAST);
    1ab8:	8f e3       	ldi	r24, 0x3F	; 63
    1aba:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <LCDInitialise>
	clear();
    1abe:	61 d7       	rcall	.+3778   	; 0x2982 <clear>
	
	PinChangeInit();
    1ac0:	0e 94 80 04 	call	0x900	; 0x900 <PinChangeInit>
	TimerInit();
    1ac4:	0e 94 ba 04 	call	0x974	; 0x974 <TimerInit>
	
	clear();
    1ac8:	5c d7       	rcall	.+3768   	; 0x2982 <clear>
	draw_string("ZombieDash v1.0", 4,0); // 15*5 = 75 (84 - 75)/2 = 4
    1aca:	86 e3       	ldi	r24, 0x36	; 54
    1acc:	91 e0       	ldi	r25, 0x01	; 1
    1ace:	64 e0       	ldi	r22, 0x04	; 4
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	0e 94 33 17 	call	0x2e66	; 0x2e66 <draw_string>
	draw_string("Lachlan Robinson", 2,9); // 16*5 = 80 (84 - 80)/2 = 2
    1ad6:	86 e4       	ldi	r24, 0x46	; 70
    1ad8:	91 e0       	ldi	r25, 0x01	; 1
    1ada:	62 e0       	ldi	r22, 0x02	; 2
    1adc:	49 e0       	ldi	r20, 0x09	; 9
    1ade:	0e 94 33 17 	call	0x2e66	; 0x2e66 <draw_string>
	draw_string("n8845409", 22, 28); // 8*5 = 40 (84 - 40)/2 = 22
    1ae2:	87 e5       	ldi	r24, 0x57	; 87
    1ae4:	91 e0       	ldi	r25, 0x01	; 1
    1ae6:	66 e1       	ldi	r22, 0x16	; 22
    1ae8:	4c e1       	ldi	r20, 0x1C	; 28
    1aea:	0e 94 33 17 	call	0x2e66	; 0x2e66 <draw_string>
	refresh();
    1aee:	0e 94 48 17 	call	0x2e90	; 0x2e90 <refresh>
	
	seedWithButtonPress();
    1af2:	2a db       	rcall	.-2476   	; 0x1148 <seedWithButtonPress>
	buttonCheck();
    1af4:	0e 94 51 04 	call	0x8a2	; 0x8a2 <buttonCheck>
	
	chooseDifficulty();	
    1af8:	fc d9       	rcall	.-3080   	; 0xef2 <chooseDifficulty>
	
	if (difficulty == 1) {
    1afa:	80 91 0e 02 	lds	r24, 0x020E
    1afe:	90 91 0f 02 	lds	r25, 0x020F
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	31 f4       	brne	.+12     	; 0x1b12 <setupGame+0x72>
	//numZombies = 16;
	zombieSteps = 4;
    1b06:	84 e0       	ldi	r24, 0x04	; 4
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	90 93 a7 01 	sts	0x01A7, r25
    1b0e:	80 93 a6 01 	sts	0x01A6, r24
	}
	CountDown();
    1b12:	f7 da       	rcall	.-2578   	; 0x1102 <CountDown>
	Lives = 3;
    1b14:	83 e0       	ldi	r24, 0x03	; 3
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	90 93 ad 01 	sts	0x01AD, r25
    1b1c:	80 93 ac 01 	sts	0x01AC, r24
	Score = 0;
    1b20:	10 92 11 02 	sts	0x0211, r1
    1b24:	10 92 10 02 	sts	0x0210, r1
	activeZombies = numZombies;
    1b28:	80 91 a8 01 	lds	r24, 0x01A8
    1b2c:	90 91 a9 01 	lds	r25, 0x01A9
    1b30:	90 93 a5 01 	sts	0x01A5, r25
    1b34:	80 93 a4 01 	sts	0x01A4, r24
	
}
    1b38:	08 95       	ret

00001b3a <winScreen>:
	grenade -> x = x;
	grenade -> y = y;
	grenade -> is_visible = 1;
}

void winScreen(void) {
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29

	int middle_x = screen_x/2;
    1b42:	c0 91 86 01 	lds	r28, 0x0186
    1b46:	d0 91 87 01 	lds	r29, 0x0187
	int middle_y = screen_y/2;
    1b4a:	00 91 8a 01 	lds	r16, 0x018A
    1b4e:	10 91 8b 01 	lds	r17, 0x018B
    1b52:	88 e8       	ldi	r24, 0x88	; 136
    1b54:	93 e1       	ldi	r25, 0x13	; 19
    1b56:	20 e9       	ldi	r18, 0x90	; 144
    1b58:	31 e0       	ldi	r19, 0x01	; 1
    1b5a:	f9 01       	movw	r30, r18
    1b5c:	31 97       	sbiw	r30, 0x01	; 1
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <winScreen+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b60:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b62:	d9 f7       	brne	.-10     	; 0x1b5a <winScreen+0x20>
	_delay_ms(500);
	clear();
    1b64:	0e d7       	rcall	.+3612   	; 0x2982 <clear>
	draw_string("You WIN!", middle_x-17,middle_y);
    1b66:	ce 01       	movw	r24, r28
    1b68:	62 e0       	ldi	r22, 0x02	; 2
    1b6a:	70 e0       	ldi	r23, 0x00	; 0
    1b6c:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    1b70:	26 2f       	mov	r18, r22
    1b72:	21 51       	subi	r18, 0x11	; 17
    1b74:	c8 01       	movw	r24, r16
    1b76:	62 e0       	ldi	r22, 0x02	; 2
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    1b7e:	46 2f       	mov	r20, r22
    1b80:	80 e6       	ldi	r24, 0x60	; 96
    1b82:	91 e0       	ldi	r25, 0x01	; 1
    1b84:	62 2f       	mov	r22, r18
    1b86:	0e 94 33 17 	call	0x2e66	; 0x2e66 <draw_string>
	refresh();
    1b8a:	0e 94 48 17 	call	0x2e90	; 0x2e90 <refresh>
    1b8e:	88 e9       	ldi	r24, 0x98	; 152
    1b90:	9a e3       	ldi	r25, 0x3A	; 58
    1b92:	20 e9       	ldi	r18, 0x90	; 144
    1b94:	31 e0       	ldi	r19, 0x01	; 1
    1b96:	f9 01       	movw	r30, r18
    1b98:	31 97       	sbiw	r30, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <winScreen+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9e:	d9 f7       	brne	.-10     	; 0x1b96 <winScreen+0x5c>
	_delay_ms(1500);
	setupGame();
    1ba0:	7f df       	rcall	.-258    	; 0x1aa0 <setupGame>
	setupHero();
    1ba2:	0e 94 cd 04 	call	0x99a	; 0x99a <setupHero>
	setupZombies();	
    1ba6:	c9 db       	rcall	.-2158   	; 0x133a <setupZombies>
	setupPit();
    1ba8:	8c db       	rcall	.-2280   	; 0x12c2 <setupPit>
	setupSword();
    1baa:	46 db       	rcall	.-2420   	; 0x1238 <setupSword>
	gotSword = 0;
    1bac:	10 92 13 02 	sts	0x0213, r1
    1bb0:	10 92 12 02 	sts	0x0212, r1
	setupGrenade();
    1bb4:	fc da       	rcall	.-2568   	; 0x11ae <setupGrenade>
	gotGrenade = 0;
    1bb6:	10 92 15 02 	sts	0x0215, r1
    1bba:	10 92 14 02 	sts	0x0214, r1
	grenadeDropped = 0;
    1bbe:	10 92 0b 02 	sts	0x020B, r1
    1bc2:	10 92 0a 02 	sts	0x020A, r1
	grenadeExploded = 0;
    1bc6:	10 92 0d 02 	sts	0x020D, r1
    1bca:	10 92 0c 02 	sts	0x020C, r1

}
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	1f 91       	pop	r17
    1bd4:	0f 91       	pop	r16
    1bd6:	08 95       	ret

00001bd8 <collision>:
	my_pointer -> x = middle_x;
	my_pointer -> y = middle_y;
	my_pointer -> is_visible = 1;
}

void collision(void) {
    1bd8:	2f 92       	push	r2
    1bda:	3f 92       	push	r3
    1bdc:	4f 92       	push	r4
    1bde:	5f 92       	push	r5
    1be0:	6f 92       	push	r6
    1be2:	7f 92       	push	r7
    1be4:	8f 92       	push	r8
    1be6:	9f 92       	push	r9
    1be8:	af 92       	push	r10
    1bea:	bf 92       	push	r11
    1bec:	cf 92       	push	r12
    1bee:	df 92       	push	r13
    1bf0:	ef 92       	push	r14
    1bf2:	ff 92       	push	r15
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	2e 97       	sbiw	r28, 0x0e	; 14
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61

	int middle_x = screen_x/2;
    1c0c:	80 91 86 01 	lds	r24, 0x0186
    1c10:	90 91 87 01 	lds	r25, 0x0187
    1c14:	62 e0       	ldi	r22, 0x02	; 2
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    1c1c:	6a 87       	std	Y+10, r22	; 0x0a
	int middle_y = screen_y/2;
    1c1e:	80 91 8a 01 	lds	r24, 0x018A
    1c22:	90 91 8b 01 	lds	r25, 0x018B
    1c26:	62 e0       	ldi	r22, 0x02	; 2
    1c28:	70 e0       	ldi	r23, 0x00	; 0
    1c2a:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    1c2e:	6d 83       	std	Y+5, r22	; 0x05
	
	byte x = my_pointer -> x;
    1c30:	00 91 24 02 	lds	r16, 0x0224
    1c34:	10 91 25 02 	lds	r17, 0x0225
    1c38:	d8 01       	movw	r26, r16
    1c3a:	6d 91       	ld	r22, X+
    1c3c:	7d 91       	ld	r23, X+
    1c3e:	8d 91       	ld	r24, X+
    1c40:	9c 91       	ld	r25, X
    1c42:	bd d5       	rcall	.+2938   	; 0x27be <__fixunssfsi>
    1c44:	6c 83       	std	Y+4, r22	; 0x04
	byte y = my_pointer -> y;
    1c46:	f8 01       	movw	r30, r16
    1c48:	64 81       	ldd	r22, Z+4	; 0x04
    1c4a:	75 81       	ldd	r23, Z+5	; 0x05
    1c4c:	86 81       	ldd	r24, Z+6	; 0x06
    1c4e:	97 81       	ldd	r25, Z+7	; 0x07
    1c50:	b6 d5       	rcall	.+2924   	; 0x27be <__fixunssfsi>
    1c52:	6b 83       	std	Y+3, r22	; 0x03
	
	int sx = sword -> x;
    1c54:	00 91 16 02 	lds	r16, 0x0216
    1c58:	10 91 17 02 	lds	r17, 0x0217
    1c5c:	d8 01       	movw	r26, r16
    1c5e:	6d 91       	ld	r22, X+
    1c60:	7d 91       	ld	r23, X+
    1c62:	8d 91       	ld	r24, X+
    1c64:	9c 91       	ld	r25, X
    1c66:	a6 d5       	rcall	.+2892   	; 0x27b4 <__fixsfsi>
    1c68:	7b 01       	movw	r14, r22
	int sy = sword -> y;
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	64 81       	ldd	r22, Z+4	; 0x04
    1c6e:	75 81       	ldd	r23, Z+5	; 0x05
    1c70:	86 81       	ldd	r24, Z+6	; 0x06
    1c72:	97 81       	ldd	r25, Z+7	; 0x07
    1c74:	9f d5       	rcall	.+2878   	; 0x27b4 <__fixsfsi>
    1c76:	5b 01       	movw	r10, r22
	
	int gx = grenade -> x;
    1c78:	00 91 1c 02 	lds	r16, 0x021C
    1c7c:	10 91 1d 02 	lds	r17, 0x021D
    1c80:	d8 01       	movw	r26, r16
    1c82:	6d 91       	ld	r22, X+
    1c84:	7d 91       	ld	r23, X+
    1c86:	8d 91       	ld	r24, X+
    1c88:	9c 91       	ld	r25, X
    1c8a:	94 d5       	rcall	.+2856   	; 0x27b4 <__fixsfsi>
    1c8c:	7a 83       	std	Y+2, r23	; 0x02
    1c8e:	69 83       	std	Y+1, r22	; 0x01
	int gy = grenade -> y;
    1c90:	f8 01       	movw	r30, r16
    1c92:	24 80       	ldd	r2, Z+4	; 0x04
    1c94:	35 80       	ldd	r3, Z+5	; 0x05
    1c96:	46 80       	ldd	r4, Z+6	; 0x06
    1c98:	57 80       	ldd	r5, Z+7	; 0x07
    1c9a:	ec e2       	ldi	r30, 0x2C	; 44
    1c9c:	ce 2e       	mov	r12, r30
    1c9e:	e2 e0       	ldi	r30, 0x02	; 2
    1ca0:	de 2e       	mov	r13, r30
    1ca2:	88 24       	eor	r8, r8
    1ca4:	99 24       	eor	r9, r9
			zombie[i] -> is_visible = 0;
			Score++;
			activeZombies--;
		}
		
		if (x > zx - width && x < zx + width && y > zy - height && y < zy + height && (zombie[i] -> is_visible == 1) ) {
    1ca6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca8:	23 2f       	mov	r18, r19
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	3f 83       	std	Y+7, r19	; 0x07
    1cae:	2e 83       	std	Y+6, r18	; 0x06
    1cb0:	5b 81       	ldd	r21, Y+3	; 0x03
    1cb2:	45 2f       	mov	r20, r21
    1cb4:	50 e0       	ldi	r21, 0x00	; 0
    1cb6:	59 87       	std	Y+9, r21	; 0x09
    1cb8:	48 87       	std	Y+8, r20	; 0x08
    1cba:	70 e9       	ldi	r23, 0x90	; 144
    1cbc:	67 2e       	mov	r6, r23
    1cbe:	71 e0       	ldi	r23, 0x01	; 1
    1cc0:	77 2e       	mov	r7, r23
				grenadeExploded = 0;
			}
			else {
				_delay_ms(300);
				clear();
				draw_string("Game OVER!", middle_x-25,middle_y);
    1cc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cc4:	89 51       	subi	r24, 0x19	; 25
    1cc6:	8a 87       	std	Y+10, r24	; 0x0a
    1cc8:	f6 c0       	rjmp	.+492    	; 0x1eb6 <collision+0x2de>
	int gx = grenade -> x;
	int gy = grenade -> y;
	
	// checking zombie collisions
	for (int i = 0; i<numZombies; i++) {
		byte zx = zombie[i] -> x;
    1cca:	d6 01       	movw	r26, r12
    1ccc:	0d 90       	ld	r0, X+
    1cce:	bc 91       	ld	r27, X
    1cd0:	a0 2d       	mov	r26, r0
    1cd2:	be 87       	std	Y+14, r27	; 0x0e
    1cd4:	ad 87       	std	Y+13, r26	; 0x0d
		byte zy = zombie[i] -> y;
    1cd6:	14 96       	adiw	r26, 0x04	; 4
    1cd8:	6d 91       	ld	r22, X+
    1cda:	7d 91       	ld	r23, X+
    1cdc:	8d 91       	ld	r24, X+
    1cde:	9c 91       	ld	r25, X
    1ce0:	17 97       	sbiw	r26, 0x07	; 7
    1ce2:	6d d5       	rcall	.+2778   	; 0x27be <__fixunssfsi>
    1ce4:	16 2f       	mov	r17, r22
		
		if (sx > zx - width && sx < zx + width && sy > zy - height && sy < zy + height && gotSword && (zombie[i] -> is_visible == 1) ) {
    1ce6:	ed 85       	ldd	r30, Y+13	; 0x0d
    1ce8:	fe 85       	ldd	r31, Y+14	; 0x0e
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	65 d5       	rcall	.+2762   	; 0x27be <__fixunssfsi>
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	e0 2f       	mov	r30, r16
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	9b 01       	movw	r18, r22
    1cfc:	2e 1b       	sub	r18, r30
    1cfe:	3f 0b       	sbc	r19, r31
    1d00:	3c 87       	std	Y+12, r19	; 0x0c
    1d02:	2b 87       	std	Y+11, r18	; 0x0b
    1d04:	2e 15       	cp	r18, r14
    1d06:	3f 05       	cpc	r19, r15
    1d08:	c4 f5       	brge	.+112    	; 0x1d7a <collision+0x1a2>
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	8e 0f       	add	r24, r30
    1d0e:	9f 1f       	adc	r25, r31
    1d10:	e8 16       	cp	r14, r24
    1d12:	f9 06       	cpc	r15, r25
    1d14:	94 f5       	brge	.+100    	; 0x1d7a <collision+0x1a2>
    1d16:	21 2f       	mov	r18, r17
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	80 91 ab 01 	lds	r24, 0x01AB
    1d1e:	48 2f       	mov	r20, r24
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	c9 01       	movw	r24, r18
    1d24:	84 1b       	sub	r24, r20
    1d26:	95 0b       	sbc	r25, r21
    1d28:	8a 15       	cp	r24, r10
    1d2a:	9b 05       	cpc	r25, r11
    1d2c:	34 f5       	brge	.+76     	; 0x1d7a <collision+0x1a2>
    1d2e:	24 0f       	add	r18, r20
    1d30:	35 1f       	adc	r19, r21
    1d32:	a2 16       	cp	r10, r18
    1d34:	b3 06       	cpc	r11, r19
    1d36:	0c f5       	brge	.+66     	; 0x1d7a <collision+0x1a2>
    1d38:	80 91 12 02 	lds	r24, 0x0212
    1d3c:	90 91 13 02 	lds	r25, 0x0213
    1d40:	89 2b       	or	r24, r25
    1d42:	d9 f0       	breq	.+54     	; 0x1d7a <collision+0x1a2>
    1d44:	ad 85       	ldd	r26, Y+13	; 0x0d
    1d46:	be 85       	ldd	r27, Y+14	; 0x0e
    1d48:	1a 96       	adiw	r26, 0x0a	; 10
    1d4a:	8c 91       	ld	r24, X
    1d4c:	1a 97       	sbiw	r26, 0x0a	; 10
    1d4e:	81 30       	cpi	r24, 0x01	; 1
    1d50:	a1 f4       	brne	.+40     	; 0x1d7a <collision+0x1a2>
			zombie[i] -> is_visible = 0;
    1d52:	1a 96       	adiw	r26, 0x0a	; 10
    1d54:	1c 92       	st	X, r1
			Score++;
    1d56:	80 91 10 02 	lds	r24, 0x0210
    1d5a:	90 91 11 02 	lds	r25, 0x0211
    1d5e:	01 96       	adiw	r24, 0x01	; 1
    1d60:	90 93 11 02 	sts	0x0211, r25
    1d64:	80 93 10 02 	sts	0x0210, r24
			activeZombies--;
    1d68:	80 91 a4 01 	lds	r24, 0x01A4
    1d6c:	90 91 a5 01 	lds	r25, 0x01A5
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	90 93 a5 01 	sts	0x01A5, r25
    1d76:	80 93 a4 01 	sts	0x01A4, r24
		}
		
		if (x > zx - width && x < zx + width && y > zy - height && y < zy + height && (zombie[i] -> is_visible == 1) ) {
    1d7a:	2e 81       	ldd	r18, Y+6	; 0x06
    1d7c:	3f 81       	ldd	r19, Y+7	; 0x07
    1d7e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d80:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d82:	42 17       	cp	r20, r18
    1d84:	53 07       	cpc	r21, r19
    1d86:	0c f0       	brlt	.+2      	; 0x1d8a <collision+0x1b2>
    1d88:	8f c0       	rjmp	.+286    	; 0x1ea8 <collision+0x2d0>
    1d8a:	6e 0f       	add	r22, r30
    1d8c:	7f 1f       	adc	r23, r31
    1d8e:	26 17       	cp	r18, r22
    1d90:	37 07       	cpc	r19, r23
    1d92:	0c f0       	brlt	.+2      	; 0x1d96 <collision+0x1be>
    1d94:	89 c0       	rjmp	.+274    	; 0x1ea8 <collision+0x2d0>
    1d96:	61 2f       	mov	r22, r17
    1d98:	70 e0       	ldi	r23, 0x00	; 0
    1d9a:	80 91 ab 01 	lds	r24, 0x01AB
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	cb 01       	movw	r24, r22
    1da4:	82 1b       	sub	r24, r18
    1da6:	93 0b       	sbc	r25, r19
    1da8:	a8 85       	ldd	r26, Y+8	; 0x08
    1daa:	b9 85       	ldd	r27, Y+9	; 0x09
    1dac:	8a 17       	cp	r24, r26
    1dae:	9b 07       	cpc	r25, r27
    1db0:	0c f0       	brlt	.+2      	; 0x1db4 <collision+0x1dc>
    1db2:	7a c0       	rjmp	.+244    	; 0x1ea8 <collision+0x2d0>
    1db4:	62 0f       	add	r22, r18
    1db6:	73 1f       	adc	r23, r19
    1db8:	a6 17       	cp	r26, r22
    1dba:	b7 07       	cpc	r27, r23
    1dbc:	0c f0       	brlt	.+2      	; 0x1dc0 <collision+0x1e8>
    1dbe:	74 c0       	rjmp	.+232    	; 0x1ea8 <collision+0x2d0>
    1dc0:	d6 01       	movw	r26, r12
    1dc2:	ed 91       	ld	r30, X+
    1dc4:	fc 91       	ld	r31, X
    1dc6:	82 85       	ldd	r24, Z+10	; 0x0a
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	09 f0       	breq	.+2      	; 0x1dce <collision+0x1f6>
    1dcc:	6d c0       	rjmp	.+218    	; 0x1ea8 <collision+0x2d0>
		GAMEON = 0;
    1dce:	10 92 07 02 	sts	0x0207, r1
    1dd2:	10 92 06 02 	sts	0x0206, r1
			if (Lives>0) {
    1dd6:	80 91 ac 01 	lds	r24, 0x01AC
    1dda:	90 91 ad 01 	lds	r25, 0x01AD
    1dde:	18 16       	cp	r1, r24
    1de0:	19 06       	cpc	r1, r25
    1de2:	74 f5       	brge	.+92     	; 0x1e40 <collision+0x268>
    1de4:	88 eb       	ldi	r24, 0xB8	; 184
    1de6:	9b e0       	ldi	r25, 0x0B	; 11
    1de8:	f3 01       	movw	r30, r6
    1dea:	31 97       	sbiw	r30, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <collision+0x212>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df0:	d9 f7       	brne	.-10     	; 0x1de8 <collision+0x210>
				_delay_ms(300);
				clear();
    1df2:	c7 d5       	rcall	.+2958   	; 0x2982 <clear>
				draw_string("Touched A Zombie!",0,middle_y);
    1df4:	89 e6       	ldi	r24, 0x69	; 105
    1df6:	91 e0       	ldi	r25, 0x01	; 1
    1df8:	60 e0       	ldi	r22, 0x00	; 0
    1dfa:	4d 81       	ldd	r20, Y+5	; 0x05
    1dfc:	0e 94 33 17 	call	0x2e66	; 0x2e66 <draw_string>
				refresh();
    1e00:	0e 94 48 17 	call	0x2e90	; 0x2e90 <refresh>
    1e04:	88 e9       	ldi	r24, 0x98	; 152
    1e06:	9a e3       	ldi	r25, 0x3A	; 58
    1e08:	f3 01       	movw	r30, r6
    1e0a:	31 97       	sbiw	r30, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <collision+0x232>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e10:	d9 f7       	brne	.-10     	; 0x1e08 <collision+0x230>
				_delay_ms(1500);
				Lives--;
    1e12:	80 91 ac 01 	lds	r24, 0x01AC
    1e16:	90 91 ad 01 	lds	r25, 0x01AD
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	90 93 ad 01 	sts	0x01AD, r25
    1e20:	80 93 ac 01 	sts	0x01AC, r24
				setupHero();
    1e24:	0e 94 cd 04 	call	0x99a	; 0x99a <setupHero>
				notOver = 1;
    1e28:	e1 e0       	ldi	r30, 0x01	; 1
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	f0 93 09 02 	sts	0x0209, r31
    1e30:	e0 93 08 02 	sts	0x0208, r30
				setupZombies();
    1e34:	82 da       	rcall	.-2812   	; 0x133a <setupZombies>
				notOver = 0;
    1e36:	10 92 09 02 	sts	0x0209, r1
    1e3a:	10 92 08 02 	sts	0x0208, r1
    1e3e:	1c c0       	rjmp	.+56     	; 0x1e78 <collision+0x2a0>
				setupSword();
				gotSword = 0;
				setupGrenade();
				gotGrenade = 0;
				grenadeDropped = 0;
				grenadeExploded = 0;
    1e40:	88 eb       	ldi	r24, 0xB8	; 184
    1e42:	9b e0       	ldi	r25, 0x0B	; 11
    1e44:	f3 01       	movw	r30, r6
    1e46:	31 97       	sbiw	r30, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <collision+0x26e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4c:	d9 f7       	brne	.-10     	; 0x1e44 <collision+0x26c>
			}
			else {
				_delay_ms(300);
				clear();
    1e4e:	99 d5       	rcall	.+2866   	; 0x2982 <clear>
				draw_string("Game OVER!", middle_x-25,middle_y);
    1e50:	8b e7       	ldi	r24, 0x7B	; 123
    1e52:	91 e0       	ldi	r25, 0x01	; 1
    1e54:	6a 85       	ldd	r22, Y+10	; 0x0a
    1e56:	4d 81       	ldd	r20, Y+5	; 0x05
    1e58:	0e 94 33 17 	call	0x2e66	; 0x2e66 <draw_string>
				refresh();
    1e5c:	0e 94 48 17 	call	0x2e90	; 0x2e90 <refresh>
    1e60:	88 e9       	ldi	r24, 0x98	; 152
    1e62:	9a e3       	ldi	r25, 0x3A	; 58
    1e64:	f3 01       	movw	r30, r6
    1e66:	31 97       	sbiw	r30, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <collision+0x28e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6c:	d9 f7       	brne	.-10     	; 0x1e64 <collision+0x28c>
				_delay_ms(1500);
				setupGame();
    1e6e:	18 de       	rcall	.-976    	; 0x1aa0 <setupGame>
				setupHero();
    1e70:	0e 94 cd 04 	call	0x99a	; 0x99a <setupHero>
				setupZombies();	
    1e74:	62 da       	rcall	.-2876   	; 0x133a <setupZombies>
				setupPit();
    1e76:	25 da       	rcall	.-2998   	; 0x12c2 <setupPit>
				setupSword();
    1e78:	df d9       	rcall	.-3138   	; 0x1238 <setupSword>
				gotSword = 0;
    1e7a:	10 92 13 02 	sts	0x0213, r1
    1e7e:	10 92 12 02 	sts	0x0212, r1
				setupGrenade();
    1e82:	95 d9       	rcall	.-3286   	; 0x11ae <setupGrenade>
				gotGrenade = 0;
    1e84:	10 92 15 02 	sts	0x0215, r1
    1e88:	10 92 14 02 	sts	0x0214, r1
				grenadeDropped = 0;
    1e8c:	10 92 0b 02 	sts	0x020B, r1
    1e90:	10 92 0a 02 	sts	0x020A, r1
				grenadeExploded = 0;
    1e94:	10 92 0d 02 	sts	0x020D, r1
    1e98:	10 92 0c 02 	sts	0x020C, r1
			}
		GAMEON = 1;	
    1e9c:	21 e0       	ldi	r18, 0x01	; 1
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	30 93 07 02 	sts	0x0207, r19
    1ea4:	20 93 06 02 	sts	0x0206, r18
	
	int gx = grenade -> x;
	int gy = grenade -> y;
	
	// checking zombie collisions
	for (int i = 0; i<numZombies; i++) {
    1ea8:	08 94       	sec
    1eaa:	81 1c       	adc	r8, r1
    1eac:	91 1c       	adc	r9, r1
    1eae:	42 e0       	ldi	r20, 0x02	; 2
    1eb0:	50 e0       	ldi	r21, 0x00	; 0
    1eb2:	c4 0e       	add	r12, r20
    1eb4:	d5 1e       	adc	r13, r21
    1eb6:	80 91 a8 01 	lds	r24, 0x01A8
    1eba:	90 91 a9 01 	lds	r25, 0x01A9
    1ebe:	00 91 aa 01 	lds	r16, 0x01AA
    1ec2:	88 16       	cp	r8, r24
    1ec4:	99 06       	cpc	r9, r25
    1ec6:	0c f4       	brge	.+2      	; 0x1eca <collision+0x2f2>
    1ec8:	00 cf       	rjmp	.-512    	; 0x1cca <collision+0xf2>
		GAMEON = 1;	
		}
	} 
	
	// sword collision and collection
	if (x > sx - width && x < sx + width && y > sy - height && y < sy + height) {
    1eca:	5c 81       	ldd	r21, Y+4	; 0x04
    1ecc:	65 2f       	mov	r22, r21
    1ece:	70 e0       	ldi	r23, 0x00	; 0
    1ed0:	40 2f       	mov	r20, r16
    1ed2:	50 e0       	ldi	r21, 0x00	; 0
    1ed4:	c7 01       	movw	r24, r14
    1ed6:	84 1b       	sub	r24, r20
    1ed8:	95 0b       	sbc	r25, r21
    1eda:	86 17       	cp	r24, r22
    1edc:	97 07       	cpc	r25, r23
    1ede:	ec f4       	brge	.+58     	; 0x1f1a <collision+0x342>
    1ee0:	e4 0e       	add	r14, r20
    1ee2:	f5 1e       	adc	r15, r21
    1ee4:	6e 15       	cp	r22, r14
    1ee6:	7f 05       	cpc	r23, r15
    1ee8:	c4 f4       	brge	.+48     	; 0x1f1a <collision+0x342>
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	e8 2f       	mov	r30, r24
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 91 ab 01 	lds	r24, 0x01AB
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	c5 01       	movw	r24, r10
    1efa:	82 1b       	sub	r24, r18
    1efc:	93 0b       	sbc	r25, r19
    1efe:	8e 17       	cp	r24, r30
    1f00:	9f 07       	cpc	r25, r31
    1f02:	5c f4       	brge	.+22     	; 0x1f1a <collision+0x342>
    1f04:	2a 0d       	add	r18, r10
    1f06:	3b 1d       	adc	r19, r11
    1f08:	e2 17       	cp	r30, r18
    1f0a:	f3 07       	cpc	r31, r19
    1f0c:	34 f4       	brge	.+12     	; 0x1f1a <collision+0x342>
	gotSword = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	90 93 13 02 	sts	0x0213, r25
    1f16:	80 93 12 02 	sts	0x0212, r24
	}
	if (x > gx - width && x < gx + width && y > gy - height && y < gy + height && gotGrenade == 0) {
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1e:	84 1b       	sub	r24, r20
    1f20:	95 0b       	sbc	r25, r21
    1f22:	86 17       	cp	r24, r22
    1f24:	97 07       	cpc	r25, r23
    1f26:	74 f5       	brge	.+92     	; 0x1f84 <collision+0x3ac>
    1f28:	a9 81       	ldd	r26, Y+1	; 0x01
    1f2a:	ba 81       	ldd	r27, Y+2	; 0x02
    1f2c:	4a 0f       	add	r20, r26
    1f2e:	5b 1f       	adc	r21, r27
    1f30:	64 17       	cp	r22, r20
    1f32:	75 07       	cpc	r23, r21
    1f34:	3c f5       	brge	.+78     	; 0x1f84 <collision+0x3ac>
	
	int sx = sword -> x;
	int sy = sword -> y;
	
	int gx = grenade -> x;
	int gy = grenade -> y;
    1f36:	c2 01       	movw	r24, r4
    1f38:	b1 01       	movw	r22, r2
    1f3a:	3c d4       	rcall	.+2168   	; 0x27b4 <__fixsfsi>
    1f3c:	ab 01       	movw	r20, r22
	
	// sword collision and collection
	if (x > sx - width && x < sx + width && y > sy - height && y < sy + height) {
	gotSword = 1;
	}
	if (x > gx - width && x < gx + width && y > gy - height && y < gy + height && gotGrenade == 0) {
    1f3e:	bb 81       	ldd	r27, Y+3	; 0x03
    1f40:	6b 2f       	mov	r22, r27
    1f42:	70 e0       	ldi	r23, 0x00	; 0
    1f44:	80 91 ab 01 	lds	r24, 0x01AB
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	ca 01       	movw	r24, r20
    1f4e:	82 1b       	sub	r24, r18
    1f50:	93 0b       	sbc	r25, r19
    1f52:	86 17       	cp	r24, r22
    1f54:	97 07       	cpc	r25, r23
    1f56:	b4 f4       	brge	.+44     	; 0x1f84 <collision+0x3ac>
    1f58:	24 0f       	add	r18, r20
    1f5a:	35 1f       	adc	r19, r21
    1f5c:	62 17       	cp	r22, r18
    1f5e:	73 07       	cpc	r23, r19
    1f60:	8c f4       	brge	.+34     	; 0x1f84 <collision+0x3ac>
    1f62:	80 91 14 02 	lds	r24, 0x0214
    1f66:	90 91 15 02 	lds	r25, 0x0215
    1f6a:	89 2b       	or	r24, r25
    1f6c:	59 f4       	brne	.+22     	; 0x1f84 <collision+0x3ac>
	gotGrenade = 1;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	90 93 15 02 	sts	0x0215, r25
    1f76:	80 93 14 02 	sts	0x0214, r24
	grenade -> is_visible = 0;
    1f7a:	e0 91 1c 02 	lds	r30, 0x021C
    1f7e:	f0 91 1d 02 	lds	r31, 0x021D
    1f82:	12 86       	std	Z+10, r1	; 0x0a
	}
	
}
    1f84:	2e 96       	adiw	r28, 0x0e	; 14
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	1f 91       	pop	r17
    1f96:	0f 91       	pop	r16
    1f98:	ff 90       	pop	r15
    1f9a:	ef 90       	pop	r14
    1f9c:	df 90       	pop	r13
    1f9e:	cf 90       	pop	r12
    1fa0:	bf 90       	pop	r11
    1fa2:	af 90       	pop	r10
    1fa4:	9f 90       	pop	r9
    1fa6:	8f 90       	pop	r8
    1fa8:	7f 90       	pop	r7
    1faa:	6f 90       	pop	r6
    1fac:	5f 90       	pop	r5
    1fae:	4f 90       	pop	r4
    1fb0:	3f 90       	pop	r3
    1fb2:	2f 90       	pop	r2
    1fb4:	08 95       	ret

00001fb6 <main>:
#include "my_functions.h"

#define NUM_BLOCKS 10
#define MAX_CLOCK_COUNTER_FOR_100MSECOND 5

int main() {
    1fb6:	2f 92       	push	r2
    1fb8:	3f 92       	push	r3
    1fba:	4f 92       	push	r4
    1fbc:	5f 92       	push	r5
    1fbe:	6f 92       	push	r6
    1fc0:	7f 92       	push	r7
    1fc2:	8f 92       	push	r8
    1fc4:	9f 92       	push	r9
    1fc6:	af 92       	push	r10
    1fc8:	bf 92       	push	r11
    1fca:	cf 92       	push	r12
    1fcc:	df 92       	push	r13
    1fce:	ef 92       	push	r14
    1fd0:	ff 92       	push	r15
    1fd2:	0f 93       	push	r16
    1fd4:	1f 93       	push	r17
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	c3 59       	subi	r28, 0x93	; 147
    1fe0:	d0 40       	sbci	r29, 0x00	; 0
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	de bf       	out	0x3e, r29	; 62
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	cd bf       	out	0x3d, r28	; 61
		}
	}
	
	
	return 0;
}
    1fec:	2d b7       	in	r18, 0x3d	; 61
    1fee:	3e b7       	in	r19, 0x3e	; 62
    1ff0:	c5 57       	subi	r28, 0x75	; 117
    1ff2:	df 4f       	sbci	r29, 0xFF	; 255
    1ff4:	39 83       	std	Y+1, r19	; 0x01
    1ff6:	28 83       	st	Y, r18
    1ff8:	cb 58       	subi	r28, 0x8B	; 139
    1ffa:	d0 40       	sbci	r29, 0x00	; 0
	
	// INSERT_CODE_HERE
	//draw_string("eWWZ begins!",0,0);

	// screen setup etc
	setupGame();
    1ffc:	51 dd       	rcall	.-1374   	; 0x1aa0 <setupGame>
	clear();
    1ffe:	c1 d4       	rcall	.+2434   	; 0x2982 <clear>
	refresh();
    2000:	47 d7       	rcall	.+3726   	; 0x2e90 <refresh>
	// sprites
	byte bitHero [] = {
		BYTE( 10100000),
		BYTE( 11100000),
		BYTE( 10100000),
	};
    2002:	de 01       	movw	r26, r28
    2004:	11 96       	adiw	r26, 0x01	; 1
    2006:	e0 ee       	ldi	r30, 0xE0	; 224
    2008:	f1 e0       	ldi	r31, 0x01	; 1
    200a:	83 e0       	ldi	r24, 0x03	; 3
    200c:	01 90       	ld	r0, Z+
    200e:	0d 92       	st	X+, r0
    2010:	81 50       	subi	r24, 0x01	; 1
    2012:	e1 f7       	brne	.-8      	; 0x200c <main+0x56>
		
	byte bitZombie [] = {
		BYTE( 11100000),
		BYTE( 01000000),
		BYTE( 11100000),
	};
    2014:	de 01       	movw	r26, r28
    2016:	14 96       	adiw	r26, 0x04	; 4
    2018:	ed ed       	ldi	r30, 0xDD	; 221
    201a:	f1 e0       	ldi	r31, 0x01	; 1
    201c:	83 e0       	ldi	r24, 0x03	; 3
    201e:	01 90       	ld	r0, Z+
    2020:	0d 92       	st	X+, r0
    2022:	81 50       	subi	r24, 0x01	; 1
    2024:	e1 f7       	brne	.-8      	; 0x201e <main+0x68>
	
	// screen parameters
	screen_x -= width;
    2026:	20 91 aa 01 	lds	r18, 0x01AA
    202a:	80 91 86 01 	lds	r24, 0x0186
    202e:	90 91 87 01 	lds	r25, 0x0187
    2032:	82 1b       	sub	r24, r18
    2034:	91 09       	sbc	r25, r1
    2036:	90 93 87 01 	sts	0x0187, r25
    203a:	80 93 86 01 	sts	0x0186, r24
	screen_y -= height;
    203e:	40 91 ab 01 	lds	r20, 0x01AB
    2042:	20 91 8a 01 	lds	r18, 0x018A
    2046:	30 91 8b 01 	lds	r19, 0x018B
    204a:	24 1b       	sub	r18, r20
    204c:	31 09       	sbc	r19, r1
    204e:	30 93 8b 01 	sts	0x018B, r19
    2052:	20 93 8a 01 	sts	0x018A, r18

	int middle_x = screen_x/2;
    2056:	62 e0       	ldi	r22, 0x02	; 2
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    205e:	c3 57       	subi	r28, 0x73	; 115
    2060:	df 4f       	sbci	r29, 0xFF	; 255
    2062:	68 83       	st	Y, r22
    2064:	cd 58       	subi	r28, 0x8D	; 141
    2066:	d0 40       	sbci	r29, 0x00	; 0
	int middle_y = screen_y/2 + 5;
    2068:	c9 01       	movw	r24, r18
    206a:	62 e0       	ldi	r22, 0x02	; 2
    206c:	70 e0       	ldi	r23, 0x00	; 0
    206e:	0e 94 a5 18 	call	0x314a	; 0x314a <__divmodhi4>
    2072:	4b 01       	movw	r8, r22
    2074:	45 e0       	ldi	r20, 0x05	; 5
    2076:	50 e0       	ldi	r21, 0x00	; 0
    2078:	84 0e       	add	r8, r20
    207a:	95 1e       	adc	r9, r21
		refresh();
		_delay_ms(500);
	
	}*/
	
	Sprite zombies[numZombies]; 
    207c:	20 91 a8 01 	lds	r18, 0x01A8
    2080:	30 91 a9 01 	lds	r19, 0x01A9
    2084:	85 e1       	ldi	r24, 0x15	; 21
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	dc 01       	movw	r26, r24
    208a:	2a 9f       	mul	r18, r26
    208c:	c0 01       	movw	r24, r0
    208e:	2b 9f       	mul	r18, r27
    2090:	90 0d       	add	r25, r0
    2092:	3a 9f       	mul	r19, r26
    2094:	90 0d       	add	r25, r0
    2096:	11 24       	eor	r1, r1
    2098:	ed b7       	in	r30, 0x3d	; 61
    209a:	fe b7       	in	r31, 0x3e	; 62
    209c:	e8 1b       	sub	r30, r24
    209e:	f9 0b       	sbc	r31, r25
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	f8 94       	cli
    20a4:	fe bf       	out	0x3e, r31	; 62
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	ed bf       	out	0x3d, r30	; 61
    20aa:	6d b6       	in	r6, 0x3d	; 61
    20ac:	7e b6       	in	r7, 0x3e	; 62
    20ae:	08 94       	sec
    20b0:	61 1c       	adc	r6, r1
    20b2:	71 1c       	adc	r7, r1
    20b4:	c3 57       	subi	r28, 0x73	; 115
    20b6:	df 4f       	sbci	r29, 0xFF	; 255
    20b8:	18 81       	ld	r17, Y
    20ba:	cd 58       	subi	r28, 0x8D	; 141
    20bc:	d0 40       	sbci	r29, 0x00	; 0
    20be:	bc e2       	ldi	r27, 0x2C	; 44
    20c0:	ab 2e       	mov	r10, r27
    20c2:	b2 e0       	ldi	r27, 0x02	; 2
    20c4:	bb 2e       	mov	r11, r27
    20c6:	cc 24       	eor	r12, r12
    20c8:	dd 24       	eor	r13, r13
	for (int i = 0; i<numZombies; i++) {
	zombie[i] = &zombies[i];
    20ca:	a5 e1       	ldi	r26, 0x15	; 21
    20cc:	2a 2e       	mov	r2, r26
    20ce:	31 2c       	mov	r3, r1
	init_sprite(zombie[i], middle_x + 3*i, middle_y, width, height, bitZombie);
    20d0:	f4 e0       	ldi	r31, 0x04	; 4
    20d2:	4f 2e       	mov	r4, r31
    20d4:	51 2c       	mov	r5, r1
    20d6:	4c 0e       	add	r4, r28
    20d8:	5d 1e       	adc	r5, r29
    20da:	19 c0       	rjmp	.+50     	; 0x210e <main+0x158>
	
	}*/
	
	Sprite zombies[numZombies]; 
	for (int i = 0; i<numZombies; i++) {
	zombie[i] = &zombies[i];
    20dc:	c2 9c       	mul	r12, r2
    20de:	c0 01       	movw	r24, r0
    20e0:	c3 9c       	mul	r12, r3
    20e2:	90 0d       	add	r25, r0
    20e4:	d2 9c       	mul	r13, r2
    20e6:	90 0d       	add	r25, r0
    20e8:	11 24       	eor	r1, r1
    20ea:	86 0d       	add	r24, r6
    20ec:	97 1d       	adc	r25, r7
    20ee:	d5 01       	movw	r26, r10
    20f0:	8d 93       	st	X+, r24
    20f2:	9d 93       	st	X+, r25
    20f4:	5d 01       	movw	r10, r26
	init_sprite(zombie[i], middle_x + 3*i, middle_y, width, height, bitZombie);
    20f6:	61 2f       	mov	r22, r17
    20f8:	48 2d       	mov	r20, r8
    20fa:	20 91 aa 01 	lds	r18, 0x01AA
    20fe:	00 91 ab 01 	lds	r16, 0x01AB
    2102:	72 01       	movw	r14, r4
    2104:	2a d7       	rcall	.+3668   	; 0x2f5a <init_sprite>
		_delay_ms(500);
	
	}*/
	
	Sprite zombies[numZombies]; 
	for (int i = 0; i<numZombies; i++) {
    2106:	08 94       	sec
    2108:	c1 1c       	adc	r12, r1
    210a:	d1 1c       	adc	r13, r1
    210c:	1d 5f       	subi	r17, 0xFD	; 253
    210e:	80 91 a8 01 	lds	r24, 0x01A8
    2112:	90 91 a9 01 	lds	r25, 0x01A9
    2116:	c8 16       	cp	r12, r24
    2118:	d9 06       	cpc	r13, r25
    211a:	04 f3       	brlt	.-64     	; 0x20dc <main+0x126>
	zombie[i] = &zombies[i];
	init_sprite(zombie[i], middle_x + 3*i, middle_y, width, height, bitZombie);
	}
	
	Sprite swords, swordsStatus;
	sword = &swords;
    211c:	ce 01       	movw	r24, r28
    211e:	07 96       	adiw	r24, 0x07	; 7
    2120:	90 93 17 02 	sts	0x0217, r25
    2124:	80 93 16 02 	sts	0x0216, r24
	swordStatus = &swordsStatus;
    2128:	9e 01       	movw	r18, r28
    212a:	24 5e       	subi	r18, 0xE4	; 228
    212c:	3f 4f       	sbci	r19, 0xFF	; 255
    212e:	30 93 1f 02 	sts	0x021F, r19
    2132:	20 93 1e 02 	sts	0x021E, r18
	init_sprite(sword, -10,-10, width, height, bitSwordLeft);
    2136:	66 ef       	ldi	r22, 0xF6	; 246
    2138:	46 ef       	ldi	r20, 0xF6	; 246
    213a:	20 91 aa 01 	lds	r18, 0x01AA
    213e:	00 91 ab 01 	lds	r16, 0x01AB
    2142:	ee ea       	ldi	r30, 0xAE	; 174
    2144:	ee 2e       	mov	r14, r30
    2146:	e1 e0       	ldi	r30, 0x01	; 1
    2148:	fe 2e       	mov	r15, r30
    214a:	07 d7       	rcall	.+3598   	; 0x2f5a <init_sprite>
	init_sprite(swordStatus, -10,-10, width, height, bitSwordUp);
    214c:	80 91 1e 02 	lds	r24, 0x021E
    2150:	90 91 1f 02 	lds	r25, 0x021F
    2154:	66 ef       	ldi	r22, 0xF6	; 246
    2156:	46 ef       	ldi	r20, 0xF6	; 246
    2158:	20 91 aa 01 	lds	r18, 0x01AA
    215c:	00 91 ab 01 	lds	r16, 0x01AB
    2160:	74 eb       	ldi	r23, 0xB4	; 180
    2162:	e7 2e       	mov	r14, r23
    2164:	71 e0       	ldi	r23, 0x01	; 1
    2166:	f7 2e       	mov	r15, r23
    2168:	f8 d6       	rcall	.+3568   	; 0x2f5a <init_sprite>
	
	Sprite grenades, grenadesStatus;
	grenade = &grenades;
    216a:	ce 01       	movw	r24, r28
    216c:	c1 96       	adiw	r24, 0x31	; 49
    216e:	90 93 1d 02 	sts	0x021D, r25
    2172:	80 93 1c 02 	sts	0x021C, r24
	grenadeStatus = &grenadesStatus;
    2176:	9e 01       	movw	r18, r28
    2178:	2a 5b       	subi	r18, 0xBA	; 186
    217a:	3f 4f       	sbci	r19, 0xFF	; 255
    217c:	30 93 29 02 	sts	0x0229, r19
    2180:	20 93 28 02 	sts	0x0228, r18
	init_sprite(grenade, -10,-10, width, height, bitGrenade);
    2184:	66 ef       	ldi	r22, 0xF6	; 246
    2186:	46 ef       	ldi	r20, 0xF6	; 246
    2188:	20 91 aa 01 	lds	r18, 0x01AA
    218c:	00 91 ab 01 	lds	r16, 0x01AB
    2190:	5a eb       	ldi	r21, 0xBA	; 186
    2192:	e5 2e       	mov	r14, r21
    2194:	51 e0       	ldi	r21, 0x01	; 1
    2196:	f5 2e       	mov	r15, r21
    2198:	e0 d6       	rcall	.+3520   	; 0x2f5a <init_sprite>
	init_sprite(grenadeStatus, -10,-10, width, height, bitGrenade);
    219a:	80 91 28 02 	lds	r24, 0x0228
    219e:	90 91 29 02 	lds	r25, 0x0229
    21a2:	66 ef       	ldi	r22, 0xF6	; 246
    21a4:	46 ef       	ldi	r20, 0xF6	; 246
    21a6:	20 91 aa 01 	lds	r18, 0x01AA
    21aa:	00 91 ab 01 	lds	r16, 0x01AB
    21ae:	d5 d6       	rcall	.+3498   	; 0x2f5a <init_sprite>
	
	Sprite explosions;
	explosion = &explosions;
    21b0:	ce 01       	movw	r24, r28
    21b2:	85 5a       	subi	r24, 0xA5	; 165
    21b4:	9f 4f       	sbci	r25, 0xFF	; 255
    21b6:	90 93 27 02 	sts	0x0227, r25
    21ba:	80 93 26 02 	sts	0x0226, r24
	init_sprite(explosion, -10, -10, 16, 16, bitExploded);
    21be:	66 ef       	ldi	r22, 0xF6	; 246
    21c0:	46 ef       	ldi	r20, 0xF6	; 246
    21c2:	20 e1       	ldi	r18, 0x10	; 16
    21c4:	00 e1       	ldi	r16, 0x10	; 16
    21c6:	3d eb       	ldi	r19, 0xBD	; 189
    21c8:	e3 2e       	mov	r14, r19
    21ca:	31 e0       	ldi	r19, 0x01	; 1
    21cc:	f3 2e       	mov	r15, r19
    21ce:	c5 d6       	rcall	.+3466   	; 0x2f5a <init_sprite>
	explosion -> is_visible = 1;
    21d0:	e0 91 26 02 	lds	r30, 0x0226
    21d4:	f0 91 27 02 	lds	r31, 0x0227
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	82 87       	std	Z+10, r24	; 0x0a
	draw_sprite(explosion);
    21dc:	80 91 26 02 	lds	r24, 0x0226
    21e0:	90 91 27 02 	lds	r25, 0x0227
    21e4:	ea d6       	rcall	.+3540   	; 0x2fba <draw_sprite>
	
	setupGrenade();
    21e6:	0e 94 d7 08 	call	0x11ae	; 0x11ae <setupGrenade>
	setupSword();
    21ea:	26 d8       	rcall	.-4020   	; 0x1238 <setupSword>
	setupZombies();
    21ec:	a6 d8       	rcall	.-3764   	; 0x133a <setupZombies>
	setupPit();
    21ee:	69 d8       	rcall	.-3886   	; 0x12c2 <setupPit>
	// Hero sprite parameters
	x = screen_x/2 - width;
	y = screen_y/2 + 9/2;
	
	Sprite my_sprite;
	my_pointer = &my_sprite;
    21f0:	ce 01       	movw	r24, r28
    21f2:	80 59       	subi	r24, 0x90	; 144
    21f4:	9f 4f       	sbci	r25, 0xFF	; 255
    21f6:	90 93 25 02 	sts	0x0225, r25
    21fa:	80 93 24 02 	sts	0x0224, r24

	init_sprite(my_pointer, middle_x, middle_y, width, height, bitHero);
    21fe:	c3 57       	subi	r28, 0x73	; 115
    2200:	df 4f       	sbci	r29, 0xFF	; 255
    2202:	68 81       	ld	r22, Y
    2204:	cd 58       	subi	r28, 0x8D	; 141
    2206:	d0 40       	sbci	r29, 0x00	; 0
    2208:	48 2d       	mov	r20, r8
    220a:	20 91 aa 01 	lds	r18, 0x01AA
    220e:	00 91 ab 01 	lds	r16, 0x01AB
    2212:	7e 01       	movw	r14, r28
    2214:	08 94       	sec
    2216:	e1 1c       	adc	r14, r1
    2218:	f1 1c       	adc	r15, r1
    221a:	9f d6       	rcall	.+3390   	; 0x2f5a <init_sprite>
	draw_sprite(my_pointer);
    221c:	80 91 24 02 	lds	r24, 0x0224
    2220:	90 91 25 02 	lds	r25, 0x0225
    2224:	ca d6       	rcall	.+3476   	; 0x2fba <draw_sprite>
    2226:	1c e2       	ldi	r17, 0x2C	; 44
    2228:	e1 2e       	mov	r14, r17
    222a:	12 e0       	ldi	r17, 0x02	; 2
    222c:	f1 2e       	mov	r15, r17
    222e:	00 e0       	ldi	r16, 0x00	; 0
    2230:	10 e0       	ldi	r17, 0x00	; 0
    2232:	07 c0       	rjmp	.+14     	; 0x2242 <main+0x28c>
	for (int i = 0; i<numZombies; i++) {
	draw_sprite(zombie[i]);
    2234:	f7 01       	movw	r30, r14
    2236:	81 91       	ld	r24, Z+
    2238:	91 91       	ld	r25, Z+
    223a:	7f 01       	movw	r14, r30
    223c:	be d6       	rcall	.+3452   	; 0x2fba <draw_sprite>
	Sprite my_sprite;
	my_pointer = &my_sprite;

	init_sprite(my_pointer, middle_x, middle_y, width, height, bitHero);
	draw_sprite(my_pointer);
	for (int i = 0; i<numZombies; i++) {
    223e:	0f 5f       	subi	r16, 0xFF	; 255
    2240:	1f 4f       	sbci	r17, 0xFF	; 255
    2242:	80 91 a8 01 	lds	r24, 0x01A8
    2246:	90 91 a9 01 	lds	r25, 0x01A9
    224a:	08 17       	cp	r16, r24
    224c:	19 07       	cpc	r17, r25
    224e:	94 f3       	brlt	.-28     	; 0x2234 <main+0x27e>
	draw_sprite(zombie[i]);
	}
	
	refresh();
    2250:	1f d6       	rcall	.+3134   	; 0x2e90 <refresh>
    2252:	88 ee       	ldi	r24, 0xE8	; 232
    2254:	93 e0       	ldi	r25, 0x03	; 3
    2256:	20 e9       	ldi	r18, 0x90	; 144
    2258:	31 e0       	ldi	r19, 0x01	; 1
    225a:	f9 01       	movw	r30, r18
    225c:	31 97       	sbiw	r30, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <main+0x2a6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2260:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2262:	d9 f7       	brne	.-10     	; 0x225a <main+0x2a4>
	//int add = 1;
	
	// initialise vars
	int notRIGHT = 1;
	int notLEFT = 1;
	GAMEON = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	90 93 07 02 	sts	0x0207, r25
    226c:	80 93 06 02 	sts	0x0206, r24
    2270:	c7 57       	subi	r28, 0x77	; 119
    2272:	df 4f       	sbci	r29, 0xFF	; 255
    2274:	99 83       	std	Y+1, r25	; 0x01
    2276:	88 83       	st	Y, r24
    2278:	c9 58       	subi	r28, 0x89	; 137
    227a:	d0 40       	sbci	r29, 0x00	; 0
    227c:	c9 57       	subi	r28, 0x79	; 121
    227e:	df 4f       	sbci	r29, 0xFF	; 255
    2280:	99 83       	std	Y+1, r25	; 0x01
    2282:	88 83       	st	Y, r24
    2284:	c7 58       	subi	r28, 0x87	; 135
    2286:	d0 40       	sbci	r29, 0x00	; 0
    2288:	fe c1       	rjmp	.+1020   	; 0x2686 <main+0x6d0>
		my_pointer -> y += add;
		my_pointer2 -> y -= add;
		if (my_pointer -> y < 1) add = -add;
		if (my_pointer -> y > screen_y) add = -add;
	*/
		clear();
    228a:	7b d3       	rcall	.+1782   	; 0x2982 <clear>

		if (RIGHT == 0) {
    228c:	80 91 f2 01 	lds	r24, 0x01F2
    2290:	90 91 f3 01 	lds	r25, 0x01F3
    2294:	89 2b       	or	r24, r25
    2296:	41 f4       	brne	.+16     	; 0x22a8 <main+0x2f2>
    2298:	21 e0       	ldi	r18, 0x01	; 1
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	c7 57       	subi	r28, 0x77	; 119
    229e:	df 4f       	sbci	r29, 0xFF	; 255
    22a0:	39 83       	std	Y+1, r19	; 0x01
    22a2:	28 83       	st	Y, r18
    22a4:	c9 58       	subi	r28, 0x89	; 137
    22a6:	d0 40       	sbci	r29, 0x00	; 0
			notRIGHT = 1;
		}
		if (LEFT == 0) {
    22a8:	80 91 f0 01 	lds	r24, 0x01F0
    22ac:	90 91 f1 01 	lds	r25, 0x01F1
    22b0:	89 2b       	or	r24, r25
    22b2:	41 f4       	brne	.+16     	; 0x22c4 <main+0x30e>
    22b4:	41 e0       	ldi	r20, 0x01	; 1
    22b6:	50 e0       	ldi	r21, 0x00	; 0
    22b8:	c9 57       	subi	r28, 0x79	; 121
    22ba:	df 4f       	sbci	r29, 0xFF	; 255
    22bc:	59 83       	std	Y+1, r21	; 0x01
    22be:	48 83       	st	Y, r20
    22c0:	c7 58       	subi	r28, 0x87	; 135
    22c2:	d0 40       	sbci	r29, 0x00	; 0
			notLEFT = 1;
		}
		
		if (RIGHT && notRIGHT) {
    22c4:	80 91 f2 01 	lds	r24, 0x01F2
    22c8:	90 91 f3 01 	lds	r25, 0x01F3
    22cc:	89 2b       	or	r24, r25
    22ce:	19 f1       	breq	.+70     	; 0x2316 <main+0x360>
    22d0:	c7 57       	subi	r28, 0x77	; 119
    22d2:	df 4f       	sbci	r29, 0xFF	; 255
    22d4:	88 81       	ld	r24, Y
    22d6:	99 81       	ldd	r25, Y+1	; 0x01
    22d8:	c9 58       	subi	r28, 0x89	; 137
    22da:	d0 40       	sbci	r29, 0x00	; 0
    22dc:	89 2b       	or	r24, r25
    22de:	d9 f0       	breq	.+54     	; 0x2316 <main+0x360>
			notRIGHT = 0;
			Direction = (Direction-1);
    22e0:	80 91 92 01 	lds	r24, 0x0192
    22e4:	90 91 93 01 	lds	r25, 0x0193
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	90 93 93 01 	sts	0x0193, r25
    22ee:	80 93 92 01 	sts	0x0192, r24
			if (Direction < 0) {
    22f2:	80 91 92 01 	lds	r24, 0x0192
    22f6:	90 91 93 01 	lds	r25, 0x0193
    22fa:	97 ff       	sbrs	r25, 7
    22fc:	06 c0       	rjmp	.+12     	; 0x230a <main+0x354>
			Direction = 3;
    22fe:	a3 e0       	ldi	r26, 0x03	; 3
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	b0 93 93 01 	sts	0x0193, r27
    2306:	a0 93 92 01 	sts	0x0192, r26
    230a:	c7 57       	subi	r28, 0x77	; 119
    230c:	df 4f       	sbci	r29, 0xFF	; 255
    230e:	19 82       	std	Y+1, r1	; 0x01
    2310:	18 82       	st	Y, r1
    2312:	c9 58       	subi	r28, 0x89	; 137
    2314:	d0 40       	sbci	r29, 0x00	; 0
			//bitmapb = bitmaptemp;
			//my_pointer -> bitmap = bitmapa;
			//my_pointer2 -> bitmap = bitmapb;
			
		}
		if (LEFT & notLEFT) {
    2316:	80 91 f0 01 	lds	r24, 0x01F0
    231a:	90 91 f1 01 	lds	r25, 0x01F1
    231e:	c9 57       	subi	r28, 0x79	; 121
    2320:	df 4f       	sbci	r29, 0xFF	; 255
    2322:	e8 81       	ld	r30, Y
    2324:	f9 81       	ldd	r31, Y+1	; 0x01
    2326:	c7 58       	subi	r28, 0x87	; 135
    2328:	d0 40       	sbci	r29, 0x00	; 0
    232a:	8e 23       	and	r24, r30
    232c:	9f 23       	and	r25, r31
    232e:	89 2b       	or	r24, r25
    2330:	91 f0       	breq	.+36     	; 0x2356 <main+0x3a0>
			notLEFT = 0;
			Direction = (Direction+1)%4;
    2332:	80 91 92 01 	lds	r24, 0x0192
    2336:	90 91 93 01 	lds	r25, 0x0193
    233a:	01 96       	adiw	r24, 0x01	; 1
    233c:	64 e0       	ldi	r22, 0x04	; 4
    233e:	70 e0       	ldi	r23, 0x00	; 0
    2340:	04 d7       	rcall	.+3592   	; 0x314a <__divmodhi4>
    2342:	90 93 93 01 	sts	0x0193, r25
    2346:	80 93 92 01 	sts	0x0192, r24
    234a:	c9 57       	subi	r28, 0x79	; 121
    234c:	df 4f       	sbci	r29, 0xFF	; 255
    234e:	19 82       	std	Y+1, r1	; 0x01
    2350:	18 82       	st	Y, r1
    2352:	c7 58       	subi	r28, 0x87	; 135
    2354:	d0 40       	sbci	r29, 0x00	; 0
			
		}
		
		if (LEFT & RIGHT & gotGrenade) {
    2356:	80 91 f0 01 	lds	r24, 0x01F0
    235a:	90 91 f1 01 	lds	r25, 0x01F1
    235e:	20 91 f2 01 	lds	r18, 0x01F2
    2362:	30 91 f3 01 	lds	r19, 0x01F3
    2366:	28 23       	and	r18, r24
    2368:	39 23       	and	r19, r25
    236a:	80 91 14 02 	lds	r24, 0x0214
    236e:	90 91 15 02 	lds	r25, 0x0215
    2372:	28 23       	and	r18, r24
    2374:	39 23       	and	r19, r25
    2376:	23 2b       	or	r18, r19
    2378:	41 f1       	breq	.+80     	; 0x23ca <main+0x414>
			if (gotGrenade) {
			grenade -> x = my_pointer -> x;
    237a:	e0 91 1c 02 	lds	r30, 0x021C
    237e:	f0 91 1d 02 	lds	r31, 0x021D
    2382:	20 91 24 02 	lds	r18, 0x0224
    2386:	30 91 25 02 	lds	r19, 0x0225
    238a:	d9 01       	movw	r26, r18
    238c:	4d 91       	ld	r20, X+
    238e:	5d 91       	ld	r21, X+
    2390:	6d 91       	ld	r22, X+
    2392:	7c 91       	ld	r23, X
    2394:	13 97       	sbiw	r26, 0x03	; 3
    2396:	40 83       	st	Z, r20
    2398:	51 83       	std	Z+1, r21	; 0x01
    239a:	62 83       	std	Z+2, r22	; 0x02
    239c:	73 83       	std	Z+3, r23	; 0x03
			grenade -> y = my_pointer -> y;
    239e:	14 96       	adiw	r26, 0x04	; 4
    23a0:	2d 91       	ld	r18, X+
    23a2:	3d 91       	ld	r19, X+
    23a4:	4d 91       	ld	r20, X+
    23a6:	5c 91       	ld	r21, X
    23a8:	17 97       	sbiw	r26, 0x07	; 7
    23aa:	24 83       	std	Z+4, r18	; 0x04
    23ac:	35 83       	std	Z+5, r19	; 0x05
    23ae:	46 83       	std	Z+6, r20	; 0x06
    23b0:	57 83       	std	Z+7, r21	; 0x07
			grenade -> is_visible = 1;
    23b2:	b1 e0       	ldi	r27, 0x01	; 1
    23b4:	b2 87       	std	Z+10, r27	; 0x0a
			grenadeCounter = 0;
    23b6:	10 92 03 02 	sts	0x0203, r1
    23ba:	10 92 02 02 	sts	0x0202, r1
			grenadeDropped = 1;
    23be:	e1 e0       	ldi	r30, 0x01	; 1
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	f0 93 0b 02 	sts	0x020B, r31
    23c6:	e0 93 0a 02 	sts	0x020A, r30
			}
		}
		
		if (grenadeExploded) {
    23ca:	80 91 0c 02 	lds	r24, 0x020C
    23ce:	90 91 0d 02 	lds	r25, 0x020D
    23d2:	89 2b       	or	r24, r25
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <main+0x422>
    23d6:	d4 c0       	rjmp	.+424    	; 0x2580 <main+0x5ca>
			
			int gx = grenade -> x;
    23d8:	00 91 1c 02 	lds	r16, 0x021C
    23dc:	10 91 1d 02 	lds	r17, 0x021D
    23e0:	d8 01       	movw	r26, r16
    23e2:	6d 91       	ld	r22, X+
    23e4:	7d 91       	ld	r23, X+
    23e6:	8d 91       	ld	r24, X+
    23e8:	9c 91       	ld	r25, X
    23ea:	e4 d1       	rcall	.+968    	; 0x27b4 <__fixsfsi>
    23ec:	5b 01       	movw	r10, r22
			int gy = grenade -> y;
    23ee:	f8 01       	movw	r30, r16
    23f0:	64 81       	ldd	r22, Z+4	; 0x04
    23f2:	75 81       	ldd	r23, Z+5	; 0x05
    23f4:	86 81       	ldd	r24, Z+6	; 0x06
    23f6:	97 81       	ldd	r25, Z+7	; 0x07
    23f8:	dd d1       	rcall	.+954    	; 0x27b4 <__fixsfsi>
    23fa:	4b 01       	movw	r8, r22
				
			for (int i = 0; i<numZombies; i++) {
    23fc:	20 91 a8 01 	lds	r18, 0x01A8
    2400:	30 91 a9 01 	lds	r19, 0x01A9
    2404:	cb 57       	subi	r28, 0x7B	; 123
    2406:	df 4f       	sbci	r29, 0xFF	; 255
    2408:	39 83       	std	Y+1, r19	; 0x01
    240a:	28 83       	st	Y, r18
    240c:	c5 58       	subi	r28, 0x85	; 133
    240e:	d0 40       	sbci	r29, 0x00	; 0
    2410:	bc e2       	ldi	r27, 0x2C	; 44
    2412:	4b 2e       	mov	r4, r27
    2414:	b2 e0       	ldi	r27, 0x02	; 2
    2416:	5b 2e       	mov	r5, r27
    2418:	66 24       	eor	r6, r6
    241a:	77 24       	eor	r7, r7
				int right = gx + 13;
				
				byte zx = zombie[i] -> x;
				byte zy = zombie[i] -> y;
				
				if (zx > left && zx < right && zy > top && zy < bottom && (zombie[i] -> is_visible == 1) ) {
    241c:	a5 01       	movw	r20, r10
    241e:	4a 50       	subi	r20, 0x0A	; 10
    2420:	50 40       	sbci	r21, 0x00	; 0
    2422:	c2 57       	subi	r28, 0x72	; 114
    2424:	df 4f       	sbci	r29, 0xFF	; 255
    2426:	59 83       	std	Y+1, r21	; 0x01
    2428:	48 83       	st	Y, r20
    242a:	ce 58       	subi	r28, 0x8E	; 142
    242c:	d0 40       	sbci	r29, 0x00	; 0
    242e:	c5 01       	movw	r24, r10
    2430:	0d 96       	adiw	r24, 0x0d	; 13
    2432:	c0 57       	subi	r28, 0x70	; 112
    2434:	df 4f       	sbci	r29, 0xFF	; 255
    2436:	99 83       	std	Y+1, r25	; 0x01
    2438:	88 83       	st	Y, r24
    243a:	c0 59       	subi	r28, 0x90	; 144
    243c:	d0 40       	sbci	r29, 0x00	; 0
    243e:	d4 01       	movw	r26, r8
    2440:	1a 97       	sbiw	r26, 0x0a	; 10
    2442:	ce 56       	subi	r28, 0x6E	; 110
    2444:	df 4f       	sbci	r29, 0xFF	; 255
    2446:	b9 83       	std	Y+1, r27	; 0x01
    2448:	a8 83       	st	Y, r26
    244a:	c2 59       	subi	r28, 0x92	; 146
    244c:	d0 40       	sbci	r29, 0x00	; 0
    244e:	ad e0       	ldi	r26, 0x0D	; 13
    2450:	2a 2e       	mov	r2, r26
    2452:	31 2c       	mov	r3, r1
    2454:	28 0c       	add	r2, r8
    2456:	39 1c       	adc	r3, r9
    2458:	53 c0       	rjmp	.+166    	; 0x2500 <main+0x54a>
				int top = gy - 10;
				int bottom = gy +13;
				int left = gx - 10;
				int right = gx + 13;
				
				byte zx = zombie[i] -> x;
    245a:	f2 01       	movw	r30, r4
    245c:	00 81       	ld	r16, Z
    245e:	11 81       	ldd	r17, Z+1	; 0x01
				byte zy = zombie[i] -> y;
    2460:	d8 01       	movw	r26, r16
    2462:	14 96       	adiw	r26, 0x04	; 4
    2464:	cd 90       	ld	r12, X+
    2466:	dd 90       	ld	r13, X+
    2468:	ed 90       	ld	r14, X+
    246a:	fc 90       	ld	r15, X
    246c:	17 97       	sbiw	r26, 0x07	; 7
				
				if (zx > left && zx < right && zy > top && zy < bottom && (zombie[i] -> is_visible == 1) ) {
    246e:	6d 91       	ld	r22, X+
    2470:	7d 91       	ld	r23, X+
    2472:	8d 91       	ld	r24, X+
    2474:	9c 91       	ld	r25, X
    2476:	a3 d1       	rcall	.+838    	; 0x27be <__fixunssfsi>
    2478:	70 e0       	ldi	r23, 0x00	; 0
    247a:	c2 57       	subi	r28, 0x72	; 114
    247c:	df 4f       	sbci	r29, 0xFF	; 255
    247e:	e8 81       	ld	r30, Y
    2480:	f9 81       	ldd	r31, Y+1	; 0x01
    2482:	ce 58       	subi	r28, 0x8E	; 142
    2484:	d0 40       	sbci	r29, 0x00	; 0
    2486:	e6 17       	cp	r30, r22
    2488:	f7 07       	cpc	r31, r23
    248a:	9c f5       	brge	.+102    	; 0x24f2 <main+0x53c>
    248c:	c0 57       	subi	r28, 0x70	; 112
    248e:	df 4f       	sbci	r29, 0xFF	; 255
    2490:	28 81       	ld	r18, Y
    2492:	39 81       	ldd	r19, Y+1	; 0x01
    2494:	c0 59       	subi	r28, 0x90	; 144
    2496:	d0 40       	sbci	r29, 0x00	; 0
    2498:	62 17       	cp	r22, r18
    249a:	73 07       	cpc	r23, r19
    249c:	54 f5       	brge	.+84     	; 0x24f2 <main+0x53c>
    249e:	c7 01       	movw	r24, r14
    24a0:	b6 01       	movw	r22, r12
    24a2:	8d d1       	rcall	.+794    	; 0x27be <__fixunssfsi>
    24a4:	70 e0       	ldi	r23, 0x00	; 0
    24a6:	ce 56       	subi	r28, 0x6E	; 110
    24a8:	df 4f       	sbci	r29, 0xFF	; 255
    24aa:	48 81       	ld	r20, Y
    24ac:	59 81       	ldd	r21, Y+1	; 0x01
    24ae:	c2 59       	subi	r28, 0x92	; 146
    24b0:	d0 40       	sbci	r29, 0x00	; 0
    24b2:	46 17       	cp	r20, r22
    24b4:	57 07       	cpc	r21, r23
    24b6:	ec f4       	brge	.+58     	; 0x24f2 <main+0x53c>
    24b8:	62 15       	cp	r22, r2
    24ba:	73 05       	cpc	r23, r3
    24bc:	d4 f4       	brge	.+52     	; 0x24f2 <main+0x53c>
    24be:	d8 01       	movw	r26, r16
    24c0:	1a 96       	adiw	r26, 0x0a	; 10
    24c2:	8c 91       	ld	r24, X
    24c4:	1a 97       	sbiw	r26, 0x0a	; 10
    24c6:	81 30       	cpi	r24, 0x01	; 1
    24c8:	a1 f4       	brne	.+40     	; 0x24f2 <main+0x53c>
					zombie[i] -> is_visible = 0;
    24ca:	1a 96       	adiw	r26, 0x0a	; 10
    24cc:	1c 92       	st	X, r1
					Score++;
    24ce:	80 91 10 02 	lds	r24, 0x0210
    24d2:	90 91 11 02 	lds	r25, 0x0211
    24d6:	01 96       	adiw	r24, 0x01	; 1
    24d8:	90 93 11 02 	sts	0x0211, r25
    24dc:	80 93 10 02 	sts	0x0210, r24
					activeZombies--;
    24e0:	80 91 a4 01 	lds	r24, 0x01A4
    24e4:	90 91 a5 01 	lds	r25, 0x01A5
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	90 93 a5 01 	sts	0x01A5, r25
    24ee:	80 93 a4 01 	sts	0x01A4, r24
		if (grenadeExploded) {
			
			int gx = grenade -> x;
			int gy = grenade -> y;
				
			for (int i = 0; i<numZombies; i++) {
    24f2:	08 94       	sec
    24f4:	61 1c       	adc	r6, r1
    24f6:	71 1c       	adc	r7, r1
    24f8:	e2 e0       	ldi	r30, 0x02	; 2
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	4e 0e       	add	r4, r30
    24fe:	5f 1e       	adc	r5, r31
    2500:	cb 57       	subi	r28, 0x7B	; 123
    2502:	df 4f       	sbci	r29, 0xFF	; 255
    2504:	28 81       	ld	r18, Y
    2506:	39 81       	ldd	r19, Y+1	; 0x01
    2508:	c5 58       	subi	r28, 0x85	; 133
    250a:	d0 40       	sbci	r29, 0x00	; 0
    250c:	62 16       	cp	r6, r18
    250e:	73 06       	cpc	r7, r19
    2510:	0c f4       	brge	.+2      	; 0x2514 <main+0x55e>
    2512:	a3 cf       	rjmp	.-186    	; 0x245a <main+0x4a4>
					Score++;
					activeZombies--;
				}
			}
			
			explosion -> x = gx - 3;
    2514:	00 91 26 02 	lds	r16, 0x0226
    2518:	10 91 27 02 	lds	r17, 0x0227
    251c:	4d ef       	ldi	r20, 0xFD	; 253
    251e:	5f ef       	ldi	r21, 0xFF	; 255
    2520:	a4 0e       	add	r10, r20
    2522:	b5 1e       	adc	r11, r21
    2524:	b5 01       	movw	r22, r10
    2526:	88 27       	eor	r24, r24
    2528:	77 fd       	sbrc	r23, 7
    252a:	80 95       	com	r24
    252c:	98 2f       	mov	r25, r24
    252e:	75 d1       	rcall	.+746    	; 0x281a <__floatsisf>
    2530:	d8 01       	movw	r26, r16
    2532:	6d 93       	st	X+, r22
    2534:	7d 93       	st	X+, r23
    2536:	8d 93       	st	X+, r24
    2538:	9c 93       	st	X, r25
    253a:	13 97       	sbiw	r26, 0x03	; 3
			explosion -> y = gy - 3;
    253c:	ed ef       	ldi	r30, 0xFD	; 253
    253e:	ff ef       	ldi	r31, 0xFF	; 255
    2540:	8e 0e       	add	r8, r30
    2542:	9f 1e       	adc	r9, r31
    2544:	b4 01       	movw	r22, r8
    2546:	88 27       	eor	r24, r24
    2548:	77 fd       	sbrc	r23, 7
    254a:	80 95       	com	r24
    254c:	98 2f       	mov	r25, r24
    254e:	65 d1       	rcall	.+714    	; 0x281a <__floatsisf>
    2550:	d8 01       	movw	r26, r16
    2552:	14 96       	adiw	r26, 0x04	; 4
    2554:	6d 93       	st	X+, r22
    2556:	7d 93       	st	X+, r23
    2558:	8d 93       	st	X+, r24
    255a:	9c 93       	st	X, r25
    255c:	17 97       	sbiw	r26, 0x07	; 7
			explosion -> is_visible = 1;
    255e:	e1 e0       	ldi	r30, 0x01	; 1
    2560:	1a 96       	adiw	r26, 0x0a	; 10
    2562:	ec 93       	st	X, r30
			//draw_sprite(explosion);
			explosionCounter = 0;
    2564:	10 92 05 02 	sts	0x0205, r1
    2568:	10 92 04 02 	sts	0x0204, r1
			gotGrenade = 0;
    256c:	10 92 15 02 	sts	0x0215, r1
    2570:	10 92 14 02 	sts	0x0214, r1
			grenadeExploded = 0;
    2574:	10 92 0d 02 	sts	0x020D, r1
    2578:	10 92 0c 02 	sts	0x020C, r1
			setupGrenade();
    257c:	0e 94 d7 08 	call	0x11ae	; 0x11ae <setupGrenade>
			
		}
		
		draw_sprite(my_pointer);
    2580:	80 91 24 02 	lds	r24, 0x0224
    2584:	90 91 25 02 	lds	r25, 0x0225
    2588:	18 d5       	rcall	.+2608   	; 0x2fba <draw_sprite>
		draw_sprite(grenade);
    258a:	80 91 1c 02 	lds	r24, 0x021C
    258e:	90 91 1d 02 	lds	r25, 0x021D
    2592:	13 d5       	rcall	.+2598   	; 0x2fba <draw_sprite>
		draw_sprite(sword);
    2594:	80 91 16 02 	lds	r24, 0x0216
    2598:	90 91 17 02 	lds	r25, 0x0217
    259c:	0e d5       	rcall	.+2588   	; 0x2fba <draw_sprite>
		//draw_sprite(grenade);
		if (gotSword) {
    259e:	80 91 12 02 	lds	r24, 0x0212
    25a2:	90 91 13 02 	lds	r25, 0x0213
    25a6:	e0 91 1e 02 	lds	r30, 0x021E
    25aa:	f0 91 1f 02 	lds	r31, 0x021F
    25ae:	89 2b       	or	r24, r25
    25b0:	89 f0       	breq	.+34     	; 0x25d4 <main+0x61e>
		swordStatus -> x = 45;
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	44 e3       	ldi	r20, 0x34	; 52
    25b8:	52 e4       	ldi	r21, 0x42	; 66
    25ba:	20 83       	st	Z, r18
    25bc:	31 83       	std	Z+1, r19	; 0x01
    25be:	42 83       	std	Z+2, r20	; 0x02
    25c0:	53 83       	std	Z+3, r21	; 0x03
		swordStatus -> y = 0;
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	a0 e0       	ldi	r26, 0x00	; 0
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	84 83       	std	Z+4, r24	; 0x04
    25cc:	95 83       	std	Z+5, r25	; 0x05
    25ce:	a6 83       	std	Z+6, r26	; 0x06
    25d0:	b7 83       	std	Z+7, r27	; 0x07
    25d2:	0c c0       	rjmp	.+24     	; 0x25ec <main+0x636>
		draw_sprite(swordStatus);
		}
		else {
		swordStatus -> x = -10;
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e2       	ldi	r20, 0x20	; 32
    25da:	51 ec       	ldi	r21, 0xC1	; 193
    25dc:	20 83       	st	Z, r18
    25de:	31 83       	std	Z+1, r19	; 0x01
    25e0:	42 83       	std	Z+2, r20	; 0x02
    25e2:	53 83       	std	Z+3, r21	; 0x03
		swordStatus -> y = -10;
    25e4:	24 83       	std	Z+4, r18	; 0x04
    25e6:	35 83       	std	Z+5, r19	; 0x05
    25e8:	46 83       	std	Z+6, r20	; 0x06
    25ea:	57 83       	std	Z+7, r21	; 0x07
		draw_sprite(swordStatus);
    25ec:	cf 01       	movw	r24, r30
    25ee:	e5 d4       	rcall	.+2506   	; 0x2fba <draw_sprite>
		}
		if (gotGrenade) {
    25f0:	80 91 14 02 	lds	r24, 0x0214
    25f4:	90 91 15 02 	lds	r25, 0x0215
    25f8:	e0 91 28 02 	lds	r30, 0x0228
    25fc:	f0 91 29 02 	lds	r31, 0x0229
    2600:	89 2b       	or	r24, r25
    2602:	c1 f0       	breq	.+48     	; 0x2634 <main+0x67e>
		grenadeStatus -> x = 45;
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	a4 e3       	ldi	r26, 0x34	; 52
    260a:	b2 e4       	ldi	r27, 0x42	; 66
    260c:	80 83       	st	Z, r24
    260e:	91 83       	std	Z+1, r25	; 0x01
    2610:	a2 83       	std	Z+2, r26	; 0x02
    2612:	b3 83       	std	Z+3, r27	; 0x03
		grenadeStatus -> y = 5;
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 ea       	ldi	r20, 0xA0	; 160
    261a:	50 e4       	ldi	r21, 0x40	; 64
    261c:	24 83       	std	Z+4, r18	; 0x04
    261e:	35 83       	std	Z+5, r19	; 0x05
    2620:	46 83       	std	Z+6, r20	; 0x06
    2622:	57 83       	std	Z+7, r21	; 0x07
		grenadeStatus -> is_visible = 1;
    2624:	31 e0       	ldi	r19, 0x01	; 1
    2626:	32 87       	std	Z+10, r19	; 0x0a
		draw_sprite(grenadeStatus);
    2628:	80 91 28 02 	lds	r24, 0x0228
    262c:	90 91 29 02 	lds	r25, 0x0229
    2630:	c4 d4       	rcall	.+2440   	; 0x2fba <draw_sprite>
    2632:	01 c0       	rjmp	.+2      	; 0x2636 <main+0x680>
		}
		else {
		grenadeStatus -> is_visible = 0;		
    2634:	12 86       	std	Z+10, r1	; 0x0a
		}
		draw_sprite(explosion);
    2636:	80 91 26 02 	lds	r24, 0x0226
    263a:	90 91 27 02 	lds	r25, 0x0227
    263e:	bd d4       	rcall	.+2426   	; 0x2fba <draw_sprite>
    2640:	fc e2       	ldi	r31, 0x2C	; 44
    2642:	ef 2e       	mov	r14, r31
    2644:	f2 e0       	ldi	r31, 0x02	; 2
    2646:	ff 2e       	mov	r15, r31
    2648:	00 e0       	ldi	r16, 0x00	; 0
    264a:	10 e0       	ldi	r17, 0x00	; 0
    264c:	07 c0       	rjmp	.+14     	; 0x265c <main+0x6a6>
		for (int i = 0; i<numZombies; i++) {
		draw_sprite(zombie[i]);
    264e:	d7 01       	movw	r26, r14
    2650:	8d 91       	ld	r24, X+
    2652:	9d 91       	ld	r25, X+
    2654:	7d 01       	movw	r14, r26
    2656:	b1 d4       	rcall	.+2402   	; 0x2fba <draw_sprite>
		}
		else {
		grenadeStatus -> is_visible = 0;		
		}
		draw_sprite(explosion);
		for (int i = 0; i<numZombies; i++) {
    2658:	0f 5f       	subi	r16, 0xFF	; 255
    265a:	1f 4f       	sbci	r17, 0xFF	; 255
    265c:	80 91 a8 01 	lds	r24, 0x01A8
    2660:	90 91 a9 01 	lds	r25, 0x01A9
    2664:	08 17       	cp	r16, r24
    2666:	19 07       	cpc	r17, r25
    2668:	94 f3       	brlt	.-28     	; 0x264e <main+0x698>
		draw_sprite(zombie[i]);
		}
		drawPit();
    266a:	0e 94 fb 07 	call	0xff6	; 0xff6 <drawPit>
		drawScreen();
    266e:	0e 94 1f 08 	call	0x103e	; 0x103e <drawScreen>
		refresh();
    2672:	0e d4       	rcall	.+2076   	; 0x2e90 <refresh>
		collision();
    2674:	b1 da       	rcall	.-2718   	; 0x1bd8 <collision>
		if (activeZombies < 1) {
    2676:	80 91 a4 01 	lds	r24, 0x01A4
    267a:	90 91 a5 01 	lds	r25, 0x01A5
    267e:	18 16       	cp	r1, r24
    2680:	19 06       	cpc	r1, r25
    2682:	0c f0       	brlt	.+2      	; 0x2686 <main+0x6d0>
		winScreen();
    2684:	5a da       	rcall	.-2892   	; 0x1b3a <winScreen>
	
	// initialise vars
	int notRIGHT = 1;
	int notLEFT = 1;
	GAMEON = 1;
	while(GAMEON){
    2686:	80 91 06 02 	lds	r24, 0x0206
    268a:	90 91 07 02 	lds	r25, 0x0207
    268e:	89 2b       	or	r24, r25
    2690:	09 f0       	breq	.+2      	; 0x2694 <main+0x6de>
    2692:	fb cd       	rjmp	.-1034   	; 0x228a <main+0x2d4>
		}
	}
	
	
	return 0;
}
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	c5 57       	subi	r28, 0x75	; 117
    269a:	df 4f       	sbci	r29, 0xFF	; 255
    269c:	e8 81       	ld	r30, Y
    269e:	f9 81       	ldd	r31, Y+1	; 0x01
    26a0:	cb 58       	subi	r28, 0x8B	; 139
    26a2:	d0 40       	sbci	r29, 0x00	; 0
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	fe bf       	out	0x3e, r31	; 62
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	ed bf       	out	0x3d, r30	; 61
    26ae:	cd 56       	subi	r28, 0x6D	; 109
    26b0:	df 4f       	sbci	r29, 0xFF	; 255
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	1f 91       	pop	r17
    26c2:	0f 91       	pop	r16
    26c4:	ff 90       	pop	r15
    26c6:	ef 90       	pop	r14
    26c8:	df 90       	pop	r13
    26ca:	cf 90       	pop	r12
    26cc:	bf 90       	pop	r11
    26ce:	af 90       	pop	r10
    26d0:	9f 90       	pop	r9
    26d2:	8f 90       	pop	r8
    26d4:	7f 90       	pop	r7
    26d6:	6f 90       	pop	r6
    26d8:	5f 90       	pop	r5
    26da:	4f 90       	pop	r4
    26dc:	3f 90       	pop	r3
    26de:	2f 90       	pop	r2
    26e0:	08 95       	ret

000026e2 <__subsf3>:
    26e2:	50 58       	subi	r21, 0x80	; 128

000026e4 <__addsf3>:
    26e4:	bb 27       	eor	r27, r27
    26e6:	aa 27       	eor	r26, r26
    26e8:	0e d0       	rcall	.+28     	; 0x2706 <__addsf3x>
    26ea:	0d c1       	rjmp	.+538    	; 0x2906 <__fp_round>
    26ec:	fe d0       	rcall	.+508    	; 0x28ea <__fp_pscA>
    26ee:	30 f0       	brcs	.+12     	; 0x26fc <__addsf3+0x18>
    26f0:	03 d1       	rcall	.+518    	; 0x28f8 <__fp_pscB>
    26f2:	20 f0       	brcs	.+8      	; 0x26fc <__addsf3+0x18>
    26f4:	31 f4       	brne	.+12     	; 0x2702 <__addsf3+0x1e>
    26f6:	9f 3f       	cpi	r25, 0xFF	; 255
    26f8:	11 f4       	brne	.+4      	; 0x26fe <__addsf3+0x1a>
    26fa:	1e f4       	brtc	.+6      	; 0x2702 <__addsf3+0x1e>
    26fc:	f3 c0       	rjmp	.+486    	; 0x28e4 <__fp_nan>
    26fe:	0e f4       	brtc	.+2      	; 0x2702 <__addsf3+0x1e>
    2700:	e0 95       	com	r30
    2702:	e7 fb       	bst	r30, 7
    2704:	e9 c0       	rjmp	.+466    	; 0x28d8 <__fp_inf>

00002706 <__addsf3x>:
    2706:	e9 2f       	mov	r30, r25
    2708:	0f d1       	rcall	.+542    	; 0x2928 <__fp_split3>
    270a:	80 f3       	brcs	.-32     	; 0x26ec <__addsf3+0x8>
    270c:	ba 17       	cp	r27, r26
    270e:	62 07       	cpc	r22, r18
    2710:	73 07       	cpc	r23, r19
    2712:	84 07       	cpc	r24, r20
    2714:	95 07       	cpc	r25, r21
    2716:	18 f0       	brcs	.+6      	; 0x271e <__addsf3x+0x18>
    2718:	71 f4       	brne	.+28     	; 0x2736 <__addsf3x+0x30>
    271a:	9e f5       	brtc	.+102    	; 0x2782 <__addsf3x+0x7c>
    271c:	27 c1       	rjmp	.+590    	; 0x296c <__fp_zero>
    271e:	0e f4       	brtc	.+2      	; 0x2722 <__addsf3x+0x1c>
    2720:	e0 95       	com	r30
    2722:	0b 2e       	mov	r0, r27
    2724:	ba 2f       	mov	r27, r26
    2726:	a0 2d       	mov	r26, r0
    2728:	0b 01       	movw	r0, r22
    272a:	b9 01       	movw	r22, r18
    272c:	90 01       	movw	r18, r0
    272e:	0c 01       	movw	r0, r24
    2730:	ca 01       	movw	r24, r20
    2732:	a0 01       	movw	r20, r0
    2734:	11 24       	eor	r1, r1
    2736:	ff 27       	eor	r31, r31
    2738:	59 1b       	sub	r21, r25
    273a:	99 f0       	breq	.+38     	; 0x2762 <__addsf3x+0x5c>
    273c:	59 3f       	cpi	r21, 0xF9	; 249
    273e:	50 f4       	brcc	.+20     	; 0x2754 <__addsf3x+0x4e>
    2740:	50 3e       	cpi	r21, 0xE0	; 224
    2742:	68 f1       	brcs	.+90     	; 0x279e <__addsf3x+0x98>
    2744:	1a 16       	cp	r1, r26
    2746:	f0 40       	sbci	r31, 0x00	; 0
    2748:	a2 2f       	mov	r26, r18
    274a:	23 2f       	mov	r18, r19
    274c:	34 2f       	mov	r19, r20
    274e:	44 27       	eor	r20, r20
    2750:	58 5f       	subi	r21, 0xF8	; 248
    2752:	f3 cf       	rjmp	.-26     	; 0x273a <__addsf3x+0x34>
    2754:	46 95       	lsr	r20
    2756:	37 95       	ror	r19
    2758:	27 95       	ror	r18
    275a:	a7 95       	ror	r26
    275c:	f0 40       	sbci	r31, 0x00	; 0
    275e:	53 95       	inc	r21
    2760:	c9 f7       	brne	.-14     	; 0x2754 <__addsf3x+0x4e>
    2762:	7e f4       	brtc	.+30     	; 0x2782 <__addsf3x+0x7c>
    2764:	1f 16       	cp	r1, r31
    2766:	ba 0b       	sbc	r27, r26
    2768:	62 0b       	sbc	r22, r18
    276a:	73 0b       	sbc	r23, r19
    276c:	84 0b       	sbc	r24, r20
    276e:	ba f0       	brmi	.+46     	; 0x279e <__addsf3x+0x98>
    2770:	91 50       	subi	r25, 0x01	; 1
    2772:	a1 f0       	breq	.+40     	; 0x279c <__addsf3x+0x96>
    2774:	ff 0f       	add	r31, r31
    2776:	bb 1f       	adc	r27, r27
    2778:	66 1f       	adc	r22, r22
    277a:	77 1f       	adc	r23, r23
    277c:	88 1f       	adc	r24, r24
    277e:	c2 f7       	brpl	.-16     	; 0x2770 <__addsf3x+0x6a>
    2780:	0e c0       	rjmp	.+28     	; 0x279e <__addsf3x+0x98>
    2782:	ba 0f       	add	r27, r26
    2784:	62 1f       	adc	r22, r18
    2786:	73 1f       	adc	r23, r19
    2788:	84 1f       	adc	r24, r20
    278a:	48 f4       	brcc	.+18     	; 0x279e <__addsf3x+0x98>
    278c:	87 95       	ror	r24
    278e:	77 95       	ror	r23
    2790:	67 95       	ror	r22
    2792:	b7 95       	ror	r27
    2794:	f7 95       	ror	r31
    2796:	9e 3f       	cpi	r25, 0xFE	; 254
    2798:	08 f0       	brcs	.+2      	; 0x279c <__addsf3x+0x96>
    279a:	b3 cf       	rjmp	.-154    	; 0x2702 <__addsf3+0x1e>
    279c:	93 95       	inc	r25
    279e:	88 0f       	add	r24, r24
    27a0:	08 f0       	brcs	.+2      	; 0x27a4 <__addsf3x+0x9e>
    27a2:	99 27       	eor	r25, r25
    27a4:	ee 0f       	add	r30, r30
    27a6:	97 95       	ror	r25
    27a8:	87 95       	ror	r24
    27aa:	08 95       	ret

000027ac <__cmpsf2>:
    27ac:	71 d0       	rcall	.+226    	; 0x2890 <__fp_cmp>
    27ae:	08 f4       	brcc	.+2      	; 0x27b2 <__cmpsf2+0x6>
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	08 95       	ret

000027b4 <__fixsfsi>:
    27b4:	04 d0       	rcall	.+8      	; 0x27be <__fixunssfsi>
    27b6:	68 94       	set
    27b8:	b1 11       	cpse	r27, r1
    27ba:	d9 c0       	rjmp	.+434    	; 0x296e <__fp_szero>
    27bc:	08 95       	ret

000027be <__fixunssfsi>:
    27be:	bc d0       	rcall	.+376    	; 0x2938 <__fp_splitA>
    27c0:	88 f0       	brcs	.+34     	; 0x27e4 <__fixunssfsi+0x26>
    27c2:	9f 57       	subi	r25, 0x7F	; 127
    27c4:	90 f0       	brcs	.+36     	; 0x27ea <__fixunssfsi+0x2c>
    27c6:	b9 2f       	mov	r27, r25
    27c8:	99 27       	eor	r25, r25
    27ca:	b7 51       	subi	r27, 0x17	; 23
    27cc:	a0 f0       	brcs	.+40     	; 0x27f6 <__fixunssfsi+0x38>
    27ce:	d1 f0       	breq	.+52     	; 0x2804 <__fixunssfsi+0x46>
    27d0:	66 0f       	add	r22, r22
    27d2:	77 1f       	adc	r23, r23
    27d4:	88 1f       	adc	r24, r24
    27d6:	99 1f       	adc	r25, r25
    27d8:	1a f0       	brmi	.+6      	; 0x27e0 <__fixunssfsi+0x22>
    27da:	ba 95       	dec	r27
    27dc:	c9 f7       	brne	.-14     	; 0x27d0 <__fixunssfsi+0x12>
    27de:	12 c0       	rjmp	.+36     	; 0x2804 <__fixunssfsi+0x46>
    27e0:	b1 30       	cpi	r27, 0x01	; 1
    27e2:	81 f0       	breq	.+32     	; 0x2804 <__fixunssfsi+0x46>
    27e4:	c3 d0       	rcall	.+390    	; 0x296c <__fp_zero>
    27e6:	b1 e0       	ldi	r27, 0x01	; 1
    27e8:	08 95       	ret
    27ea:	c0 c0       	rjmp	.+384    	; 0x296c <__fp_zero>
    27ec:	67 2f       	mov	r22, r23
    27ee:	78 2f       	mov	r23, r24
    27f0:	88 27       	eor	r24, r24
    27f2:	b8 5f       	subi	r27, 0xF8	; 248
    27f4:	39 f0       	breq	.+14     	; 0x2804 <__fixunssfsi+0x46>
    27f6:	b9 3f       	cpi	r27, 0xF9	; 249
    27f8:	cc f3       	brlt	.-14     	; 0x27ec <__fixunssfsi+0x2e>
    27fa:	86 95       	lsr	r24
    27fc:	77 95       	ror	r23
    27fe:	67 95       	ror	r22
    2800:	b3 95       	inc	r27
    2802:	d9 f7       	brne	.-10     	; 0x27fa <__fixunssfsi+0x3c>
    2804:	3e f4       	brtc	.+14     	; 0x2814 <__fixunssfsi+0x56>
    2806:	90 95       	com	r25
    2808:	80 95       	com	r24
    280a:	70 95       	com	r23
    280c:	61 95       	neg	r22
    280e:	7f 4f       	sbci	r23, 0xFF	; 255
    2810:	8f 4f       	sbci	r24, 0xFF	; 255
    2812:	9f 4f       	sbci	r25, 0xFF	; 255
    2814:	08 95       	ret

00002816 <__floatunsisf>:
    2816:	e8 94       	clt
    2818:	09 c0       	rjmp	.+18     	; 0x282c <__floatsisf+0x12>

0000281a <__floatsisf>:
    281a:	97 fb       	bst	r25, 7
    281c:	3e f4       	brtc	.+14     	; 0x282c <__floatsisf+0x12>
    281e:	90 95       	com	r25
    2820:	80 95       	com	r24
    2822:	70 95       	com	r23
    2824:	61 95       	neg	r22
    2826:	7f 4f       	sbci	r23, 0xFF	; 255
    2828:	8f 4f       	sbci	r24, 0xFF	; 255
    282a:	9f 4f       	sbci	r25, 0xFF	; 255
    282c:	99 23       	and	r25, r25
    282e:	a9 f0       	breq	.+42     	; 0x285a <__floatsisf+0x40>
    2830:	f9 2f       	mov	r31, r25
    2832:	96 e9       	ldi	r25, 0x96	; 150
    2834:	bb 27       	eor	r27, r27
    2836:	93 95       	inc	r25
    2838:	f6 95       	lsr	r31
    283a:	87 95       	ror	r24
    283c:	77 95       	ror	r23
    283e:	67 95       	ror	r22
    2840:	b7 95       	ror	r27
    2842:	f1 11       	cpse	r31, r1
    2844:	f8 cf       	rjmp	.-16     	; 0x2836 <__floatsisf+0x1c>
    2846:	fa f4       	brpl	.+62     	; 0x2886 <__floatsisf+0x6c>
    2848:	bb 0f       	add	r27, r27
    284a:	11 f4       	brne	.+4      	; 0x2850 <__floatsisf+0x36>
    284c:	60 ff       	sbrs	r22, 0
    284e:	1b c0       	rjmp	.+54     	; 0x2886 <__floatsisf+0x6c>
    2850:	6f 5f       	subi	r22, 0xFF	; 255
    2852:	7f 4f       	sbci	r23, 0xFF	; 255
    2854:	8f 4f       	sbci	r24, 0xFF	; 255
    2856:	9f 4f       	sbci	r25, 0xFF	; 255
    2858:	16 c0       	rjmp	.+44     	; 0x2886 <__floatsisf+0x6c>
    285a:	88 23       	and	r24, r24
    285c:	11 f0       	breq	.+4      	; 0x2862 <__floatsisf+0x48>
    285e:	96 e9       	ldi	r25, 0x96	; 150
    2860:	11 c0       	rjmp	.+34     	; 0x2884 <__floatsisf+0x6a>
    2862:	77 23       	and	r23, r23
    2864:	21 f0       	breq	.+8      	; 0x286e <__floatsisf+0x54>
    2866:	9e e8       	ldi	r25, 0x8E	; 142
    2868:	87 2f       	mov	r24, r23
    286a:	76 2f       	mov	r23, r22
    286c:	05 c0       	rjmp	.+10     	; 0x2878 <__floatsisf+0x5e>
    286e:	66 23       	and	r22, r22
    2870:	71 f0       	breq	.+28     	; 0x288e <__floatsisf+0x74>
    2872:	96 e8       	ldi	r25, 0x86	; 134
    2874:	86 2f       	mov	r24, r22
    2876:	70 e0       	ldi	r23, 0x00	; 0
    2878:	60 e0       	ldi	r22, 0x00	; 0
    287a:	2a f0       	brmi	.+10     	; 0x2886 <__floatsisf+0x6c>
    287c:	9a 95       	dec	r25
    287e:	66 0f       	add	r22, r22
    2880:	77 1f       	adc	r23, r23
    2882:	88 1f       	adc	r24, r24
    2884:	da f7       	brpl	.-10     	; 0x287c <__floatsisf+0x62>
    2886:	88 0f       	add	r24, r24
    2888:	96 95       	lsr	r25
    288a:	87 95       	ror	r24
    288c:	97 f9       	bld	r25, 7
    288e:	08 95       	ret

00002890 <__fp_cmp>:
    2890:	99 0f       	add	r25, r25
    2892:	00 08       	sbc	r0, r0
    2894:	55 0f       	add	r21, r21
    2896:	aa 0b       	sbc	r26, r26
    2898:	e0 e8       	ldi	r30, 0x80	; 128
    289a:	fe ef       	ldi	r31, 0xFE	; 254
    289c:	16 16       	cp	r1, r22
    289e:	17 06       	cpc	r1, r23
    28a0:	e8 07       	cpc	r30, r24
    28a2:	f9 07       	cpc	r31, r25
    28a4:	c0 f0       	brcs	.+48     	; 0x28d6 <__fp_cmp+0x46>
    28a6:	12 16       	cp	r1, r18
    28a8:	13 06       	cpc	r1, r19
    28aa:	e4 07       	cpc	r30, r20
    28ac:	f5 07       	cpc	r31, r21
    28ae:	98 f0       	brcs	.+38     	; 0x28d6 <__fp_cmp+0x46>
    28b0:	62 1b       	sub	r22, r18
    28b2:	73 0b       	sbc	r23, r19
    28b4:	84 0b       	sbc	r24, r20
    28b6:	95 0b       	sbc	r25, r21
    28b8:	39 f4       	brne	.+14     	; 0x28c8 <__fp_cmp+0x38>
    28ba:	0a 26       	eor	r0, r26
    28bc:	61 f0       	breq	.+24     	; 0x28d6 <__fp_cmp+0x46>
    28be:	23 2b       	or	r18, r19
    28c0:	24 2b       	or	r18, r20
    28c2:	25 2b       	or	r18, r21
    28c4:	21 f4       	brne	.+8      	; 0x28ce <__fp_cmp+0x3e>
    28c6:	08 95       	ret
    28c8:	0a 26       	eor	r0, r26
    28ca:	09 f4       	brne	.+2      	; 0x28ce <__fp_cmp+0x3e>
    28cc:	a1 40       	sbci	r26, 0x01	; 1
    28ce:	a6 95       	lsr	r26
    28d0:	8f ef       	ldi	r24, 0xFF	; 255
    28d2:	81 1d       	adc	r24, r1
    28d4:	81 1d       	adc	r24, r1
    28d6:	08 95       	ret

000028d8 <__fp_inf>:
    28d8:	97 f9       	bld	r25, 7
    28da:	9f 67       	ori	r25, 0x7F	; 127
    28dc:	80 e8       	ldi	r24, 0x80	; 128
    28de:	70 e0       	ldi	r23, 0x00	; 0
    28e0:	60 e0       	ldi	r22, 0x00	; 0
    28e2:	08 95       	ret

000028e4 <__fp_nan>:
    28e4:	9f ef       	ldi	r25, 0xFF	; 255
    28e6:	80 ec       	ldi	r24, 0xC0	; 192
    28e8:	08 95       	ret

000028ea <__fp_pscA>:
    28ea:	00 24       	eor	r0, r0
    28ec:	0a 94       	dec	r0
    28ee:	16 16       	cp	r1, r22
    28f0:	17 06       	cpc	r1, r23
    28f2:	18 06       	cpc	r1, r24
    28f4:	09 06       	cpc	r0, r25
    28f6:	08 95       	ret

000028f8 <__fp_pscB>:
    28f8:	00 24       	eor	r0, r0
    28fa:	0a 94       	dec	r0
    28fc:	12 16       	cp	r1, r18
    28fe:	13 06       	cpc	r1, r19
    2900:	14 06       	cpc	r1, r20
    2902:	05 06       	cpc	r0, r21
    2904:	08 95       	ret

00002906 <__fp_round>:
    2906:	09 2e       	mov	r0, r25
    2908:	03 94       	inc	r0
    290a:	00 0c       	add	r0, r0
    290c:	11 f4       	brne	.+4      	; 0x2912 <__fp_round+0xc>
    290e:	88 23       	and	r24, r24
    2910:	52 f0       	brmi	.+20     	; 0x2926 <__fp_round+0x20>
    2912:	bb 0f       	add	r27, r27
    2914:	40 f4       	brcc	.+16     	; 0x2926 <__fp_round+0x20>
    2916:	bf 2b       	or	r27, r31
    2918:	11 f4       	brne	.+4      	; 0x291e <__fp_round+0x18>
    291a:	60 ff       	sbrs	r22, 0
    291c:	04 c0       	rjmp	.+8      	; 0x2926 <__fp_round+0x20>
    291e:	6f 5f       	subi	r22, 0xFF	; 255
    2920:	7f 4f       	sbci	r23, 0xFF	; 255
    2922:	8f 4f       	sbci	r24, 0xFF	; 255
    2924:	9f 4f       	sbci	r25, 0xFF	; 255
    2926:	08 95       	ret

00002928 <__fp_split3>:
    2928:	57 fd       	sbrc	r21, 7
    292a:	90 58       	subi	r25, 0x80	; 128
    292c:	44 0f       	add	r20, r20
    292e:	55 1f       	adc	r21, r21
    2930:	59 f0       	breq	.+22     	; 0x2948 <__fp_splitA+0x10>
    2932:	5f 3f       	cpi	r21, 0xFF	; 255
    2934:	71 f0       	breq	.+28     	; 0x2952 <__fp_splitA+0x1a>
    2936:	47 95       	ror	r20

00002938 <__fp_splitA>:
    2938:	88 0f       	add	r24, r24
    293a:	97 fb       	bst	r25, 7
    293c:	99 1f       	adc	r25, r25
    293e:	61 f0       	breq	.+24     	; 0x2958 <__fp_splitA+0x20>
    2940:	9f 3f       	cpi	r25, 0xFF	; 255
    2942:	79 f0       	breq	.+30     	; 0x2962 <__fp_splitA+0x2a>
    2944:	87 95       	ror	r24
    2946:	08 95       	ret
    2948:	12 16       	cp	r1, r18
    294a:	13 06       	cpc	r1, r19
    294c:	14 06       	cpc	r1, r20
    294e:	55 1f       	adc	r21, r21
    2950:	f2 cf       	rjmp	.-28     	; 0x2936 <__fp_split3+0xe>
    2952:	46 95       	lsr	r20
    2954:	f1 df       	rcall	.-30     	; 0x2938 <__fp_splitA>
    2956:	08 c0       	rjmp	.+16     	; 0x2968 <__fp_splitA+0x30>
    2958:	16 16       	cp	r1, r22
    295a:	17 06       	cpc	r1, r23
    295c:	18 06       	cpc	r1, r24
    295e:	99 1f       	adc	r25, r25
    2960:	f1 cf       	rjmp	.-30     	; 0x2944 <__fp_splitA+0xc>
    2962:	86 95       	lsr	r24
    2964:	71 05       	cpc	r23, r1
    2966:	61 05       	cpc	r22, r1
    2968:	08 94       	sec
    296a:	08 95       	ret

0000296c <__fp_zero>:
    296c:	e8 94       	clt

0000296e <__fp_szero>:
    296e:	bb 27       	eor	r27, r27
    2970:	66 27       	eor	r22, r22
    2972:	77 27       	eor	r23, r23
    2974:	cb 01       	movw	r24, r22
    2976:	97 f9       	bld	r25, 7
    2978:	08 95       	ret

0000297a <__gesf2>:
    297a:	8a df       	rcall	.-236    	; 0x2890 <__fp_cmp>
    297c:	08 f4       	brcc	.+2      	; 0x2980 <__gesf2+0x6>
    297e:	8f ef       	ldi	r24, 0xFF	; 255
    2980:	08 95       	ret

00002982 <clear>:
    2982:	ee e3       	ldi	r30, 0x3E	; 62
    2984:	f2 e0       	ldi	r31, 0x02	; 2
    2986:	11 92       	st	Z+, r1
    2988:	84 e0       	ldi	r24, 0x04	; 4
    298a:	e6 33       	cpi	r30, 0x36	; 54
    298c:	f8 07       	cpc	r31, r24
    298e:	d9 f7       	brne	.-10     	; 0x2986 <clear+0x4>
    2990:	08 95       	ret

00002992 <set_pixel>:
    2992:	84 35       	cpi	r24, 0x54	; 84
    2994:	80 f5       	brcc	.+96     	; 0x29f6 <set_pixel+0x64>
    2996:	60 33       	cpi	r22, 0x30	; 48
    2998:	70 f5       	brcc	.+92     	; 0x29f6 <set_pixel+0x64>
    299a:	26 2f       	mov	r18, r22
    299c:	26 95       	lsr	r18
    299e:	26 95       	lsr	r18
    29a0:	26 95       	lsr	r18
    29a2:	67 70       	andi	r22, 0x07	; 7
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	44 23       	and	r20, r20
    29a8:	99 f0       	breq	.+38     	; 0x29d0 <set_pixel+0x3e>
    29aa:	e4 e5       	ldi	r30, 0x54	; 84
    29ac:	2e 9f       	mul	r18, r30
    29ae:	f0 01       	movw	r30, r0
    29b0:	11 24       	eor	r1, r1
    29b2:	e8 0f       	add	r30, r24
    29b4:	f9 1f       	adc	r31, r25
    29b6:	e2 5c       	subi	r30, 0xC2	; 194
    29b8:	fd 4f       	sbci	r31, 0xFD	; 253
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	02 c0       	rjmp	.+4      	; 0x29c4 <set_pixel+0x32>
    29c0:	88 0f       	add	r24, r24
    29c2:	99 1f       	adc	r25, r25
    29c4:	6a 95       	dec	r22
    29c6:	e2 f7       	brpl	.-8      	; 0x29c0 <set_pixel+0x2e>
    29c8:	20 81       	ld	r18, Z
    29ca:	28 2b       	or	r18, r24
    29cc:	20 83       	st	Z, r18
    29ce:	08 95       	ret
    29d0:	e4 e5       	ldi	r30, 0x54	; 84
    29d2:	2e 9f       	mul	r18, r30
    29d4:	f0 01       	movw	r30, r0
    29d6:	11 24       	eor	r1, r1
    29d8:	e8 0f       	add	r30, r24
    29da:	f9 1f       	adc	r31, r25
    29dc:	e2 5c       	subi	r30, 0xC2	; 194
    29de:	fd 4f       	sbci	r31, 0xFD	; 253
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	02 c0       	rjmp	.+4      	; 0x29ea <set_pixel+0x58>
    29e6:	88 0f       	add	r24, r24
    29e8:	99 1f       	adc	r25, r25
    29ea:	6a 95       	dec	r22
    29ec:	e2 f7       	brpl	.-8      	; 0x29e6 <set_pixel+0x54>
    29ee:	80 95       	com	r24
    29f0:	20 81       	ld	r18, Z
    29f2:	28 23       	and	r18, r24
    29f4:	20 83       	st	Z, r18
    29f6:	08 95       	ret

000029f8 <draw_line>:
    29f8:	2f 92       	push	r2
    29fa:	3f 92       	push	r3
    29fc:	4f 92       	push	r4
    29fe:	5f 92       	push	r5
    2a00:	6f 92       	push	r6
    2a02:	7f 92       	push	r7
    2a04:	8f 92       	push	r8
    2a06:	9f 92       	push	r9
    2a08:	af 92       	push	r10
    2a0a:	bf 92       	push	r11
    2a0c:	cf 92       	push	r12
    2a0e:	df 92       	push	r13
    2a10:	ef 92       	push	r14
    2a12:	ff 92       	push	r15
    2a14:	0f 93       	push	r16
    2a16:	1f 93       	push	r17
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	66 97       	sbiw	r28, 0x16	; 22
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	c8 2e       	mov	r12, r24
    2a2e:	d6 2e       	mov	r13, r22
    2a30:	49 87       	std	Y+9, r20	; 0x09
    2a32:	2a 87       	std	Y+10, r18	; 0x0a
    2a34:	84 17       	cp	r24, r20
    2a36:	59 f4       	brne	.+22     	; 0x2a4e <draw_line+0x56>
    2a38:	16 2f       	mov	r17, r22
    2a3a:	05 c0       	rjmp	.+10     	; 0x2a46 <draw_line+0x4e>
    2a3c:	8c 2d       	mov	r24, r12
    2a3e:	61 2f       	mov	r22, r17
    2a40:	41 e0       	ldi	r20, 0x01	; 1
    2a42:	a7 df       	rcall	.-178    	; 0x2992 <set_pixel>
    2a44:	1f 5f       	subi	r17, 0xFF	; 255
    2a46:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a48:	21 17       	cp	r18, r17
    2a4a:	c0 f7       	brcc	.-16     	; 0x2a3c <draw_line+0x44>
    2a4c:	a3 c1       	rjmp	.+838    	; 0x2d94 <draw_line+0x39c>
    2a4e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a50:	63 17       	cp	r22, r19
    2a52:	59 f4       	brne	.+22     	; 0x2a6a <draw_line+0x72>
    2a54:	18 2f       	mov	r17, r24
    2a56:	05 c0       	rjmp	.+10     	; 0x2a62 <draw_line+0x6a>
    2a58:	81 2f       	mov	r24, r17
    2a5a:	6d 2d       	mov	r22, r13
    2a5c:	41 e0       	ldi	r20, 0x01	; 1
    2a5e:	99 df       	rcall	.-206    	; 0x2992 <set_pixel>
    2a60:	1f 5f       	subi	r17, 0xFF	; 255
    2a62:	49 85       	ldd	r20, Y+9	; 0x09
    2a64:	41 17       	cp	r20, r17
    2a66:	c0 f7       	brcc	.-16     	; 0x2a58 <draw_line+0x60>
    2a68:	95 c1       	rjmp	.+810    	; 0x2d94 <draw_line+0x39c>
    2a6a:	5a 85       	ldd	r21, Y+10	; 0x0a
    2a6c:	65 2f       	mov	r22, r21
    2a6e:	70 e0       	ldi	r23, 0x00	; 0
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	d0 de       	rcall	.-608    	; 0x2816 <__floatunsisf>
    2a76:	7b 01       	movw	r14, r22
    2a78:	8c 01       	movw	r16, r24
    2a7a:	8d 2d       	mov	r24, r13
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	9c 87       	std	Y+12, r25	; 0x0c
    2a80:	8b 87       	std	Y+11, r24	; 0x0b
    2a82:	fc 01       	movw	r30, r24
    2a84:	bf 01       	movw	r22, r30
    2a86:	88 27       	eor	r24, r24
    2a88:	77 fd       	sbrc	r23, 7
    2a8a:	80 95       	com	r24
    2a8c:	98 2f       	mov	r25, r24
    2a8e:	c5 de       	rcall	.-630    	; 0x281a <__floatsisf>
    2a90:	9b 01       	movw	r18, r22
    2a92:	ac 01       	movw	r20, r24
    2a94:	c8 01       	movw	r24, r16
    2a96:	b7 01       	movw	r22, r14
    2a98:	24 de       	rcall	.-952    	; 0x26e2 <__subsf3>
    2a9a:	1b 01       	movw	r2, r22
    2a9c:	2c 01       	movw	r4, r24
    2a9e:	f9 85       	ldd	r31, Y+9	; 0x09
    2aa0:	6f 2f       	mov	r22, r31
    2aa2:	70 e0       	ldi	r23, 0x00	; 0
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	b6 de       	rcall	.-660    	; 0x2816 <__floatunsisf>
    2aaa:	7b 01       	movw	r14, r22
    2aac:	8c 01       	movw	r16, r24
    2aae:	ac 2c       	mov	r10, r12
    2ab0:	bb 24       	eor	r11, r11
    2ab2:	b5 01       	movw	r22, r10
    2ab4:	88 27       	eor	r24, r24
    2ab6:	77 fd       	sbrc	r23, 7
    2ab8:	80 95       	com	r24
    2aba:	98 2f       	mov	r25, r24
    2abc:	ae de       	rcall	.-676    	; 0x281a <__floatsisf>
    2abe:	9b 01       	movw	r18, r22
    2ac0:	ac 01       	movw	r20, r24
    2ac2:	c8 01       	movw	r24, r16
    2ac4:	b7 01       	movw	r22, r14
    2ac6:	0d de       	rcall	.-998    	; 0x26e2 <__subsf3>
    2ac8:	3b 01       	movw	r6, r22
    2aca:	4c 01       	movw	r8, r24
    2acc:	c2 01       	movw	r24, r4
    2ace:	b1 01       	movw	r22, r2
    2ad0:	a4 01       	movw	r20, r8
    2ad2:	93 01       	movw	r18, r6
    2ad4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__divsf3>
    2ad8:	7b 01       	movw	r14, r22
    2ada:	8c 01       	movw	r16, r24
    2adc:	29 85       	ldd	r18, Y+9	; 0x09
    2ade:	c2 16       	cp	r12, r18
    2ae0:	08 f0       	brcs	.+2      	; 0x2ae4 <draw_line+0xec>
    2ae2:	38 c0       	rjmp	.+112    	; 0x2b54 <draw_line+0x15c>
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e8       	ldi	r20, 0x80	; 128
    2aea:	5f e3       	ldi	r21, 0x3F	; 63
    2aec:	46 df       	rcall	.-372    	; 0x297a <__gesf2>
    2aee:	18 16       	cp	r1, r24
    2af0:	24 f4       	brge	.+8      	; 0x2afa <draw_line+0x102>
    2af2:	71 e0       	ldi	r23, 0x01	; 1
    2af4:	c7 2e       	mov	r12, r23
    2af6:	d1 2c       	mov	r13, r1
    2af8:	37 c1       	rjmp	.+622    	; 0x2d68 <draw_line+0x370>
    2afa:	c8 01       	movw	r24, r16
    2afc:	b7 01       	movw	r22, r14
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e8       	ldi	r20, 0x80	; 128
    2b04:	5f e3       	ldi	r21, 0x3F	; 63
    2b06:	52 de       	rcall	.-860    	; 0x27ac <__cmpsf2>
    2b08:	18 16       	cp	r1, r24
    2b0a:	64 f0       	brlt	.+24     	; 0x2b24 <draw_line+0x12c>
    2b0c:	c8 01       	movw	r24, r16
    2b0e:	b7 01       	movw	r22, r14
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e0       	ldi	r20, 0x00	; 0
    2b16:	50 e0       	ldi	r21, 0x00	; 0
    2b18:	30 df       	rcall	.-416    	; 0x297a <__gesf2>
    2b1a:	18 16       	cp	r1, r24
    2b1c:	1c f4       	brge	.+6      	; 0x2b24 <draw_line+0x12c>
    2b1e:	cc 24       	eor	r12, r12
    2b20:	dd 24       	eor	r13, r13
    2b22:	50 c0       	rjmp	.+160    	; 0x2bc4 <draw_line+0x1cc>
    2b24:	c8 01       	movw	r24, r16
    2b26:	b7 01       	movw	r22, r14
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	3d de       	rcall	.-902    	; 0x27ac <__cmpsf2>
    2b32:	18 16       	cp	r1, r24
    2b34:	0c f4       	brge	.+2      	; 0x2b38 <draw_line+0x140>
    2b36:	11 c1       	rjmp	.+546    	; 0x2d5a <draw_line+0x362>
    2b38:	c8 01       	movw	r24, r16
    2b3a:	b7 01       	movw	r22, r14
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 e8       	ldi	r20, 0x80	; 128
    2b42:	5f eb       	ldi	r21, 0xBF	; 191
    2b44:	1a df       	rcall	.-460    	; 0x297a <__gesf2>
    2b46:	18 16       	cp	r1, r24
    2b48:	0c f0       	brlt	.+2      	; 0x2b4c <draw_line+0x154>
    2b4a:	07 c1       	rjmp	.+526    	; 0x2d5a <draw_line+0x362>
    2b4c:	67 e0       	ldi	r22, 0x07	; 7
    2b4e:	c6 2e       	mov	r12, r22
    2b50:	d1 2c       	mov	r13, r1
    2b52:	38 c0       	rjmp	.+112    	; 0x2bc4 <draw_line+0x1cc>
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e8       	ldi	r20, 0x80	; 128
    2b5a:	5f e3       	ldi	r21, 0x3F	; 63
    2b5c:	0e df       	rcall	.-484    	; 0x297a <__gesf2>
    2b5e:	18 16       	cp	r1, r24
    2b60:	24 f4       	brge	.+8      	; 0x2b6a <draw_line+0x172>
    2b62:	55 e0       	ldi	r21, 0x05	; 5
    2b64:	c5 2e       	mov	r12, r21
    2b66:	d1 2c       	mov	r13, r1
    2b68:	ff c0       	rjmp	.+510    	; 0x2d68 <draw_line+0x370>
    2b6a:	c8 01       	movw	r24, r16
    2b6c:	b7 01       	movw	r22, r14
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e8       	ldi	r20, 0x80	; 128
    2b74:	5f e3       	ldi	r21, 0x3F	; 63
    2b76:	1a de       	rcall	.-972    	; 0x27ac <__cmpsf2>
    2b78:	18 16       	cp	r1, r24
    2b7a:	6c f0       	brlt	.+26     	; 0x2b96 <draw_line+0x19e>
    2b7c:	c8 01       	movw	r24, r16
    2b7e:	b7 01       	movw	r22, r14
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e0       	ldi	r20, 0x00	; 0
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	f8 de       	rcall	.-528    	; 0x297a <__gesf2>
    2b8a:	18 16       	cp	r1, r24
    2b8c:	24 f4       	brge	.+8      	; 0x2b96 <draw_line+0x19e>
    2b8e:	44 e0       	ldi	r20, 0x04	; 4
    2b90:	c4 2e       	mov	r12, r20
    2b92:	d1 2c       	mov	r13, r1
    2b94:	17 c0       	rjmp	.+46     	; 0x2bc4 <draw_line+0x1cc>
    2b96:	c8 01       	movw	r24, r16
    2b98:	b7 01       	movw	r22, r14
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	40 e0       	ldi	r20, 0x00	; 0
    2ba0:	50 e0       	ldi	r21, 0x00	; 0
    2ba2:	04 de       	rcall	.-1016   	; 0x27ac <__cmpsf2>
    2ba4:	18 16       	cp	r1, r24
    2ba6:	0c f4       	brge	.+2      	; 0x2baa <draw_line+0x1b2>
    2ba8:	dc c0       	rjmp	.+440    	; 0x2d62 <draw_line+0x36a>
    2baa:	c8 01       	movw	r24, r16
    2bac:	b7 01       	movw	r22, r14
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e8       	ldi	r20, 0x80	; 128
    2bb4:	5f eb       	ldi	r21, 0xBF	; 191
    2bb6:	e1 de       	rcall	.-574    	; 0x297a <__gesf2>
    2bb8:	18 16       	cp	r1, r24
    2bba:	0c f0       	brlt	.+2      	; 0x2bbe <draw_line+0x1c6>
    2bbc:	d2 c0       	rjmp	.+420    	; 0x2d62 <draw_line+0x36a>
    2bbe:	33 e0       	ldi	r19, 0x03	; 3
    2bc0:	c3 2e       	mov	r12, r19
    2bc2:	d1 2c       	mov	r13, r1
    2bc4:	4b 85       	ldd	r20, Y+11	; 0x0b
    2bc6:	5c 85       	ldd	r21, Y+12	; 0x0c
    2bc8:	5a 83       	std	Y+2, r21	; 0x02
    2bca:	49 83       	std	Y+1, r20	; 0x01
    2bcc:	be 82       	std	Y+6, r11	; 0x06
    2bce:	ad 82       	std	Y+5, r10	; 0x05
    2bd0:	99 85       	ldd	r25, Y+9	; 0x09
    2bd2:	89 2f       	mov	r24, r25
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	9c 83       	std	Y+4, r25	; 0x04
    2bd8:	8b 83       	std	Y+3, r24	; 0x03
    2bda:	17 01       	movw	r2, r14
    2bdc:	28 01       	movw	r4, r16
    2bde:	e1 e0       	ldi	r30, 0x01	; 1
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	f8 87       	std	Y+8, r31	; 0x08
    2be4:	ef 83       	std	Y+7, r30	; 0x07
    2be6:	f7 e0       	ldi	r31, 0x07	; 7
    2be8:	cf 16       	cp	r12, r31
    2bea:	d1 04       	cpc	r13, r1
    2bec:	28 f4       	brcc	.+10     	; 0x2bf8 <draw_line+0x200>
    2bee:	23 e0       	ldi	r18, 0x03	; 3
    2bf0:	c2 16       	cp	r12, r18
    2bf2:	d1 04       	cpc	r13, r1
    2bf4:	40 f4       	brcc	.+16     	; 0x2c06 <draw_line+0x20e>
    2bf6:	04 c0       	rjmp	.+8      	; 0x2c00 <draw_line+0x208>
    2bf8:	37 e0       	ldi	r19, 0x07	; 7
    2bfa:	c3 16       	cp	r12, r19
    2bfc:	d1 04       	cpc	r13, r1
    2bfe:	29 f4       	brne	.+10     	; 0x2c0a <draw_line+0x212>
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <draw_line+0x212>
    2c06:	8f ef       	ldi	r24, 0xFF	; 255
    2c08:	9f ef       	ldi	r25, 0xFF	; 255
    2c0a:	ad 80       	ldd	r10, Y+5	; 0x05
    2c0c:	be 80       	ldd	r11, Y+6	; 0x06
    2c0e:	0f 2e       	mov	r0, r31
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	6f 2e       	mov	r6, r31
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	7f 2e       	mov	r7, r31
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	8f 2e       	mov	r8, r31
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	9f 2e       	mov	r9, r31
    2c20:	f0 2d       	mov	r31, r0
    2c22:	a2 01       	movw	r20, r4
    2c24:	91 01       	movw	r18, r2
    2c26:	50 58       	subi	r21, 0x80	; 128
    2c28:	2d 87       	std	Y+13, r18	; 0x0d
    2c2a:	3e 87       	std	Y+14, r19	; 0x0e
    2c2c:	4f 87       	std	Y+15, r20	; 0x0f
    2c2e:	58 8b       	std	Y+16, r21	; 0x10
    2c30:	9c 01       	movw	r18, r24
    2c32:	44 27       	eor	r20, r20
    2c34:	37 fd       	sbrc	r19, 7
    2c36:	40 95       	com	r20
    2c38:	54 2f       	mov	r21, r20
    2c3a:	29 8b       	std	Y+17, r18	; 0x11
    2c3c:	3a 8b       	std	Y+18, r19	; 0x12
    2c3e:	4b 8b       	std	Y+19, r20	; 0x13
    2c40:	5c 8b       	std	Y+20, r21	; 0x14
    2c42:	7a c0       	rjmp	.+244    	; 0x2d38 <draw_line+0x340>
    2c44:	4f 81       	ldd	r20, Y+7	; 0x07
    2c46:	58 85       	ldd	r21, Y+8	; 0x08
    2c48:	45 2b       	or	r20, r21
    2c4a:	19 f0       	breq	.+6      	; 0x2c52 <draw_line+0x25a>
    2c4c:	8a 2d       	mov	r24, r10
    2c4e:	69 81       	ldd	r22, Y+1	; 0x01
    2c50:	02 c0       	rjmp	.+4      	; 0x2c56 <draw_line+0x25e>
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	6a 2d       	mov	r22, r10
    2c56:	41 e0       	ldi	r20, 0x01	; 1
    2c58:	9c de       	rcall	.-712    	; 0x2992 <set_pixel>
    2c5a:	c2 01       	movw	r24, r4
    2c5c:	b1 01       	movw	r22, r2
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e0       	ldi	r20, 0x00	; 0
    2c64:	50 e0       	ldi	r21, 0x00	; 0
    2c66:	89 de       	rcall	.-750    	; 0x297a <__gesf2>
    2c68:	88 23       	and	r24, r24
    2c6a:	1c f0       	brlt	.+6      	; 0x2c72 <draw_line+0x27a>
    2c6c:	a2 01       	movw	r20, r4
    2c6e:	91 01       	movw	r18, r2
    2c70:	04 c0       	rjmp	.+8      	; 0x2c7a <draw_line+0x282>
    2c72:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c74:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c76:	4f 85       	ldd	r20, Y+15	; 0x0f
    2c78:	58 89       	ldd	r21, Y+16	; 0x10
    2c7a:	c4 01       	movw	r24, r8
    2c7c:	b3 01       	movw	r22, r6
    2c7e:	32 dd       	rcall	.-1436   	; 0x26e4 <__addsf3>
    2c80:	3b 01       	movw	r6, r22
    2c82:	4c 01       	movw	r8, r24
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e0       	ldi	r20, 0x00	; 0
    2c8a:	5f e3       	ldi	r21, 0x3F	; 63
    2c8c:	76 de       	rcall	.-788    	; 0x297a <__gesf2>
    2c8e:	18 16       	cp	r1, r24
    2c90:	0c f0       	brlt	.+2      	; 0x2c94 <draw_line+0x29c>
    2c92:	44 c0       	rjmp	.+136    	; 0x2d1c <draw_line+0x324>
    2c94:	69 89       	ldd	r22, Y+17	; 0x11
    2c96:	7a 89       	ldd	r23, Y+18	; 0x12
    2c98:	8b 89       	ldd	r24, Y+19	; 0x13
    2c9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c9c:	be dd       	rcall	.-1156   	; 0x281a <__floatsisf>
    2c9e:	9b 01       	movw	r18, r22
    2ca0:	ac 01       	movw	r20, r24
    2ca2:	c2 01       	movw	r24, r4
    2ca4:	b1 01       	movw	r22, r2
    2ca6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__mulsf3>
    2caa:	7b 01       	movw	r14, r22
    2cac:	8c 01       	movw	r16, r24
    2cae:	1e 8a       	std	Y+22, r1	; 0x16
    2cb0:	1d 8a       	std	Y+21, r1	; 0x15
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	40 e0       	ldi	r20, 0x00	; 0
    2cb8:	50 e0       	ldi	r21, 0x00	; 0
    2cba:	5f de       	rcall	.-834    	; 0x297a <__gesf2>
    2cbc:	18 16       	cp	r1, r24
    2cbe:	24 f4       	brge	.+8      	; 0x2cc8 <draw_line+0x2d0>
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	9e 8b       	std	Y+22, r25	; 0x16
    2cc6:	8d 8b       	std	Y+21, r24	; 0x15
    2cc8:	cc 24       	eor	r12, r12
    2cca:	dd 24       	eor	r13, r13
    2ccc:	c8 01       	movw	r24, r16
    2cce:	b7 01       	movw	r22, r14
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e0       	ldi	r20, 0x00	; 0
    2cd6:	50 e0       	ldi	r21, 0x00	; 0
    2cd8:	69 dd       	rcall	.-1326   	; 0x27ac <__cmpsf2>
    2cda:	88 23       	and	r24, r24
    2cdc:	1c f4       	brge	.+6      	; 0x2ce4 <draw_line+0x2ec>
    2cde:	21 e0       	ldi	r18, 0x01	; 1
    2ce0:	c2 2e       	mov	r12, r18
    2ce2:	d1 2c       	mov	r13, r1
    2ce4:	ed 89       	ldd	r30, Y+21	; 0x15
    2ce6:	fe 89       	ldd	r31, Y+22	; 0x16
    2ce8:	ec 19       	sub	r30, r12
    2cea:	fd 09       	sbc	r31, r13
    2cec:	31 97       	sbiw	r30, 0x01	; 1
    2cee:	39 f4       	brne	.+14     	; 0x2cfe <draw_line+0x306>
    2cf0:	29 81       	ldd	r18, Y+1	; 0x01
    2cf2:	3a 81       	ldd	r19, Y+2	; 0x02
    2cf4:	2f 5f       	subi	r18, 0xFF	; 255
    2cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf8:	3a 83       	std	Y+2, r19	; 0x02
    2cfa:	29 83       	std	Y+1, r18	; 0x01
    2cfc:	06 c0       	rjmp	.+12     	; 0x2d0a <draw_line+0x312>
    2cfe:	49 81       	ldd	r20, Y+1	; 0x01
    2d00:	5a 81       	ldd	r21, Y+2	; 0x02
    2d02:	41 50       	subi	r20, 0x01	; 1
    2d04:	50 40       	sbci	r21, 0x00	; 0
    2d06:	5a 83       	std	Y+2, r21	; 0x02
    2d08:	49 83       	std	Y+1, r20	; 0x01
    2d0a:	c4 01       	movw	r24, r8
    2d0c:	b3 01       	movw	r22, r6
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e8       	ldi	r20, 0x80	; 128
    2d14:	5f e3       	ldi	r21, 0x3F	; 63
    2d16:	e5 dc       	rcall	.-1590   	; 0x26e2 <__subsf3>
    2d18:	3b 01       	movw	r6, r22
    2d1a:	4c 01       	movw	r8, r24
    2d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d20:	ed 81       	ldd	r30, Y+5	; 0x05
    2d22:	fe 81       	ldd	r31, Y+6	; 0x06
    2d24:	e8 17       	cp	r30, r24
    2d26:	f9 07       	cpc	r31, r25
    2d28:	20 f4       	brcc	.+8      	; 0x2d32 <draw_line+0x33a>
    2d2a:	08 94       	sec
    2d2c:	a1 1c       	adc	r10, r1
    2d2e:	b1 1c       	adc	r11, r1
    2d30:	03 c0       	rjmp	.+6      	; 0x2d38 <draw_line+0x340>
    2d32:	08 94       	sec
    2d34:	a1 08       	sbc	r10, r1
    2d36:	b1 08       	sbc	r11, r1
    2d38:	2b 81       	ldd	r18, Y+3	; 0x03
    2d3a:	3c 81       	ldd	r19, Y+4	; 0x04
    2d3c:	4d 81       	ldd	r20, Y+5	; 0x05
    2d3e:	5e 81       	ldd	r21, Y+6	; 0x06
    2d40:	42 17       	cp	r20, r18
    2d42:	53 07       	cpc	r21, r19
    2d44:	20 f4       	brcc	.+8      	; 0x2d4e <draw_line+0x356>
    2d46:	2a 15       	cp	r18, r10
    2d48:	3b 05       	cpc	r19, r11
    2d4a:	20 f1       	brcs	.+72     	; 0x2d94 <draw_line+0x39c>
    2d4c:	7b cf       	rjmp	.-266    	; 0x2c44 <draw_line+0x24c>
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	9c 81       	ldd	r25, Y+4	; 0x04
    2d52:	a8 16       	cp	r10, r24
    2d54:	b9 06       	cpc	r11, r25
    2d56:	f0 f0       	brcs	.+60     	; 0x2d94 <draw_line+0x39c>
    2d58:	75 cf       	rjmp	.-278    	; 0x2c44 <draw_line+0x24c>
    2d5a:	96 e0       	ldi	r25, 0x06	; 6
    2d5c:	c9 2e       	mov	r12, r25
    2d5e:	d1 2c       	mov	r13, r1
    2d60:	03 c0       	rjmp	.+6      	; 0x2d68 <draw_line+0x370>
    2d62:	82 e0       	ldi	r24, 0x02	; 2
    2d64:	c8 2e       	mov	r12, r24
    2d66:	d1 2c       	mov	r13, r1
    2d68:	c4 01       	movw	r24, r8
    2d6a:	b3 01       	movw	r22, r6
    2d6c:	a2 01       	movw	r20, r4
    2d6e:	91 01       	movw	r18, r2
    2d70:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__divsf3>
    2d74:	1b 01       	movw	r2, r22
    2d76:	2c 01       	movw	r4, r24
    2d78:	ba 82       	std	Y+2, r11	; 0x02
    2d7a:	a9 82       	std	Y+1, r10	; 0x01
    2d7c:	eb 85       	ldd	r30, Y+11	; 0x0b
    2d7e:	fc 85       	ldd	r31, Y+12	; 0x0c
    2d80:	fe 83       	std	Y+6, r31	; 0x06
    2d82:	ed 83       	std	Y+5, r30	; 0x05
    2d84:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d86:	23 2f       	mov	r18, r19
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	3c 83       	std	Y+4, r19	; 0x04
    2d8c:	2b 83       	std	Y+3, r18	; 0x03
    2d8e:	18 86       	std	Y+8, r1	; 0x08
    2d90:	1f 82       	std	Y+7, r1	; 0x07
    2d92:	29 cf       	rjmp	.-430    	; 0x2be6 <draw_line+0x1ee>
    2d94:	66 96       	adiw	r28, 0x16	; 22
    2d96:	0f b6       	in	r0, 0x3f	; 63
    2d98:	f8 94       	cli
    2d9a:	de bf       	out	0x3e, r29	; 62
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	cd bf       	out	0x3d, r28	; 61
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	1f 91       	pop	r17
    2da6:	0f 91       	pop	r16
    2da8:	ff 90       	pop	r15
    2daa:	ef 90       	pop	r14
    2dac:	df 90       	pop	r13
    2dae:	cf 90       	pop	r12
    2db0:	bf 90       	pop	r11
    2db2:	af 90       	pop	r10
    2db4:	9f 90       	pop	r9
    2db6:	8f 90       	pop	r8
    2db8:	7f 90       	pop	r7
    2dba:	6f 90       	pop	r6
    2dbc:	5f 90       	pop	r5
    2dbe:	4f 90       	pop	r4
    2dc0:	3f 90       	pop	r3
    2dc2:	2f 90       	pop	r2
    2dc4:	08 95       	ret

00002dc6 <draw_character>:
    2dc6:	8f 92       	push	r8
    2dc8:	9f 92       	push	r9
    2dca:	af 92       	push	r10
    2dcc:	bf 92       	push	r11
    2dce:	cf 92       	push	r12
    2dd0:	df 92       	push	r13
    2dd2:	ef 92       	push	r14
    2dd4:	ff 92       	push	r15
    2dd6:	0f 93       	push	r16
    2dd8:	1f 93       	push	r17
    2dda:	cf 93       	push	r28
    2ddc:	df 93       	push	r29
    2dde:	d6 2e       	mov	r13, r22
    2de0:	c4 2e       	mov	r12, r20
    2de2:	95 e0       	ldi	r25, 0x05	; 5
    2de4:	89 9f       	mul	r24, r25
    2de6:	c0 01       	movw	r24, r0
    2de8:	11 24       	eor	r1, r1
    2dea:	8c 01       	movw	r16, r24
    2dec:	04 5f       	subi	r16, 0xF4	; 244
    2dee:	1f 4f       	sbci	r17, 0xFF	; 255
    2df0:	f1 e0       	ldi	r31, 0x01	; 1
    2df2:	8f 2e       	mov	r8, r31
    2df4:	91 2c       	mov	r9, r1
    2df6:	e1 e1       	ldi	r30, 0x11	; 17
    2df8:	ae 2e       	mov	r10, r30
    2dfa:	e0 e0       	ldi	r30, 0x00	; 0
    2dfc:	be 2e       	mov	r11, r30
    2dfe:	a8 0e       	add	r10, r24
    2e00:	b9 1e       	adc	r11, r25
    2e02:	1d c0       	rjmp	.+58     	; 0x2e3e <draw_character+0x78>
    2e04:	6c 2d       	mov	r22, r12
    2e06:	6c 0f       	add	r22, r28
    2e08:	a4 01       	movw	r20, r8
    2e0a:	0c 2e       	mov	r0, r28
    2e0c:	02 c0       	rjmp	.+4      	; 0x2e12 <draw_character+0x4c>
    2e0e:	44 0f       	add	r20, r20
    2e10:	55 1f       	adc	r21, r21
    2e12:	0a 94       	dec	r0
    2e14:	e2 f7       	brpl	.-8      	; 0x2e0e <draw_character+0x48>
    2e16:	4e 21       	and	r20, r14
    2e18:	5f 21       	and	r21, r15
    2e1a:	0c 2e       	mov	r0, r28
    2e1c:	02 c0       	rjmp	.+4      	; 0x2e22 <draw_character+0x5c>
    2e1e:	55 95       	asr	r21
    2e20:	47 95       	ror	r20
    2e22:	0a 94       	dec	r0
    2e24:	e2 f7       	brpl	.-8      	; 0x2e1e <draw_character+0x58>
    2e26:	8d 2d       	mov	r24, r13
    2e28:	b4 dd       	rcall	.-1176   	; 0x2992 <set_pixel>
    2e2a:	21 96       	adiw	r28, 0x01	; 1
    2e2c:	c8 30       	cpi	r28, 0x08	; 8
    2e2e:	d1 05       	cpc	r29, r1
    2e30:	49 f7       	brne	.-46     	; 0x2e04 <draw_character+0x3e>
    2e32:	0f 5f       	subi	r16, 0xFF	; 255
    2e34:	1f 4f       	sbci	r17, 0xFF	; 255
    2e36:	d3 94       	inc	r13
    2e38:	0a 15       	cp	r16, r10
    2e3a:	1b 05       	cpc	r17, r11
    2e3c:	39 f0       	breq	.+14     	; 0x2e4c <draw_character+0x86>
    2e3e:	c0 e0       	ldi	r28, 0x00	; 0
    2e40:	d0 e0       	ldi	r29, 0x00	; 0
    2e42:	f8 01       	movw	r30, r16
    2e44:	84 91       	lpm	r24, Z+
    2e46:	e8 2e       	mov	r14, r24
    2e48:	ff 24       	eor	r15, r15
    2e4a:	dc cf       	rjmp	.-72     	; 0x2e04 <draw_character+0x3e>
    2e4c:	df 91       	pop	r29
    2e4e:	cf 91       	pop	r28
    2e50:	1f 91       	pop	r17
    2e52:	0f 91       	pop	r16
    2e54:	ff 90       	pop	r15
    2e56:	ef 90       	pop	r14
    2e58:	df 90       	pop	r13
    2e5a:	cf 90       	pop	r12
    2e5c:	bf 90       	pop	r11
    2e5e:	af 90       	pop	r10
    2e60:	9f 90       	pop	r9
    2e62:	8f 90       	pop	r8
    2e64:	08 95       	ret

00002e66 <draw_string>:
    2e66:	0f 93       	push	r16
    2e68:	1f 93       	push	r17
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
    2e6e:	ec 01       	movw	r28, r24
    2e70:	16 2f       	mov	r17, r22
    2e72:	04 2f       	mov	r16, r20
    2e74:	05 c0       	rjmp	.+10     	; 0x2e80 <draw_string+0x1a>
    2e76:	61 2f       	mov	r22, r17
    2e78:	40 2f       	mov	r20, r16
    2e7a:	a5 df       	rcall	.-182    	; 0x2dc6 <draw_character>
    2e7c:	21 96       	adiw	r28, 0x01	; 1
    2e7e:	1b 5f       	subi	r17, 0xFB	; 251
    2e80:	88 81       	ld	r24, Y
    2e82:	88 23       	and	r24, r24
    2e84:	c1 f7       	brne	.-16     	; 0x2e76 <draw_string+0x10>
    2e86:	df 91       	pop	r29
    2e88:	cf 91       	pop	r28
    2e8a:	1f 91       	pop	r17
    2e8c:	0f 91       	pop	r16
    2e8e:	08 95       	ret

00002e90 <refresh>:
    2e90:	cf 93       	push	r28
    2e92:	df 93       	push	r29
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	60 e0       	ldi	r22, 0x00	; 0
    2e98:	55 d0       	rcall	.+170    	; 0x2f44 <LCDPosition>
    2e9a:	ce e3       	ldi	r28, 0x3E	; 62
    2e9c:	d2 e0       	ldi	r29, 0x02	; 2
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	69 91       	ld	r22, Y+
    2ea2:	07 d0       	rcall	.+14     	; 0x2eb2 <LCDWrite>
    2ea4:	84 e0       	ldi	r24, 0x04	; 4
    2ea6:	c6 33       	cpi	r28, 0x36	; 54
    2ea8:	d8 07       	cpc	r29, r24
    2eaa:	c9 f7       	brne	.-14     	; 0x2e9e <refresh+0xe>
    2eac:	df 91       	pop	r29
    2eae:	cf 91       	pop	r28
    2eb0:	08 95       	ret

00002eb2 <LCDWrite>:
    2eb2:	95 b1       	in	r25, 0x05	; 5
    2eb4:	82 95       	swap	r24
    2eb6:	88 0f       	add	r24, r24
    2eb8:	80 7e       	andi	r24, 0xE0	; 224
    2eba:	9f 7d       	andi	r25, 0xDF	; 223
    2ebc:	98 2b       	or	r25, r24
    2ebe:	95 b9       	out	0x05, r25	; 5
    2ec0:	5f 98       	cbi	0x0b, 7	; 11
    2ec2:	27 e0       	ldi	r18, 0x07	; 7
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	70 e0       	ldi	r23, 0x00	; 0
    2ec8:	8f 98       	cbi	0x11, 7	; 17
    2eca:	cb 01       	movw	r24, r22
    2ecc:	02 2e       	mov	r0, r18
    2ece:	02 c0       	rjmp	.+4      	; 0x2ed4 <LCDWrite+0x22>
    2ed0:	95 95       	asr	r25
    2ed2:	87 95       	ror	r24
    2ed4:	0a 94       	dec	r0
    2ed6:	e2 f7       	brpl	.-8      	; 0x2ed0 <LCDWrite+0x1e>
    2ed8:	80 ff       	sbrs	r24, 0
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <LCDWrite+0x2e>
    2edc:	2e 9a       	sbi	0x05, 6	; 5
    2ede:	01 c0       	rjmp	.+2      	; 0x2ee2 <LCDWrite+0x30>
    2ee0:	2e 98       	cbi	0x05, 6	; 5
    2ee2:	8f 9a       	sbi	0x11, 7	; 17
    2ee4:	21 50       	subi	r18, 0x01	; 1
    2ee6:	30 40       	sbci	r19, 0x00	; 0
    2ee8:	8f ef       	ldi	r24, 0xFF	; 255
    2eea:	2f 3f       	cpi	r18, 0xFF	; 255
    2eec:	38 07       	cpc	r19, r24
    2eee:	61 f7       	brne	.-40     	; 0x2ec8 <LCDWrite+0x16>
    2ef0:	5f 9a       	sbi	0x0b, 7	; 11
    2ef2:	08 95       	ret

00002ef4 <LCDInitialise>:
    2ef4:	1f 93       	push	r17
    2ef6:	18 2f       	mov	r17, r24
    2ef8:	57 9a       	sbi	0x0a, 7	; 10
    2efa:	24 9a       	sbi	0x04, 4	; 4
    2efc:	25 9a       	sbi	0x04, 5	; 4
    2efe:	26 9a       	sbi	0x04, 6	; 4
    2f00:	87 9a       	sbi	0x10, 7	; 16
    2f02:	2c 98       	cbi	0x05, 4	; 5
    2f04:	5f 9a       	sbi	0x0b, 7	; 11
    2f06:	2c 9a       	sbi	0x05, 4	; 5
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	61 e2       	ldi	r22, 0x21	; 33
    2f0c:	d2 df       	rcall	.-92     	; 0x2eb2 <LCDWrite>
    2f0e:	10 68       	ori	r17, 0x80	; 128
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	61 2f       	mov	r22, r17
    2f14:	ce df       	rcall	.-100    	; 0x2eb2 <LCDWrite>
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	64 e0       	ldi	r22, 0x04	; 4
    2f1a:	cb df       	rcall	.-106    	; 0x2eb2 <LCDWrite>
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	63 e1       	ldi	r22, 0x13	; 19
    2f20:	c8 df       	rcall	.-112    	; 0x2eb2 <LCDWrite>
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	6c e0       	ldi	r22, 0x0C	; 12
    2f26:	c5 df       	rcall	.-118    	; 0x2eb2 <LCDWrite>
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	60 e2       	ldi	r22, 0x20	; 32
    2f2c:	c2 df       	rcall	.-124    	; 0x2eb2 <LCDWrite>
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	6c e0       	ldi	r22, 0x0C	; 12
    2f32:	bf df       	rcall	.-130    	; 0x2eb2 <LCDWrite>
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	60 e4       	ldi	r22, 0x40	; 64
    2f38:	bc df       	rcall	.-136    	; 0x2eb2 <LCDWrite>
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	60 e8       	ldi	r22, 0x80	; 128
    2f3e:	b9 df       	rcall	.-142    	; 0x2eb2 <LCDWrite>
    2f40:	1f 91       	pop	r17
    2f42:	08 95       	ret

00002f44 <LCDPosition>:
    2f44:	1f 93       	push	r17
    2f46:	18 2f       	mov	r17, r24
    2f48:	60 64       	ori	r22, 0x40	; 64
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	b2 df       	rcall	.-156    	; 0x2eb2 <LCDWrite>
    2f4e:	10 68       	ori	r17, 0x80	; 128
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	61 2f       	mov	r22, r17
    2f54:	ae df       	rcall	.-164    	; 0x2eb2 <LCDWrite>
    2f56:	1f 91       	pop	r17
    2f58:	08 95       	ret

00002f5a <init_sprite>:
    2f5a:	8f 92       	push	r8
    2f5c:	9f 92       	push	r9
    2f5e:	af 92       	push	r10
    2f60:	bf 92       	push	r11
    2f62:	cf 92       	push	r12
    2f64:	df 92       	push	r13
    2f66:	ef 92       	push	r14
    2f68:	ff 92       	push	r15
    2f6a:	0f 93       	push	r16
    2f6c:	1f 93       	push	r17
    2f6e:	4c 01       	movw	r8, r24
    2f70:	a4 2e       	mov	r10, r20
    2f72:	12 2f       	mov	r17, r18
    2f74:	70 e0       	ldi	r23, 0x00	; 0
    2f76:	80 e0       	ldi	r24, 0x00	; 0
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	4d dc       	rcall	.-1894   	; 0x2816 <__floatunsisf>
    2f7c:	f4 01       	movw	r30, r8
    2f7e:	60 83       	st	Z, r22
    2f80:	71 83       	std	Z+1, r23	; 0x01
    2f82:	82 83       	std	Z+2, r24	; 0x02
    2f84:	93 83       	std	Z+3, r25	; 0x03
    2f86:	bb 24       	eor	r11, r11
    2f88:	cc 24       	eor	r12, r12
    2f8a:	dd 24       	eor	r13, r13
    2f8c:	c6 01       	movw	r24, r12
    2f8e:	b5 01       	movw	r22, r10
    2f90:	42 dc       	rcall	.-1916   	; 0x2816 <__floatunsisf>
    2f92:	f4 01       	movw	r30, r8
    2f94:	64 83       	std	Z+4, r22	; 0x04
    2f96:	75 83       	std	Z+5, r23	; 0x05
    2f98:	86 83       	std	Z+6, r24	; 0x06
    2f9a:	97 83       	std	Z+7, r25	; 0x07
    2f9c:	10 87       	std	Z+8, r17	; 0x08
    2f9e:	01 87       	std	Z+9, r16	; 0x09
    2fa0:	f4 86       	std	Z+12, r15	; 0x0c
    2fa2:	e3 86       	std	Z+11, r14	; 0x0b
    2fa4:	1f 91       	pop	r17
    2fa6:	0f 91       	pop	r16
    2fa8:	ff 90       	pop	r15
    2faa:	ef 90       	pop	r14
    2fac:	df 90       	pop	r13
    2fae:	cf 90       	pop	r12
    2fb0:	bf 90       	pop	r11
    2fb2:	af 90       	pop	r10
    2fb4:	9f 90       	pop	r9
    2fb6:	8f 90       	pop	r8
    2fb8:	08 95       	ret

00002fba <draw_sprite>:
    2fba:	2f 92       	push	r2
    2fbc:	3f 92       	push	r3
    2fbe:	4f 92       	push	r4
    2fc0:	5f 92       	push	r5
    2fc2:	7f 92       	push	r7
    2fc4:	8f 92       	push	r8
    2fc6:	9f 92       	push	r9
    2fc8:	af 92       	push	r10
    2fca:	bf 92       	push	r11
    2fcc:	cf 92       	push	r12
    2fce:	df 92       	push	r13
    2fd0:	ef 92       	push	r14
    2fd2:	ff 92       	push	r15
    2fd4:	0f 93       	push	r16
    2fd6:	1f 93       	push	r17
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <draw_sprite+0x24>
    2fde:	00 d0       	rcall	.+0      	; 0x2fe0 <draw_sprite+0x26>
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	2c 01       	movw	r4, r24
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	1a 96       	adiw	r26, 0x0a	; 10
    2fea:	8c 91       	ld	r24, X
    2fec:	88 23       	and	r24, r24
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <draw_sprite+0x38>
    2ff0:	96 c0       	rjmp	.+300    	; 0x311e <draw_sprite+0x164>
    2ff2:	22 24       	eor	r2, r2
    2ff4:	33 24       	eor	r3, r3
    2ff6:	1a 82       	std	Y+2, r1	; 0x02
    2ff8:	19 82       	std	Y+1, r1	; 0x01
    2ffa:	87 c0       	rjmp	.+270    	; 0x310a <draw_sprite+0x150>
    2ffc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ffe:	fa 81       	ldd	r31, Y+2	; 0x02
    3000:	bf 01       	movw	r22, r30
    3002:	88 27       	eor	r24, r24
    3004:	77 fd       	sbrc	r23, 7
    3006:	80 95       	com	r24
    3008:	98 2f       	mov	r25, r24
    300a:	07 dc       	rcall	.-2034   	; 0x281a <__floatsisf>
    300c:	d2 01       	movw	r26, r4
    300e:	14 96       	adiw	r26, 0x04	; 4
    3010:	2d 91       	ld	r18, X+
    3012:	3d 91       	ld	r19, X+
    3014:	4d 91       	ld	r20, X+
    3016:	5c 91       	ld	r21, X
    3018:	17 97       	sbiw	r26, 0x07	; 7
    301a:	64 db       	rcall	.-2360   	; 0x26e4 <__addsf3>
    301c:	5b 01       	movw	r10, r22
    301e:	6c 01       	movw	r12, r24
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	40 e0       	ldi	r20, 0x00	; 0
    3026:	50 e0       	ldi	r21, 0x00	; 0
    3028:	c1 db       	rcall	.-2174   	; 0x27ac <__cmpsf2>
    302a:	87 fd       	sbrc	r24, 7
    302c:	68 c0       	rjmp	.+208    	; 0x30fe <draw_sprite+0x144>
    302e:	c6 01       	movw	r24, r12
    3030:	b5 01       	movw	r22, r10
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e4       	ldi	r20, 0x40	; 64
    3038:	52 e4       	ldi	r21, 0x42	; 66
    303a:	9f dc       	rcall	.-1730   	; 0x297a <__gesf2>
    303c:	87 ff       	sbrs	r24, 7
    303e:	6f c0       	rjmp	.+222    	; 0x311e <draw_sprite+0x164>
    3040:	1c 82       	std	Y+4, r1	; 0x04
    3042:	1b 82       	std	Y+3, r1	; 0x03
    3044:	45 c0       	rjmp	.+138    	; 0x30d0 <draw_sprite+0x116>
    3046:	d2 01       	movw	r26, r4
    3048:	1b 96       	adiw	r26, 0x0b	; 11
    304a:	ed 91       	ld	r30, X+
    304c:	fc 91       	ld	r31, X
    304e:	1c 97       	sbiw	r26, 0x0c	; 12
    3050:	e2 0d       	add	r30, r2
    3052:	f3 1d       	adc	r31, r3
    3054:	70 80       	ld	r7, Z
    3056:	eb 81       	ldd	r30, Y+3	; 0x03
    3058:	fc 81       	ldd	r31, Y+4	; 0x04
    305a:	bf 01       	movw	r22, r30
    305c:	88 27       	eor	r24, r24
    305e:	77 fd       	sbrc	r23, 7
    3060:	80 95       	com	r24
    3062:	98 2f       	mov	r25, r24
    3064:	da db       	rcall	.-2124   	; 0x281a <__floatsisf>
    3066:	d2 01       	movw	r26, r4
    3068:	2d 91       	ld	r18, X+
    306a:	3d 91       	ld	r19, X+
    306c:	4d 91       	ld	r20, X+
    306e:	5c 91       	ld	r21, X
    3070:	39 db       	rcall	.-2446   	; 0x26e4 <__addsf3>
    3072:	7b 01       	movw	r14, r22
    3074:	8c 01       	movw	r16, r24
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	40 e0       	ldi	r20, 0x00	; 0
    307c:	50 e0       	ldi	r21, 0x00	; 0
    307e:	7d dc       	rcall	.-1798   	; 0x297a <__gesf2>
    3080:	88 23       	and	r24, r24
    3082:	cc f0       	brlt	.+50     	; 0x30b6 <draw_sprite+0xfc>
    3084:	c8 01       	movw	r24, r16
    3086:	b7 01       	movw	r22, r14
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	48 ea       	ldi	r20, 0xA8	; 168
    308e:	52 e4       	ldi	r21, 0x42	; 66
    3090:	8d db       	rcall	.-2278   	; 0x27ac <__cmpsf2>
    3092:	88 23       	and	r24, r24
    3094:	84 f4       	brge	.+32     	; 0x30b6 <draw_sprite+0xfc>
    3096:	78 20       	and	r7, r8
    3098:	71 f0       	breq	.+28     	; 0x30b6 <draw_sprite+0xfc>
    309a:	c8 01       	movw	r24, r16
    309c:	b7 01       	movw	r22, r14
    309e:	8f db       	rcall	.-2274   	; 0x27be <__fixunssfsi>
    30a0:	7b 01       	movw	r14, r22
    30a2:	8c 01       	movw	r16, r24
    30a4:	c6 01       	movw	r24, r12
    30a6:	b5 01       	movw	r22, r10
    30a8:	8a db       	rcall	.-2284   	; 0x27be <__fixunssfsi>
    30aa:	9b 01       	movw	r18, r22
    30ac:	ac 01       	movw	r20, r24
    30ae:	8e 2d       	mov	r24, r14
    30b0:	62 2f       	mov	r22, r18
    30b2:	41 e0       	ldi	r20, 0x01	; 1
    30b4:	6e dc       	rcall	.-1828   	; 0x2992 <set_pixel>
    30b6:	eb 81       	ldd	r30, Y+3	; 0x03
    30b8:	fc 81       	ldd	r31, Y+4	; 0x04
    30ba:	31 96       	adiw	r30, 0x01	; 1
    30bc:	fc 83       	std	Y+4, r31	; 0x04
    30be:	eb 83       	std	Y+3, r30	; 0x03
    30c0:	cf 01       	movw	r24, r30
    30c2:	87 70       	andi	r24, 0x07	; 7
    30c4:	90 70       	andi	r25, 0x00	; 0
    30c6:	89 2b       	or	r24, r25
    30c8:	39 f4       	brne	.+14     	; 0x30d8 <draw_sprite+0x11e>
    30ca:	08 94       	sec
    30cc:	21 1c       	adc	r2, r1
    30ce:	31 1c       	adc	r3, r1
    30d0:	90 e8       	ldi	r25, 0x80	; 128
    30d2:	89 2e       	mov	r8, r25
    30d4:	91 2c       	mov	r9, r1
    30d6:	02 c0       	rjmp	.+4      	; 0x30dc <draw_sprite+0x122>
    30d8:	95 94       	asr	r9
    30da:	87 94       	ror	r8
    30dc:	d2 01       	movw	r26, r4
    30de:	18 96       	adiw	r26, 0x08	; 8
    30e0:	8c 91       	ld	r24, X
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	eb 81       	ldd	r30, Y+3	; 0x03
    30e6:	fc 81       	ldd	r31, Y+4	; 0x04
    30e8:	e8 17       	cp	r30, r24
    30ea:	f9 07       	cpc	r31, r25
    30ec:	0c f4       	brge	.+2      	; 0x30f0 <draw_sprite+0x136>
    30ee:	ab cf       	rjmp	.-170    	; 0x3046 <draw_sprite+0x8c>
    30f0:	87 70       	andi	r24, 0x07	; 7
    30f2:	90 70       	andi	r25, 0x00	; 0
    30f4:	89 2b       	or	r24, r25
    30f6:	19 f0       	breq	.+6      	; 0x30fe <draw_sprite+0x144>
    30f8:	08 94       	sec
    30fa:	21 1c       	adc	r2, r1
    30fc:	31 1c       	adc	r3, r1
    30fe:	29 81       	ldd	r18, Y+1	; 0x01
    3100:	3a 81       	ldd	r19, Y+2	; 0x02
    3102:	2f 5f       	subi	r18, 0xFF	; 255
    3104:	3f 4f       	sbci	r19, 0xFF	; 255
    3106:	3a 83       	std	Y+2, r19	; 0x02
    3108:	29 83       	std	Y+1, r18	; 0x01
    310a:	d2 01       	movw	r26, r4
    310c:	19 96       	adiw	r26, 0x09	; 9
    310e:	8c 91       	ld	r24, X
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	e9 81       	ldd	r30, Y+1	; 0x01
    3114:	fa 81       	ldd	r31, Y+2	; 0x02
    3116:	e8 17       	cp	r30, r24
    3118:	f9 07       	cpc	r31, r25
    311a:	0c f4       	brge	.+2      	; 0x311e <draw_sprite+0x164>
    311c:	6f cf       	rjmp	.-290    	; 0x2ffc <draw_sprite+0x42>
    311e:	0f 90       	pop	r0
    3120:	0f 90       	pop	r0
    3122:	0f 90       	pop	r0
    3124:	0f 90       	pop	r0
    3126:	cf 91       	pop	r28
    3128:	df 91       	pop	r29
    312a:	1f 91       	pop	r17
    312c:	0f 91       	pop	r16
    312e:	ff 90       	pop	r15
    3130:	ef 90       	pop	r14
    3132:	df 90       	pop	r13
    3134:	cf 90       	pop	r12
    3136:	bf 90       	pop	r11
    3138:	af 90       	pop	r10
    313a:	9f 90       	pop	r9
    313c:	8f 90       	pop	r8
    313e:	7f 90       	pop	r7
    3140:	5f 90       	pop	r5
    3142:	4f 90       	pop	r4
    3144:	3f 90       	pop	r3
    3146:	2f 90       	pop	r2
    3148:	08 95       	ret

0000314a <__divmodhi4>:
    314a:	97 fb       	bst	r25, 7
    314c:	09 2e       	mov	r0, r25
    314e:	07 26       	eor	r0, r23
    3150:	0a d0       	rcall	.+20     	; 0x3166 <__divmodhi4_neg1>
    3152:	77 fd       	sbrc	r23, 7
    3154:	04 d0       	rcall	.+8      	; 0x315e <__divmodhi4_neg2>
    3156:	0c d0       	rcall	.+24     	; 0x3170 <__udivmodhi4>
    3158:	06 d0       	rcall	.+12     	; 0x3166 <__divmodhi4_neg1>
    315a:	00 20       	and	r0, r0
    315c:	1a f4       	brpl	.+6      	; 0x3164 <__divmodhi4_exit>

0000315e <__divmodhi4_neg2>:
    315e:	70 95       	com	r23
    3160:	61 95       	neg	r22
    3162:	7f 4f       	sbci	r23, 0xFF	; 255

00003164 <__divmodhi4_exit>:
    3164:	08 95       	ret

00003166 <__divmodhi4_neg1>:
    3166:	f6 f7       	brtc	.-4      	; 0x3164 <__divmodhi4_exit>
    3168:	90 95       	com	r25
    316a:	81 95       	neg	r24
    316c:	9f 4f       	sbci	r25, 0xFF	; 255
    316e:	08 95       	ret

00003170 <__udivmodhi4>:
    3170:	aa 1b       	sub	r26, r26
    3172:	bb 1b       	sub	r27, r27
    3174:	51 e1       	ldi	r21, 0x11	; 17
    3176:	07 c0       	rjmp	.+14     	; 0x3186 <__udivmodhi4_ep>

00003178 <__udivmodhi4_loop>:
    3178:	aa 1f       	adc	r26, r26
    317a:	bb 1f       	adc	r27, r27
    317c:	a6 17       	cp	r26, r22
    317e:	b7 07       	cpc	r27, r23
    3180:	10 f0       	brcs	.+4      	; 0x3186 <__udivmodhi4_ep>
    3182:	a6 1b       	sub	r26, r22
    3184:	b7 0b       	sbc	r27, r23

00003186 <__udivmodhi4_ep>:
    3186:	88 1f       	adc	r24, r24
    3188:	99 1f       	adc	r25, r25
    318a:	5a 95       	dec	r21
    318c:	a9 f7       	brne	.-22     	; 0x3178 <__udivmodhi4_loop>
    318e:	80 95       	com	r24
    3190:	90 95       	com	r25
    3192:	bc 01       	movw	r22, r24
    3194:	cd 01       	movw	r24, r26
    3196:	08 95       	ret

00003198 <__prologue_saves__>:
    3198:	2f 92       	push	r2
    319a:	3f 92       	push	r3
    319c:	4f 92       	push	r4
    319e:	5f 92       	push	r5
    31a0:	6f 92       	push	r6
    31a2:	7f 92       	push	r7
    31a4:	8f 92       	push	r8
    31a6:	9f 92       	push	r9
    31a8:	af 92       	push	r10
    31aa:	bf 92       	push	r11
    31ac:	cf 92       	push	r12
    31ae:	df 92       	push	r13
    31b0:	ef 92       	push	r14
    31b2:	ff 92       	push	r15
    31b4:	0f 93       	push	r16
    31b6:	1f 93       	push	r17
    31b8:	cf 93       	push	r28
    31ba:	df 93       	push	r29
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
    31c0:	ca 1b       	sub	r28, r26
    31c2:	db 0b       	sbc	r29, r27
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	09 94       	ijmp

000031d0 <__epilogue_restores__>:
    31d0:	2a 88       	ldd	r2, Y+18	; 0x12
    31d2:	39 88       	ldd	r3, Y+17	; 0x11
    31d4:	48 88       	ldd	r4, Y+16	; 0x10
    31d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    31d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    31da:	7d 84       	ldd	r7, Y+13	; 0x0d
    31dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    31de:	9b 84       	ldd	r9, Y+11	; 0x0b
    31e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    31e2:	b9 84       	ldd	r11, Y+9	; 0x09
    31e4:	c8 84       	ldd	r12, Y+8	; 0x08
    31e6:	df 80       	ldd	r13, Y+7	; 0x07
    31e8:	ee 80       	ldd	r14, Y+6	; 0x06
    31ea:	fd 80       	ldd	r15, Y+5	; 0x05
    31ec:	0c 81       	ldd	r16, Y+4	; 0x04
    31ee:	1b 81       	ldd	r17, Y+3	; 0x03
    31f0:	aa 81       	ldd	r26, Y+2	; 0x02
    31f2:	b9 81       	ldd	r27, Y+1	; 0x01
    31f4:	ce 0f       	add	r28, r30
    31f6:	d1 1d       	adc	r29, r1
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	f8 94       	cli
    31fc:	de bf       	out	0x3e, r29	; 62
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	cd bf       	out	0x3d, r28	; 61
    3202:	ed 01       	movw	r28, r26
    3204:	08 95       	ret

00003206 <do_rand>:
    3206:	a0 e0       	ldi	r26, 0x00	; 0
    3208:	b0 e0       	ldi	r27, 0x00	; 0
    320a:	e8 e0       	ldi	r30, 0x08	; 8
    320c:	f9 e1       	ldi	r31, 0x19	; 25
    320e:	cc cf       	rjmp	.-104    	; 0x31a8 <__prologue_saves__+0x10>
    3210:	ec 01       	movw	r28, r24
    3212:	a8 80       	ld	r10, Y
    3214:	b9 80       	ldd	r11, Y+1	; 0x01
    3216:	ca 80       	ldd	r12, Y+2	; 0x02
    3218:	db 80       	ldd	r13, Y+3	; 0x03
    321a:	a1 14       	cp	r10, r1
    321c:	b1 04       	cpc	r11, r1
    321e:	c1 04       	cpc	r12, r1
    3220:	d1 04       	cpc	r13, r1
    3222:	41 f4       	brne	.+16     	; 0x3234 <do_rand+0x2e>
    3224:	84 e2       	ldi	r24, 0x24	; 36
    3226:	a8 2e       	mov	r10, r24
    3228:	89 ed       	ldi	r24, 0xD9	; 217
    322a:	b8 2e       	mov	r11, r24
    322c:	8b e5       	ldi	r24, 0x5B	; 91
    322e:	c8 2e       	mov	r12, r24
    3230:	87 e0       	ldi	r24, 0x07	; 7
    3232:	d8 2e       	mov	r13, r24
    3234:	c6 01       	movw	r24, r12
    3236:	b5 01       	movw	r22, r10
    3238:	2d e1       	ldi	r18, 0x1D	; 29
    323a:	33 ef       	ldi	r19, 0xF3	; 243
    323c:	41 e0       	ldi	r20, 0x01	; 1
    323e:	50 e0       	ldi	r21, 0x00	; 0
    3240:	58 d0       	rcall	.+176    	; 0x32f2 <__divmodsi4>
    3242:	27 ea       	ldi	r18, 0xA7	; 167
    3244:	31 e4       	ldi	r19, 0x41	; 65
    3246:	40 e0       	ldi	r20, 0x00	; 0
    3248:	50 e0       	ldi	r21, 0x00	; 0
    324a:	34 d0       	rcall	.+104    	; 0x32b4 <__mulsi3>
    324c:	7b 01       	movw	r14, r22
    324e:	8c 01       	movw	r16, r24
    3250:	c6 01       	movw	r24, r12
    3252:	b5 01       	movw	r22, r10
    3254:	2d e1       	ldi	r18, 0x1D	; 29
    3256:	33 ef       	ldi	r19, 0xF3	; 243
    3258:	41 e0       	ldi	r20, 0x01	; 1
    325a:	50 e0       	ldi	r21, 0x00	; 0
    325c:	4a d0       	rcall	.+148    	; 0x32f2 <__divmodsi4>
    325e:	ca 01       	movw	r24, r20
    3260:	b9 01       	movw	r22, r18
    3262:	2c ee       	ldi	r18, 0xEC	; 236
    3264:	34 ef       	ldi	r19, 0xF4	; 244
    3266:	4f ef       	ldi	r20, 0xFF	; 255
    3268:	5f ef       	ldi	r21, 0xFF	; 255
    326a:	24 d0       	rcall	.+72     	; 0x32b4 <__mulsi3>
    326c:	6e 0d       	add	r22, r14
    326e:	7f 1d       	adc	r23, r15
    3270:	80 1f       	adc	r24, r16
    3272:	91 1f       	adc	r25, r17
    3274:	97 ff       	sbrs	r25, 7
    3276:	04 c0       	rjmp	.+8      	; 0x3280 <do_rand+0x7a>
    3278:	61 50       	subi	r22, 0x01	; 1
    327a:	70 40       	sbci	r23, 0x00	; 0
    327c:	80 40       	sbci	r24, 0x00	; 0
    327e:	90 48       	sbci	r25, 0x80	; 128
    3280:	68 83       	st	Y, r22
    3282:	79 83       	std	Y+1, r23	; 0x01
    3284:	8a 83       	std	Y+2, r24	; 0x02
    3286:	9b 83       	std	Y+3, r25	; 0x03
    3288:	9b 01       	movw	r18, r22
    328a:	3f 77       	andi	r19, 0x7F	; 127
    328c:	c9 01       	movw	r24, r18
    328e:	cd b7       	in	r28, 0x3d	; 61
    3290:	de b7       	in	r29, 0x3e	; 62
    3292:	ea e0       	ldi	r30, 0x0A	; 10
    3294:	a5 cf       	rjmp	.-182    	; 0x31e0 <__epilogue_restores__+0x10>

00003296 <rand_r>:
    3296:	b7 cf       	rjmp	.-146    	; 0x3206 <do_rand>

00003298 <rand>:
    3298:	8b ee       	ldi	r24, 0xEB	; 235
    329a:	91 e0       	ldi	r25, 0x01	; 1
    329c:	b4 cf       	rjmp	.-152    	; 0x3206 <do_rand>

0000329e <srand>:
    329e:	a0 e0       	ldi	r26, 0x00	; 0
    32a0:	b0 e0       	ldi	r27, 0x00	; 0
    32a2:	80 93 eb 01 	sts	0x01EB, r24
    32a6:	90 93 ec 01 	sts	0x01EC, r25
    32aa:	a0 93 ed 01 	sts	0x01ED, r26
    32ae:	b0 93 ee 01 	sts	0x01EE, r27
    32b2:	08 95       	ret

000032b4 <__mulsi3>:
    32b4:	62 9f       	mul	r22, r18
    32b6:	d0 01       	movw	r26, r0
    32b8:	73 9f       	mul	r23, r19
    32ba:	f0 01       	movw	r30, r0
    32bc:	82 9f       	mul	r24, r18
    32be:	e0 0d       	add	r30, r0
    32c0:	f1 1d       	adc	r31, r1
    32c2:	64 9f       	mul	r22, r20
    32c4:	e0 0d       	add	r30, r0
    32c6:	f1 1d       	adc	r31, r1
    32c8:	92 9f       	mul	r25, r18
    32ca:	f0 0d       	add	r31, r0
    32cc:	83 9f       	mul	r24, r19
    32ce:	f0 0d       	add	r31, r0
    32d0:	74 9f       	mul	r23, r20
    32d2:	f0 0d       	add	r31, r0
    32d4:	65 9f       	mul	r22, r21
    32d6:	f0 0d       	add	r31, r0
    32d8:	99 27       	eor	r25, r25
    32da:	72 9f       	mul	r23, r18
    32dc:	b0 0d       	add	r27, r0
    32de:	e1 1d       	adc	r30, r1
    32e0:	f9 1f       	adc	r31, r25
    32e2:	63 9f       	mul	r22, r19
    32e4:	b0 0d       	add	r27, r0
    32e6:	e1 1d       	adc	r30, r1
    32e8:	f9 1f       	adc	r31, r25
    32ea:	bd 01       	movw	r22, r26
    32ec:	cf 01       	movw	r24, r30
    32ee:	11 24       	eor	r1, r1
    32f0:	08 95       	ret

000032f2 <__divmodsi4>:
    32f2:	97 fb       	bst	r25, 7
    32f4:	09 2e       	mov	r0, r25
    32f6:	05 26       	eor	r0, r21
    32f8:	0e d0       	rcall	.+28     	; 0x3316 <__divmodsi4_neg1>
    32fa:	57 fd       	sbrc	r21, 7
    32fc:	04 d0       	rcall	.+8      	; 0x3306 <__divmodsi4_neg2>
    32fe:	14 d0       	rcall	.+40     	; 0x3328 <__udivmodsi4>
    3300:	0a d0       	rcall	.+20     	; 0x3316 <__divmodsi4_neg1>
    3302:	00 1c       	adc	r0, r0
    3304:	38 f4       	brcc	.+14     	; 0x3314 <__divmodsi4_exit>

00003306 <__divmodsi4_neg2>:
    3306:	50 95       	com	r21
    3308:	40 95       	com	r20
    330a:	30 95       	com	r19
    330c:	21 95       	neg	r18
    330e:	3f 4f       	sbci	r19, 0xFF	; 255
    3310:	4f 4f       	sbci	r20, 0xFF	; 255
    3312:	5f 4f       	sbci	r21, 0xFF	; 255

00003314 <__divmodsi4_exit>:
    3314:	08 95       	ret

00003316 <__divmodsi4_neg1>:
    3316:	f6 f7       	brtc	.-4      	; 0x3314 <__divmodsi4_exit>
    3318:	90 95       	com	r25
    331a:	80 95       	com	r24
    331c:	70 95       	com	r23
    331e:	61 95       	neg	r22
    3320:	7f 4f       	sbci	r23, 0xFF	; 255
    3322:	8f 4f       	sbci	r24, 0xFF	; 255
    3324:	9f 4f       	sbci	r25, 0xFF	; 255
    3326:	08 95       	ret

00003328 <__udivmodsi4>:
    3328:	a1 e2       	ldi	r26, 0x21	; 33
    332a:	1a 2e       	mov	r1, r26
    332c:	aa 1b       	sub	r26, r26
    332e:	bb 1b       	sub	r27, r27
    3330:	fd 01       	movw	r30, r26
    3332:	0d c0       	rjmp	.+26     	; 0x334e <__udivmodsi4_ep>

00003334 <__udivmodsi4_loop>:
    3334:	aa 1f       	adc	r26, r26
    3336:	bb 1f       	adc	r27, r27
    3338:	ee 1f       	adc	r30, r30
    333a:	ff 1f       	adc	r31, r31
    333c:	a2 17       	cp	r26, r18
    333e:	b3 07       	cpc	r27, r19
    3340:	e4 07       	cpc	r30, r20
    3342:	f5 07       	cpc	r31, r21
    3344:	20 f0       	brcs	.+8      	; 0x334e <__udivmodsi4_ep>
    3346:	a2 1b       	sub	r26, r18
    3348:	b3 0b       	sbc	r27, r19
    334a:	e4 0b       	sbc	r30, r20
    334c:	f5 0b       	sbc	r31, r21

0000334e <__udivmodsi4_ep>:
    334e:	66 1f       	adc	r22, r22
    3350:	77 1f       	adc	r23, r23
    3352:	88 1f       	adc	r24, r24
    3354:	99 1f       	adc	r25, r25
    3356:	1a 94       	dec	r1
    3358:	69 f7       	brne	.-38     	; 0x3334 <__udivmodsi4_loop>
    335a:	60 95       	com	r22
    335c:	70 95       	com	r23
    335e:	80 95       	com	r24
    3360:	90 95       	com	r25
    3362:	9b 01       	movw	r18, r22
    3364:	ac 01       	movw	r20, r24
    3366:	bd 01       	movw	r22, r26
    3368:	cf 01       	movw	r24, r30
    336a:	08 95       	ret

0000336c <_exit>:
    336c:	f8 94       	cli

0000336e <__stop_program>:
    336e:	ff cf       	rjmp	.-2      	; 0x336e <__stop_program>
