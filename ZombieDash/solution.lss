
solution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00002a4e  00002ae2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000230  008001a0  008001a0  00002b82  2**0
                  ALLOC
  3 .debug_aranges 000001f0  00000000  00000000  00002b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004ec  00000000  00000000  00002d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002316  00000000  00000000  0000325e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d8a  00000000  00000000  00005574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b97  00000000  00000000  000062fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  00007e98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000070e  00000000  00000000  00008178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015be  00000000  00000000  00008886  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000260  00000000  00000000  00009e44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c1       	rjmp	.+650    	; 0x28c <__ctors_end>
       2:	00 00       	nop
       4:	60 c1       	rjmp	.+704    	; 0x2c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c1       	rjmp	.+700    	; 0x2c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c1       	rjmp	.+696    	; 0x2c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c1       	rjmp	.+692    	; 0x2c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c1       	rjmp	.+688    	; 0x2c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c1       	rjmp	.+684    	; 0x2c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c1       	rjmp	.+680    	; 0x2c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c1       	rjmp	.+676    	; 0x2c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	81 c4       	rjmp	.+2306   	; 0x928 <__vector_9>
      26:	00 00       	nop
      28:	4e c1       	rjmp	.+668    	; 0x2c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c1       	rjmp	.+664    	; 0x2c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c1       	rjmp	.+660    	; 0x2c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c1       	rjmp	.+656    	; 0x2c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c1       	rjmp	.+652    	; 0x2c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c1       	rjmp	.+648    	; 0x2c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c1       	rjmp	.+644    	; 0x2c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c1       	rjmp	.+640    	; 0x2c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c1       	rjmp	.+636    	; 0x2c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c1       	rjmp	.+632    	; 0x2c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c1       	rjmp	.+628    	; 0x2c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c1       	rjmp	.+624    	; 0x2c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c1       	rjmp	.+620    	; 0x2c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__vector_23>
      60:	32 c1       	rjmp	.+612    	; 0x2c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c1       	rjmp	.+608    	; 0x2c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c1       	rjmp	.+604    	; 0x2c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c1       	rjmp	.+600    	; 0x2c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c1       	rjmp	.+596    	; 0x2c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c1       	rjmp	.+592    	; 0x2c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c1       	rjmp	.+588    	; 0x2c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c1       	rjmp	.+584    	; 0x2c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c1       	rjmp	.+580    	; 0x2c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c1       	rjmp	.+576    	; 0x2c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c1       	rjmp	.+572    	; 0x2c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1c c1       	rjmp	.+568    	; 0x2c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1a c1       	rjmp	.+564    	; 0x2c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	18 c1       	rjmp	.+560    	; 0x2c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	16 c1       	rjmp	.+556    	; 0x2c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	14 c1       	rjmp	.+552    	; 0x2c6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	12 c1       	rjmp	.+548    	; 0x2c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	10 c1       	rjmp	.+544    	; 0x2c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0e c1       	rjmp	.+540    	; 0x2c6 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ASCII>:
      ac:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      bc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      cc:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      dc:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      ec:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      fc:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     10c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     11c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     12c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     13c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     14c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     15c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     16c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     17c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     18c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     19c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1ac:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1bc:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1cc:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1dc:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1ec:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1fc:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     20c:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     21c:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     22c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     23c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     24c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     25c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     26c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     27c:	00 00 41 36 08 00 10 08 08 10 08 78 46 41 46 78     ..A6.......xFAFx

0000028c <__ctors_end>:
     28c:	11 24       	eor	r1, r1
     28e:	1f be       	out	0x3f, r1	; 63
     290:	cf ef       	ldi	r28, 0xFF	; 255
     292:	da e0       	ldi	r29, 0x0A	; 10
     294:	de bf       	out	0x3e, r29	; 62
     296:	cd bf       	out	0x3d, r28	; 61

00000298 <__do_copy_data>:
     298:	11 e0       	ldi	r17, 0x01	; 1
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b1 e0       	ldi	r27, 0x01	; 1
     29e:	ee e4       	ldi	r30, 0x4E	; 78
     2a0:	fa e2       	ldi	r31, 0x2A	; 42
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <.do_copy_data_start>

000002a4 <.do_copy_data_loop>:
     2a4:	05 90       	lpm	r0, Z+
     2a6:	0d 92       	st	X+, r0

000002a8 <.do_copy_data_start>:
     2a8:	a0 3a       	cpi	r26, 0xA0	; 160
     2aa:	b1 07       	cpc	r27, r17
     2ac:	d9 f7       	brne	.-10     	; 0x2a4 <.do_copy_data_loop>

000002ae <__do_clear_bss>:
     2ae:	13 e0       	ldi	r17, 0x03	; 3
     2b0:	a0 ea       	ldi	r26, 0xA0	; 160
     2b2:	b1 e0       	ldi	r27, 0x01	; 1
     2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <.do_clear_bss_start>

000002b6 <.do_clear_bss_loop>:
     2b6:	1d 92       	st	X+, r1

000002b8 <.do_clear_bss_start>:
     2b8:	a0 3d       	cpi	r26, 0xD0	; 208
     2ba:	b1 07       	cpc	r27, r17
     2bc:	e1 f7       	brne	.-8      	; 0x2b6 <.do_clear_bss_loop>
     2be:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <main>
     2c2:	0c 94 25 15 	jmp	0x2a4a	; 0x2a4a <_exit>

000002c6 <__bad_interrupt>:
     2c6:	9c ce       	rjmp	.-712    	; 0x0 <__vectors>

000002c8 <__mulsf3>:
     2c8:	a0 e2       	ldi	r26, 0x20	; 32
     2ca:	b0 e0       	ldi	r27, 0x00	; 0
     2cc:	ea e6       	ldi	r30, 0x6A	; 106
     2ce:	f1 e0       	ldi	r31, 0x01	; 1
     2d0:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__prologue_saves__>
     2d4:	69 83       	std	Y+1, r22	; 0x01
     2d6:	7a 83       	std	Y+2, r23	; 0x02
     2d8:	8b 83       	std	Y+3, r24	; 0x03
     2da:	9c 83       	std	Y+4, r25	; 0x04
     2dc:	2d 83       	std	Y+5, r18	; 0x05
     2de:	3e 83       	std	Y+6, r19	; 0x06
     2e0:	4f 83       	std	Y+7, r20	; 0x07
     2e2:	58 87       	std	Y+8, r21	; 0x08
     2e4:	ce 01       	movw	r24, r28
     2e6:	01 96       	adiw	r24, 0x01	; 1
     2e8:	be 01       	movw	r22, r28
     2ea:	67 5f       	subi	r22, 0xF7	; 247
     2ec:	7f 4f       	sbci	r23, 0xFF	; 255
     2ee:	61 d2       	rcall	.+1218   	; 0x7b2 <__unpack_f>
     2f0:	ce 01       	movw	r24, r28
     2f2:	05 96       	adiw	r24, 0x05	; 5
     2f4:	be 01       	movw	r22, r28
     2f6:	6f 5e       	subi	r22, 0xEF	; 239
     2f8:	7f 4f       	sbci	r23, 0xFF	; 255
     2fa:	5b d2       	rcall	.+1206   	; 0x7b2 <__unpack_f>
     2fc:	99 85       	ldd	r25, Y+9	; 0x09
     2fe:	92 30       	cpi	r25, 0x02	; 2
     300:	88 f0       	brcs	.+34     	; 0x324 <__mulsf3+0x5c>
     302:	89 89       	ldd	r24, Y+17	; 0x11
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	c8 f0       	brcs	.+50     	; 0x33a <__mulsf3+0x72>
     308:	94 30       	cpi	r25, 0x04	; 4
     30a:	19 f4       	brne	.+6      	; 0x312 <__mulsf3+0x4a>
     30c:	82 30       	cpi	r24, 0x02	; 2
     30e:	51 f4       	brne	.+20     	; 0x324 <__mulsf3+0x5c>
     310:	04 c0       	rjmp	.+8      	; 0x31a <__mulsf3+0x52>
     312:	84 30       	cpi	r24, 0x04	; 4
     314:	29 f4       	brne	.+10     	; 0x320 <__mulsf3+0x58>
     316:	92 30       	cpi	r25, 0x02	; 2
     318:	81 f4       	brne	.+32     	; 0x33a <__mulsf3+0x72>
     31a:	83 e9       	ldi	r24, 0x93	; 147
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	c6 c0       	rjmp	.+396    	; 0x4ac <__mulsf3+0x1e4>
     320:	92 30       	cpi	r25, 0x02	; 2
     322:	49 f4       	brne	.+18     	; 0x336 <__mulsf3+0x6e>
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	9a 85       	ldd	r25, Y+10	; 0x0a
     328:	8a 89       	ldd	r24, Y+18	; 0x12
     32a:	98 13       	cpse	r25, r24
     32c:	21 e0       	ldi	r18, 0x01	; 1
     32e:	2a 87       	std	Y+10, r18	; 0x0a
     330:	ce 01       	movw	r24, r28
     332:	09 96       	adiw	r24, 0x09	; 9
     334:	bb c0       	rjmp	.+374    	; 0x4ac <__mulsf3+0x1e4>
     336:	82 30       	cpi	r24, 0x02	; 2
     338:	49 f4       	brne	.+18     	; 0x34c <__mulsf3+0x84>
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	9a 85       	ldd	r25, Y+10	; 0x0a
     33e:	8a 89       	ldd	r24, Y+18	; 0x12
     340:	98 13       	cpse	r25, r24
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	2a 8b       	std	Y+18, r18	; 0x12
     346:	ce 01       	movw	r24, r28
     348:	41 96       	adiw	r24, 0x11	; 17
     34a:	b0 c0       	rjmp	.+352    	; 0x4ac <__mulsf3+0x1e4>
     34c:	2d 84       	ldd	r2, Y+13	; 0x0d
     34e:	3e 84       	ldd	r3, Y+14	; 0x0e
     350:	4f 84       	ldd	r4, Y+15	; 0x0f
     352:	58 88       	ldd	r5, Y+16	; 0x10
     354:	6d 88       	ldd	r6, Y+21	; 0x15
     356:	7e 88       	ldd	r7, Y+22	; 0x16
     358:	8f 88       	ldd	r8, Y+23	; 0x17
     35a:	98 8c       	ldd	r9, Y+24	; 0x18
     35c:	ee 24       	eor	r14, r14
     35e:	ff 24       	eor	r15, r15
     360:	87 01       	movw	r16, r14
     362:	aa 24       	eor	r10, r10
     364:	bb 24       	eor	r11, r11
     366:	65 01       	movw	r12, r10
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	e0 e0       	ldi	r30, 0x00	; 0
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	c1 01       	movw	r24, r2
     376:	81 70       	andi	r24, 0x01	; 1
     378:	90 70       	andi	r25, 0x00	; 0
     37a:	89 2b       	or	r24, r25
     37c:	e9 f0       	breq	.+58     	; 0x3b8 <__mulsf3+0xf0>
     37e:	e6 0c       	add	r14, r6
     380:	f7 1c       	adc	r15, r7
     382:	08 1d       	adc	r16, r8
     384:	19 1d       	adc	r17, r9
     386:	9a 01       	movw	r18, r20
     388:	ab 01       	movw	r20, r22
     38a:	2a 0d       	add	r18, r10
     38c:	3b 1d       	adc	r19, r11
     38e:	4c 1d       	adc	r20, r12
     390:	5d 1d       	adc	r21, r13
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	a0 e0       	ldi	r26, 0x00	; 0
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e6 14       	cp	r14, r6
     39c:	f7 04       	cpc	r15, r7
     39e:	08 05       	cpc	r16, r8
     3a0:	19 05       	cpc	r17, r9
     3a2:	20 f4       	brcc	.+8      	; 0x3ac <__mulsf3+0xe4>
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	a0 e0       	ldi	r26, 0x00	; 0
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	ba 01       	movw	r22, r20
     3ae:	a9 01       	movw	r20, r18
     3b0:	48 0f       	add	r20, r24
     3b2:	59 1f       	adc	r21, r25
     3b4:	6a 1f       	adc	r22, r26
     3b6:	7b 1f       	adc	r23, r27
     3b8:	aa 0c       	add	r10, r10
     3ba:	bb 1c       	adc	r11, r11
     3bc:	cc 1c       	adc	r12, r12
     3be:	dd 1c       	adc	r13, r13
     3c0:	97 fe       	sbrs	r9, 7
     3c2:	08 c0       	rjmp	.+16     	; 0x3d4 <__mulsf3+0x10c>
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	a8 2a       	or	r10, r24
     3ce:	b9 2a       	or	r11, r25
     3d0:	ca 2a       	or	r12, r26
     3d2:	db 2a       	or	r13, r27
     3d4:	31 96       	adiw	r30, 0x01	; 1
     3d6:	e0 32       	cpi	r30, 0x20	; 32
     3d8:	f1 05       	cpc	r31, r1
     3da:	49 f0       	breq	.+18     	; 0x3ee <__mulsf3+0x126>
     3dc:	66 0c       	add	r6, r6
     3de:	77 1c       	adc	r7, r7
     3e0:	88 1c       	adc	r8, r8
     3e2:	99 1c       	adc	r9, r9
     3e4:	56 94       	lsr	r5
     3e6:	47 94       	ror	r4
     3e8:	37 94       	ror	r3
     3ea:	27 94       	ror	r2
     3ec:	c3 cf       	rjmp	.-122    	; 0x374 <__mulsf3+0xac>
     3ee:	fa 85       	ldd	r31, Y+10	; 0x0a
     3f0:	ea 89       	ldd	r30, Y+18	; 0x12
     3f2:	2b 89       	ldd	r18, Y+19	; 0x13
     3f4:	3c 89       	ldd	r19, Y+20	; 0x14
     3f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3f8:	9c 85       	ldd	r25, Y+12	; 0x0c
     3fa:	28 0f       	add	r18, r24
     3fc:	39 1f       	adc	r19, r25
     3fe:	2e 5f       	subi	r18, 0xFE	; 254
     400:	3f 4f       	sbci	r19, 0xFF	; 255
     402:	17 c0       	rjmp	.+46     	; 0x432 <__mulsf3+0x16a>
     404:	ca 01       	movw	r24, r20
     406:	81 70       	andi	r24, 0x01	; 1
     408:	90 70       	andi	r25, 0x00	; 0
     40a:	89 2b       	or	r24, r25
     40c:	61 f0       	breq	.+24     	; 0x426 <__mulsf3+0x15e>
     40e:	16 95       	lsr	r17
     410:	07 95       	ror	r16
     412:	f7 94       	ror	r15
     414:	e7 94       	ror	r14
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	a0 e0       	ldi	r26, 0x00	; 0
     41c:	b0 e8       	ldi	r27, 0x80	; 128
     41e:	e8 2a       	or	r14, r24
     420:	f9 2a       	or	r15, r25
     422:	0a 2b       	or	r16, r26
     424:	1b 2b       	or	r17, r27
     426:	76 95       	lsr	r23
     428:	67 95       	ror	r22
     42a:	57 95       	ror	r21
     42c:	47 95       	ror	r20
     42e:	2f 5f       	subi	r18, 0xFF	; 255
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	77 fd       	sbrc	r23, 7
     434:	e7 cf       	rjmp	.-50     	; 0x404 <__mulsf3+0x13c>
     436:	0c c0       	rjmp	.+24     	; 0x450 <__mulsf3+0x188>
     438:	44 0f       	add	r20, r20
     43a:	55 1f       	adc	r21, r21
     43c:	66 1f       	adc	r22, r22
     43e:	77 1f       	adc	r23, r23
     440:	17 fd       	sbrc	r17, 7
     442:	41 60       	ori	r20, 0x01	; 1
     444:	ee 0c       	add	r14, r14
     446:	ff 1c       	adc	r15, r15
     448:	00 1f       	adc	r16, r16
     44a:	11 1f       	adc	r17, r17
     44c:	21 50       	subi	r18, 0x01	; 1
     44e:	30 40       	sbci	r19, 0x00	; 0
     450:	40 30       	cpi	r20, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	59 07       	cpc	r21, r25
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	69 07       	cpc	r22, r25
     45a:	90 e4       	ldi	r25, 0x40	; 64
     45c:	79 07       	cpc	r23, r25
     45e:	60 f3       	brcs	.-40     	; 0x438 <__mulsf3+0x170>
     460:	2b 8f       	std	Y+27, r18	; 0x1b
     462:	3c 8f       	std	Y+28, r19	; 0x1c
     464:	db 01       	movw	r26, r22
     466:	ca 01       	movw	r24, r20
     468:	8f 77       	andi	r24, 0x7F	; 127
     46a:	90 70       	andi	r25, 0x00	; 0
     46c:	a0 70       	andi	r26, 0x00	; 0
     46e:	b0 70       	andi	r27, 0x00	; 0
     470:	80 34       	cpi	r24, 0x40	; 64
     472:	91 05       	cpc	r25, r1
     474:	a1 05       	cpc	r26, r1
     476:	b1 05       	cpc	r27, r1
     478:	61 f4       	brne	.+24     	; 0x492 <__mulsf3+0x1ca>
     47a:	47 fd       	sbrc	r20, 7
     47c:	0a c0       	rjmp	.+20     	; 0x492 <__mulsf3+0x1ca>
     47e:	e1 14       	cp	r14, r1
     480:	f1 04       	cpc	r15, r1
     482:	01 05       	cpc	r16, r1
     484:	11 05       	cpc	r17, r1
     486:	29 f0       	breq	.+10     	; 0x492 <__mulsf3+0x1ca>
     488:	40 5c       	subi	r20, 0xC0	; 192
     48a:	5f 4f       	sbci	r21, 0xFF	; 255
     48c:	6f 4f       	sbci	r22, 0xFF	; 255
     48e:	7f 4f       	sbci	r23, 0xFF	; 255
     490:	40 78       	andi	r20, 0x80	; 128
     492:	1a 8e       	std	Y+26, r1	; 0x1a
     494:	fe 17       	cp	r31, r30
     496:	11 f0       	breq	.+4      	; 0x49c <__mulsf3+0x1d4>
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	8a 8f       	std	Y+26, r24	; 0x1a
     49c:	4d 8f       	std	Y+29, r20	; 0x1d
     49e:	5e 8f       	std	Y+30, r21	; 0x1e
     4a0:	6f 8f       	std	Y+31, r22	; 0x1f
     4a2:	78 a3       	std	Y+32, r23	; 0x20
     4a4:	83 e0       	ldi	r24, 0x03	; 3
     4a6:	89 8f       	std	Y+25, r24	; 0x19
     4a8:	ce 01       	movw	r24, r28
     4aa:	49 96       	adiw	r24, 0x19	; 25
     4ac:	ad d0       	rcall	.+346    	; 0x608 <__pack_f>
     4ae:	a0 96       	adiw	r28, 0x20	; 32
     4b0:	e2 e1       	ldi	r30, 0x12	; 18
     4b2:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <__epilogue_restores__>

000004b6 <__divsf3>:
     4b6:	a8 e1       	ldi	r26, 0x18	; 24
     4b8:	b0 e0       	ldi	r27, 0x00	; 0
     4ba:	e1 e6       	ldi	r30, 0x61	; 97
     4bc:	f2 e0       	ldi	r31, 0x02	; 2
     4be:	0c 94 43 14 	jmp	0x2886	; 0x2886 <__prologue_saves__+0x10>
     4c2:	69 83       	std	Y+1, r22	; 0x01
     4c4:	7a 83       	std	Y+2, r23	; 0x02
     4c6:	8b 83       	std	Y+3, r24	; 0x03
     4c8:	9c 83       	std	Y+4, r25	; 0x04
     4ca:	2d 83       	std	Y+5, r18	; 0x05
     4cc:	3e 83       	std	Y+6, r19	; 0x06
     4ce:	4f 83       	std	Y+7, r20	; 0x07
     4d0:	58 87       	std	Y+8, r21	; 0x08
     4d2:	b9 e0       	ldi	r27, 0x09	; 9
     4d4:	eb 2e       	mov	r14, r27
     4d6:	f1 2c       	mov	r15, r1
     4d8:	ec 0e       	add	r14, r28
     4da:	fd 1e       	adc	r15, r29
     4dc:	ce 01       	movw	r24, r28
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	b7 01       	movw	r22, r14
     4e2:	67 d1       	rcall	.+718    	; 0x7b2 <__unpack_f>
     4e4:	8e 01       	movw	r16, r28
     4e6:	0f 5e       	subi	r16, 0xEF	; 239
     4e8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ea:	ce 01       	movw	r24, r28
     4ec:	05 96       	adiw	r24, 0x05	; 5
     4ee:	b8 01       	movw	r22, r16
     4f0:	60 d1       	rcall	.+704    	; 0x7b2 <__unpack_f>
     4f2:	29 85       	ldd	r18, Y+9	; 0x09
     4f4:	22 30       	cpi	r18, 0x02	; 2
     4f6:	08 f4       	brcc	.+2      	; 0x4fa <__divsf3+0x44>
     4f8:	7e c0       	rjmp	.+252    	; 0x5f6 <__divsf3+0x140>
     4fa:	39 89       	ldd	r19, Y+17	; 0x11
     4fc:	32 30       	cpi	r19, 0x02	; 2
     4fe:	10 f4       	brcc	.+4      	; 0x504 <__divsf3+0x4e>
     500:	b8 01       	movw	r22, r16
     502:	7c c0       	rjmp	.+248    	; 0x5fc <__divsf3+0x146>
     504:	8a 85       	ldd	r24, Y+10	; 0x0a
     506:	9a 89       	ldd	r25, Y+18	; 0x12
     508:	89 27       	eor	r24, r25
     50a:	8a 87       	std	Y+10, r24	; 0x0a
     50c:	24 30       	cpi	r18, 0x04	; 4
     50e:	11 f0       	breq	.+4      	; 0x514 <__divsf3+0x5e>
     510:	22 30       	cpi	r18, 0x02	; 2
     512:	31 f4       	brne	.+12     	; 0x520 <__divsf3+0x6a>
     514:	23 17       	cp	r18, r19
     516:	09 f0       	breq	.+2      	; 0x51a <__divsf3+0x64>
     518:	6e c0       	rjmp	.+220    	; 0x5f6 <__divsf3+0x140>
     51a:	63 e9       	ldi	r22, 0x93	; 147
     51c:	71 e0       	ldi	r23, 0x01	; 1
     51e:	6e c0       	rjmp	.+220    	; 0x5fc <__divsf3+0x146>
     520:	34 30       	cpi	r19, 0x04	; 4
     522:	39 f4       	brne	.+14     	; 0x532 <__divsf3+0x7c>
     524:	1d 86       	std	Y+13, r1	; 0x0d
     526:	1e 86       	std	Y+14, r1	; 0x0e
     528:	1f 86       	std	Y+15, r1	; 0x0f
     52a:	18 8a       	std	Y+16, r1	; 0x10
     52c:	1c 86       	std	Y+12, r1	; 0x0c
     52e:	1b 86       	std	Y+11, r1	; 0x0b
     530:	04 c0       	rjmp	.+8      	; 0x53a <__divsf3+0x84>
     532:	32 30       	cpi	r19, 0x02	; 2
     534:	21 f4       	brne	.+8      	; 0x53e <__divsf3+0x88>
     536:	84 e0       	ldi	r24, 0x04	; 4
     538:	89 87       	std	Y+9, r24	; 0x09
     53a:	b7 01       	movw	r22, r14
     53c:	5f c0       	rjmp	.+190    	; 0x5fc <__divsf3+0x146>
     53e:	2b 85       	ldd	r18, Y+11	; 0x0b
     540:	3c 85       	ldd	r19, Y+12	; 0x0c
     542:	8b 89       	ldd	r24, Y+19	; 0x13
     544:	9c 89       	ldd	r25, Y+20	; 0x14
     546:	28 1b       	sub	r18, r24
     548:	39 0b       	sbc	r19, r25
     54a:	3c 87       	std	Y+12, r19	; 0x0c
     54c:	2b 87       	std	Y+11, r18	; 0x0b
     54e:	ed 84       	ldd	r14, Y+13	; 0x0d
     550:	fe 84       	ldd	r15, Y+14	; 0x0e
     552:	0f 85       	ldd	r16, Y+15	; 0x0f
     554:	18 89       	ldd	r17, Y+16	; 0x10
     556:	ad 88       	ldd	r10, Y+21	; 0x15
     558:	be 88       	ldd	r11, Y+22	; 0x16
     55a:	cf 88       	ldd	r12, Y+23	; 0x17
     55c:	d8 8c       	ldd	r13, Y+24	; 0x18
     55e:	ea 14       	cp	r14, r10
     560:	fb 04       	cpc	r15, r11
     562:	0c 05       	cpc	r16, r12
     564:	1d 05       	cpc	r17, r13
     566:	40 f4       	brcc	.+16     	; 0x578 <__divsf3+0xc2>
     568:	ee 0c       	add	r14, r14
     56a:	ff 1c       	adc	r15, r15
     56c:	00 1f       	adc	r16, r16
     56e:	11 1f       	adc	r17, r17
     570:	21 50       	subi	r18, 0x01	; 1
     572:	30 40       	sbci	r19, 0x00	; 0
     574:	3c 87       	std	Y+12, r19	; 0x0c
     576:	2b 87       	std	Y+11, r18	; 0x0b
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e4       	ldi	r27, 0x40	; 64
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	ea 14       	cp	r14, r10
     58e:	fb 04       	cpc	r15, r11
     590:	0c 05       	cpc	r16, r12
     592:	1d 05       	cpc	r17, r13
     594:	40 f0       	brcs	.+16     	; 0x5a6 <__divsf3+0xf0>
     596:	28 2b       	or	r18, r24
     598:	39 2b       	or	r19, r25
     59a:	4a 2b       	or	r20, r26
     59c:	5b 2b       	or	r21, r27
     59e:	ea 18       	sub	r14, r10
     5a0:	fb 08       	sbc	r15, r11
     5a2:	0c 09       	sbc	r16, r12
     5a4:	1d 09       	sbc	r17, r13
     5a6:	b6 95       	lsr	r27
     5a8:	a7 95       	ror	r26
     5aa:	97 95       	ror	r25
     5ac:	87 95       	ror	r24
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	6f 5f       	subi	r22, 0xFF	; 255
     5b8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ba:	6f 31       	cpi	r22, 0x1F	; 31
     5bc:	71 05       	cpc	r23, r1
     5be:	31 f7       	brne	.-52     	; 0x58c <__divsf3+0xd6>
     5c0:	da 01       	movw	r26, r20
     5c2:	c9 01       	movw	r24, r18
     5c4:	8f 77       	andi	r24, 0x7F	; 127
     5c6:	90 70       	andi	r25, 0x00	; 0
     5c8:	a0 70       	andi	r26, 0x00	; 0
     5ca:	b0 70       	andi	r27, 0x00	; 0
     5cc:	80 34       	cpi	r24, 0x40	; 64
     5ce:	91 05       	cpc	r25, r1
     5d0:	a1 05       	cpc	r26, r1
     5d2:	b1 05       	cpc	r27, r1
     5d4:	61 f4       	brne	.+24     	; 0x5ee <__divsf3+0x138>
     5d6:	27 fd       	sbrc	r18, 7
     5d8:	0a c0       	rjmp	.+20     	; 0x5ee <__divsf3+0x138>
     5da:	e1 14       	cp	r14, r1
     5dc:	f1 04       	cpc	r15, r1
     5de:	01 05       	cpc	r16, r1
     5e0:	11 05       	cpc	r17, r1
     5e2:	29 f0       	breq	.+10     	; 0x5ee <__divsf3+0x138>
     5e4:	20 5c       	subi	r18, 0xC0	; 192
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	4f 4f       	sbci	r20, 0xFF	; 255
     5ea:	5f 4f       	sbci	r21, 0xFF	; 255
     5ec:	20 78       	andi	r18, 0x80	; 128
     5ee:	2d 87       	std	Y+13, r18	; 0x0d
     5f0:	3e 87       	std	Y+14, r19	; 0x0e
     5f2:	4f 87       	std	Y+15, r20	; 0x0f
     5f4:	58 8b       	std	Y+16, r21	; 0x10
     5f6:	be 01       	movw	r22, r28
     5f8:	67 5f       	subi	r22, 0xF7	; 247
     5fa:	7f 4f       	sbci	r23, 0xFF	; 255
     5fc:	cb 01       	movw	r24, r22
     5fe:	04 d0       	rcall	.+8      	; 0x608 <__pack_f>
     600:	68 96       	adiw	r28, 0x18	; 24
     602:	ea e0       	ldi	r30, 0x0A	; 10
     604:	0c 94 5f 14 	jmp	0x28be	; 0x28be <__epilogue_restores__+0x10>

00000608 <__pack_f>:
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	fc 01       	movw	r30, r24
     614:	e4 80       	ldd	r14, Z+4	; 0x04
     616:	f5 80       	ldd	r15, Z+5	; 0x05
     618:	06 81       	ldd	r16, Z+6	; 0x06
     61a:	17 81       	ldd	r17, Z+7	; 0x07
     61c:	d1 80       	ldd	r13, Z+1	; 0x01
     61e:	80 81       	ld	r24, Z
     620:	82 30       	cpi	r24, 0x02	; 2
     622:	48 f4       	brcc	.+18     	; 0x636 <__pack_f+0x2e>
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	a0 e1       	ldi	r26, 0x10	; 16
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	e8 2a       	or	r14, r24
     62e:	f9 2a       	or	r15, r25
     630:	0a 2b       	or	r16, r26
     632:	1b 2b       	or	r17, r27
     634:	a5 c0       	rjmp	.+330    	; 0x780 <__pack_f+0x178>
     636:	84 30       	cpi	r24, 0x04	; 4
     638:	09 f4       	brne	.+2      	; 0x63c <__pack_f+0x34>
     63a:	9f c0       	rjmp	.+318    	; 0x77a <__pack_f+0x172>
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	21 f4       	brne	.+8      	; 0x648 <__pack_f+0x40>
     640:	ee 24       	eor	r14, r14
     642:	ff 24       	eor	r15, r15
     644:	87 01       	movw	r16, r14
     646:	05 c0       	rjmp	.+10     	; 0x652 <__pack_f+0x4a>
     648:	e1 14       	cp	r14, r1
     64a:	f1 04       	cpc	r15, r1
     64c:	01 05       	cpc	r16, r1
     64e:	11 05       	cpc	r17, r1
     650:	19 f4       	brne	.+6      	; 0x658 <__pack_f+0x50>
     652:	e0 e0       	ldi	r30, 0x00	; 0
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	96 c0       	rjmp	.+300    	; 0x784 <__pack_f+0x17c>
     658:	62 81       	ldd	r22, Z+2	; 0x02
     65a:	73 81       	ldd	r23, Z+3	; 0x03
     65c:	9f ef       	ldi	r25, 0xFF	; 255
     65e:	62 38       	cpi	r22, 0x82	; 130
     660:	79 07       	cpc	r23, r25
     662:	0c f0       	brlt	.+2      	; 0x666 <__pack_f+0x5e>
     664:	5b c0       	rjmp	.+182    	; 0x71c <__pack_f+0x114>
     666:	22 e8       	ldi	r18, 0x82	; 130
     668:	3f ef       	ldi	r19, 0xFF	; 255
     66a:	26 1b       	sub	r18, r22
     66c:	37 0b       	sbc	r19, r23
     66e:	2a 31       	cpi	r18, 0x1A	; 26
     670:	31 05       	cpc	r19, r1
     672:	2c f0       	brlt	.+10     	; 0x67e <__pack_f+0x76>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	2a c0       	rjmp	.+84     	; 0x6d2 <__pack_f+0xca>
     67e:	b8 01       	movw	r22, r16
     680:	a7 01       	movw	r20, r14
     682:	02 2e       	mov	r0, r18
     684:	04 c0       	rjmp	.+8      	; 0x68e <__pack_f+0x86>
     686:	76 95       	lsr	r23
     688:	67 95       	ror	r22
     68a:	57 95       	ror	r21
     68c:	47 95       	ror	r20
     68e:	0a 94       	dec	r0
     690:	d2 f7       	brpl	.-12     	; 0x686 <__pack_f+0x7e>
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	a0 e0       	ldi	r26, 0x00	; 0
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	04 c0       	rjmp	.+8      	; 0x6a4 <__pack_f+0x9c>
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	aa 1f       	adc	r26, r26
     6a2:	bb 1f       	adc	r27, r27
     6a4:	2a 95       	dec	r18
     6a6:	d2 f7       	brpl	.-12     	; 0x69c <__pack_f+0x94>
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	a1 09       	sbc	r26, r1
     6ac:	b1 09       	sbc	r27, r1
     6ae:	8e 21       	and	r24, r14
     6b0:	9f 21       	and	r25, r15
     6b2:	a0 23       	and	r26, r16
     6b4:	b1 23       	and	r27, r17
     6b6:	00 97       	sbiw	r24, 0x00	; 0
     6b8:	a1 05       	cpc	r26, r1
     6ba:	b1 05       	cpc	r27, r1
     6bc:	21 f0       	breq	.+8      	; 0x6c6 <__pack_f+0xbe>
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	a0 e0       	ldi	r26, 0x00	; 0
     6c4:	b0 e0       	ldi	r27, 0x00	; 0
     6c6:	9a 01       	movw	r18, r20
     6c8:	ab 01       	movw	r20, r22
     6ca:	28 2b       	or	r18, r24
     6cc:	39 2b       	or	r19, r25
     6ce:	4a 2b       	or	r20, r26
     6d0:	5b 2b       	or	r21, r27
     6d2:	da 01       	movw	r26, r20
     6d4:	c9 01       	movw	r24, r18
     6d6:	8f 77       	andi	r24, 0x7F	; 127
     6d8:	90 70       	andi	r25, 0x00	; 0
     6da:	a0 70       	andi	r26, 0x00	; 0
     6dc:	b0 70       	andi	r27, 0x00	; 0
     6de:	80 34       	cpi	r24, 0x40	; 64
     6e0:	91 05       	cpc	r25, r1
     6e2:	a1 05       	cpc	r26, r1
     6e4:	b1 05       	cpc	r27, r1
     6e6:	39 f4       	brne	.+14     	; 0x6f6 <__pack_f+0xee>
     6e8:	27 ff       	sbrs	r18, 7
     6ea:	09 c0       	rjmp	.+18     	; 0x6fe <__pack_f+0xf6>
     6ec:	20 5c       	subi	r18, 0xC0	; 192
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
     6f0:	4f 4f       	sbci	r20, 0xFF	; 255
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <__pack_f+0xf6>
     6f6:	21 5c       	subi	r18, 0xC1	; 193
     6f8:	3f 4f       	sbci	r19, 0xFF	; 255
     6fa:	4f 4f       	sbci	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	e0 e0       	ldi	r30, 0x00	; 0
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	20 30       	cpi	r18, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	3a 07       	cpc	r19, r26
     708:	a0 e0       	ldi	r26, 0x00	; 0
     70a:	4a 07       	cpc	r20, r26
     70c:	a0 e4       	ldi	r26, 0x40	; 64
     70e:	5a 07       	cpc	r21, r26
     710:	10 f0       	brcs	.+4      	; 0x716 <__pack_f+0x10e>
     712:	e1 e0       	ldi	r30, 0x01	; 1
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	79 01       	movw	r14, r18
     718:	8a 01       	movw	r16, r20
     71a:	27 c0       	rjmp	.+78     	; 0x76a <__pack_f+0x162>
     71c:	60 38       	cpi	r22, 0x80	; 128
     71e:	71 05       	cpc	r23, r1
     720:	64 f5       	brge	.+88     	; 0x77a <__pack_f+0x172>
     722:	fb 01       	movw	r30, r22
     724:	e1 58       	subi	r30, 0x81	; 129
     726:	ff 4f       	sbci	r31, 0xFF	; 255
     728:	d8 01       	movw	r26, r16
     72a:	c7 01       	movw	r24, r14
     72c:	8f 77       	andi	r24, 0x7F	; 127
     72e:	90 70       	andi	r25, 0x00	; 0
     730:	a0 70       	andi	r26, 0x00	; 0
     732:	b0 70       	andi	r27, 0x00	; 0
     734:	80 34       	cpi	r24, 0x40	; 64
     736:	91 05       	cpc	r25, r1
     738:	a1 05       	cpc	r26, r1
     73a:	b1 05       	cpc	r27, r1
     73c:	39 f4       	brne	.+14     	; 0x74c <__pack_f+0x144>
     73e:	e7 fe       	sbrs	r14, 7
     740:	0d c0       	rjmp	.+26     	; 0x75c <__pack_f+0x154>
     742:	80 e4       	ldi	r24, 0x40	; 64
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	a0 e0       	ldi	r26, 0x00	; 0
     748:	b0 e0       	ldi	r27, 0x00	; 0
     74a:	04 c0       	rjmp	.+8      	; 0x754 <__pack_f+0x14c>
     74c:	8f e3       	ldi	r24, 0x3F	; 63
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	a0 e0       	ldi	r26, 0x00	; 0
     752:	b0 e0       	ldi	r27, 0x00	; 0
     754:	e8 0e       	add	r14, r24
     756:	f9 1e       	adc	r15, r25
     758:	0a 1f       	adc	r16, r26
     75a:	1b 1f       	adc	r17, r27
     75c:	17 ff       	sbrs	r17, 7
     75e:	05 c0       	rjmp	.+10     	; 0x76a <__pack_f+0x162>
     760:	16 95       	lsr	r17
     762:	07 95       	ror	r16
     764:	f7 94       	ror	r15
     766:	e7 94       	ror	r14
     768:	31 96       	adiw	r30, 0x01	; 1
     76a:	87 e0       	ldi	r24, 0x07	; 7
     76c:	16 95       	lsr	r17
     76e:	07 95       	ror	r16
     770:	f7 94       	ror	r15
     772:	e7 94       	ror	r14
     774:	8a 95       	dec	r24
     776:	d1 f7       	brne	.-12     	; 0x76c <__pack_f+0x164>
     778:	05 c0       	rjmp	.+10     	; 0x784 <__pack_f+0x17c>
     77a:	ee 24       	eor	r14, r14
     77c:	ff 24       	eor	r15, r15
     77e:	87 01       	movw	r16, r14
     780:	ef ef       	ldi	r30, 0xFF	; 255
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	6e 2f       	mov	r22, r30
     786:	67 95       	ror	r22
     788:	66 27       	eor	r22, r22
     78a:	67 95       	ror	r22
     78c:	90 2f       	mov	r25, r16
     78e:	9f 77       	andi	r25, 0x7F	; 127
     790:	d7 94       	ror	r13
     792:	dd 24       	eor	r13, r13
     794:	d7 94       	ror	r13
     796:	8e 2f       	mov	r24, r30
     798:	86 95       	lsr	r24
     79a:	49 2f       	mov	r20, r25
     79c:	46 2b       	or	r20, r22
     79e:	58 2f       	mov	r21, r24
     7a0:	5d 29       	or	r21, r13
     7a2:	b7 01       	movw	r22, r14
     7a4:	ca 01       	movw	r24, r20
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	08 95       	ret

000007b2 <__unpack_f>:
     7b2:	fc 01       	movw	r30, r24
     7b4:	db 01       	movw	r26, r22
     7b6:	40 81       	ld	r20, Z
     7b8:	51 81       	ldd	r21, Z+1	; 0x01
     7ba:	22 81       	ldd	r18, Z+2	; 0x02
     7bc:	62 2f       	mov	r22, r18
     7be:	6f 77       	andi	r22, 0x7F	; 127
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	22 1f       	adc	r18, r18
     7c4:	22 27       	eor	r18, r18
     7c6:	22 1f       	adc	r18, r18
     7c8:	93 81       	ldd	r25, Z+3	; 0x03
     7ca:	89 2f       	mov	r24, r25
     7cc:	88 0f       	add	r24, r24
     7ce:	82 2b       	or	r24, r18
     7d0:	28 2f       	mov	r18, r24
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	99 1f       	adc	r25, r25
     7d6:	99 27       	eor	r25, r25
     7d8:	99 1f       	adc	r25, r25
     7da:	11 96       	adiw	r26, 0x01	; 1
     7dc:	9c 93       	st	X, r25
     7de:	11 97       	sbiw	r26, 0x01	; 1
     7e0:	21 15       	cp	r18, r1
     7e2:	31 05       	cpc	r19, r1
     7e4:	a9 f5       	brne	.+106    	; 0x850 <__unpack_f+0x9e>
     7e6:	41 15       	cp	r20, r1
     7e8:	51 05       	cpc	r21, r1
     7ea:	61 05       	cpc	r22, r1
     7ec:	71 05       	cpc	r23, r1
     7ee:	11 f4       	brne	.+4      	; 0x7f4 <__unpack_f+0x42>
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	37 c0       	rjmp	.+110    	; 0x862 <__unpack_f+0xb0>
     7f4:	82 e8       	ldi	r24, 0x82	; 130
     7f6:	9f ef       	ldi	r25, 0xFF	; 255
     7f8:	13 96       	adiw	r26, 0x03	; 3
     7fa:	9c 93       	st	X, r25
     7fc:	8e 93       	st	-X, r24
     7fe:	12 97       	sbiw	r26, 0x02	; 2
     800:	9a 01       	movw	r18, r20
     802:	ab 01       	movw	r20, r22
     804:	67 e0       	ldi	r22, 0x07	; 7
     806:	22 0f       	add	r18, r18
     808:	33 1f       	adc	r19, r19
     80a:	44 1f       	adc	r20, r20
     80c:	55 1f       	adc	r21, r21
     80e:	6a 95       	dec	r22
     810:	d1 f7       	brne	.-12     	; 0x806 <__unpack_f+0x54>
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	8c 93       	st	X, r24
     816:	0d c0       	rjmp	.+26     	; 0x832 <__unpack_f+0x80>
     818:	22 0f       	add	r18, r18
     81a:	33 1f       	adc	r19, r19
     81c:	44 1f       	adc	r20, r20
     81e:	55 1f       	adc	r21, r21
     820:	12 96       	adiw	r26, 0x02	; 2
     822:	8d 91       	ld	r24, X+
     824:	9c 91       	ld	r25, X
     826:	13 97       	sbiw	r26, 0x03	; 3
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	13 96       	adiw	r26, 0x03	; 3
     82c:	9c 93       	st	X, r25
     82e:	8e 93       	st	-X, r24
     830:	12 97       	sbiw	r26, 0x02	; 2
     832:	20 30       	cpi	r18, 0x00	; 0
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	38 07       	cpc	r19, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	48 07       	cpc	r20, r24
     83c:	80 e4       	ldi	r24, 0x40	; 64
     83e:	58 07       	cpc	r21, r24
     840:	58 f3       	brcs	.-42     	; 0x818 <__unpack_f+0x66>
     842:	14 96       	adiw	r26, 0x04	; 4
     844:	2d 93       	st	X+, r18
     846:	3d 93       	st	X+, r19
     848:	4d 93       	st	X+, r20
     84a:	5c 93       	st	X, r21
     84c:	17 97       	sbiw	r26, 0x07	; 7
     84e:	08 95       	ret
     850:	2f 3f       	cpi	r18, 0xFF	; 255
     852:	31 05       	cpc	r19, r1
     854:	79 f4       	brne	.+30     	; 0x874 <__unpack_f+0xc2>
     856:	41 15       	cp	r20, r1
     858:	51 05       	cpc	r21, r1
     85a:	61 05       	cpc	r22, r1
     85c:	71 05       	cpc	r23, r1
     85e:	19 f4       	brne	.+6      	; 0x866 <__unpack_f+0xb4>
     860:	84 e0       	ldi	r24, 0x04	; 4
     862:	8c 93       	st	X, r24
     864:	08 95       	ret
     866:	64 ff       	sbrs	r22, 4
     868:	03 c0       	rjmp	.+6      	; 0x870 <__unpack_f+0xbe>
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	8c 93       	st	X, r24
     86e:	12 c0       	rjmp	.+36     	; 0x894 <__unpack_f+0xe2>
     870:	1c 92       	st	X, r1
     872:	10 c0       	rjmp	.+32     	; 0x894 <__unpack_f+0xe2>
     874:	2f 57       	subi	r18, 0x7F	; 127
     876:	30 40       	sbci	r19, 0x00	; 0
     878:	13 96       	adiw	r26, 0x03	; 3
     87a:	3c 93       	st	X, r19
     87c:	2e 93       	st	-X, r18
     87e:	12 97       	sbiw	r26, 0x02	; 2
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	8c 93       	st	X, r24
     884:	87 e0       	ldi	r24, 0x07	; 7
     886:	44 0f       	add	r20, r20
     888:	55 1f       	adc	r21, r21
     88a:	66 1f       	adc	r22, r22
     88c:	77 1f       	adc	r23, r23
     88e:	8a 95       	dec	r24
     890:	d1 f7       	brne	.-12     	; 0x886 <__unpack_f+0xd4>
     892:	70 64       	ori	r23, 0x40	; 64
     894:	14 96       	adiw	r26, 0x04	; 4
     896:	4d 93       	st	X+, r20
     898:	5d 93       	st	X+, r21
     89a:	6d 93       	st	X+, r22
     89c:	7c 93       	st	X, r23
     89e:	17 97       	sbiw	r26, 0x07	; 7
     8a0:	08 95       	ret

000008a2 <buttonCheck>:
	}
}

void buttonCheck() {

	RIGHT = 0; LEFT = 0;
     8a2:	10 92 a3 01 	sts	0x01A3, r1
     8a6:	10 92 a2 01 	sts	0x01A2, r1
     8aa:	10 92 a1 01 	sts	0x01A1, r1
     8ae:	10 92 a0 01 	sts	0x01A0, r1
	
	if(PINB & 0b00000010) {
     8b2:	19 9b       	sbis	0x03, 1	; 3
     8b4:	11 c0       	rjmp	.+34     	; 0x8d8 <buttonCheck+0x36>
     8b6:	84 ef       	ldi	r24, 0xF4	; 244
     8b8:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8ba:	20 e9       	ldi	r18, 0x90	; 144
     8bc:	31 e0       	ldi	r19, 0x01	; 1
     8be:	f9 01       	movw	r30, r18
     8c0:	31 97       	sbiw	r30, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <buttonCheck+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c6:	d9 f7       	brne	.-10     	; 0x8be <buttonCheck+0x1c>
	_delay_ms(50);
	if(PINB & 0b00000010) {
     8c8:	19 9b       	sbis	0x03, 1	; 3
     8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <buttonCheck+0x36>
		// Send output to PORTD.
		//PORTB |= (1<<3); //PORTB = 0b11111111;
		RIGHT = 1;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	90 93 a3 01 	sts	0x01A3, r25
     8d4:	80 93 a2 01 	sts	0x01A2, r24
	}
	}
	
	if (PINB & 0b00000001 ) {
     8d8:	18 9b       	sbis	0x03, 0	; 3
     8da:	11 c0       	rjmp	.+34     	; 0x8fe <buttonCheck+0x5c>
     8dc:	84 ef       	ldi	r24, 0xF4	; 244
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	20 e9       	ldi	r18, 0x90	; 144
     8e2:	31 e0       	ldi	r19, 0x01	; 1
     8e4:	f9 01       	movw	r30, r18
     8e6:	31 97       	sbiw	r30, 0x01	; 1
     8e8:	f1 f7       	brne	.-4      	; 0x8e6 <buttonCheck+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ec:	d9 f7       	brne	.-10     	; 0x8e4 <buttonCheck+0x42>
	_delay_ms(50);
	if (PINB & 0b00000001 ) {
     8ee:	18 9b       	sbis	0x03, 0	; 3
     8f0:	06 c0       	rjmp	.+12     	; 0x8fe <buttonCheck+0x5c>
		//PORTB |= (1<<2);
		LEFT = 1;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	90 93 a1 01 	sts	0x01A1, r25
     8fa:	80 93 a0 01 	sts	0x01A0, r24
     8fe:	08 95       	ret

00000900 <PinChangeInit>:
}

void PinChangeInit(void)
{
	//Enable PCINT0 and PCINT1 (both buttons) in the PCMSK0 register
	PCMSK0 |= (1<<PCINT0);
     900:	eb e6       	ldi	r30, 0x6B	; 107
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	81 60       	ori	r24, 0x01	; 1
     908:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT1);
     90a:	80 81       	ld	r24, Z
     90c:	82 60       	ori	r24, 0x02	; 2
     90e:	80 83       	st	Z, r24

	//Enable Pin change interrupts in the Pin Change Interrupt Control Register
	PCICR |= (1<<PCIE0);
     910:	e8 e6       	ldi	r30, 0x68	; 104
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	81 60       	ori	r24, 0x01	; 1
     918:	80 83       	st	Z, r24
	
	//Set the PCINT0 and PCINT1 interrupts to trigger on rising edge
	EICRA |= ((1<<ISC00)&&(1<<ISC01)&&(1<<ISC10)&&(1<<ISC11));
     91a:	e9 e6       	ldi	r30, 0x69	; 105
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	81 60       	ori	r24, 0x01	; 1
     922:	80 83       	st	Z, r24
		
	//Ensure to enable global interrupts as well.
	sei();
     924:	78 94       	sei
}
     926:	08 95       	ret

00000928 <__vector_9>:

ISR(PCINT0_vect) {	
     928:	1f 92       	push	r1
     92a:	0f 92       	push	r0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	0f 92       	push	r0
     930:	11 24       	eor	r1, r1
     932:	8f 93       	push	r24
     934:	9f 93       	push	r25
	RIGHT = 0; LEFT = 0;
     936:	10 92 a3 01 	sts	0x01A3, r1
     93a:	10 92 a2 01 	sts	0x01A2, r1
     93e:	10 92 a1 01 	sts	0x01A1, r1
     942:	10 92 a0 01 	sts	0x01A0, r1
	
	if(PINB & 0b00000010) {
     946:	19 9b       	sbis	0x03, 1	; 3
     948:	06 c0       	rjmp	.+12     	; 0x956 <__vector_9+0x2e>
	//_delay_ms(50);
	//if(PINB & 0b00000010) {
		// Send output to PORTD.
		//PORTB |= (1<<3); //PORTB = 0b11111111;
		RIGHT = 1;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	90 93 a3 01 	sts	0x01A3, r25
     952:	80 93 a2 01 	sts	0x01A2, r24
	//}
	}
	
	if (PINB & 0b00000001 ) {
     956:	18 9b       	sbis	0x03, 0	; 3
     958:	06 c0       	rjmp	.+12     	; 0x966 <__vector_9+0x3e>
	//_delay_ms(50);
	//if (PINB & 0b00000001 ) {
		//PORTB |= (1<<2);
		LEFT = 1;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	90 93 a1 01 	sts	0x01A1, r25
     962:	80 93 a0 01 	sts	0x01A0, r24
	}
	clear();
	draw_character('*',heroX,heroY);
	refresh();
	*/
}
     966:	9f 91       	pop	r25
     968:	8f 91       	pop	r24
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0
     970:	1f 90       	pop	r1
     972:	18 95       	reti

00000974 <TimerInit>:

void TimerInit(void)
{
	//Set to Normal Timer Mode using TCCR0A and TCCR0B
	TCCR0A &= ~((1<<WGM01)|(WGM00));
     974:	84 b5       	in	r24, 0x24	; 36
     976:	8d 7f       	andi	r24, 0xFD	; 253
     978:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~((1<<WGM02));
     97a:	85 b5       	in	r24, 0x25	; 37
     97c:	87 7f       	andi	r24, 0xF7	; 247
     97e:	85 bd       	out	0x25, r24	; 37
	
	//Set Prescaler using TCCR0B, using Clock Speed find timer speed = 1/(Clock Speed/Prescaler)
	//Prescaler = 1024
	//Timer Speed = 128 nano seconds NOT 16MHZ
	//Timer Overflow Speed = 32640 nano seconds (Timer Speed * 255) - (255 since 8-bit timer) NOT 16MHZ
	TCCR0B |= (1<<CS02)|(1<<CS00);
     980:	85 b5       	in	r24, 0x25	; 37
     982:	85 60       	ori	r24, 0x05	; 5
     984:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~((1<<CS01));
     986:	85 b5       	in	r24, 0x25	; 37
     988:	8d 7f       	andi	r24, 0xFD	; 253
     98a:	85 bd       	out	0x25, r24	; 37
	
	//Enable TOIE0 interrupt in the TIMSK0 register
	TIMSK0 |= (1<<TOIE0);
     98c:	ee e6       	ldi	r30, 0x6E	; 110
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	81 60       	ori	r24, 0x01	; 1
     994:	80 83       	st	Z, r24
	
	//Ensure to enable global interrupts as well.
	sei();
     996:	78 94       	sei
}
     998:	08 95       	ret

0000099a <setupHero>:
	zDirection[i] = randInRange(0,3);
	zombie[i] -> is_visible = 1;
	}
}

void setupHero(void) {
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
	int middle_x = screen_x/2;
	int middle_y = screen_y/2 + 5;
     9a6:	80 91 63 01 	lds	r24, 0x0163
     9aa:	90 91 64 01 	lds	r25, 0x0164
     9ae:	62 e0       	ldi	r22, 0x02	; 2
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	0e 94 14 14 	call	0x2828	; 0x2828 <__divmodhi4>
     9b6:	7b 01       	movw	r14, r22
     9b8:	85 e0       	ldi	r24, 0x05	; 5
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	e8 0e       	add	r14, r24
     9be:	f9 1e       	adc	r15, r25
	my_pointer -> x = middle_x;
     9c0:	c0 90 c2 01 	lds	r12, 0x01C2
     9c4:	d0 90 c3 01 	lds	r13, 0x01C3
     9c8:	80 91 5f 01 	lds	r24, 0x015F
     9cc:	90 91 60 01 	lds	r25, 0x0160
     9d0:	62 e0       	ldi	r22, 0x02	; 2
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	0e 94 14 14 	call	0x2828	; 0x2828 <__divmodhi4>
     9d8:	88 27       	eor	r24, r24
     9da:	77 fd       	sbrc	r23, 7
     9dc:	80 95       	com	r24
     9de:	98 2f       	mov	r25, r24
     9e0:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__floatsisf>
     9e4:	f6 01       	movw	r30, r12
     9e6:	60 83       	st	Z, r22
     9e8:	71 83       	std	Z+1, r23	; 0x01
     9ea:	82 83       	std	Z+2, r24	; 0x02
     9ec:	93 83       	std	Z+3, r25	; 0x03
	my_pointer -> y = middle_y;
     9ee:	00 27       	eor	r16, r16
     9f0:	f7 fc       	sbrc	r15, 7
     9f2:	00 95       	com	r16
     9f4:	10 2f       	mov	r17, r16
     9f6:	c8 01       	movw	r24, r16
     9f8:	b7 01       	movw	r22, r14
     9fa:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__floatsisf>
     9fe:	f6 01       	movw	r30, r12
     a00:	64 83       	std	Z+4, r22	; 0x04
     a02:	75 83       	std	Z+5, r23	; 0x05
     a04:	86 83       	std	Z+6, r24	; 0x06
     a06:	97 83       	std	Z+7, r25	; 0x07
}
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12
     a14:	08 95       	ret

00000a16 <isInPit>:
	draw_line(pitLeft,pitTop,pitLeft,pitBottom);
	draw_line(pitRight,pitTop,pitRight,pitBottom);
	
}

int isInPit(Sprite *sprite) {
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	8c 01       	movw	r16, r24
	int x = sprite -> x;
     a1c:	dc 01       	movw	r26, r24
     a1e:	6d 91       	ld	r22, X+
     a20:	7d 91       	ld	r23, X+
     a22:	8d 91       	ld	r24, X+
     a24:	9c 91       	ld	r25, X
     a26:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__fixsfsi>
     a2a:	fb 01       	movw	r30, r22
	int y = sprite -> y;
     a2c:	d8 01       	movw	r26, r16
     a2e:	14 96       	adiw	r26, 0x04	; 4
     a30:	4d 91       	ld	r20, X+
     a32:	5d 91       	ld	r21, X+
     a34:	6d 91       	ld	r22, X+
     a36:	7c 91       	ld	r23, X
     a38:	17 97       	sbiw	r26, 0x07	; 7
	if ((x > pitLeft && x < pitRight - width +1 && y > pitTop && y < pitBottom - height +1)) {
     a3a:	80 91 c0 01 	lds	r24, 0x01C0
     a3e:	90 91 c1 01 	lds	r25, 0x01C1
     a42:	8e 17       	cp	r24, r30
     a44:	9f 07       	cpc	r25, r31
     a46:	44 f5       	brge	.+80     	; 0xa98 <isInPit+0x82>
     a48:	20 91 7d 01 	lds	r18, 0x017D
     a4c:	80 91 ba 01 	lds	r24, 0x01BA
     a50:	90 91 bb 01 	lds	r25, 0x01BB
     a54:	82 1b       	sub	r24, r18
     a56:	91 09       	sbc	r25, r1
     a58:	8e 17       	cp	r24, r30
     a5a:	9f 07       	cpc	r25, r31
     a5c:	ec f0       	brlt	.+58     	; 0xa98 <isInPit+0x82>
	
}

int isInPit(Sprite *sprite) {
	int x = sprite -> x;
	int y = sprite -> y;
     a5e:	cb 01       	movw	r24, r22
     a60:	ba 01       	movw	r22, r20
     a62:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__fixsfsi>
	if ((x > pitLeft && x < pitRight - width +1 && y > pitTop && y < pitBottom - height +1)) {
     a66:	80 91 c4 01 	lds	r24, 0x01C4
     a6a:	90 91 c5 01 	lds	r25, 0x01C5
     a6e:	86 17       	cp	r24, r22
     a70:	97 07       	cpc	r25, r23
     a72:	94 f4       	brge	.+36     	; 0xa98 <isInPit+0x82>
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	20 91 7e 01 	lds	r18, 0x017E
     a7a:	80 91 be 01 	lds	r24, 0x01BE
     a7e:	90 91 bf 01 	lds	r25, 0x01BF
     a82:	82 1b       	sub	r24, r18
     a84:	91 09       	sbc	r25, r1
     a86:	86 17       	cp	r24, r22
     a88:	97 07       	cpc	r25, r23
     a8a:	0c f4       	brge	.+2      	; 0xa8e <isInPit+0x78>
     a8c:	31 e0       	ldi	r19, 0x01	; 1
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	38 27       	eor	r19, r24
     a92:	23 2f       	mov	r18, r19
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <isInPit+0x86>
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
	}
	else {
	return 0;
	}

}
     a9c:	c9 01       	movw	r24, r18
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	08 95       	ret

00000aa4 <heroForward>:
		}
		heroForward();
	}
}

void heroForward(void) {
     aa4:	6f 92       	push	r6
     aa6:	7f 92       	push	r7
     aa8:	8f 92       	push	r8
     aaa:	9f 92       	push	r9
     aac:	af 92       	push	r10
     aae:	bf 92       	push	r11
     ab0:	cf 92       	push	r12
     ab2:	df 92       	push	r13
     ab4:	ef 92       	push	r14
     ab6:	ff 92       	push	r15
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
	int HeroX = 1;
	int HeroY = 0;
	int Up,Down,Left,Right;
	
	// is hero in pit?
	if (isInPit(my_pointer)) {
     ac0:	00 91 c2 01 	lds	r16, 0x01C2
     ac4:	10 91 c3 01 	lds	r17, 0x01C3
     ac8:	c8 01       	movw	r24, r16
     aca:	a5 df       	rcall	.-182    	; 0xa16 <isInPit>
     acc:	89 2b       	or	r24, r25
     ace:	e9 f0       	breq	.+58     	; 0xb0a <__stack+0xb>
	Up = pitTop+2;
     ad0:	60 90 c4 01 	lds	r6, 0x01C4
     ad4:	70 90 c5 01 	lds	r7, 0x01C5
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	68 0e       	add	r6, r24
     ade:	79 1e       	adc	r7, r25
	Down = pitBottom - 4;
     ae0:	a0 90 be 01 	lds	r10, 0x01BE
     ae4:	b0 90 bf 01 	lds	r11, 0x01BF
     ae8:	ec ef       	ldi	r30, 0xFC	; 252
     aea:	ff ef       	ldi	r31, 0xFF	; 255
     aec:	ae 0e       	add	r10, r30
     aee:	bf 1e       	adc	r11, r31
	Left = pitLeft+2;
     af0:	80 90 c0 01 	lds	r8, 0x01C0
     af4:	90 90 c1 01 	lds	r9, 0x01C1
     af8:	88 0e       	add	r8, r24
     afa:	99 1e       	adc	r9, r25
	Right = pitRight -4;
     afc:	c0 90 ba 01 	lds	r12, 0x01BA
     b00:	d0 90 bb 01 	lds	r13, 0x01BB
     b04:	ce 0e       	add	r12, r30
     b06:	df 1e       	adc	r13, r31
     b08:	14 c0       	rjmp	.+40     	; 0xb32 <__stack+0x33>
	} else {
	Up = 10;
	Down = screen_y-1;
     b0a:	a0 90 63 01 	lds	r10, 0x0163
     b0e:	b0 90 64 01 	lds	r11, 0x0164
     b12:	08 94       	sec
     b14:	a1 08       	sbc	r10, r1
     b16:	b1 08       	sbc	r11, r1
	Left = 2;
	Right = screen_x-1;
     b18:	c0 90 5f 01 	lds	r12, 0x015F
     b1c:	d0 90 60 01 	lds	r13, 0x0160
     b20:	08 94       	sec
     b22:	c1 08       	sbc	r12, r1
     b24:	d1 08       	sbc	r13, r1
     b26:	3a e0       	ldi	r19, 0x0A	; 10
     b28:	63 2e       	mov	r6, r19
     b2a:	71 2c       	mov	r7, r1
     b2c:	22 e0       	ldi	r18, 0x02	; 2
     b2e:	82 2e       	mov	r8, r18
     b30:	91 2c       	mov	r9, r1
	}

	// update direction of movement
	if (Direction == 0) {
     b32:	80 91 6b 01 	lds	r24, 0x016B
     b36:	90 91 6c 01 	lds	r25, 0x016C
     b3a:	89 2b       	or	r24, r25
     b3c:	21 f0       	breq	.+8      	; 0xb46 <__stack+0x47>
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	e9 2e       	mov	r14, r25
     b42:	f1 2c       	mov	r15, r1
     b44:	39 c0       	rjmp	.+114    	; 0xbb8 <__stack+0xb9>
		sword -> bitmap = bitSwordDown;
     b46:	c0 91 b6 01 	lds	r28, 0x01B6
     b4a:	d0 91 b7 01 	lds	r29, 0x01B7
     b4e:	8a e8       	ldi	r24, 0x8A	; 138
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	9c 87       	std	Y+12, r25	; 0x0c
     b54:	8b 87       	std	Y+11, r24	; 0x0b
		if (gotSword) {
     b56:	80 91 b4 01 	lds	r24, 0x01B4
     b5a:	90 91 b5 01 	lds	r25, 0x01B5
     b5e:	89 2b       	or	r24, r25
     b60:	b9 f0       	breq	.+46     	; 0xb90 <__stack+0x91>
		sword -> x = my_pointer -> x;
     b62:	f8 01       	movw	r30, r16
     b64:	80 81       	ld	r24, Z
     b66:	91 81       	ldd	r25, Z+1	; 0x01
     b68:	a2 81       	ldd	r26, Z+2	; 0x02
     b6a:	b3 81       	ldd	r27, Z+3	; 0x03
     b6c:	88 83       	st	Y, r24
     b6e:	99 83       	std	Y+1, r25	; 0x01
     b70:	aa 83       	std	Y+2, r26	; 0x02
     b72:	bb 83       	std	Y+3, r27	; 0x03
		sword -> y = my_pointer -> y + 4;
     b74:	64 81       	ldd	r22, Z+4	; 0x04
     b76:	75 81       	ldd	r23, Z+5	; 0x05
     b78:	86 81       	ldd	r24, Z+6	; 0x06
     b7a:	97 81       	ldd	r25, Z+7	; 0x07
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	40 e8       	ldi	r20, 0x80	; 128
     b82:	50 e4       	ldi	r21, 0x40	; 64
     b84:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__addsf3>
     b88:	6c 83       	std	Y+4, r22	; 0x04
     b8a:	7d 83       	std	Y+5, r23	; 0x05
     b8c:	8e 83       	std	Y+6, r24	; 0x06
     b8e:	9f 83       	std	Y+7, r25	; 0x07
		}
		HeroY = 1;
		HeroX = 0;
		if (my_pointer -> y > Down) {
     b90:	b5 01       	movw	r22, r10
     b92:	88 27       	eor	r24, r24
     b94:	77 fd       	sbrc	r23, 7
     b96:	80 95       	com	r24
     b98:	98 2f       	mov	r25, r24
     b9a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__floatsisf>
     b9e:	9b 01       	movw	r18, r22
     ba0:	ac 01       	movw	r20, r24
     ba2:	f8 01       	movw	r30, r16
     ba4:	64 81       	ldd	r22, Z+4	; 0x04
     ba6:	75 81       	ldd	r23, Z+5	; 0x05
     ba8:	86 81       	ldd	r24, Z+6	; 0x06
     baa:	97 81       	ldd	r25, Z+7	; 0x07
     bac:	0e 94 2c 10 	call	0x2058	; 0x2058 <__gesf2>
     bb0:	18 16       	cp	r1, r24
     bb2:	2c f4       	brge	.+10     	; 0xbbe <__stack+0xbf>
     bb4:	ee 24       	eor	r14, r14
     bb6:	ff 24       	eor	r15, r15
     bb8:	c0 e0       	ldi	r28, 0x00	; 0
     bba:	d0 e0       	ldi	r29, 0x00	; 0
     bbc:	04 c0       	rjmp	.+8      	; 0xbc6 <__stack+0xc7>
     bbe:	ee 24       	eor	r14, r14
     bc0:	ff 24       	eor	r15, r15
     bc2:	c1 e0       	ldi	r28, 0x01	; 1
     bc4:	d0 e0       	ldi	r29, 0x00	; 0
		HeroY = 0;
		}
	}
	if (Direction == 1) {
     bc6:	80 91 6b 01 	lds	r24, 0x016B
     bca:	90 91 6c 01 	lds	r25, 0x016C
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <__stack+0xd5>
     bd2:	40 c0       	rjmp	.+128    	; 0xc54 <__stack+0x155>
		sword -> bitmap = bitSwordRight;
     bd4:	c0 91 b6 01 	lds	r28, 0x01B6
     bd8:	d0 91 b7 01 	lds	r29, 0x01B7
     bdc:	84 e8       	ldi	r24, 0x84	; 132
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	9c 87       	std	Y+12, r25	; 0x0c
     be2:	8b 87       	std	Y+11, r24	; 0x0b
		if (gotSword) {
     be4:	80 91 b4 01 	lds	r24, 0x01B4
     be8:	90 91 b5 01 	lds	r25, 0x01B5
     bec:	89 2b       	or	r24, r25
     bee:	c1 f0       	breq	.+48     	; 0xc20 <__stack+0x121>
		sword -> x = my_pointer -> x + 4;
     bf0:	f8 01       	movw	r30, r16
     bf2:	60 81       	ld	r22, Z
     bf4:	71 81       	ldd	r23, Z+1	; 0x01
     bf6:	82 81       	ldd	r24, Z+2	; 0x02
     bf8:	93 81       	ldd	r25, Z+3	; 0x03
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e8       	ldi	r20, 0x80	; 128
     c00:	50 e4       	ldi	r21, 0x40	; 64
     c02:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__addsf3>
     c06:	68 83       	st	Y, r22
     c08:	79 83       	std	Y+1, r23	; 0x01
     c0a:	8a 83       	std	Y+2, r24	; 0x02
     c0c:	9b 83       	std	Y+3, r25	; 0x03
		sword -> y = my_pointer -> y;
     c0e:	f8 01       	movw	r30, r16
     c10:	84 81       	ldd	r24, Z+4	; 0x04
     c12:	95 81       	ldd	r25, Z+5	; 0x05
     c14:	a6 81       	ldd	r26, Z+6	; 0x06
     c16:	b7 81       	ldd	r27, Z+7	; 0x07
     c18:	8c 83       	std	Y+4, r24	; 0x04
     c1a:	9d 83       	std	Y+5, r25	; 0x05
     c1c:	ae 83       	std	Y+6, r26	; 0x06
     c1e:	bf 83       	std	Y+7, r27	; 0x07
		}
		HeroX = 1;
		HeroY = 0;
		if (my_pointer -> x > Right) {
     c20:	b6 01       	movw	r22, r12
     c22:	88 27       	eor	r24, r24
     c24:	77 fd       	sbrc	r23, 7
     c26:	80 95       	com	r24
     c28:	98 2f       	mov	r25, r24
     c2a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__floatsisf>
     c2e:	9b 01       	movw	r18, r22
     c30:	ac 01       	movw	r20, r24
     c32:	f8 01       	movw	r30, r16
     c34:	60 81       	ld	r22, Z
     c36:	71 81       	ldd	r23, Z+1	; 0x01
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	0e 94 2c 10 	call	0x2058	; 0x2058 <__gesf2>
     c40:	18 16       	cp	r1, r24
     c42:	1c f4       	brge	.+6      	; 0xc4a <__stack+0x14b>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	03 c0       	rjmp	.+6      	; 0xc50 <__stack+0x151>
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	e8 2e       	mov	r14, r24
     c4e:	f1 2c       	mov	r15, r1
     c50:	c0 e0       	ldi	r28, 0x00	; 0
     c52:	d0 e0       	ldi	r29, 0x00	; 0
		HeroX = 0;
		}
	}
	if (Direction == 2) {
     c54:	80 91 6b 01 	lds	r24, 0x016B
     c58:	90 91 6c 01 	lds	r25, 0x016C
     c5c:	02 97       	sbiw	r24, 0x02	; 2
     c5e:	09 f0       	breq	.+2      	; 0xc62 <__stack+0x163>
     c60:	40 c0       	rjmp	.+128    	; 0xce2 <__stack+0x1e3>
		sword -> bitmap = bitSwordUp;
     c62:	c0 91 b6 01 	lds	r28, 0x01B6
     c66:	d0 91 b7 01 	lds	r29, 0x01B7
     c6a:	87 e8       	ldi	r24, 0x87	; 135
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	9c 87       	std	Y+12, r25	; 0x0c
     c70:	8b 87       	std	Y+11, r24	; 0x0b
		if (gotSword) {
     c72:	80 91 b4 01 	lds	r24, 0x01B4
     c76:	90 91 b5 01 	lds	r25, 0x01B5
     c7a:	89 2b       	or	r24, r25
     c7c:	b9 f0       	breq	.+46     	; 0xcac <__stack+0x1ad>
		sword -> x = my_pointer -> x;
     c7e:	f8 01       	movw	r30, r16
     c80:	80 81       	ld	r24, Z
     c82:	91 81       	ldd	r25, Z+1	; 0x01
     c84:	a2 81       	ldd	r26, Z+2	; 0x02
     c86:	b3 81       	ldd	r27, Z+3	; 0x03
     c88:	88 83       	st	Y, r24
     c8a:	99 83       	std	Y+1, r25	; 0x01
     c8c:	aa 83       	std	Y+2, r26	; 0x02
     c8e:	bb 83       	std	Y+3, r27	; 0x03
		sword -> y = my_pointer -> y - 4;
     c90:	64 81       	ldd	r22, Z+4	; 0x04
     c92:	75 81       	ldd	r23, Z+5	; 0x05
     c94:	86 81       	ldd	r24, Z+6	; 0x06
     c96:	97 81       	ldd	r25, Z+7	; 0x07
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	40 e8       	ldi	r20, 0x80	; 128
     c9e:	50 e4       	ldi	r21, 0x40	; 64
     ca0:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__subsf3>
     ca4:	6c 83       	std	Y+4, r22	; 0x04
     ca6:	7d 83       	std	Y+5, r23	; 0x05
     ca8:	8e 83       	std	Y+6, r24	; 0x06
     caa:	9f 83       	std	Y+7, r25	; 0x07
		}
		HeroY = -1;
		HeroX = 0;
		if (my_pointer -> y < Up) {
     cac:	b3 01       	movw	r22, r6
     cae:	88 27       	eor	r24, r24
     cb0:	77 fd       	sbrc	r23, 7
     cb2:	80 95       	com	r24
     cb4:	98 2f       	mov	r25, r24
     cb6:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__floatsisf>
     cba:	9b 01       	movw	r18, r22
     cbc:	ac 01       	movw	r20, r24
     cbe:	f8 01       	movw	r30, r16
     cc0:	64 81       	ldd	r22, Z+4	; 0x04
     cc2:	75 81       	ldd	r23, Z+5	; 0x05
     cc4:	86 81       	ldd	r24, Z+6	; 0x06
     cc6:	97 81       	ldd	r25, Z+7	; 0x07
     cc8:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <__cmpsf2>
     ccc:	88 23       	and	r24, r24
     cce:	2c f4       	brge	.+10     	; 0xcda <__stack+0x1db>
     cd0:	ee 24       	eor	r14, r14
     cd2:	ff 24       	eor	r15, r15
     cd4:	c0 e0       	ldi	r28, 0x00	; 0
     cd6:	d0 e0       	ldi	r29, 0x00	; 0
     cd8:	04 c0       	rjmp	.+8      	; 0xce2 <__stack+0x1e3>
     cda:	ee 24       	eor	r14, r14
     cdc:	ff 24       	eor	r15, r15
     cde:	cf ef       	ldi	r28, 0xFF	; 255
     ce0:	df ef       	ldi	r29, 0xFF	; 255
		HeroY = 0;
		}
	}
	if (Direction == 3) {
     ce2:	80 91 6b 01 	lds	r24, 0x016B
     ce6:	90 91 6c 01 	lds	r25, 0x016C
     cea:	03 97       	sbiw	r24, 0x03	; 3
     cec:	09 f0       	breq	.+2      	; 0xcf0 <__stack+0x1f1>
     cee:	40 c0       	rjmp	.+128    	; 0xd70 <__stack+0x271>
		sword -> bitmap = bitSwordLeft;
     cf0:	c0 91 b6 01 	lds	r28, 0x01B6
     cf4:	d0 91 b7 01 	lds	r29, 0x01B7
     cf8:	81 e8       	ldi	r24, 0x81	; 129
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	9c 87       	std	Y+12, r25	; 0x0c
     cfe:	8b 87       	std	Y+11, r24	; 0x0b
		if (gotSword) {
     d00:	80 91 b4 01 	lds	r24, 0x01B4
     d04:	90 91 b5 01 	lds	r25, 0x01B5
     d08:	89 2b       	or	r24, r25
     d0a:	c1 f0       	breq	.+48     	; 0xd3c <__stack+0x23d>
		sword -> x = my_pointer -> x - 4;
     d0c:	f8 01       	movw	r30, r16
     d0e:	60 81       	ld	r22, Z
     d10:	71 81       	ldd	r23, Z+1	; 0x01
     d12:	82 81       	ldd	r24, Z+2	; 0x02
     d14:	93 81       	ldd	r25, Z+3	; 0x03
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e8       	ldi	r20, 0x80	; 128
     d1c:	50 e4       	ldi	r21, 0x40	; 64
     d1e:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__subsf3>
     d22:	68 83       	st	Y, r22
     d24:	79 83       	std	Y+1, r23	; 0x01
     d26:	8a 83       	std	Y+2, r24	; 0x02
     d28:	9b 83       	std	Y+3, r25	; 0x03
		sword -> y = my_pointer -> y;
     d2a:	f8 01       	movw	r30, r16
     d2c:	84 81       	ldd	r24, Z+4	; 0x04
     d2e:	95 81       	ldd	r25, Z+5	; 0x05
     d30:	a6 81       	ldd	r26, Z+6	; 0x06
     d32:	b7 81       	ldd	r27, Z+7	; 0x07
     d34:	8c 83       	std	Y+4, r24	; 0x04
     d36:	9d 83       	std	Y+5, r25	; 0x05
     d38:	ae 83       	std	Y+6, r26	; 0x06
     d3a:	bf 83       	std	Y+7, r27	; 0x07
		}
		HeroX = -1;
		HeroY = 0;
		if (my_pointer -> x < Left) {
     d3c:	b4 01       	movw	r22, r8
     d3e:	88 27       	eor	r24, r24
     d40:	77 fd       	sbrc	r23, 7
     d42:	80 95       	com	r24
     d44:	98 2f       	mov	r25, r24
     d46:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__floatsisf>
     d4a:	9b 01       	movw	r18, r22
     d4c:	ac 01       	movw	r20, r24
     d4e:	f8 01       	movw	r30, r16
     d50:	60 81       	ld	r22, Z
     d52:	71 81       	ldd	r23, Z+1	; 0x01
     d54:	82 81       	ldd	r24, Z+2	; 0x02
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <__cmpsf2>
     d5c:	88 23       	and	r24, r24
     d5e:	1c f4       	brge	.+6      	; 0xd66 <__stack+0x267>
     d60:	ee 24       	eor	r14, r14
     d62:	ff 24       	eor	r15, r15
     d64:	03 c0       	rjmp	.+6      	; 0xd6c <__stack+0x26d>
     d66:	ee 24       	eor	r14, r14
     d68:	ea 94       	dec	r14
     d6a:	fe 2c       	mov	r15, r14
     d6c:	c0 e0       	ldi	r28, 0x00	; 0
     d6e:	d0 e0       	ldi	r29, 0x00	; 0
		HeroX = 0;
		}
	}
	
	if (isInPit(my_pointer)) {
     d70:	c8 01       	movw	r24, r16
     d72:	51 de       	rcall	.-862    	; 0xa16 <isInPit>
     d74:	89 2b       	or	r24, r25
     d76:	09 f4       	brne	.+2      	; 0xd7a <__stack+0x27b>
     d78:	81 c0       	rjmp	.+258    	; 0xe7c <__stack+0x37d>
		int x = my_pointer -> x;
     d7a:	f8 01       	movw	r30, r16
     d7c:	60 81       	ld	r22, Z
     d7e:	71 81       	ldd	r23, Z+1	; 0x01
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	93 81       	ldd	r25, Z+3	; 0x03
     d84:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__fixsfsi>
		int y = my_pointer -> y;
     d88:	f8 01       	movw	r30, r16
     d8a:	24 81       	ldd	r18, Z+4	; 0x04
     d8c:	35 81       	ldd	r19, Z+5	; 0x05
     d8e:	46 81       	ldd	r20, Z+6	; 0x06
     d90:	57 81       	ldd	r21, Z+7	; 0x07
		if (LEFT && RIGHT && x > Right ) {
     d92:	80 91 a0 01 	lds	r24, 0x01A0
     d96:	90 91 a1 01 	lds	r25, 0x01A1
     d9a:	89 2b       	or	r24, r25
     d9c:	99 f0       	breq	.+38     	; 0xdc4 <__stack+0x2c5>
     d9e:	80 91 a2 01 	lds	r24, 0x01A2
     da2:	90 91 a3 01 	lds	r25, 0x01A3
     da6:	89 2b       	or	r24, r25
     da8:	69 f0       	breq	.+26     	; 0xdc4 <__stack+0x2c5>
     daa:	c6 16       	cp	r12, r22
     dac:	d7 06       	cpc	r13, r23
     dae:	54 f4       	brge	.+20     	; 0xdc4 <__stack+0x2c5>
		
		my_pointer -> x = Right + 4;	
     db0:	84 e0       	ldi	r24, 0x04	; 4
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	c8 0e       	add	r12, r24
     db6:	d9 1e       	adc	r13, r25
     db8:	b6 01       	movw	r22, r12
     dba:	88 27       	eor	r24, r24
     dbc:	77 fd       	sbrc	r23, 7
     dbe:	80 95       	com	r24
     dc0:	98 2f       	mov	r25, r24
     dc2:	18 c0       	rjmp	.+48     	; 0xdf4 <__stack+0x2f5>
		
		} else if (LEFT && RIGHT && x < Left ) {
     dc4:	80 91 a0 01 	lds	r24, 0x01A0
     dc8:	90 91 a1 01 	lds	r25, 0x01A1
     dcc:	89 2b       	or	r24, r25
     dce:	d1 f0       	breq	.+52     	; 0xe04 <__stack+0x305>
     dd0:	80 91 a2 01 	lds	r24, 0x01A2
     dd4:	90 91 a3 01 	lds	r25, 0x01A3
     dd8:	89 2b       	or	r24, r25
     dda:	a1 f0       	breq	.+40     	; 0xe04 <__stack+0x305>
     ddc:	68 15       	cp	r22, r8
     dde:	79 05       	cpc	r23, r9
     de0:	8c f4       	brge	.+34     	; 0xe04 <__stack+0x305>
		
		my_pointer -> x = Left - 4;
     de2:	8c ef       	ldi	r24, 0xFC	; 252
     de4:	9f ef       	ldi	r25, 0xFF	; 255
     de6:	88 0e       	add	r8, r24
     de8:	99 1e       	adc	r9, r25
     dea:	b4 01       	movw	r22, r8
     dec:	88 27       	eor	r24, r24
     dee:	77 fd       	sbrc	r23, 7
     df0:	80 95       	com	r24
     df2:	98 2f       	mov	r25, r24
     df4:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__floatsisf>
     df8:	f8 01       	movw	r30, r16
     dfa:	60 83       	st	Z, r22
     dfc:	71 83       	std	Z+1, r23	; 0x01
     dfe:	82 83       	std	Z+2, r24	; 0x02
     e00:	93 83       	std	Z+3, r25	; 0x03
     e02:	3c c0       	rjmp	.+120    	; 0xe7c <__stack+0x37d>
		}
	}
	
	if (isInPit(my_pointer)) {
		int x = my_pointer -> x;
		int y = my_pointer -> y;
     e04:	ca 01       	movw	r24, r20
     e06:	b9 01       	movw	r22, r18
     e08:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__fixsfsi>
		
		} else if (LEFT && RIGHT && x < Left ) {
		
		my_pointer -> x = Left - 4;
		
		} else if (LEFT && RIGHT && y < Up ) {
     e0c:	80 91 a0 01 	lds	r24, 0x01A0
     e10:	90 91 a1 01 	lds	r25, 0x01A1
     e14:	89 2b       	or	r24, r25
     e16:	99 f0       	breq	.+38     	; 0xe3e <__stack+0x33f>
     e18:	80 91 a2 01 	lds	r24, 0x01A2
     e1c:	90 91 a3 01 	lds	r25, 0x01A3
     e20:	89 2b       	or	r24, r25
     e22:	69 f0       	breq	.+26     	; 0xe3e <__stack+0x33f>
     e24:	66 15       	cp	r22, r6
     e26:	77 05       	cpc	r23, r7
     e28:	54 f4       	brge	.+20     	; 0xe3e <__stack+0x33f>
		
		my_pointer -> y = Up - 4;
     e2a:	8c ef       	ldi	r24, 0xFC	; 252
     e2c:	9f ef       	ldi	r25, 0xFF	; 255
     e2e:	68 0e       	add	r6, r24
     e30:	79 1e       	adc	r7, r25
     e32:	b3 01       	movw	r22, r6
     e34:	88 27       	eor	r24, r24
     e36:	77 fd       	sbrc	r23, 7
     e38:	80 95       	com	r24
     e3a:	98 2f       	mov	r25, r24
     e3c:	18 c0       	rjmp	.+48     	; 0xe6e <__stack+0x36f>
		
		} else if (LEFT && RIGHT && y > Down ) {
     e3e:	80 91 a0 01 	lds	r24, 0x01A0
     e42:	90 91 a1 01 	lds	r25, 0x01A1
     e46:	89 2b       	or	r24, r25
     e48:	c9 f0       	breq	.+50     	; 0xe7c <__stack+0x37d>
     e4a:	80 91 a2 01 	lds	r24, 0x01A2
     e4e:	90 91 a3 01 	lds	r25, 0x01A3
     e52:	89 2b       	or	r24, r25
     e54:	99 f0       	breq	.+38     	; 0xe7c <__stack+0x37d>
     e56:	a6 16       	cp	r10, r22
     e58:	b7 06       	cpc	r11, r23
     e5a:	84 f4       	brge	.+32     	; 0xe7c <__stack+0x37d>
		
		my_pointer -> y = Down + 4;
     e5c:	84 e0       	ldi	r24, 0x04	; 4
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	a8 0e       	add	r10, r24
     e62:	b9 1e       	adc	r11, r25
     e64:	b5 01       	movw	r22, r10
     e66:	88 27       	eor	r24, r24
     e68:	77 fd       	sbrc	r23, 7
     e6a:	80 95       	com	r24
     e6c:	98 2f       	mov	r25, r24
     e6e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__floatsisf>
     e72:	f8 01       	movw	r30, r16
     e74:	64 83       	std	Z+4, r22	; 0x04
     e76:	75 83       	std	Z+5, r23	; 0x05
     e78:	86 83       	std	Z+6, r24	; 0x06
     e7a:	97 83       	std	Z+7, r25	; 0x07
		
		}
	}	
		
	my_pointer -> x += HeroX;
     e7c:	b7 01       	movw	r22, r14
     e7e:	88 27       	eor	r24, r24
     e80:	77 fd       	sbrc	r23, 7
     e82:	80 95       	com	r24
     e84:	98 2f       	mov	r25, r24
     e86:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__floatsisf>
     e8a:	9b 01       	movw	r18, r22
     e8c:	ac 01       	movw	r20, r24
     e8e:	f8 01       	movw	r30, r16
     e90:	60 81       	ld	r22, Z
     e92:	71 81       	ldd	r23, Z+1	; 0x01
     e94:	82 81       	ldd	r24, Z+2	; 0x02
     e96:	93 81       	ldd	r25, Z+3	; 0x03
     e98:	94 d7       	rcall	.+3880   	; 0x1dc2 <__addsf3>
     e9a:	f8 01       	movw	r30, r16
     e9c:	60 83       	st	Z, r22
     e9e:	71 83       	std	Z+1, r23	; 0x01
     ea0:	82 83       	std	Z+2, r24	; 0x02
     ea2:	93 83       	std	Z+3, r25	; 0x03
	my_pointer -> y += HeroY;
     ea4:	be 01       	movw	r22, r28
     ea6:	88 27       	eor	r24, r24
     ea8:	77 fd       	sbrc	r23, 7
     eaa:	80 95       	com	r24
     eac:	98 2f       	mov	r25, r24
     eae:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__floatsisf>
     eb2:	9b 01       	movw	r18, r22
     eb4:	ac 01       	movw	r20, r24
     eb6:	f8 01       	movw	r30, r16
     eb8:	64 81       	ldd	r22, Z+4	; 0x04
     eba:	75 81       	ldd	r23, Z+5	; 0x05
     ebc:	86 81       	ldd	r24, Z+6	; 0x06
     ebe:	97 81       	ldd	r25, Z+7	; 0x07
     ec0:	80 d7       	rcall	.+3840   	; 0x1dc2 <__addsf3>
     ec2:	f8 01       	movw	r30, r16
     ec4:	64 83       	std	Z+4, r22	; 0x04
     ec6:	75 83       	std	Z+5, r23	; 0x05
     ec8:	86 83       	std	Z+6, r24	; 0x06
     eca:	97 83       	std	Z+7, r25	; 0x07

}
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	df 90       	pop	r13
     eda:	cf 90       	pop	r12
     edc:	bf 90       	pop	r11
     ede:	af 90       	pop	r10
     ee0:	9f 90       	pop	r9
     ee2:	8f 90       	pop	r8
     ee4:	7f 90       	pop	r7
     ee6:	6f 90       	pop	r6
     ee8:	08 95       	ret

00000eea <drawPit>:

}

void drawPit(void) {

	draw_line(pitLeft,pitTop,pitRight,pitTop);
     eea:	20 91 c4 01 	lds	r18, 0x01C4
     eee:	80 91 c0 01 	lds	r24, 0x01C0
     ef2:	62 2f       	mov	r22, r18
     ef4:	40 91 ba 01 	lds	r20, 0x01BA
     ef8:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <draw_line>
	draw_line(pitLeft,pitBottom,pitRight,pitBottom);
     efc:	20 91 be 01 	lds	r18, 0x01BE
     f00:	80 91 c0 01 	lds	r24, 0x01C0
     f04:	62 2f       	mov	r22, r18
     f06:	40 91 ba 01 	lds	r20, 0x01BA
     f0a:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <draw_line>
	draw_line(pitLeft,pitTop,pitLeft,pitBottom);
     f0e:	40 91 c0 01 	lds	r20, 0x01C0
     f12:	84 2f       	mov	r24, r20
     f14:	60 91 c4 01 	lds	r22, 0x01C4
     f18:	20 91 be 01 	lds	r18, 0x01BE
     f1c:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <draw_line>
	draw_line(pitRight,pitTop,pitRight,pitBottom);
     f20:	40 91 ba 01 	lds	r20, 0x01BA
     f24:	84 2f       	mov	r24, r20
     f26:	60 91 c4 01 	lds	r22, 0x01C4
     f2a:	20 91 be 01 	lds	r18, 0x01BE
     f2e:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <draw_line>

00000f32 <drawScreen>:
	}
	
}

void drawScreen(void) {
	draw_line(0,8,screen_x_Full,8);
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	68 e0       	ldi	r22, 0x08	; 8
     f36:	40 91 61 01 	lds	r20, 0x0161
     f3a:	28 e0       	ldi	r18, 0x08	; 8
     f3c:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <draw_line>
	draw_line(0,8,0,screen_y_Full);
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	68 e0       	ldi	r22, 0x08	; 8
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	20 91 65 01 	lds	r18, 0x0165
     f4a:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <draw_line>
	draw_line(screen_x_Full,8,screen_x_Full,screen_y_Full);
     f4e:	40 91 61 01 	lds	r20, 0x0161
     f52:	84 2f       	mov	r24, r20
     f54:	68 e0       	ldi	r22, 0x08	; 8
     f56:	20 91 65 01 	lds	r18, 0x0165
     f5a:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <draw_line>
	draw_line(0,screen_y_Full,screen_x_Full,screen_y_Full);
     f5e:	20 91 65 01 	lds	r18, 0x0165
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	62 2f       	mov	r22, r18
     f66:	40 91 61 01 	lds	r20, 0x0161
     f6a:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <draw_line>
	draw_string("L: ",0,0);
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	0e 94 a2 12 	call	0x2544	; 0x2544 <draw_string>
	draw_character((0x30 + Lives),11,0);
     f7a:	80 91 7f 01 	lds	r24, 0x017F
     f7e:	80 5d       	subi	r24, 0xD0	; 208
     f80:	6b e0       	ldi	r22, 0x0B	; 11
     f82:	40 e0       	ldi	r20, 0x00	; 0
     f84:	0e 94 52 12 	call	0x24a4	; 0x24a4 <draw_character>
	draw_string("S: ", 21,0);
     f88:	84 e0       	ldi	r24, 0x04	; 4
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	65 e1       	ldi	r22, 0x15	; 21
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	0e 94 a2 12 	call	0x2544	; 0x2544 <draw_string>
	draw_character((0x30 + Score),31,0);
     f94:	80 91 b2 01 	lds	r24, 0x01B2
     f98:	80 5d       	subi	r24, 0xD0	; 208
     f9a:	6f e1       	ldi	r22, 0x1F	; 31
     f9c:	40 e0       	ldi	r20, 0x00	; 0
     f9e:	0e 94 52 12 	call	0x24a4	; 0x24a4 <draw_character>
	draw_character((0x30 + Direction),78,0);
     fa2:	80 91 6b 01 	lds	r24, 0x016B
     fa6:	90 91 6c 01 	lds	r25, 0x016C
     faa:	80 5d       	subi	r24, 0xD0	; 208
     fac:	6e e4       	ldi	r22, 0x4E	; 78
     fae:	40 e0       	ldi	r20, 0x00	; 0
     fb0:	0e 94 52 12 	call	0x24a4	; 0x24a4 <draw_character>
	draw_character((0x30 + isInPit(my_pointer)),60,0);
     fb4:	80 91 c2 01 	lds	r24, 0x01C2
     fb8:	90 91 c3 01 	lds	r25, 0x01C3
     fbc:	2c dd       	rcall	.-1448   	; 0xa16 <isInPit>
     fbe:	80 5d       	subi	r24, 0xD0	; 208
     fc0:	6c e3       	ldi	r22, 0x3C	; 60
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <draw_character>

00000fc8 <CountDown>:
	CountDown();
	Lives = 3;
	
}

void CountDown() {
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	13 e3       	ldi	r17, 0x33	; 51
     fd0:	c0 e9       	ldi	r28, 0x90	; 144
     fd2:	d1 e0       	ldi	r29, 0x01	; 1
	for (char i= 0x3; i>0x0; i--) {
		clear();
     fd4:	0e 94 30 10 	call	0x2060	; 0x2060 <clear>
		draw_string("Game Start In: ", 2,22); // 15*5 = 75 (84 - 75)/2 = 4
     fd8:	88 e0       	ldi	r24, 0x08	; 8
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	62 e0       	ldi	r22, 0x02	; 2
     fde:	46 e1       	ldi	r20, 0x16	; 22
     fe0:	0e 94 a2 12 	call	0x2544	; 0x2544 <draw_string>
		draw_character((0x30 + i), 75,22);
     fe4:	81 2f       	mov	r24, r17
     fe6:	6b e4       	ldi	r22, 0x4B	; 75
     fe8:	46 e1       	ldi	r20, 0x16	; 22
     fea:	0e 94 52 12 	call	0x24a4	; 0x24a4 <draw_character>
		refresh();
     fee:	0e 94 b7 12 	call	0x256e	; 0x256e <refresh>
     ff2:	80 e1       	ldi	r24, 0x10	; 16
     ff4:	97 e2       	ldi	r25, 0x27	; 39
     ff6:	fe 01       	movw	r30, r28
     ff8:	31 97       	sbiw	r30, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <CountDown+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffe:	d9 f7       	brne	.-10     	; 0xff6 <CountDown+0x2e>
    1000:	11 50       	subi	r17, 0x01	; 1
	Lives = 3;
	
}

void CountDown() {
	for (char i= 0x3; i>0x0; i--) {
    1002:	10 33       	cpi	r17, 0x30	; 48
    1004:	39 f7       	brne	.-50     	; 0xfd4 <CountDown+0xc>
		draw_string("Game Start In: ", 2,22); // 15*5 = 75 (84 - 75)/2 = 4
		draw_character((0x30 + i), 75,22);
		refresh();
		_delay_ms(1000);
	}
}
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	08 95       	ret

0000100e <seedWithButtonPress>:
	return out;
}

void seedWithButtonPress() {
// turn on teensy LED
PORTD |= 0b01000000;
    100e:	5e 9a       	sbi	0x0b, 6	; 11
// Configure port B for the buttons....
DDRB |= 0b00001100;
    1010:	84 b1       	in	r24, 0x04	; 4
    1012:	8c 60       	ori	r24, 0x0C	; 12
    1014:	84 b9       	out	0x04, r24	; 4
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <seedWithButtonPress+0x12>
// Wait for the button press on SW0 while iterating the seed
unsigned int seed = 0;
while (!RIGHT && !LEFT) {
seed++;
    101c:	2f 5f       	subi	r18, 0xFF	; 255
    101e:	3f 4f       	sbci	r19, 0xFF	; 255
PORTD |= 0b01000000;
// Configure port B for the buttons....
DDRB |= 0b00001100;
// Wait for the button press on SW0 while iterating the seed
unsigned int seed = 0;
while (!RIGHT && !LEFT) {
    1020:	80 91 a2 01 	lds	r24, 0x01A2
    1024:	90 91 a3 01 	lds	r25, 0x01A3
    1028:	89 2b       	or	r24, r25
    102a:	31 f4       	brne	.+12     	; 0x1038 <seedWithButtonPress+0x2a>
    102c:	80 91 a0 01 	lds	r24, 0x01A0
    1030:	90 91 a1 01 	lds	r25, 0x01A1
    1034:	89 2b       	or	r24, r25
    1036:	91 f3       	breq	.-28     	; 0x101c <seedWithButtonPress+0xe>
seed++;
}
// Seed the random number generator
srand(seed);
    1038:	c9 01       	movw	r24, r18
    103a:	0e 94 be 14 	call	0x297c	; 0x297c <srand>
// What does dgbI do? where is it from?
// dbgI((int) seed, 10);
// turn off teensy LED
PORTD = 0b00000000;
    103e:	1b b8       	out	0x0b, r1	; 11
}
    1040:	08 95       	ret

00001042 <randInRange>:
		LEFT = 0;
	}
	*/
}

int randInRange(int min, int max) {
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	8c 01       	movw	r16, r24
    104c:	7b 01       	movw	r14, r22
	int out = min + rand()%(max+1 - min);
    104e:	0e 94 bb 14 	call	0x2976	; 0x2976 <rand>
    1052:	e0 1a       	sub	r14, r16
    1054:	f1 0a       	sbc	r15, r17
    1056:	08 94       	sec
    1058:	e1 1c       	adc	r14, r1
    105a:	f1 1c       	adc	r15, r1
    105c:	b7 01       	movw	r22, r14
    105e:	0e 94 14 14 	call	0x2828	; 0x2828 <__divmodhi4>
    1062:	9c 01       	movw	r18, r24
    1064:	20 0f       	add	r18, r16
    1066:	31 1f       	adc	r19, r17
	return out;
}
    1068:	c9 01       	movw	r24, r18
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	08 95       	ret

00001074 <setupSword>:
	return 0;
	}

}

void setupSword(void) {
    1074:	8f 92       	push	r8
    1076:	9f 92       	push	r9
    1078:	af 92       	push	r10
    107a:	bf 92       	push	r11
    107c:	cf 92       	push	r12
    107e:	df 92       	push	r13
    1080:	ef 92       	push	r14
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
	int x = randInRange(2,screen_x);
    1088:	60 91 5f 01 	lds	r22, 0x015F
    108c:	70 91 60 01 	lds	r23, 0x0160
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	d6 df       	rcall	.-84     	; 0x1042 <randInRange>
    1096:	7c 01       	movw	r14, r24
	int y = randInRange(9,screen_y);
    1098:	60 91 63 01 	lds	r22, 0x0163
    109c:	70 91 64 01 	lds	r23, 0x0164
    10a0:	89 e0       	ldi	r24, 0x09	; 9
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	ce df       	rcall	.-100    	; 0x1042 <randInRange>
    10a6:	5c 01       	movw	r10, r24
	sword -> x = x;
    10a8:	80 90 b6 01 	lds	r8, 0x01B6
    10ac:	90 90 b7 01 	lds	r9, 0x01B7
    10b0:	00 27       	eor	r16, r16
    10b2:	f7 fc       	sbrc	r15, 7
    10b4:	00 95       	com	r16
    10b6:	10 2f       	mov	r17, r16
    10b8:	c8 01       	movw	r24, r16
    10ba:	b7 01       	movw	r22, r14
    10bc:	1d d7       	rcall	.+3642   	; 0x1ef8 <__floatsisf>
    10be:	f4 01       	movw	r30, r8
    10c0:	60 83       	st	Z, r22
    10c2:	71 83       	std	Z+1, r23	; 0x01
    10c4:	82 83       	std	Z+2, r24	; 0x02
    10c6:	93 83       	std	Z+3, r25	; 0x03
	sword -> y = y;
    10c8:	cc 24       	eor	r12, r12
    10ca:	b7 fc       	sbrc	r11, 7
    10cc:	c0 94       	com	r12
    10ce:	dc 2c       	mov	r13, r12
    10d0:	c6 01       	movw	r24, r12
    10d2:	b5 01       	movw	r22, r10
    10d4:	11 d7       	rcall	.+3618   	; 0x1ef8 <__floatsisf>
    10d6:	f4 01       	movw	r30, r8
    10d8:	64 83       	std	Z+4, r22	; 0x04
    10da:	75 83       	std	Z+5, r23	; 0x05
    10dc:	86 83       	std	Z+6, r24	; 0x06
    10de:	97 83       	std	Z+7, r25	; 0x07
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	ef 90       	pop	r14
    10e8:	df 90       	pop	r13
    10ea:	cf 90       	pop	r12
    10ec:	bf 90       	pop	r11
    10ee:	af 90       	pop	r10
    10f0:	9f 90       	pop	r9
    10f2:	8f 90       	pop	r8
    10f4:	08 95       	ret

000010f6 <setupPit>:
	gotSword = 1;
	}
	
}

void setupPit(void) {
    10f6:	ef 92       	push	r14
    10f8:	ff 92       	push	r15
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17

	int pitwidth = randInRange(6,12);
    10fe:	86 e0       	ldi	r24, 0x06	; 6
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	6c e0       	ldi	r22, 0x0C	; 12
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	9d df       	rcall	.-198    	; 0x1042 <randInRange>
    1108:	8c 01       	movw	r16, r24
	int pitheight = randInRange(6,12);
    110a:	86 e0       	ldi	r24, 0x06	; 6
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	6c e0       	ldi	r22, 0x0C	; 12
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	97 df       	rcall	.-210    	; 0x1042 <randInRange>
    1114:	7c 01       	movw	r14, r24
	pitLeft = randInRange(20,screen_x_Full-20);
    1116:	60 91 61 01 	lds	r22, 0x0161
    111a:	70 91 62 01 	lds	r23, 0x0162
    111e:	64 51       	subi	r22, 0x14	; 20
    1120:	70 40       	sbci	r23, 0x00	; 0
    1122:	84 e1       	ldi	r24, 0x14	; 20
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	8d df       	rcall	.-230    	; 0x1042 <randInRange>
    1128:	90 93 c1 01 	sts	0x01C1, r25
    112c:	80 93 c0 01 	sts	0x01C0, r24
	pitRight = pitLeft + pitwidth;
    1130:	80 0f       	add	r24, r16
    1132:	91 1f       	adc	r25, r17
    1134:	90 93 bb 01 	sts	0x01BB, r25
    1138:	80 93 ba 01 	sts	0x01BA, r24
	pitTop = randInRange(9+20,screen_y_Full-20);
    113c:	60 91 65 01 	lds	r22, 0x0165
    1140:	70 91 66 01 	lds	r23, 0x0166
    1144:	64 51       	subi	r22, 0x14	; 20
    1146:	70 40       	sbci	r23, 0x00	; 0
    1148:	8d e1       	ldi	r24, 0x1D	; 29
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	7a df       	rcall	.-268    	; 0x1042 <randInRange>
    114e:	90 93 c5 01 	sts	0x01C5, r25
    1152:	80 93 c4 01 	sts	0x01C4, r24
	pitBottom = pitTop + pitheight;
    1156:	8e 0d       	add	r24, r14
    1158:	9f 1d       	adc	r25, r15
    115a:	90 93 bf 01 	sts	0x01BF, r25
    115e:	80 93 be 01 	sts	0x01BE, r24
	drawPit();
    1162:	c3 de       	rcall	.-634    	; 0xeea <drawPit>

}
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	ff 90       	pop	r15
    116a:	ef 90       	pop	r14
    116c:	08 95       	ret

0000116e <setupZombies>:
	draw_character((0x30 + Direction),78,0);
	draw_character((0x30 + isInPit(my_pointer)),60,0);

}

void setupZombies(void ) {
    116e:	2f 92       	push	r2
    1170:	3f 92       	push	r3
    1172:	4f 92       	push	r4
    1174:	5f 92       	push	r5
    1176:	6f 92       	push	r6
    1178:	7f 92       	push	r7
    117a:	8f 92       	push	r8
    117c:	9f 92       	push	r9
    117e:	af 92       	push	r10
    1180:	bf 92       	push	r11
    1182:	cf 92       	push	r12
    1184:	df 92       	push	r13
    1186:	ef 92       	push	r14
    1188:	ff 92       	push	r15
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29

	int middle_x = screen_x/2;
    1192:	80 91 5f 01 	lds	r24, 0x015F
    1196:	90 91 60 01 	lds	r25, 0x0160
    119a:	62 e0       	ldi	r22, 0x02	; 2
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	0e 94 14 14 	call	0x2828	; 0x2828 <__divmodhi4>
    11a2:	4b 01       	movw	r8, r22
	int middle_y = screen_y/2 + 5;
    11a4:	80 91 63 01 	lds	r24, 0x0163
    11a8:	90 91 64 01 	lds	r25, 0x0164
    11ac:	62 e0       	ldi	r22, 0x02	; 2
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	0e 94 14 14 	call	0x2828	; 0x2828 <__divmodhi4>
    11b4:	1b 01       	movw	r2, r22
	byte x, y;
	
	for (int i = 0; i<2; i++) {
		x = randInRange(1,middle_x-10);
    11b6:	56 ef       	ldi	r21, 0xF6	; 246
    11b8:	45 2e       	mov	r4, r21
    11ba:	5f ef       	ldi	r21, 0xFF	; 255
    11bc:	55 2e       	mov	r5, r21
    11be:	48 0c       	add	r4, r8
    11c0:	59 1c       	adc	r5, r9
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	b2 01       	movw	r22, r4
    11c8:	3c df       	rcall	.-392    	; 0x1042 <randInRange>
    11ca:	a8 2e       	mov	r10, r24
		y = randInRange(9, screen_y-1);
    11cc:	60 91 63 01 	lds	r22, 0x0163
    11d0:	70 91 64 01 	lds	r23, 0x0164
    11d4:	61 50       	subi	r22, 0x01	; 1
    11d6:	70 40       	sbci	r23, 0x00	; 0
    11d8:	89 e0       	ldi	r24, 0x09	; 9
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	32 df       	rcall	.-412    	; 0x1042 <randInRange>
    11de:	e8 2e       	mov	r14, r24
		zombie[i] -> x = x;
    11e0:	60 90 c6 01 	lds	r6, 0x01C6
    11e4:	70 90 c7 01 	lds	r7, 0x01C7
    11e8:	bb 24       	eor	r11, r11
    11ea:	cc 24       	eor	r12, r12
    11ec:	dd 24       	eor	r13, r13
    11ee:	c6 01       	movw	r24, r12
    11f0:	b5 01       	movw	r22, r10
    11f2:	80 d6       	rcall	.+3328   	; 0x1ef4 <__floatunsisf>
    11f4:	f3 01       	movw	r30, r6
    11f6:	60 83       	st	Z, r22
    11f8:	71 83       	std	Z+1, r23	; 0x01
    11fa:	82 83       	std	Z+2, r24	; 0x02
    11fc:	93 83       	std	Z+3, r25	; 0x03
		zombie[i] -> y = y;
    11fe:	ff 24       	eor	r15, r15
    1200:	00 e0       	ldi	r16, 0x00	; 0
    1202:	10 e0       	ldi	r17, 0x00	; 0
    1204:	c8 01       	movw	r24, r16
    1206:	b7 01       	movw	r22, r14
    1208:	75 d6       	rcall	.+3306   	; 0x1ef4 <__floatunsisf>
    120a:	f3 01       	movw	r30, r6
    120c:	64 83       	std	Z+4, r22	; 0x04
    120e:	75 83       	std	Z+5, r23	; 0x05
    1210:	86 83       	std	Z+6, r24	; 0x06
    1212:	97 83       	std	Z+7, r25	; 0x07
	int middle_x = screen_x/2;
	int middle_y = screen_y/2 + 5;
	byte x, y;
	
	for (int i = 0; i<2; i++) {
		x = randInRange(1,middle_x-10);
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	b2 01       	movw	r22, r4
    121a:	13 df       	rcall	.-474    	; 0x1042 <randInRange>
    121c:	a8 2e       	mov	r10, r24
		y = randInRange(9, screen_y-1);
    121e:	60 91 63 01 	lds	r22, 0x0163
    1222:	70 91 64 01 	lds	r23, 0x0164
    1226:	61 50       	subi	r22, 0x01	; 1
    1228:	70 40       	sbci	r23, 0x00	; 0
    122a:	89 e0       	ldi	r24, 0x09	; 9
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	09 df       	rcall	.-494    	; 0x1042 <randInRange>
    1230:	e8 2e       	mov	r14, r24
		zombie[i] -> x = x;
    1232:	60 90 c8 01 	lds	r6, 0x01C8
    1236:	70 90 c9 01 	lds	r7, 0x01C9
    123a:	bb 24       	eor	r11, r11
    123c:	cc 24       	eor	r12, r12
    123e:	dd 24       	eor	r13, r13
    1240:	c6 01       	movw	r24, r12
    1242:	b5 01       	movw	r22, r10
    1244:	57 d6       	rcall	.+3246   	; 0x1ef4 <__floatunsisf>
    1246:	f3 01       	movw	r30, r6
    1248:	60 83       	st	Z, r22
    124a:	71 83       	std	Z+1, r23	; 0x01
    124c:	82 83       	std	Z+2, r24	; 0x02
    124e:	93 83       	std	Z+3, r25	; 0x03
		zombie[i] -> y = y;
    1250:	ff 24       	eor	r15, r15
    1252:	00 e0       	ldi	r16, 0x00	; 0
    1254:	10 e0       	ldi	r17, 0x00	; 0
    1256:	c8 01       	movw	r24, r16
    1258:	b7 01       	movw	r22, r14
    125a:	4c d6       	rcall	.+3224   	; 0x1ef4 <__floatunsisf>
    125c:	f3 01       	movw	r30, r6
    125e:	64 83       	std	Z+4, r22	; 0x04
    1260:	75 83       	std	Z+5, r23	; 0x05
    1262:	86 83       	std	Z+6, r24	; 0x06
    1264:	97 83       	std	Z+7, r25	; 0x07
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(middle_x+10,screen_x);
    1266:	8a e0       	ldi	r24, 0x0A	; 10
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	88 0e       	add	r8, r24
    126c:	99 1e       	adc	r9, r25
    126e:	60 91 5f 01 	lds	r22, 0x015F
    1272:	70 91 60 01 	lds	r23, 0x0160
    1276:	c4 01       	movw	r24, r8
    1278:	e4 de       	rcall	.-568    	; 0x1042 <randInRange>
    127a:	a8 2e       	mov	r10, r24
		y = randInRange(9, screen_y-1);
    127c:	60 91 63 01 	lds	r22, 0x0163
    1280:	70 91 64 01 	lds	r23, 0x0164
    1284:	61 50       	subi	r22, 0x01	; 1
    1286:	70 40       	sbci	r23, 0x00	; 0
    1288:	89 e0       	ldi	r24, 0x09	; 9
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	da de       	rcall	.-588    	; 0x1042 <randInRange>
    128e:	e8 2e       	mov	r14, r24
		zombie[i+2] -> x = x;
    1290:	60 90 ca 01 	lds	r6, 0x01CA
    1294:	70 90 cb 01 	lds	r7, 0x01CB
    1298:	bb 24       	eor	r11, r11
    129a:	cc 24       	eor	r12, r12
    129c:	dd 24       	eor	r13, r13
    129e:	c6 01       	movw	r24, r12
    12a0:	b5 01       	movw	r22, r10
    12a2:	28 d6       	rcall	.+3152   	; 0x1ef4 <__floatunsisf>
    12a4:	f3 01       	movw	r30, r6
    12a6:	60 83       	st	Z, r22
    12a8:	71 83       	std	Z+1, r23	; 0x01
    12aa:	82 83       	std	Z+2, r24	; 0x02
    12ac:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+2] -> y = y;
    12ae:	ff 24       	eor	r15, r15
    12b0:	00 e0       	ldi	r16, 0x00	; 0
    12b2:	10 e0       	ldi	r17, 0x00	; 0
    12b4:	c8 01       	movw	r24, r16
    12b6:	b7 01       	movw	r22, r14
    12b8:	1d d6       	rcall	.+3130   	; 0x1ef4 <__floatunsisf>
    12ba:	f3 01       	movw	r30, r6
    12bc:	64 83       	std	Z+4, r22	; 0x04
    12be:	75 83       	std	Z+5, r23	; 0x05
    12c0:	86 83       	std	Z+6, r24	; 0x06
    12c2:	97 83       	std	Z+7, r25	; 0x07
		y = randInRange(9, screen_y-1);
		zombie[i] -> x = x;
		zombie[i] -> y = y;
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(middle_x+10,screen_x);
    12c4:	60 91 5f 01 	lds	r22, 0x015F
    12c8:	70 91 60 01 	lds	r23, 0x0160
    12cc:	c4 01       	movw	r24, r8
    12ce:	b9 de       	rcall	.-654    	; 0x1042 <randInRange>
    12d0:	a8 2e       	mov	r10, r24
		y = randInRange(9, screen_y-1);
    12d2:	60 91 63 01 	lds	r22, 0x0163
    12d6:	70 91 64 01 	lds	r23, 0x0164
    12da:	61 50       	subi	r22, 0x01	; 1
    12dc:	70 40       	sbci	r23, 0x00	; 0
    12de:	89 e0       	ldi	r24, 0x09	; 9
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	af de       	rcall	.-674    	; 0x1042 <randInRange>
    12e4:	e8 2e       	mov	r14, r24
		zombie[i+2] -> x = x;
    12e6:	80 90 cc 01 	lds	r8, 0x01CC
    12ea:	90 90 cd 01 	lds	r9, 0x01CD
    12ee:	bb 24       	eor	r11, r11
    12f0:	cc 24       	eor	r12, r12
    12f2:	dd 24       	eor	r13, r13
    12f4:	c6 01       	movw	r24, r12
    12f6:	b5 01       	movw	r22, r10
    12f8:	fd d5       	rcall	.+3066   	; 0x1ef4 <__floatunsisf>
    12fa:	f4 01       	movw	r30, r8
    12fc:	60 83       	st	Z, r22
    12fe:	71 83       	std	Z+1, r23	; 0x01
    1300:	82 83       	std	Z+2, r24	; 0x02
    1302:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+2] -> y = y;
    1304:	ff 24       	eor	r15, r15
    1306:	00 e0       	ldi	r16, 0x00	; 0
    1308:	10 e0       	ldi	r17, 0x00	; 0
    130a:	c8 01       	movw	r24, r16
    130c:	b7 01       	movw	r22, r14
    130e:	f2 d5       	rcall	.+3044   	; 0x1ef4 <__floatunsisf>
    1310:	f4 01       	movw	r30, r8
    1312:	64 83       	std	Z+4, r22	; 0x04
    1314:	75 83       	std	Z+5, r23	; 0x05
    1316:	86 83       	std	Z+6, r24	; 0x06
    1318:	97 83       	std	Z+7, r25	; 0x07
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(1,screen_x);
    131a:	60 91 5f 01 	lds	r22, 0x015F
    131e:	70 91 60 01 	lds	r23, 0x0160
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	8d de       	rcall	.-742    	; 0x1042 <randInRange>
    1328:	e8 2e       	mov	r14, r24
		y = randInRange(9, middle_y-10);
    132a:	4b ef       	ldi	r20, 0xFB	; 251
    132c:	64 2e       	mov	r6, r20
    132e:	4f ef       	ldi	r20, 0xFF	; 255
    1330:	74 2e       	mov	r7, r20
    1332:	62 0c       	add	r6, r2
    1334:	73 1c       	adc	r7, r3
    1336:	89 e0       	ldi	r24, 0x09	; 9
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	b3 01       	movw	r22, r6
    133c:	82 de       	rcall	.-764    	; 0x1042 <randInRange>
    133e:	a8 2e       	mov	r10, r24
		zombie[i+4] -> x = x;
    1340:	80 90 ce 01 	lds	r8, 0x01CE
    1344:	90 90 cf 01 	lds	r9, 0x01CF
    1348:	ff 24       	eor	r15, r15
    134a:	00 e0       	ldi	r16, 0x00	; 0
    134c:	10 e0       	ldi	r17, 0x00	; 0
    134e:	c8 01       	movw	r24, r16
    1350:	b7 01       	movw	r22, r14
    1352:	d0 d5       	rcall	.+2976   	; 0x1ef4 <__floatunsisf>
    1354:	f4 01       	movw	r30, r8
    1356:	60 83       	st	Z, r22
    1358:	71 83       	std	Z+1, r23	; 0x01
    135a:	82 83       	std	Z+2, r24	; 0x02
    135c:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+4] -> y = y;
    135e:	bb 24       	eor	r11, r11
    1360:	cc 24       	eor	r12, r12
    1362:	dd 24       	eor	r13, r13
    1364:	c6 01       	movw	r24, r12
    1366:	b5 01       	movw	r22, r10
    1368:	c5 d5       	rcall	.+2954   	; 0x1ef4 <__floatunsisf>
    136a:	f4 01       	movw	r30, r8
    136c:	64 83       	std	Z+4, r22	; 0x04
    136e:	75 83       	std	Z+5, r23	; 0x05
    1370:	86 83       	std	Z+6, r24	; 0x06
    1372:	97 83       	std	Z+7, r25	; 0x07
		y = randInRange(9, screen_y-1);
		zombie[i+2] -> x = x;
		zombie[i+2] -> y = y;
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(1,screen_x);
    1374:	60 91 5f 01 	lds	r22, 0x015F
    1378:	70 91 60 01 	lds	r23, 0x0160
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	60 de       	rcall	.-832    	; 0x1042 <randInRange>
    1382:	e8 2e       	mov	r14, r24
		y = randInRange(9, middle_y-10);
    1384:	89 e0       	ldi	r24, 0x09	; 9
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	b3 01       	movw	r22, r6
    138a:	5b de       	rcall	.-842    	; 0x1042 <randInRange>
    138c:	a8 2e       	mov	r10, r24
		zombie[i+4] -> x = x;
    138e:	80 90 d0 01 	lds	r8, 0x01D0
    1392:	90 90 d1 01 	lds	r9, 0x01D1
    1396:	ff 24       	eor	r15, r15
    1398:	00 e0       	ldi	r16, 0x00	; 0
    139a:	10 e0       	ldi	r17, 0x00	; 0
    139c:	c8 01       	movw	r24, r16
    139e:	b7 01       	movw	r22, r14
    13a0:	a9 d5       	rcall	.+2898   	; 0x1ef4 <__floatunsisf>
    13a2:	f4 01       	movw	r30, r8
    13a4:	60 83       	st	Z, r22
    13a6:	71 83       	std	Z+1, r23	; 0x01
    13a8:	82 83       	std	Z+2, r24	; 0x02
    13aa:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+4] -> y = y;
    13ac:	bb 24       	eor	r11, r11
    13ae:	cc 24       	eor	r12, r12
    13b0:	dd 24       	eor	r13, r13
    13b2:	c6 01       	movw	r24, r12
    13b4:	b5 01       	movw	r22, r10
    13b6:	9e d5       	rcall	.+2876   	; 0x1ef4 <__floatunsisf>
    13b8:	f4 01       	movw	r30, r8
    13ba:	64 83       	std	Z+4, r22	; 0x04
    13bc:	75 83       	std	Z+5, r23	; 0x05
    13be:	86 83       	std	Z+6, r24	; 0x06
    13c0:	97 83       	std	Z+7, r25	; 0x07
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(1,screen_x);
    13c2:	60 91 5f 01 	lds	r22, 0x015F
    13c6:	70 91 60 01 	lds	r23, 0x0160
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	39 de       	rcall	.-910    	; 0x1042 <randInRange>
    13d0:	a8 2e       	mov	r10, r24
		y = randInRange(middle_y+10,screen_y);
    13d2:	8f e0       	ldi	r24, 0x0F	; 15
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	28 0e       	add	r2, r24
    13d8:	39 1e       	adc	r3, r25
    13da:	60 91 63 01 	lds	r22, 0x0163
    13de:	70 91 64 01 	lds	r23, 0x0164
    13e2:	c1 01       	movw	r24, r2
    13e4:	2e de       	rcall	.-932    	; 0x1042 <randInRange>
    13e6:	e8 2e       	mov	r14, r24
		zombie[i+6] -> x = x;
    13e8:	80 90 d2 01 	lds	r8, 0x01D2
    13ec:	90 90 d3 01 	lds	r9, 0x01D3
    13f0:	bb 24       	eor	r11, r11
    13f2:	cc 24       	eor	r12, r12
    13f4:	dd 24       	eor	r13, r13
    13f6:	c6 01       	movw	r24, r12
    13f8:	b5 01       	movw	r22, r10
    13fa:	7c d5       	rcall	.+2808   	; 0x1ef4 <__floatunsisf>
    13fc:	f4 01       	movw	r30, r8
    13fe:	60 83       	st	Z, r22
    1400:	71 83       	std	Z+1, r23	; 0x01
    1402:	82 83       	std	Z+2, r24	; 0x02
    1404:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+6] -> y = y;
    1406:	ff 24       	eor	r15, r15
    1408:	00 e0       	ldi	r16, 0x00	; 0
    140a:	10 e0       	ldi	r17, 0x00	; 0
    140c:	c8 01       	movw	r24, r16
    140e:	b7 01       	movw	r22, r14
    1410:	71 d5       	rcall	.+2786   	; 0x1ef4 <__floatunsisf>
    1412:	f4 01       	movw	r30, r8
    1414:	64 83       	std	Z+4, r22	; 0x04
    1416:	75 83       	std	Z+5, r23	; 0x05
    1418:	86 83       	std	Z+6, r24	; 0x06
    141a:	97 83       	std	Z+7, r25	; 0x07
		y = randInRange(9, middle_y-10);
		zombie[i+4] -> x = x;
		zombie[i+4] -> y = y;
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(1,screen_x);
    141c:	60 91 5f 01 	lds	r22, 0x015F
    1420:	70 91 60 01 	lds	r23, 0x0160
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0c de       	rcall	.-1000   	; 0x1042 <randInRange>
    142a:	e8 2e       	mov	r14, r24
		y = randInRange(middle_y+10,screen_y);
    142c:	60 91 63 01 	lds	r22, 0x0163
    1430:	70 91 64 01 	lds	r23, 0x0164
    1434:	c1 01       	movw	r24, r2
    1436:	05 de       	rcall	.-1014   	; 0x1042 <randInRange>
    1438:	a8 2e       	mov	r10, r24
		zombie[i+6] -> x = x;
    143a:	80 90 d4 01 	lds	r8, 0x01D4
    143e:	90 90 d5 01 	lds	r9, 0x01D5
    1442:	ff 24       	eor	r15, r15
    1444:	00 e0       	ldi	r16, 0x00	; 0
    1446:	10 e0       	ldi	r17, 0x00	; 0
    1448:	c8 01       	movw	r24, r16
    144a:	b7 01       	movw	r22, r14
    144c:	53 d5       	rcall	.+2726   	; 0x1ef4 <__floatunsisf>
    144e:	f4 01       	movw	r30, r8
    1450:	60 83       	st	Z, r22
    1452:	71 83       	std	Z+1, r23	; 0x01
    1454:	82 83       	std	Z+2, r24	; 0x02
    1456:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+6] -> y = y;
    1458:	bb 24       	eor	r11, r11
    145a:	cc 24       	eor	r12, r12
    145c:	dd 24       	eor	r13, r13
    145e:	c6 01       	movw	r24, r12
    1460:	b5 01       	movw	r22, r10
    1462:	48 d5       	rcall	.+2704   	; 0x1ef4 <__floatunsisf>
    1464:	f4 01       	movw	r30, r8
    1466:	64 83       	std	Z+4, r22	; 0x04
    1468:	75 83       	std	Z+5, r23	; 0x05
    146a:	86 83       	std	Z+6, r24	; 0x06
    146c:	97 83       	std	Z+7, r25	; 0x07
    146e:	c0 e0       	ldi	r28, 0x00	; 0
    1470:	d0 e0       	ldi	r29, 0x00	; 0
	}
	for (int i = 0; i<8; i++) {
	zDirection[i] = randInRange(0,3);
	zombie[i] -> is_visible = 1;
    1472:	11 e0       	ldi	r17, 0x01	; 1
		y = randInRange(middle_y+10,screen_y);
		zombie[i+6] -> x = x;
		zombie[i+6] -> y = y;
	}
	for (int i = 0; i<8; i++) {
	zDirection[i] = randInRange(0,3);
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	63 e0       	ldi	r22, 0x03	; 3
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	e2 dd       	rcall	.-1084   	; 0x1042 <randInRange>
    147e:	fe 01       	movw	r30, r28
    1480:	e3 59       	subi	r30, 0x93	; 147
    1482:	fe 4f       	sbci	r31, 0xFE	; 254
    1484:	91 83       	std	Z+1, r25	; 0x01
    1486:	80 83       	st	Z, r24
	zombie[i] -> is_visible = 1;
    1488:	fe 01       	movw	r30, r28
    148a:	ea 53       	subi	r30, 0x3A	; 58
    148c:	fe 4f       	sbci	r31, 0xFE	; 254
    148e:	01 90       	ld	r0, Z+
    1490:	f0 81       	ld	r31, Z
    1492:	e0 2d       	mov	r30, r0
    1494:	12 87       	std	Z+10, r17	; 0x0a
    1496:	22 96       	adiw	r28, 0x02	; 2
		x = randInRange(1,screen_x);
		y = randInRange(middle_y+10,screen_y);
		zombie[i+6] -> x = x;
		zombie[i+6] -> y = y;
	}
	for (int i = 0; i<8; i++) {
    1498:	c0 31       	cpi	r28, 0x10	; 16
    149a:	d1 05       	cpc	r29, r1
    149c:	59 f7       	brne	.-42     	; 0x1474 <setupZombies+0x306>
	zDirection[i] = randInRange(0,3);
	zombie[i] -> is_visible = 1;
	}
}
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	ff 90       	pop	r15
    14a8:	ef 90       	pop	r14
    14aa:	df 90       	pop	r13
    14ac:	cf 90       	pop	r12
    14ae:	bf 90       	pop	r11
    14b0:	af 90       	pop	r10
    14b2:	9f 90       	pop	r9
    14b4:	8f 90       	pop	r8
    14b6:	7f 90       	pop	r7
    14b8:	6f 90       	pop	r6
    14ba:	5f 90       	pop	r5
    14bc:	4f 90       	pop	r4
    14be:	3f 90       	pop	r3
    14c0:	2f 90       	pop	r2
    14c2:	08 95       	ret

000014c4 <zombiesForward>:
	my_pointer -> x += HeroX;
	my_pointer -> y += HeroY;

}

void zombiesForward(void) {
    14c4:	2f 92       	push	r2
    14c6:	3f 92       	push	r3
    14c8:	4f 92       	push	r4
    14ca:	5f 92       	push	r5
    14cc:	6f 92       	push	r6
    14ce:	7f 92       	push	r7
    14d0:	8f 92       	push	r8
    14d2:	9f 92       	push	r9
    14d4:	af 92       	push	r10
    14d6:	bf 92       	push	r11
    14d8:	cf 92       	push	r12
    14da:	df 92       	push	r13
    14dc:	ef 92       	push	r14
    14de:	ff 92       	push	r15
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	a6 ec       	ldi	r26, 0xC6	; 198
    14ea:	2a 2e       	mov	r2, r26
    14ec:	a1 e0       	ldi	r26, 0x01	; 1
    14ee:	3a 2e       	mov	r3, r26
    14f0:	fd e6       	ldi	r31, 0x6D	; 109
    14f2:	6f 2e       	mov	r6, r31
    14f4:	f1 e0       	ldi	r31, 0x01	; 1
    14f6:	7f 2e       	mov	r7, r31
    14f8:	44 24       	eor	r4, r4
    14fa:	55 24       	eor	r5, r5
    14fc:	cc 24       	eor	r12, r12
    14fe:	dd 24       	eor	r13, r13
	
	//for all zombies
	for (int i = 0; i<8; i++) {
		
		// change of direction with probability 5% each way
		range = randInRange(1,100);
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	64 e6       	ldi	r22, 0x64	; 100
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	9c dd       	rcall	.-1224   	; 0x1042 <randInRange>
		if (range < 6) {
    150a:	86 30       	cpi	r24, 0x06	; 6
    150c:	91 05       	cpc	r25, r1
    150e:	5c f4       	brge	.+22     	; 0x1526 <zombiesForward+0x62>
			zDirection[i] = (zDirection[i]-1);
    1510:	f3 01       	movw	r30, r6
    1512:	80 81       	ld	r24, Z
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	91 83       	std	Z+1, r25	; 0x01
    151a:	80 83       	st	Z, r24
			if (zDirection[i] < 0) {
    151c:	97 ff       	sbrs	r25, 7
    151e:	10 c0       	rjmp	.+32     	; 0x1540 <zombiesForward+0x7c>
			zDirection[i] = 3;
    1520:	83 e0       	ldi	r24, 0x03	; 3
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0b c0       	rjmp	.+22     	; 0x153c <zombiesForward+0x78>
			}
		}
		else if (range > 95) {
    1526:	80 36       	cpi	r24, 0x60	; 96
    1528:	91 05       	cpc	r25, r1
    152a:	54 f0       	brlt	.+20     	; 0x1540 <zombiesForward+0x7c>
			zDirection[i] = (zDirection[i]+1)%4;
    152c:	f3 01       	movw	r30, r6
    152e:	80 81       	ld	r24, Z
    1530:	91 81       	ldd	r25, Z+1	; 0x01
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	64 e0       	ldi	r22, 0x04	; 4
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	0e 94 14 14 	call	0x2828	; 0x2828 <__divmodhi4>
    153c:	91 83       	std	Z+1, r25	; 0x01
    153e:	80 83       	st	Z, r24
		}
		
		// is zombie in pit?
		if (isInPit(zombie[i])) {
    1540:	f1 01       	movw	r30, r2
    1542:	a0 80       	ld	r10, Z
    1544:	b1 80       	ldd	r11, Z+1	; 0x01
    1546:	c5 01       	movw	r24, r10
    1548:	66 da       	rcall	.-2868   	; 0xa16 <isInPit>
    154a:	89 2b       	or	r24, r25
    154c:	d1 f0       	breq	.+52     	; 0x1582 <zombiesForward+0xbe>
			Up = pitTop+2;
    154e:	00 91 c4 01 	lds	r16, 0x01C4
    1552:	10 91 c5 01 	lds	r17, 0x01C5
    1556:	0e 5f       	subi	r16, 0xFE	; 254
    1558:	1f 4f       	sbci	r17, 0xFF	; 255
			Down = pitBottom - 4;
    155a:	20 91 be 01 	lds	r18, 0x01BE
    155e:	30 91 bf 01 	lds	r19, 0x01BF
    1562:	24 50       	subi	r18, 0x04	; 4
    1564:	30 40       	sbci	r19, 0x00	; 0
			Left = pitLeft+2;
    1566:	80 90 c0 01 	lds	r8, 0x01C0
    156a:	90 90 c1 01 	lds	r9, 0x01C1
    156e:	82 e0       	ldi	r24, 0x02	; 2
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	88 0e       	add	r8, r24
    1574:	99 1e       	adc	r9, r25
			Right = pitRight -4;
    1576:	c0 91 ba 01 	lds	r28, 0x01BA
    157a:	d0 91 bb 01 	lds	r29, 0x01BB
    157e:	24 97       	sbiw	r28, 0x04	; 4
    1580:	10 c0       	rjmp	.+32     	; 0x15a2 <zombiesForward+0xde>
		} else {
			Up = 10;
			Down = screen_y-1;
    1582:	20 91 63 01 	lds	r18, 0x0163
    1586:	30 91 64 01 	lds	r19, 0x0164
    158a:	21 50       	subi	r18, 0x01	; 1
    158c:	30 40       	sbci	r19, 0x00	; 0
			Left = 2;
			Right = screen_x-1;
    158e:	c0 91 5f 01 	lds	r28, 0x015F
    1592:	d0 91 60 01 	lds	r29, 0x0160
    1596:	21 97       	sbiw	r28, 0x01	; 1
    1598:	e2 e0       	ldi	r30, 0x02	; 2
    159a:	8e 2e       	mov	r8, r30
    159c:	91 2c       	mov	r9, r1
    159e:	0a e0       	ldi	r16, 0x0A	; 10
    15a0:	10 e0       	ldi	r17, 0x00	; 0
		}
	
		if (zDirection[i] == 0) {
    15a2:	f3 01       	movw	r30, r6
    15a4:	e0 80       	ld	r14, Z
    15a6:	f1 80       	ldd	r15, Z+1	; 0x01
    15a8:	e1 14       	cp	r14, r1
    15aa:	f1 04       	cpc	r15, r1
    15ac:	b1 f4       	brne	.+44     	; 0x15da <zombiesForward+0x116>
			ZY = 1;
			ZX = 0;
			if ((zombie[i] -> y > Down)) {
    15ae:	b9 01       	movw	r22, r18
    15b0:	88 27       	eor	r24, r24
    15b2:	77 fd       	sbrc	r23, 7
    15b4:	80 95       	com	r24
    15b6:	98 2f       	mov	r25, r24
    15b8:	9f d4       	rcall	.+2366   	; 0x1ef8 <__floatsisf>
    15ba:	9b 01       	movw	r18, r22
    15bc:	ac 01       	movw	r20, r24
    15be:	f5 01       	movw	r30, r10
    15c0:	64 81       	ldd	r22, Z+4	; 0x04
    15c2:	75 81       	ldd	r23, Z+5	; 0x05
    15c4:	86 81       	ldd	r24, Z+6	; 0x06
    15c6:	97 81       	ldd	r25, Z+7	; 0x07
    15c8:	47 d5       	rcall	.+2702   	; 0x2058 <__gesf2>
    15ca:	18 16       	cp	r1, r24
    15cc:	0c f4       	brge	.+2      	; 0x15d0 <zombiesForward+0x10c>
    15ce:	50 c0       	rjmp	.+160    	; 0x1670 <zombiesForward+0x1ac>
    15d0:	44 24       	eor	r4, r4
    15d2:	55 24       	eor	r5, r5
    15d4:	71 e0       	ldi	r23, 0x01	; 1
    15d6:	c7 2e       	mov	r12, r23
    15d8:	d1 2c       	mov	r13, r1
			ZY = 0;
			}
		}
		if (zDirection[i] == 1) {
    15da:	f1 e0       	ldi	r31, 0x01	; 1
    15dc:	ef 16       	cp	r14, r31
    15de:	f1 04       	cpc	r15, r1
    15e0:	91 f4       	brne	.+36     	; 0x1606 <zombiesForward+0x142>
			ZX = 1;
			ZY = 0;
			if ((zombie[i] -> x > Right)) {
    15e2:	be 01       	movw	r22, r28
    15e4:	88 27       	eor	r24, r24
    15e6:	77 fd       	sbrc	r23, 7
    15e8:	80 95       	com	r24
    15ea:	98 2f       	mov	r25, r24
    15ec:	85 d4       	rcall	.+2314   	; 0x1ef8 <__floatsisf>
    15ee:	9b 01       	movw	r18, r22
    15f0:	ac 01       	movw	r20, r24
    15f2:	f5 01       	movw	r30, r10
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	2d d5       	rcall	.+2650   	; 0x2058 <__gesf2>
    15fe:	18 16       	cp	r1, r24
    1600:	0c f4       	brge	.+2      	; 0x1604 <zombiesForward+0x140>
    1602:	6f c0       	rjmp	.+222    	; 0x16e2 <zombiesForward+0x21e>
    1604:	18 c0       	rjmp	.+48     	; 0x1636 <zombiesForward+0x172>
			ZX = 0;
			}
		}
		if (zDirection[i] == 2) {
    1606:	f2 e0       	ldi	r31, 0x02	; 2
    1608:	ef 16       	cp	r14, r31
    160a:	f1 04       	cpc	r15, r1
    160c:	c9 f4       	brne	.+50     	; 0x1640 <zombiesForward+0x17c>
			ZY = -1;
			ZX = 0;
			if ((zombie[i] -> y < Up)) {
    160e:	b8 01       	movw	r22, r16
    1610:	88 27       	eor	r24, r24
    1612:	77 fd       	sbrc	r23, 7
    1614:	80 95       	com	r24
    1616:	98 2f       	mov	r25, r24
    1618:	6f d4       	rcall	.+2270   	; 0x1ef8 <__floatsisf>
    161a:	9b 01       	movw	r18, r22
    161c:	ac 01       	movw	r20, r24
    161e:	f5 01       	movw	r30, r10
    1620:	64 81       	ldd	r22, Z+4	; 0x04
    1622:	75 81       	ldd	r23, Z+5	; 0x05
    1624:	86 81       	ldd	r24, Z+6	; 0x06
    1626:	97 81       	ldd	r25, Z+7	; 0x07
    1628:	30 d4       	rcall	.+2144   	; 0x1e8a <__cmpsf2>
    162a:	87 fd       	sbrc	r24, 7
    162c:	21 c0       	rjmp	.+66     	; 0x1670 <zombiesForward+0x1ac>
    162e:	cc 24       	eor	r12, r12
    1630:	ca 94       	dec	r12
    1632:	dc 2c       	mov	r13, r12
    1634:	58 c0       	rjmp	.+176    	; 0x16e6 <zombiesForward+0x222>
    1636:	61 e0       	ldi	r22, 0x01	; 1
    1638:	46 2e       	mov	r4, r22
    163a:	51 2c       	mov	r5, r1
    163c:	cc 24       	eor	r12, r12
    163e:	dd 24       	eor	r13, r13
			ZY = 0;
			}
		}
		if (zDirection[i] == 3) {
    1640:	f3 e0       	ldi	r31, 0x03	; 3
    1642:	ef 16       	cp	r14, r31
    1644:	f1 04       	cpc	r15, r1
    1646:	c1 f4       	brne	.+48     	; 0x1678 <zombiesForward+0x1b4>
			ZX = -1;
			ZY = 0;
			if ((zombie[i] -> x < Left)) {
    1648:	b4 01       	movw	r22, r8
    164a:	88 27       	eor	r24, r24
    164c:	77 fd       	sbrc	r23, 7
    164e:	80 95       	com	r24
    1650:	98 2f       	mov	r25, r24
    1652:	52 d4       	rcall	.+2212   	; 0x1ef8 <__floatsisf>
    1654:	9b 01       	movw	r18, r22
    1656:	ac 01       	movw	r20, r24
    1658:	f5 01       	movw	r30, r10
    165a:	60 81       	ld	r22, Z
    165c:	71 81       	ldd	r23, Z+1	; 0x01
    165e:	82 81       	ldd	r24, Z+2	; 0x02
    1660:	93 81       	ldd	r25, Z+3	; 0x03
    1662:	13 d4       	rcall	.+2086   	; 0x1e8a <__cmpsf2>
    1664:	87 fd       	sbrc	r24, 7
    1666:	04 c0       	rjmp	.+8      	; 0x1670 <zombiesForward+0x1ac>
    1668:	44 24       	eor	r4, r4
    166a:	4a 94       	dec	r4
    166c:	54 2c       	mov	r5, r4
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <zombiesForward+0x1b0>
    1670:	44 24       	eor	r4, r4
    1672:	55 24       	eor	r5, r5
    1674:	cc 24       	eor	r12, r12
    1676:	dd 24       	eor	r13, r13
			ZX = 0;
			}
		}

		zombie[i] -> x += ZX;
    1678:	b2 01       	movw	r22, r4
    167a:	88 27       	eor	r24, r24
    167c:	77 fd       	sbrc	r23, 7
    167e:	80 95       	com	r24
    1680:	98 2f       	mov	r25, r24
    1682:	3a d4       	rcall	.+2164   	; 0x1ef8 <__floatsisf>
    1684:	9b 01       	movw	r18, r22
    1686:	ac 01       	movw	r20, r24
    1688:	f5 01       	movw	r30, r10
    168a:	60 81       	ld	r22, Z
    168c:	71 81       	ldd	r23, Z+1	; 0x01
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	97 d3       	rcall	.+1838   	; 0x1dc2 <__addsf3>
    1694:	f5 01       	movw	r30, r10
    1696:	60 83       	st	Z, r22
    1698:	71 83       	std	Z+1, r23	; 0x01
    169a:	82 83       	std	Z+2, r24	; 0x02
    169c:	93 83       	std	Z+3, r25	; 0x03
		zombie[i] -> y += ZY;
    169e:	f1 01       	movw	r30, r2
    16a0:	01 91       	ld	r16, Z+
    16a2:	11 91       	ld	r17, Z+
    16a4:	1f 01       	movw	r2, r30
    16a6:	b6 01       	movw	r22, r12
    16a8:	88 27       	eor	r24, r24
    16aa:	77 fd       	sbrc	r23, 7
    16ac:	80 95       	com	r24
    16ae:	98 2f       	mov	r25, r24
    16b0:	23 d4       	rcall	.+2118   	; 0x1ef8 <__floatsisf>
    16b2:	9b 01       	movw	r18, r22
    16b4:	ac 01       	movw	r20, r24
    16b6:	f8 01       	movw	r30, r16
    16b8:	64 81       	ldd	r22, Z+4	; 0x04
    16ba:	75 81       	ldd	r23, Z+5	; 0x05
    16bc:	86 81       	ldd	r24, Z+6	; 0x06
    16be:	97 81       	ldd	r25, Z+7	; 0x07
    16c0:	80 d3       	rcall	.+1792   	; 0x1dc2 <__addsf3>
    16c2:	f8 01       	movw	r30, r16
    16c4:	64 83       	std	Z+4, r22	; 0x04
    16c6:	75 83       	std	Z+5, r23	; 0x05
    16c8:	86 83       	std	Z+6, r24	; 0x06
    16ca:	97 83       	std	Z+7, r25	; 0x07
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	68 0e       	add	r6, r24
    16d2:	79 1e       	adc	r7, r25
	int range, ZX = 0;
	int ZY = 0;
	int Up,Left,Down,Right;
	
	//for all zombies
	for (int i = 0; i<8; i++) {
    16d4:	96 ed       	ldi	r25, 0xD6	; 214
    16d6:	29 16       	cp	r2, r25
    16d8:	91 e0       	ldi	r25, 0x01	; 1
    16da:	39 06       	cpc	r3, r25
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <zombiesForward+0x21c>
    16de:	10 cf       	rjmp	.-480    	; 0x1500 <zombiesForward+0x3c>
    16e0:	05 c0       	rjmp	.+10     	; 0x16ec <zombiesForward+0x228>
		zombie[i] -> x += ZX;
		zombie[i] -> y += ZY;

	}
	
}
    16e2:	cc 24       	eor	r12, r12
    16e4:	dd 24       	eor	r13, r13
    16e6:	44 24       	eor	r4, r4
    16e8:	55 24       	eor	r5, r5
    16ea:	c6 cf       	rjmp	.-116    	; 0x1678 <zombiesForward+0x1b4>
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	ff 90       	pop	r15
    16f6:	ef 90       	pop	r14
    16f8:	df 90       	pop	r13
    16fa:	cf 90       	pop	r12
    16fc:	bf 90       	pop	r11
    16fe:	af 90       	pop	r10
    1700:	9f 90       	pop	r9
    1702:	8f 90       	pop	r8
    1704:	7f 90       	pop	r7
    1706:	6f 90       	pop	r6
    1708:	5f 90       	pop	r5
    170a:	4f 90       	pop	r4
    170c:	3f 90       	pop	r3
    170e:	2f 90       	pop	r2
    1710:	08 95       	ret

00001712 <__vector_23>:
	sei();
}


ISR(TIMER0_OVF_vect)
{
    1712:	1f 92       	push	r1
    1714:	0f 92       	push	r0
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	0f 92       	push	r0
    171a:	11 24       	eor	r1, r1
    171c:	2f 93       	push	r18
    171e:	3f 93       	push	r19
    1720:	4f 93       	push	r20
    1722:	5f 93       	push	r21
    1724:	6f 93       	push	r22
    1726:	7f 93       	push	r23
    1728:	8f 93       	push	r24
    172a:	9f 93       	push	r25
    172c:	af 93       	push	r26
    172e:	bf 93       	push	r27
    1730:	ef 93       	push	r30
    1732:	ff 93       	push	r31
	//Clear the flag by writing a one
	TIFR0 |= (1<<TOV0);
    1734:	a8 9a       	sbi	0x15, 0	; 21
	//Add one to our clockCounter
	clockCounter++;
    1736:	80 91 ac 01 	lds	r24, 0x01AC
    173a:	90 91 ad 01 	lds	r25, 0x01AD
    173e:	01 96       	adiw	r24, 0x01	; 1
    1740:	90 93 ad 01 	sts	0x01AD, r25
    1744:	80 93 ac 01 	sts	0x01AC, r24
	//DEBUG LED
	//PORTB ^= (1<<PINB2);
	//Check to see if our clockCounter is greater/equal to than our MAX_CLOCK_COUNTER_FOR_100MSECOND
	if(clockCounter >= MAX_CLOCK_COUNTER_FOR_100MSECOND && GAMEON)
    1748:	80 91 ac 01 	lds	r24, 0x01AC
    174c:	90 91 ad 01 	lds	r25, 0x01AD
    1750:	05 97       	sbiw	r24, 0x05	; 5
    1752:	fc f0       	brlt	.+62     	; 0x1792 <__vector_23+0x80>
    1754:	80 91 b0 01 	lds	r24, 0x01B0
    1758:	90 91 b1 01 	lds	r25, 0x01B1
    175c:	89 2b       	or	r24, r25
    175e:	c9 f0       	breq	.+50     	; 0x1792 <__vector_23+0x80>
	{
		//PORTB ^= (1<<PINB3);
		//Reset clockCounter
		clockCounter = 0;
    1760:	10 92 ad 01 	sts	0x01AD, r1
    1764:	10 92 ac 01 	sts	0x01AC, r1
		stepsCounter++;
    1768:	80 91 ae 01 	lds	r24, 0x01AE
    176c:	90 91 af 01 	lds	r25, 0x01AF
    1770:	01 96       	adiw	r24, 0x01	; 1
    1772:	90 93 af 01 	sts	0x01AF, r25
    1776:	80 93 ae 01 	sts	0x01AE, r24
		if (stepsCounter>9) {
    177a:	80 91 ae 01 	lds	r24, 0x01AE
    177e:	90 91 af 01 	lds	r25, 0x01AF
    1782:	0a 97       	sbiw	r24, 0x0a	; 10
    1784:	2c f0       	brlt	.+10     	; 0x1790 <__vector_23+0x7e>
		stepsCounter = 0;
    1786:	10 92 af 01 	sts	0x01AF, r1
    178a:	10 92 ae 01 	sts	0x01AE, r1
		zombiesForward();		
    178e:	9a de       	rcall	.-716    	; 0x14c4 <zombiesForward>
		}
		heroForward();
    1790:	89 d9       	rcall	.-3310   	; 0xaa4 <heroForward>
	}
}
    1792:	ff 91       	pop	r31
    1794:	ef 91       	pop	r30
    1796:	bf 91       	pop	r27
    1798:	af 91       	pop	r26
    179a:	9f 91       	pop	r25
    179c:	8f 91       	pop	r24
    179e:	7f 91       	pop	r23
    17a0:	6f 91       	pop	r22
    17a2:	5f 91       	pop	r21
    17a4:	4f 91       	pop	r20
    17a6:	3f 91       	pop	r19
    17a8:	2f 91       	pop	r18
    17aa:	0f 90       	pop	r0
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	0f 90       	pop	r0
    17b0:	1f 90       	pop	r1
    17b2:	18 95       	reti

000017b4 <setupGame>:
void setupGame() {

	// SW0 and SW1 are connected to pins B0 and B1
	// LED1 and LED2 connected to pins B2 and B3
	// 0 for input 1 for output
	DDRB |= 0b00001100;
    17b4:	84 b1       	in	r24, 0x04	; 4
    17b6:	8c 60       	ori	r24, 0x0C	; 12
    17b8:	84 b9       	out	0x04, r24	; 4
    // Teensy LED is connected to D6
    DDRD |= 0b01000000;
    17ba:	56 9a       	sbi	0x0a, 6	; 10
    // turn OFF LED initially
	PORTD |= 0b00000000;
    17bc:	8b b1       	in	r24, 0x0b	; 11
    17be:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<2)||(1<<3); //not sure why this is here
    17c0:	28 9a       	sbi	0x05, 0	; 5
	
	//initialise clock
	//CLKPR |= 1 << CLKPCE;
	//CLKPR |= 1 << CLKPS0;
	CPU_PRESCALE(CPU_16MHz);
    17c2:	e1 e6       	ldi	r30, 0x61	; 97
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 e8       	ldi	r24, 0x80	; 128
    17c8:	80 83       	st	Z, r24
    17ca:	10 82       	st	Z, r1
	
	
	LCDInitialise(LCD_DEFAULT_CONTRAST);
    17cc:	8f e3       	ldi	r24, 0x3F	; 63
    17ce:	01 d7       	rcall	.+3586   	; 0x25d2 <LCDInitialise>
	clear();
    17d0:	47 d4       	rcall	.+2190   	; 0x2060 <clear>
	
	PinChangeInit();
    17d2:	96 d8       	rcall	.-3796   	; 0x900 <PinChangeInit>
	TimerInit();
    17d4:	cf d8       	rcall	.-3682   	; 0x974 <TimerInit>
	
	clear();
    17d6:	44 d4       	rcall	.+2184   	; 0x2060 <clear>
	draw_string("ZombieDash v1.0", 4,0); // 15*5 = 75 (84 - 75)/2 = 4
    17d8:	88 e1       	ldi	r24, 0x18	; 24
    17da:	91 e0       	ldi	r25, 0x01	; 1
    17dc:	64 e0       	ldi	r22, 0x04	; 4
    17de:	40 e0       	ldi	r20, 0x00	; 0
    17e0:	b1 d6       	rcall	.+3426   	; 0x2544 <draw_string>
	draw_string("Lachlan Robinson", 2,9); // 16*5 = 80 (84 - 80)/2 = 2
    17e2:	88 e2       	ldi	r24, 0x28	; 40
    17e4:	91 e0       	ldi	r25, 0x01	; 1
    17e6:	62 e0       	ldi	r22, 0x02	; 2
    17e8:	49 e0       	ldi	r20, 0x09	; 9
    17ea:	ac d6       	rcall	.+3416   	; 0x2544 <draw_string>
	draw_string("n8845409", 22, 28); // 8*5 = 40 (84 - 40)/2 = 22
    17ec:	89 e3       	ldi	r24, 0x39	; 57
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	66 e1       	ldi	r22, 0x16	; 22
    17f2:	4c e1       	ldi	r20, 0x1C	; 28
    17f4:	a7 d6       	rcall	.+3406   	; 0x2544 <draw_string>
	refresh();
    17f6:	bb d6       	rcall	.+3446   	; 0x256e <refresh>
	
	seedWithButtonPress();
    17f8:	0a dc       	rcall	.-2028   	; 0x100e <seedWithButtonPress>
	buttonCheck();
    17fa:	53 d8       	rcall	.-3930   	; 0x8a2 <buttonCheck>
	CountDown();
    17fc:	e5 db       	rcall	.-2102   	; 0xfc8 <CountDown>
	Lives = 3;
    17fe:	83 e0       	ldi	r24, 0x03	; 3
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	90 93 80 01 	sts	0x0180, r25
    1806:	80 93 7f 01 	sts	0x017F, r24
	
}
    180a:	08 95       	ret

0000180c <collision>:
	int middle_y = screen_y/2 + 5;
	my_pointer -> x = middle_x;
	my_pointer -> y = middle_y;
}

void collision(void) {
    180c:	2f 92       	push	r2
    180e:	3f 92       	push	r3
    1810:	4f 92       	push	r4
    1812:	5f 92       	push	r5
    1814:	6f 92       	push	r6
    1816:	7f 92       	push	r7
    1818:	8f 92       	push	r8
    181a:	9f 92       	push	r9
    181c:	af 92       	push	r10
    181e:	bf 92       	push	r11
    1820:	cf 92       	push	r12
    1822:	df 92       	push	r13
    1824:	ef 92       	push	r14
    1826:	ff 92       	push	r15
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29

	int middle_x = screen_x/2;
    1830:	80 91 5f 01 	lds	r24, 0x015F
    1834:	90 91 60 01 	lds	r25, 0x0160
    1838:	62 e0       	ldi	r22, 0x02	; 2
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	f5 d7       	rcall	.+4074   	; 0x2828 <__divmodhi4>
    183e:	66 2e       	mov	r6, r22
	int middle_y = screen_y/2;
    1840:	80 91 63 01 	lds	r24, 0x0163
    1844:	90 91 64 01 	lds	r25, 0x0164
    1848:	62 e0       	ldi	r22, 0x02	; 2
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	ed d7       	rcall	.+4058   	; 0x2828 <__divmodhi4>
    184e:	26 2e       	mov	r2, r22
	
	byte x = my_pointer -> x;
    1850:	c0 90 c2 01 	lds	r12, 0x01C2
    1854:	d0 90 c3 01 	lds	r13, 0x01C3
    1858:	d6 01       	movw	r26, r12
    185a:	6d 91       	ld	r22, X+
    185c:	7d 91       	ld	r23, X+
    185e:	8d 91       	ld	r24, X+
    1860:	9c 91       	ld	r25, X
    1862:	1c d3       	rcall	.+1592   	; 0x1e9c <__fixunssfsi>
    1864:	7b 01       	movw	r14, r22
    1866:	8c 01       	movw	r16, r24
	byte y = my_pointer -> y;
    1868:	f6 01       	movw	r30, r12
    186a:	64 81       	ldd	r22, Z+4	; 0x04
    186c:	75 81       	ldd	r23, Z+5	; 0x05
    186e:	86 81       	ldd	r24, Z+6	; 0x06
    1870:	97 81       	ldd	r25, Z+7	; 0x07
    1872:	14 d3       	rcall	.+1576   	; 0x1e9c <__fixunssfsi>
    1874:	36 2e       	mov	r3, r22
	
	int sx = sword -> x;
    1876:	c0 90 b6 01 	lds	r12, 0x01B6
    187a:	d0 90 b7 01 	lds	r13, 0x01B7
    187e:	d6 01       	movw	r26, r12
    1880:	6d 91       	ld	r22, X+
    1882:	7d 91       	ld	r23, X+
    1884:	8d 91       	ld	r24, X+
    1886:	9c 91       	ld	r25, X
    1888:	04 d3       	rcall	.+1544   	; 0x1e92 <__fixsfsi>
    188a:	5b 01       	movw	r10, r22
	int sy = sword -> y;
    188c:	f6 01       	movw	r30, r12
    188e:	64 81       	ldd	r22, Z+4	; 0x04
    1890:	75 81       	ldd	r23, Z+5	; 0x05
    1892:	86 81       	ldd	r24, Z+6	; 0x06
    1894:	97 81       	ldd	r25, Z+7	; 0x07
    1896:	fd d2       	rcall	.+1530   	; 0x1e92 <__fixsfsi>
    1898:	6b 01       	movw	r12, r22
    189a:	06 ec       	ldi	r16, 0xC6	; 198
    189c:	11 e0       	ldi	r17, 0x01	; 1
		if (sx > zx - width && sx < zx + width && sy > zy - height && sy < zy + height && gotSword && (zombie[i] -> is_visible == 1) ) {
			zombie[i] -> is_visible = 0;
			Score++;
		}
		
		if (x > zx - width && x < zx + width && y > zy - height && y < zy + height && (zombie[i] -> is_visible == 1) ) {
    189e:	ff 24       	eor	r15, r15
    18a0:	43 2c       	mov	r4, r3
    18a2:	55 24       	eor	r5, r5
    18a4:	b0 e9       	ldi	r27, 0x90	; 144
    18a6:	8b 2e       	mov	r8, r27
    18a8:	b1 e0       	ldi	r27, 0x01	; 1
    18aa:	9b 2e       	mov	r9, r27
				setupZombies();
			}
			else {
				_delay_ms(300);
				clear();
				draw_string("Game OVER!", middle_x-25,middle_y);
    18ac:	f7 ee       	ldi	r31, 0xE7	; 231
    18ae:	6f 0e       	add	r6, r31
	int sx = sword -> x;
	int sy = sword -> y;
	
	// checking zombie collisions
	for (int i = 0; i<8; i++) {
		byte zx = zombie[i] -> x;
    18b0:	d8 01       	movw	r26, r16
    18b2:	cd 91       	ld	r28, X+
    18b4:	dc 91       	ld	r29, X
		byte zy = zombie[i] -> y;
    18b6:	6c 81       	ldd	r22, Y+4	; 0x04
    18b8:	7d 81       	ldd	r23, Y+5	; 0x05
    18ba:	8e 81       	ldd	r24, Y+6	; 0x06
    18bc:	9f 81       	ldd	r25, Y+7	; 0x07
    18be:	ee d2       	rcall	.+1500   	; 0x1e9c <__fixunssfsi>
    18c0:	76 2e       	mov	r7, r22
		
		if (sx > zx - width && sx < zx + width && sy > zy - height && sy < zy + height && gotSword && (zombie[i] -> is_visible == 1) ) {
    18c2:	68 81       	ld	r22, Y
    18c4:	79 81       	ldd	r23, Y+1	; 0x01
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ca:	e8 d2       	rcall	.+1488   	; 0x1e9c <__fixunssfsi>
    18cc:	70 e0       	ldi	r23, 0x00	; 0
    18ce:	80 91 7d 01 	lds	r24, 0x017D
    18d2:	e8 2f       	mov	r30, r24
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	db 01       	movw	r26, r22
    18d8:	ae 1b       	sub	r26, r30
    18da:	bf 0b       	sbc	r27, r31
    18dc:	aa 15       	cp	r26, r10
    18de:	bb 05       	cpc	r27, r11
    18e0:	54 f5       	brge	.+84     	; 0x1936 <collision+0x12a>
    18e2:	cb 01       	movw	r24, r22
    18e4:	8e 0f       	add	r24, r30
    18e6:	9f 1f       	adc	r25, r31
    18e8:	a8 16       	cp	r10, r24
    18ea:	b9 06       	cpc	r11, r25
    18ec:	24 f5       	brge	.+72     	; 0x1936 <collision+0x12a>
    18ee:	27 2d       	mov	r18, r7
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	80 91 7e 01 	lds	r24, 0x017E
    18f6:	48 2f       	mov	r20, r24
    18f8:	50 e0       	ldi	r21, 0x00	; 0
    18fa:	c9 01       	movw	r24, r18
    18fc:	84 1b       	sub	r24, r20
    18fe:	95 0b       	sbc	r25, r21
    1900:	8c 15       	cp	r24, r12
    1902:	9d 05       	cpc	r25, r13
    1904:	c4 f4       	brge	.+48     	; 0x1936 <collision+0x12a>
    1906:	24 0f       	add	r18, r20
    1908:	35 1f       	adc	r19, r21
    190a:	c2 16       	cp	r12, r18
    190c:	d3 06       	cpc	r13, r19
    190e:	9c f4       	brge	.+38     	; 0x1936 <collision+0x12a>
    1910:	80 91 b4 01 	lds	r24, 0x01B4
    1914:	90 91 b5 01 	lds	r25, 0x01B5
    1918:	89 2b       	or	r24, r25
    191a:	69 f0       	breq	.+26     	; 0x1936 <collision+0x12a>
    191c:	8a 85       	ldd	r24, Y+10	; 0x0a
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	51 f4       	brne	.+20     	; 0x1936 <collision+0x12a>
			zombie[i] -> is_visible = 0;
    1922:	1a 86       	std	Y+10, r1	; 0x0a
			Score++;
    1924:	80 91 b2 01 	lds	r24, 0x01B2
    1928:	90 91 b3 01 	lds	r25, 0x01B3
    192c:	01 96       	adiw	r24, 0x01	; 1
    192e:	90 93 b3 01 	sts	0x01B3, r25
    1932:	80 93 b2 01 	sts	0x01B2, r24
		}
		
		if (x > zx - width && x < zx + width && y > zy - height && y < zy + height && (zombie[i] -> is_visible == 1) ) {
    1936:	ae 15       	cp	r26, r14
    1938:	bf 05       	cpc	r27, r15
    193a:	0c f0       	brlt	.+2      	; 0x193e <collision+0x132>
    193c:	6d c0       	rjmp	.+218    	; 0x1a18 <collision+0x20c>
    193e:	6e 0f       	add	r22, r30
    1940:	7f 1f       	adc	r23, r31
    1942:	e6 16       	cp	r14, r22
    1944:	f7 06       	cpc	r15, r23
    1946:	0c f0       	brlt	.+2      	; 0x194a <collision+0x13e>
    1948:	67 c0       	rjmp	.+206    	; 0x1a18 <collision+0x20c>
    194a:	67 2d       	mov	r22, r7
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	80 91 7e 01 	lds	r24, 0x017E
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	cb 01       	movw	r24, r22
    1958:	82 1b       	sub	r24, r18
    195a:	93 0b       	sbc	r25, r19
    195c:	84 15       	cp	r24, r4
    195e:	95 05       	cpc	r25, r5
    1960:	0c f0       	brlt	.+2      	; 0x1964 <collision+0x158>
    1962:	5a c0       	rjmp	.+180    	; 0x1a18 <collision+0x20c>
    1964:	62 0f       	add	r22, r18
    1966:	73 1f       	adc	r23, r19
    1968:	46 16       	cp	r4, r22
    196a:	57 06       	cpc	r5, r23
    196c:	0c f0       	brlt	.+2      	; 0x1970 <collision+0x164>
    196e:	54 c0       	rjmp	.+168    	; 0x1a18 <collision+0x20c>
    1970:	d8 01       	movw	r26, r16
    1972:	ed 91       	ld	r30, X+
    1974:	fc 91       	ld	r31, X
    1976:	82 85       	ldd	r24, Z+10	; 0x0a
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	09 f0       	breq	.+2      	; 0x197e <collision+0x172>
    197c:	4d c0       	rjmp	.+154    	; 0x1a18 <collision+0x20c>
		GAMEON = 0;
    197e:	10 92 b1 01 	sts	0x01B1, r1
    1982:	10 92 b0 01 	sts	0x01B0, r1
			if (Lives>0) {
    1986:	80 91 7f 01 	lds	r24, 0x017F
    198a:	90 91 80 01 	lds	r25, 0x0180
    198e:	18 16       	cp	r1, r24
    1990:	19 06       	cpc	r1, r25
    1992:	14 f5       	brge	.+68     	; 0x19d8 <collision+0x1cc>
    1994:	88 eb       	ldi	r24, 0xB8	; 184
    1996:	9b e0       	ldi	r25, 0x0B	; 11
    1998:	f4 01       	movw	r30, r8
    199a:	31 97       	sbiw	r30, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <collision+0x18e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a0:	d9 f7       	brne	.-10     	; 0x1998 <collision+0x18c>
				_delay_ms(300);
				clear();
    19a2:	5e d3       	rcall	.+1724   	; 0x2060 <clear>
				draw_string("Touched A Zombie!",0,middle_y);
    19a4:	82 e4       	ldi	r24, 0x42	; 66
    19a6:	91 e0       	ldi	r25, 0x01	; 1
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	42 2d       	mov	r20, r2
    19ac:	cb d5       	rcall	.+2966   	; 0x2544 <draw_string>
				refresh();
    19ae:	df d5       	rcall	.+3006   	; 0x256e <refresh>
    19b0:	88 e9       	ldi	r24, 0x98	; 152
    19b2:	9a e3       	ldi	r25, 0x3A	; 58
    19b4:	f4 01       	movw	r30, r8
    19b6:	31 97       	sbiw	r30, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <collision+0x1aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19bc:	d9 f7       	brne	.-10     	; 0x19b4 <collision+0x1a8>
				_delay_ms(1500);
				Lives--;
    19be:	80 91 7f 01 	lds	r24, 0x017F
    19c2:	90 91 80 01 	lds	r25, 0x0180
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	90 93 80 01 	sts	0x0180, r25
    19cc:	80 93 7f 01 	sts	0x017F, r24
				setupHero();
    19d0:	0e 94 cd 04 	call	0x99a	; 0x99a <setupHero>
				setupZombies();
    19d4:	cc db       	rcall	.-2152   	; 0x116e <setupZombies>
    19d6:	1a c0       	rjmp	.+52     	; 0x1a0c <collision+0x200>
    19d8:	88 eb       	ldi	r24, 0xB8	; 184
    19da:	9b e0       	ldi	r25, 0x0B	; 11
    19dc:	f4 01       	movw	r30, r8
    19de:	31 97       	sbiw	r30, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <collision+0x1d2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e4:	d9 f7       	brne	.-10     	; 0x19dc <collision+0x1d0>
			}
			else {
				_delay_ms(300);
				clear();
    19e6:	3c d3       	rcall	.+1656   	; 0x2060 <clear>
				draw_string("Game OVER!", middle_x-25,middle_y);
    19e8:	84 e5       	ldi	r24, 0x54	; 84
    19ea:	91 e0       	ldi	r25, 0x01	; 1
    19ec:	66 2d       	mov	r22, r6
    19ee:	42 2d       	mov	r20, r2
    19f0:	a9 d5       	rcall	.+2898   	; 0x2544 <draw_string>
				refresh();
    19f2:	bd d5       	rcall	.+2938   	; 0x256e <refresh>
    19f4:	88 e9       	ldi	r24, 0x98	; 152
    19f6:	9a e3       	ldi	r25, 0x3A	; 58
    19f8:	f4 01       	movw	r30, r8
    19fa:	31 97       	sbiw	r30, 0x01	; 1
    19fc:	f1 f7       	brne	.-4      	; 0x19fa <collision+0x1ee>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a00:	d9 f7       	brne	.-10     	; 0x19f8 <collision+0x1ec>
				_delay_ms(1500);
				setupGame();
    1a02:	d8 de       	rcall	.-592    	; 0x17b4 <setupGame>
				setupHero();
    1a04:	0e 94 cd 04 	call	0x99a	; 0x99a <setupHero>
				setupZombies();	
    1a08:	b2 db       	rcall	.-2204   	; 0x116e <setupZombies>
				setupPit();
    1a0a:	75 db       	rcall	.-2326   	; 0x10f6 <setupPit>
			}
		GAMEON = 1;	
    1a0c:	e1 e0       	ldi	r30, 0x01	; 1
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	f0 93 b1 01 	sts	0x01B1, r31
    1a14:	e0 93 b0 01 	sts	0x01B0, r30
    1a18:	0e 5f       	subi	r16, 0xFE	; 254
    1a1a:	1f 4f       	sbci	r17, 0xFF	; 255
	
	int sx = sword -> x;
	int sy = sword -> y;
	
	// checking zombie collisions
	for (int i = 0; i<8; i++) {
    1a1c:	f1 e0       	ldi	r31, 0x01	; 1
    1a1e:	06 3d       	cpi	r16, 0xD6	; 214
    1a20:	1f 07       	cpc	r17, r31
    1a22:	09 f0       	breq	.+2      	; 0x1a26 <collision+0x21a>
    1a24:	45 cf       	rjmp	.-374    	; 0x18b0 <collision+0xa4>
			}
		GAMEON = 1;	
		}
	} 
	
	if (x > sx - width && x < sx + width && y > sy - height && y < sy + height) {
    1a26:	80 91 7d 01 	lds	r24, 0x017D
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	c5 01       	movw	r24, r10
    1a30:	82 1b       	sub	r24, r18
    1a32:	93 0b       	sbc	r25, r19
    1a34:	8e 15       	cp	r24, r14
    1a36:	9f 05       	cpc	r25, r15
    1a38:	e4 f4       	brge	.+56     	; 0x1a72 <collision+0x266>
    1a3a:	2a 0d       	add	r18, r10
    1a3c:	3b 1d       	adc	r19, r11
    1a3e:	e2 16       	cp	r14, r18
    1a40:	f3 06       	cpc	r15, r19
    1a42:	bc f4       	brge	.+46     	; 0x1a72 <collision+0x266>
    1a44:	63 2d       	mov	r22, r3
    1a46:	70 e0       	ldi	r23, 0x00	; 0
    1a48:	80 91 7e 01 	lds	r24, 0x017E
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	c6 01       	movw	r24, r12
    1a52:	82 1b       	sub	r24, r18
    1a54:	93 0b       	sbc	r25, r19
    1a56:	86 17       	cp	r24, r22
    1a58:	97 07       	cpc	r25, r23
    1a5a:	5c f4       	brge	.+22     	; 0x1a72 <collision+0x266>
    1a5c:	2c 0d       	add	r18, r12
    1a5e:	3d 1d       	adc	r19, r13
    1a60:	62 17       	cp	r22, r18
    1a62:	73 07       	cpc	r23, r19
    1a64:	34 f4       	brge	.+12     	; 0x1a72 <collision+0x266>
	gotSword = 1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	90 93 b5 01 	sts	0x01B5, r25
    1a6e:	80 93 b4 01 	sts	0x01B4, r24
	}
	
}
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	ff 90       	pop	r15
    1a7c:	ef 90       	pop	r14
    1a7e:	df 90       	pop	r13
    1a80:	cf 90       	pop	r12
    1a82:	bf 90       	pop	r11
    1a84:	af 90       	pop	r10
    1a86:	9f 90       	pop	r9
    1a88:	8f 90       	pop	r8
    1a8a:	7f 90       	pop	r7
    1a8c:	6f 90       	pop	r6
    1a8e:	5f 90       	pop	r5
    1a90:	4f 90       	pop	r4
    1a92:	3f 90       	pop	r3
    1a94:	2f 90       	pop	r2
    1a96:	08 95       	ret

00001a98 <main>:
#include "my_functions.h"

#define NUM_BLOCKS 10
#define MAX_CLOCK_COUNTER_FOR_100MSECOND 5

int main() {
    1a98:	2f 92       	push	r2
    1a9a:	3f 92       	push	r3
    1a9c:	4f 92       	push	r4
    1a9e:	5f 92       	push	r5
    1aa0:	6f 92       	push	r6
    1aa2:	7f 92       	push	r7
    1aa4:	8f 92       	push	r8
    1aa6:	9f 92       	push	r9
    1aa8:	af 92       	push	r10
    1aaa:	bf 92       	push	r11
    1aac:	cf 92       	push	r12
    1aae:	df 92       	push	r13
    1ab0:	ef 92       	push	r14
    1ab2:	ff 92       	push	r15
    1ab4:	0f 93       	push	r16
    1ab6:	1f 93       	push	r17
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	cd 5e       	subi	r28, 0xED	; 237
    1ac2:	d0 40       	sbci	r29, 0x00	; 0
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61
	
	// INSERT_CODE_HERE
	//draw_string("eWWZ begins!",0,0);

	// screen setup etc
	setupGame();
    1ace:	72 de       	rcall	.-796    	; 0x17b4 <setupGame>
	clear();
    1ad0:	c7 d2       	rcall	.+1422   	; 0x2060 <clear>
	refresh();
    1ad2:	4d d5       	rcall	.+2714   	; 0x256e <refresh>
	// sprites
	byte bitHero [] = {
		BYTE( 10100000),
		BYTE( 11100000),
		BYTE( 10100000),
	};
    1ad4:	de 01       	movw	r26, r28
    1ad6:	11 96       	adiw	r26, 0x01	; 1
    1ad8:	e0 e9       	ldi	r30, 0x90	; 144
    1ada:	f1 e0       	ldi	r31, 0x01	; 1
    1adc:	83 e0       	ldi	r24, 0x03	; 3
    1ade:	01 90       	ld	r0, Z+
    1ae0:	0d 92       	st	X+, r0
    1ae2:	81 50       	subi	r24, 0x01	; 1
    1ae4:	e1 f7       	brne	.-8      	; 0x1ade <main+0x46>
		
	byte bitZombie [] = {
		BYTE( 11100000),
		BYTE( 01000000),
		BYTE( 11100000),
	};
    1ae6:	de 01       	movw	r26, r28
    1ae8:	14 96       	adiw	r26, 0x04	; 4
    1aea:	ed e8       	ldi	r30, 0x8D	; 141
    1aec:	f1 e0       	ldi	r31, 0x01	; 1
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	01 90       	ld	r0, Z+
    1af2:	0d 92       	st	X+, r0
    1af4:	81 50       	subi	r24, 0x01	; 1
    1af6:	e1 f7       	brne	.-8      	; 0x1af0 <main+0x58>
		BYTE( 10100000),
		BYTE( 01000000),	
	};
	
	// screen parameters
	screen_x -= width;
    1af8:	80 91 7d 01 	lds	r24, 0x017D
    1afc:	20 91 5f 01 	lds	r18, 0x015F
    1b00:	30 91 60 01 	lds	r19, 0x0160
    1b04:	28 1b       	sub	r18, r24
    1b06:	31 09       	sbc	r19, r1
    1b08:	30 93 60 01 	sts	0x0160, r19
    1b0c:	20 93 5f 01 	sts	0x015F, r18
	screen_y -= height;
    1b10:	40 91 7e 01 	lds	r20, 0x017E
    1b14:	80 91 63 01 	lds	r24, 0x0163
    1b18:	90 91 64 01 	lds	r25, 0x0164
    1b1c:	84 1b       	sub	r24, r20
    1b1e:	91 09       	sbc	r25, r1
    1b20:	90 93 64 01 	sts	0x0164, r25
    1b24:	80 93 63 01 	sts	0x0163, r24

	int middle_x = screen_x/2;
	int middle_y = screen_y/2 + 5;
    1b28:	62 e0       	ldi	r22, 0x02	; 2
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	7d d6       	rcall	.+3322   	; 0x2828 <__divmodhi4>
    1b2e:	4b 01       	movw	r8, r22
    1b30:	85 e0       	ldi	r24, 0x05	; 5
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	88 0e       	add	r8, r24
    1b36:	99 1e       	adc	r9, r25
    1b38:	a6 e4       	ldi	r26, 0x46	; 70
    1b3a:	ca 2e       	mov	r12, r26
    1b3c:	d1 2c       	mov	r13, r1
    1b3e:	cc 0e       	add	r12, r28
    1b40:	dd 1e       	adc	r13, r29
    1b42:	c9 01       	movw	r24, r18
    1b44:	62 e0       	ldi	r22, 0x02	; 2
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	6f d6       	rcall	.+3294   	; 0x2828 <__divmodhi4>
    1b4a:	56 2e       	mov	r5, r22
    1b4c:	f6 ec       	ldi	r31, 0xC6	; 198
    1b4e:	af 2e       	mov	r10, r31
    1b50:	f1 e0       	ldi	r31, 0x01	; 1
    1b52:	bf 2e       	mov	r11, r31
    1b54:	16 2f       	mov	r17, r22
	}*/
	
	Sprite zombies[8]; 
	for (int i = 0; i<8; i++) {
	zombie[i] = &zombies[i];
	init_sprite(zombie[i], middle_x + 3*i, middle_y, width, height, bitZombie);
    1b56:	e4 e0       	ldi	r30, 0x04	; 4
    1b58:	6e 2e       	mov	r6, r30
    1b5a:	71 2c       	mov	r7, r1
    1b5c:	6c 0e       	add	r6, r28
    1b5e:	7d 1e       	adc	r7, r29
	
	}*/
	
	Sprite zombies[8]; 
	for (int i = 0; i<8; i++) {
	zombie[i] = &zombies[i];
    1b60:	f5 01       	movw	r30, r10
    1b62:	c0 82       	st	Z, r12
    1b64:	d1 82       	std	Z+1, r13	; 0x01
	init_sprite(zombie[i], middle_x + 3*i, middle_y, width, height, bitZombie);
    1b66:	c6 01       	movw	r24, r12
    1b68:	61 2f       	mov	r22, r17
    1b6a:	48 2d       	mov	r20, r8
    1b6c:	20 91 7d 01 	lds	r18, 0x017D
    1b70:	00 91 7e 01 	lds	r16, 0x017E
    1b74:	73 01       	movw	r14, r6
    1b76:	60 d5       	rcall	.+2752   	; 0x2638 <init_sprite>
    1b78:	82 e0       	ldi	r24, 0x02	; 2
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	a8 0e       	add	r10, r24
    1b7e:	b9 1e       	adc	r11, r25
    1b80:	e5 e1       	ldi	r30, 0x15	; 21
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	ce 0e       	add	r12, r30
    1b86:	df 1e       	adc	r13, r31
    1b88:	1d 5f       	subi	r17, 0xFD	; 253
		_delay_ms(500);
	
	}*/
	
	Sprite zombies[8]; 
	for (int i = 0; i<8; i++) {
    1b8a:	f6 ed       	ldi	r31, 0xD6	; 214
    1b8c:	af 16       	cp	r10, r31
    1b8e:	f1 e0       	ldi	r31, 0x01	; 1
    1b90:	bf 06       	cpc	r11, r31
    1b92:	31 f7       	brne	.-52     	; 0x1b60 <main+0xc8>
	zombie[i] = &zombies[i];
	init_sprite(zombie[i], middle_x + 3*i, middle_y, width, height, bitZombie);
	}
	
	Sprite swords, swordsStatus;
	sword = &swords;
    1b94:	ce 01       	movw	r24, r28
    1b96:	07 96       	adiw	r24, 0x07	; 7
    1b98:	90 93 b7 01 	sts	0x01B7, r25
    1b9c:	80 93 b6 01 	sts	0x01B6, r24
	swordStatus = &swordsStatus;
    1ba0:	9e 01       	movw	r18, r28
    1ba2:	24 5e       	subi	r18, 0xE4	; 228
    1ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba6:	30 93 bd 01 	sts	0x01BD, r19
    1baa:	20 93 bc 01 	sts	0x01BC, r18
	init_sprite(sword, -10,-10, width, height, bitSwordLeft);
    1bae:	66 ef       	ldi	r22, 0xF6	; 246
    1bb0:	46 ef       	ldi	r20, 0xF6	; 246
    1bb2:	20 91 7d 01 	lds	r18, 0x017D
    1bb6:	00 91 7e 01 	lds	r16, 0x017E
    1bba:	71 e8       	ldi	r23, 0x81	; 129
    1bbc:	e7 2e       	mov	r14, r23
    1bbe:	71 e0       	ldi	r23, 0x01	; 1
    1bc0:	f7 2e       	mov	r15, r23
    1bc2:	3a d5       	rcall	.+2676   	; 0x2638 <init_sprite>
	init_sprite(swordStatus, -10,-10, width, height, bitSwordUp);
    1bc4:	80 91 bc 01 	lds	r24, 0x01BC
    1bc8:	90 91 bd 01 	lds	r25, 0x01BD
    1bcc:	66 ef       	ldi	r22, 0xF6	; 246
    1bce:	46 ef       	ldi	r20, 0xF6	; 246
    1bd0:	20 91 7d 01 	lds	r18, 0x017D
    1bd4:	00 91 7e 01 	lds	r16, 0x017E
    1bd8:	57 e8       	ldi	r21, 0x87	; 135
    1bda:	e5 2e       	mov	r14, r21
    1bdc:	51 e0       	ldi	r21, 0x01	; 1
    1bde:	f5 2e       	mov	r15, r21
    1be0:	2b d5       	rcall	.+2646   	; 0x2638 <init_sprite>

	setupSword();
    1be2:	48 da       	rcall	.-2928   	; 0x1074 <setupSword>
	setupZombies();
    1be4:	c4 da       	rcall	.-2680   	; 0x116e <setupZombies>
	setupPit();
    1be6:	87 da       	rcall	.-2802   	; 0x10f6 <setupPit>
	// Hero sprite parameters
	x = screen_x/2 - width;
	y = screen_y/2 + 9/2;
	
	Sprite my_sprite;
	my_pointer = &my_sprite;
    1be8:	ce 01       	movw	r24, r28
    1bea:	c1 96       	adiw	r24, 0x31	; 49
    1bec:	90 93 c3 01 	sts	0x01C3, r25
    1bf0:	80 93 c2 01 	sts	0x01C2, r24

	init_sprite(my_pointer, middle_x, middle_y, width, height, bitHero);
    1bf4:	65 2d       	mov	r22, r5
    1bf6:	48 2d       	mov	r20, r8
    1bf8:	20 91 7d 01 	lds	r18, 0x017D
    1bfc:	00 91 7e 01 	lds	r16, 0x017E
    1c00:	7e 01       	movw	r14, r28
    1c02:	08 94       	sec
    1c04:	e1 1c       	adc	r14, r1
    1c06:	f1 1c       	adc	r15, r1
    1c08:	17 d5       	rcall	.+2606   	; 0x2638 <init_sprite>
	draw_sprite(my_pointer);
    1c0a:	80 91 c2 01 	lds	r24, 0x01C2
    1c0e:	90 91 c3 01 	lds	r25, 0x01C3
    1c12:	42 d5       	rcall	.+2692   	; 0x2698 <draw_sprite>
    1c14:	40 ef       	ldi	r20, 0xF0	; 240
    1c16:	e4 2e       	mov	r14, r20
    1c18:	4f ef       	ldi	r20, 0xFF	; 255
    1c1a:	f4 2e       	mov	r15, r20
    1c1c:	ea 0c       	add	r14, r10
    1c1e:	fb 1c       	adc	r15, r11
	for (int i = 0; i<8; i++) {
	draw_sprite(zombie[i]);
    1c20:	f7 01       	movw	r30, r14
    1c22:	81 91       	ld	r24, Z+
    1c24:	91 91       	ld	r25, Z+
    1c26:	7f 01       	movw	r14, r30
    1c28:	37 d5       	rcall	.+2670   	; 0x2698 <draw_sprite>
	Sprite my_sprite;
	my_pointer = &my_sprite;

	init_sprite(my_pointer, middle_x, middle_y, width, height, bitHero);
	draw_sprite(my_pointer);
	for (int i = 0; i<8; i++) {
    1c2a:	f6 ed       	ldi	r31, 0xD6	; 214
    1c2c:	ef 16       	cp	r14, r31
    1c2e:	f1 e0       	ldi	r31, 0x01	; 1
    1c30:	ff 06       	cpc	r15, r31
    1c32:	b1 f7       	brne	.-20     	; 0x1c20 <main+0x188>
	draw_sprite(zombie[i]);
	}
	
	refresh();
    1c34:	9c d4       	rcall	.+2360   	; 0x256e <refresh>
    1c36:	88 ee       	ldi	r24, 0xE8	; 232
    1c38:	93 e0       	ldi	r25, 0x03	; 3
    1c3a:	20 e9       	ldi	r18, 0x90	; 144
    1c3c:	31 e0       	ldi	r19, 0x01	; 1
    1c3e:	f9 01       	movw	r30, r18
    1c40:	31 97       	sbiw	r30, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <main+0x1a8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c44:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c46:	d9 f7       	brne	.-10     	; 0x1c3e <main+0x1a6>
	//int add = 1;
	
	// initialise vars
	int notRIGHT = 1;
	int notLEFT = 1;
	GAMEON = 1;
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	90 93 b1 01 	sts	0x01B1, r25
    1c50:	80 93 b0 01 	sts	0x01B0, r24
    1c54:	01 e0       	ldi	r16, 0x01	; 1
    1c56:	10 e0       	ldi	r17, 0x00	; 0
    1c58:	31 e0       	ldi	r19, 0x01	; 1
    1c5a:	c3 2e       	mov	r12, r19
    1c5c:	d1 2c       	mov	r13, r1
		
		if (RIGHT && notRIGHT) {
			notRIGHT = 0;
			Direction = (Direction-1);
			if (Direction < 0) {
			Direction = 3;
    1c5e:	23 e0       	ldi	r18, 0x03	; 3
    1c60:	22 2e       	mov	r2, r18
    1c62:	31 2c       	mov	r3, r1
		}
		
		draw_sprite(my_pointer);
		draw_sprite(sword);
		if (gotSword) {
		swordStatus -> x = 40;
    1c64:	0f 2e       	mov	r0, r31
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	4f 2e       	mov	r4, r31
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	5f 2e       	mov	r5, r31
    1c6e:	f0 e2       	ldi	r31, 0x20	; 32
    1c70:	6f 2e       	mov	r6, r31
    1c72:	f2 e4       	ldi	r31, 0x42	; 66
    1c74:	7f 2e       	mov	r7, r31
    1c76:	f0 2d       	mov	r31, r0
		swordStatus -> y = 0;
    1c78:	0f 2e       	mov	r0, r31
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	8f 2e       	mov	r8, r31
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	9f 2e       	mov	r9, r31
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	af 2e       	mov	r10, r31
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	bf 2e       	mov	r11, r31
    1c8a:	f0 2d       	mov	r31, r0
    1c8c:	76 c0       	rjmp	.+236    	; 0x1d7a <main+0x2e2>
		my_pointer -> y += add;
		my_pointer2 -> y -= add;
		if (my_pointer -> y < 1) add = -add;
		if (my_pointer -> y > screen_y) add = -add;
	*/
		clear();
    1c8e:	e8 d1       	rcall	.+976    	; 0x2060 <clear>

		if (RIGHT == 0) {
    1c90:	80 91 a2 01 	lds	r24, 0x01A2
    1c94:	90 91 a3 01 	lds	r25, 0x01A3
    1c98:	89 2b       	or	r24, r25
    1c9a:	11 f4       	brne	.+4      	; 0x1ca0 <main+0x208>
    1c9c:	01 e0       	ldi	r16, 0x01	; 1
    1c9e:	10 e0       	ldi	r17, 0x00	; 0
			notRIGHT = 1;
		}
		if (LEFT == 0) {
    1ca0:	80 91 a0 01 	lds	r24, 0x01A0
    1ca4:	90 91 a1 01 	lds	r25, 0x01A1
    1ca8:	89 2b       	or	r24, r25
    1caa:	19 f4       	brne	.+6      	; 0x1cb2 <main+0x21a>
    1cac:	91 e0       	ldi	r25, 0x01	; 1
    1cae:	c9 2e       	mov	r12, r25
    1cb0:	d1 2c       	mov	r13, r1
			notLEFT = 1;
		}
		
		if (RIGHT && notRIGHT) {
    1cb2:	80 91 a2 01 	lds	r24, 0x01A2
    1cb6:	90 91 a3 01 	lds	r25, 0x01A3
    1cba:	89 2b       	or	r24, r25
    1cbc:	c1 f0       	breq	.+48     	; 0x1cee <main+0x256>
    1cbe:	01 15       	cp	r16, r1
    1cc0:	11 05       	cpc	r17, r1
    1cc2:	a9 f0       	breq	.+42     	; 0x1cee <main+0x256>
			notRIGHT = 0;
			Direction = (Direction-1);
    1cc4:	80 91 6b 01 	lds	r24, 0x016B
    1cc8:	90 91 6c 01 	lds	r25, 0x016C
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	90 93 6c 01 	sts	0x016C, r25
    1cd2:	80 93 6b 01 	sts	0x016B, r24
			if (Direction < 0) {
    1cd6:	80 91 6b 01 	lds	r24, 0x016B
    1cda:	90 91 6c 01 	lds	r25, 0x016C
    1cde:	97 ff       	sbrs	r25, 7
    1ce0:	04 c0       	rjmp	.+8      	; 0x1cea <main+0x252>
			Direction = 3;
    1ce2:	30 92 6c 01 	sts	0x016C, r3
    1ce6:	20 92 6b 01 	sts	0x016B, r2
    1cea:	00 e0       	ldi	r16, 0x00	; 0
    1cec:	10 e0       	ldi	r17, 0x00	; 0
			//bitmapb = bitmaptemp;
			//my_pointer -> bitmap = bitmapa;
			//my_pointer2 -> bitmap = bitmapb;
			
		}
		if (LEFT & notLEFT) {
    1cee:	80 91 a0 01 	lds	r24, 0x01A0
    1cf2:	90 91 a1 01 	lds	r25, 0x01A1
    1cf6:	8c 21       	and	r24, r12
    1cf8:	9d 21       	and	r25, r13
    1cfa:	89 2b       	or	r24, r25
    1cfc:	71 f0       	breq	.+28     	; 0x1d1a <main+0x282>
			notLEFT = 0;
			Direction = (Direction+1)%4;
    1cfe:	80 91 6b 01 	lds	r24, 0x016B
    1d02:	90 91 6c 01 	lds	r25, 0x016C
    1d06:	01 96       	adiw	r24, 0x01	; 1
    1d08:	64 e0       	ldi	r22, 0x04	; 4
    1d0a:	70 e0       	ldi	r23, 0x00	; 0
    1d0c:	8d d5       	rcall	.+2842   	; 0x2828 <__divmodhi4>
    1d0e:	90 93 6c 01 	sts	0x016C, r25
    1d12:	80 93 6b 01 	sts	0x016B, r24
    1d16:	cc 24       	eor	r12, r12
    1d18:	dd 24       	eor	r13, r13
			
		}
		
		draw_sprite(my_pointer);
    1d1a:	80 91 c2 01 	lds	r24, 0x01C2
    1d1e:	90 91 c3 01 	lds	r25, 0x01C3
    1d22:	ba d4       	rcall	.+2420   	; 0x2698 <draw_sprite>
		draw_sprite(sword);
    1d24:	80 91 b6 01 	lds	r24, 0x01B6
    1d28:	90 91 b7 01 	lds	r25, 0x01B7
    1d2c:	b5 d4       	rcall	.+2410   	; 0x2698 <draw_sprite>
		if (gotSword) {
    1d2e:	80 91 b4 01 	lds	r24, 0x01B4
    1d32:	90 91 b5 01 	lds	r25, 0x01B5
    1d36:	89 2b       	or	r24, r25
    1d38:	71 f0       	breq	.+28     	; 0x1d56 <main+0x2be>
		swordStatus -> x = 40;
    1d3a:	e0 91 bc 01 	lds	r30, 0x01BC
    1d3e:	f0 91 bd 01 	lds	r31, 0x01BD
    1d42:	40 82       	st	Z, r4
    1d44:	51 82       	std	Z+1, r5	; 0x01
    1d46:	62 82       	std	Z+2, r6	; 0x02
    1d48:	73 82       	std	Z+3, r7	; 0x03
		swordStatus -> y = 0;
    1d4a:	84 82       	std	Z+4, r8	; 0x04
    1d4c:	95 82       	std	Z+5, r9	; 0x05
    1d4e:	a6 82       	std	Z+6, r10	; 0x06
    1d50:	b7 82       	std	Z+7, r11	; 0x07
		draw_sprite(swordStatus);
    1d52:	cf 01       	movw	r24, r30
    1d54:	a1 d4       	rcall	.+2370   	; 0x2698 <draw_sprite>
    1d56:	86 ec       	ldi	r24, 0xC6	; 198
    1d58:	e8 2e       	mov	r14, r24
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	f8 2e       	mov	r15, r24
		}
		for (int i = 0; i<8; i++) {
		draw_sprite(zombie[i]);
    1d5e:	f7 01       	movw	r30, r14
    1d60:	81 91       	ld	r24, Z+
    1d62:	91 91       	ld	r25, Z+
    1d64:	7f 01       	movw	r14, r30
    1d66:	98 d4       	rcall	.+2352   	; 0x2698 <draw_sprite>
		if (gotSword) {
		swordStatus -> x = 40;
		swordStatus -> y = 0;
		draw_sprite(swordStatus);
		}
		for (int i = 0; i<8; i++) {
    1d68:	f6 ed       	ldi	r31, 0xD6	; 214
    1d6a:	ef 16       	cp	r14, r31
    1d6c:	f1 e0       	ldi	r31, 0x01	; 1
    1d6e:	ff 06       	cpc	r15, r31
    1d70:	b1 f7       	brne	.-20     	; 0x1d5e <main+0x2c6>
		draw_sprite(zombie[i]);
		}
		drawPit();
    1d72:	bb d8       	rcall	.-3722   	; 0xeea <drawPit>
		drawScreen();
    1d74:	de d8       	rcall	.-3652   	; 0xf32 <drawScreen>
		refresh();
    1d76:	fb d3       	rcall	.+2038   	; 0x256e <refresh>
		collision();
    1d78:	49 dd       	rcall	.-1390   	; 0x180c <collision>
	
	// initialise vars
	int notRIGHT = 1;
	int notLEFT = 1;
	GAMEON = 1;
	while(GAMEON){
    1d7a:	80 91 b0 01 	lds	r24, 0x01B0
    1d7e:	90 91 b1 01 	lds	r25, 0x01B1
    1d82:	89 2b       	or	r24, r25
    1d84:	09 f0       	breq	.+2      	; 0x1d88 <main+0x2f0>
    1d86:	83 cf       	rjmp	.-250    	; 0x1c8e <main+0x1f6>
		collision();
	}
	
	
	return 0;
}
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	c3 51       	subi	r28, 0x13	; 19
    1d8e:	df 4f       	sbci	r29, 0xFF	; 255
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	ff 90       	pop	r15
    1da4:	ef 90       	pop	r14
    1da6:	df 90       	pop	r13
    1da8:	cf 90       	pop	r12
    1daa:	bf 90       	pop	r11
    1dac:	af 90       	pop	r10
    1dae:	9f 90       	pop	r9
    1db0:	8f 90       	pop	r8
    1db2:	7f 90       	pop	r7
    1db4:	6f 90       	pop	r6
    1db6:	5f 90       	pop	r5
    1db8:	4f 90       	pop	r4
    1dba:	3f 90       	pop	r3
    1dbc:	2f 90       	pop	r2
    1dbe:	08 95       	ret

00001dc0 <__subsf3>:
    1dc0:	50 58       	subi	r21, 0x80	; 128

00001dc2 <__addsf3>:
    1dc2:	bb 27       	eor	r27, r27
    1dc4:	aa 27       	eor	r26, r26
    1dc6:	0e d0       	rcall	.+28     	; 0x1de4 <__addsf3x>
    1dc8:	0d c1       	rjmp	.+538    	; 0x1fe4 <__fp_round>
    1dca:	fe d0       	rcall	.+508    	; 0x1fc8 <__fp_pscA>
    1dcc:	30 f0       	brcs	.+12     	; 0x1dda <__addsf3+0x18>
    1dce:	03 d1       	rcall	.+518    	; 0x1fd6 <__fp_pscB>
    1dd0:	20 f0       	brcs	.+8      	; 0x1dda <__addsf3+0x18>
    1dd2:	31 f4       	brne	.+12     	; 0x1de0 <__addsf3+0x1e>
    1dd4:	9f 3f       	cpi	r25, 0xFF	; 255
    1dd6:	11 f4       	brne	.+4      	; 0x1ddc <__addsf3+0x1a>
    1dd8:	1e f4       	brtc	.+6      	; 0x1de0 <__addsf3+0x1e>
    1dda:	f3 c0       	rjmp	.+486    	; 0x1fc2 <__fp_nan>
    1ddc:	0e f4       	brtc	.+2      	; 0x1de0 <__addsf3+0x1e>
    1dde:	e0 95       	com	r30
    1de0:	e7 fb       	bst	r30, 7
    1de2:	e9 c0       	rjmp	.+466    	; 0x1fb6 <__fp_inf>

00001de4 <__addsf3x>:
    1de4:	e9 2f       	mov	r30, r25
    1de6:	0f d1       	rcall	.+542    	; 0x2006 <__fp_split3>
    1de8:	80 f3       	brcs	.-32     	; 0x1dca <__addsf3+0x8>
    1dea:	ba 17       	cp	r27, r26
    1dec:	62 07       	cpc	r22, r18
    1dee:	73 07       	cpc	r23, r19
    1df0:	84 07       	cpc	r24, r20
    1df2:	95 07       	cpc	r25, r21
    1df4:	18 f0       	brcs	.+6      	; 0x1dfc <__addsf3x+0x18>
    1df6:	71 f4       	brne	.+28     	; 0x1e14 <__addsf3x+0x30>
    1df8:	9e f5       	brtc	.+102    	; 0x1e60 <__addsf3x+0x7c>
    1dfa:	27 c1       	rjmp	.+590    	; 0x204a <__fp_zero>
    1dfc:	0e f4       	brtc	.+2      	; 0x1e00 <__addsf3x+0x1c>
    1dfe:	e0 95       	com	r30
    1e00:	0b 2e       	mov	r0, r27
    1e02:	ba 2f       	mov	r27, r26
    1e04:	a0 2d       	mov	r26, r0
    1e06:	0b 01       	movw	r0, r22
    1e08:	b9 01       	movw	r22, r18
    1e0a:	90 01       	movw	r18, r0
    1e0c:	0c 01       	movw	r0, r24
    1e0e:	ca 01       	movw	r24, r20
    1e10:	a0 01       	movw	r20, r0
    1e12:	11 24       	eor	r1, r1
    1e14:	ff 27       	eor	r31, r31
    1e16:	59 1b       	sub	r21, r25
    1e18:	99 f0       	breq	.+38     	; 0x1e40 <__addsf3x+0x5c>
    1e1a:	59 3f       	cpi	r21, 0xF9	; 249
    1e1c:	50 f4       	brcc	.+20     	; 0x1e32 <__addsf3x+0x4e>
    1e1e:	50 3e       	cpi	r21, 0xE0	; 224
    1e20:	68 f1       	brcs	.+90     	; 0x1e7c <__addsf3x+0x98>
    1e22:	1a 16       	cp	r1, r26
    1e24:	f0 40       	sbci	r31, 0x00	; 0
    1e26:	a2 2f       	mov	r26, r18
    1e28:	23 2f       	mov	r18, r19
    1e2a:	34 2f       	mov	r19, r20
    1e2c:	44 27       	eor	r20, r20
    1e2e:	58 5f       	subi	r21, 0xF8	; 248
    1e30:	f3 cf       	rjmp	.-26     	; 0x1e18 <__addsf3x+0x34>
    1e32:	46 95       	lsr	r20
    1e34:	37 95       	ror	r19
    1e36:	27 95       	ror	r18
    1e38:	a7 95       	ror	r26
    1e3a:	f0 40       	sbci	r31, 0x00	; 0
    1e3c:	53 95       	inc	r21
    1e3e:	c9 f7       	brne	.-14     	; 0x1e32 <__addsf3x+0x4e>
    1e40:	7e f4       	brtc	.+30     	; 0x1e60 <__addsf3x+0x7c>
    1e42:	1f 16       	cp	r1, r31
    1e44:	ba 0b       	sbc	r27, r26
    1e46:	62 0b       	sbc	r22, r18
    1e48:	73 0b       	sbc	r23, r19
    1e4a:	84 0b       	sbc	r24, r20
    1e4c:	ba f0       	brmi	.+46     	; 0x1e7c <__addsf3x+0x98>
    1e4e:	91 50       	subi	r25, 0x01	; 1
    1e50:	a1 f0       	breq	.+40     	; 0x1e7a <__addsf3x+0x96>
    1e52:	ff 0f       	add	r31, r31
    1e54:	bb 1f       	adc	r27, r27
    1e56:	66 1f       	adc	r22, r22
    1e58:	77 1f       	adc	r23, r23
    1e5a:	88 1f       	adc	r24, r24
    1e5c:	c2 f7       	brpl	.-16     	; 0x1e4e <__addsf3x+0x6a>
    1e5e:	0e c0       	rjmp	.+28     	; 0x1e7c <__addsf3x+0x98>
    1e60:	ba 0f       	add	r27, r26
    1e62:	62 1f       	adc	r22, r18
    1e64:	73 1f       	adc	r23, r19
    1e66:	84 1f       	adc	r24, r20
    1e68:	48 f4       	brcc	.+18     	; 0x1e7c <__addsf3x+0x98>
    1e6a:	87 95       	ror	r24
    1e6c:	77 95       	ror	r23
    1e6e:	67 95       	ror	r22
    1e70:	b7 95       	ror	r27
    1e72:	f7 95       	ror	r31
    1e74:	9e 3f       	cpi	r25, 0xFE	; 254
    1e76:	08 f0       	brcs	.+2      	; 0x1e7a <__addsf3x+0x96>
    1e78:	b3 cf       	rjmp	.-154    	; 0x1de0 <__addsf3+0x1e>
    1e7a:	93 95       	inc	r25
    1e7c:	88 0f       	add	r24, r24
    1e7e:	08 f0       	brcs	.+2      	; 0x1e82 <__addsf3x+0x9e>
    1e80:	99 27       	eor	r25, r25
    1e82:	ee 0f       	add	r30, r30
    1e84:	97 95       	ror	r25
    1e86:	87 95       	ror	r24
    1e88:	08 95       	ret

00001e8a <__cmpsf2>:
    1e8a:	71 d0       	rcall	.+226    	; 0x1f6e <__fp_cmp>
    1e8c:	08 f4       	brcc	.+2      	; 0x1e90 <__cmpsf2+0x6>
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	08 95       	ret

00001e92 <__fixsfsi>:
    1e92:	04 d0       	rcall	.+8      	; 0x1e9c <__fixunssfsi>
    1e94:	68 94       	set
    1e96:	b1 11       	cpse	r27, r1
    1e98:	d9 c0       	rjmp	.+434    	; 0x204c <__fp_szero>
    1e9a:	08 95       	ret

00001e9c <__fixunssfsi>:
    1e9c:	bc d0       	rcall	.+376    	; 0x2016 <__fp_splitA>
    1e9e:	88 f0       	brcs	.+34     	; 0x1ec2 <__fixunssfsi+0x26>
    1ea0:	9f 57       	subi	r25, 0x7F	; 127
    1ea2:	90 f0       	brcs	.+36     	; 0x1ec8 <__fixunssfsi+0x2c>
    1ea4:	b9 2f       	mov	r27, r25
    1ea6:	99 27       	eor	r25, r25
    1ea8:	b7 51       	subi	r27, 0x17	; 23
    1eaa:	a0 f0       	brcs	.+40     	; 0x1ed4 <__fixunssfsi+0x38>
    1eac:	d1 f0       	breq	.+52     	; 0x1ee2 <__fixunssfsi+0x46>
    1eae:	66 0f       	add	r22, r22
    1eb0:	77 1f       	adc	r23, r23
    1eb2:	88 1f       	adc	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	1a f0       	brmi	.+6      	; 0x1ebe <__fixunssfsi+0x22>
    1eb8:	ba 95       	dec	r27
    1eba:	c9 f7       	brne	.-14     	; 0x1eae <__fixunssfsi+0x12>
    1ebc:	12 c0       	rjmp	.+36     	; 0x1ee2 <__fixunssfsi+0x46>
    1ebe:	b1 30       	cpi	r27, 0x01	; 1
    1ec0:	81 f0       	breq	.+32     	; 0x1ee2 <__fixunssfsi+0x46>
    1ec2:	c3 d0       	rcall	.+390    	; 0x204a <__fp_zero>
    1ec4:	b1 e0       	ldi	r27, 0x01	; 1
    1ec6:	08 95       	ret
    1ec8:	c0 c0       	rjmp	.+384    	; 0x204a <__fp_zero>
    1eca:	67 2f       	mov	r22, r23
    1ecc:	78 2f       	mov	r23, r24
    1ece:	88 27       	eor	r24, r24
    1ed0:	b8 5f       	subi	r27, 0xF8	; 248
    1ed2:	39 f0       	breq	.+14     	; 0x1ee2 <__fixunssfsi+0x46>
    1ed4:	b9 3f       	cpi	r27, 0xF9	; 249
    1ed6:	cc f3       	brlt	.-14     	; 0x1eca <__fixunssfsi+0x2e>
    1ed8:	86 95       	lsr	r24
    1eda:	77 95       	ror	r23
    1edc:	67 95       	ror	r22
    1ede:	b3 95       	inc	r27
    1ee0:	d9 f7       	brne	.-10     	; 0x1ed8 <__fixunssfsi+0x3c>
    1ee2:	3e f4       	brtc	.+14     	; 0x1ef2 <__fixunssfsi+0x56>
    1ee4:	90 95       	com	r25
    1ee6:	80 95       	com	r24
    1ee8:	70 95       	com	r23
    1eea:	61 95       	neg	r22
    1eec:	7f 4f       	sbci	r23, 0xFF	; 255
    1eee:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef2:	08 95       	ret

00001ef4 <__floatunsisf>:
    1ef4:	e8 94       	clt
    1ef6:	09 c0       	rjmp	.+18     	; 0x1f0a <__floatsisf+0x12>

00001ef8 <__floatsisf>:
    1ef8:	97 fb       	bst	r25, 7
    1efa:	3e f4       	brtc	.+14     	; 0x1f0a <__floatsisf+0x12>
    1efc:	90 95       	com	r25
    1efe:	80 95       	com	r24
    1f00:	70 95       	com	r23
    1f02:	61 95       	neg	r22
    1f04:	7f 4f       	sbci	r23, 0xFF	; 255
    1f06:	8f 4f       	sbci	r24, 0xFF	; 255
    1f08:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0a:	99 23       	and	r25, r25
    1f0c:	a9 f0       	breq	.+42     	; 0x1f38 <__floatsisf+0x40>
    1f0e:	f9 2f       	mov	r31, r25
    1f10:	96 e9       	ldi	r25, 0x96	; 150
    1f12:	bb 27       	eor	r27, r27
    1f14:	93 95       	inc	r25
    1f16:	f6 95       	lsr	r31
    1f18:	87 95       	ror	r24
    1f1a:	77 95       	ror	r23
    1f1c:	67 95       	ror	r22
    1f1e:	b7 95       	ror	r27
    1f20:	f1 11       	cpse	r31, r1
    1f22:	f8 cf       	rjmp	.-16     	; 0x1f14 <__floatsisf+0x1c>
    1f24:	fa f4       	brpl	.+62     	; 0x1f64 <__floatsisf+0x6c>
    1f26:	bb 0f       	add	r27, r27
    1f28:	11 f4       	brne	.+4      	; 0x1f2e <__floatsisf+0x36>
    1f2a:	60 ff       	sbrs	r22, 0
    1f2c:	1b c0       	rjmp	.+54     	; 0x1f64 <__floatsisf+0x6c>
    1f2e:	6f 5f       	subi	r22, 0xFF	; 255
    1f30:	7f 4f       	sbci	r23, 0xFF	; 255
    1f32:	8f 4f       	sbci	r24, 0xFF	; 255
    1f34:	9f 4f       	sbci	r25, 0xFF	; 255
    1f36:	16 c0       	rjmp	.+44     	; 0x1f64 <__floatsisf+0x6c>
    1f38:	88 23       	and	r24, r24
    1f3a:	11 f0       	breq	.+4      	; 0x1f40 <__floatsisf+0x48>
    1f3c:	96 e9       	ldi	r25, 0x96	; 150
    1f3e:	11 c0       	rjmp	.+34     	; 0x1f62 <__floatsisf+0x6a>
    1f40:	77 23       	and	r23, r23
    1f42:	21 f0       	breq	.+8      	; 0x1f4c <__floatsisf+0x54>
    1f44:	9e e8       	ldi	r25, 0x8E	; 142
    1f46:	87 2f       	mov	r24, r23
    1f48:	76 2f       	mov	r23, r22
    1f4a:	05 c0       	rjmp	.+10     	; 0x1f56 <__floatsisf+0x5e>
    1f4c:	66 23       	and	r22, r22
    1f4e:	71 f0       	breq	.+28     	; 0x1f6c <__floatsisf+0x74>
    1f50:	96 e8       	ldi	r25, 0x86	; 134
    1f52:	86 2f       	mov	r24, r22
    1f54:	70 e0       	ldi	r23, 0x00	; 0
    1f56:	60 e0       	ldi	r22, 0x00	; 0
    1f58:	2a f0       	brmi	.+10     	; 0x1f64 <__floatsisf+0x6c>
    1f5a:	9a 95       	dec	r25
    1f5c:	66 0f       	add	r22, r22
    1f5e:	77 1f       	adc	r23, r23
    1f60:	88 1f       	adc	r24, r24
    1f62:	da f7       	brpl	.-10     	; 0x1f5a <__floatsisf+0x62>
    1f64:	88 0f       	add	r24, r24
    1f66:	96 95       	lsr	r25
    1f68:	87 95       	ror	r24
    1f6a:	97 f9       	bld	r25, 7
    1f6c:	08 95       	ret

00001f6e <__fp_cmp>:
    1f6e:	99 0f       	add	r25, r25
    1f70:	00 08       	sbc	r0, r0
    1f72:	55 0f       	add	r21, r21
    1f74:	aa 0b       	sbc	r26, r26
    1f76:	e0 e8       	ldi	r30, 0x80	; 128
    1f78:	fe ef       	ldi	r31, 0xFE	; 254
    1f7a:	16 16       	cp	r1, r22
    1f7c:	17 06       	cpc	r1, r23
    1f7e:	e8 07       	cpc	r30, r24
    1f80:	f9 07       	cpc	r31, r25
    1f82:	c0 f0       	brcs	.+48     	; 0x1fb4 <__fp_cmp+0x46>
    1f84:	12 16       	cp	r1, r18
    1f86:	13 06       	cpc	r1, r19
    1f88:	e4 07       	cpc	r30, r20
    1f8a:	f5 07       	cpc	r31, r21
    1f8c:	98 f0       	brcs	.+38     	; 0x1fb4 <__fp_cmp+0x46>
    1f8e:	62 1b       	sub	r22, r18
    1f90:	73 0b       	sbc	r23, r19
    1f92:	84 0b       	sbc	r24, r20
    1f94:	95 0b       	sbc	r25, r21
    1f96:	39 f4       	brne	.+14     	; 0x1fa6 <__fp_cmp+0x38>
    1f98:	0a 26       	eor	r0, r26
    1f9a:	61 f0       	breq	.+24     	; 0x1fb4 <__fp_cmp+0x46>
    1f9c:	23 2b       	or	r18, r19
    1f9e:	24 2b       	or	r18, r20
    1fa0:	25 2b       	or	r18, r21
    1fa2:	21 f4       	brne	.+8      	; 0x1fac <__fp_cmp+0x3e>
    1fa4:	08 95       	ret
    1fa6:	0a 26       	eor	r0, r26
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <__fp_cmp+0x3e>
    1faa:	a1 40       	sbci	r26, 0x01	; 1
    1fac:	a6 95       	lsr	r26
    1fae:	8f ef       	ldi	r24, 0xFF	; 255
    1fb0:	81 1d       	adc	r24, r1
    1fb2:	81 1d       	adc	r24, r1
    1fb4:	08 95       	ret

00001fb6 <__fp_inf>:
    1fb6:	97 f9       	bld	r25, 7
    1fb8:	9f 67       	ori	r25, 0x7F	; 127
    1fba:	80 e8       	ldi	r24, 0x80	; 128
    1fbc:	70 e0       	ldi	r23, 0x00	; 0
    1fbe:	60 e0       	ldi	r22, 0x00	; 0
    1fc0:	08 95       	ret

00001fc2 <__fp_nan>:
    1fc2:	9f ef       	ldi	r25, 0xFF	; 255
    1fc4:	80 ec       	ldi	r24, 0xC0	; 192
    1fc6:	08 95       	ret

00001fc8 <__fp_pscA>:
    1fc8:	00 24       	eor	r0, r0
    1fca:	0a 94       	dec	r0
    1fcc:	16 16       	cp	r1, r22
    1fce:	17 06       	cpc	r1, r23
    1fd0:	18 06       	cpc	r1, r24
    1fd2:	09 06       	cpc	r0, r25
    1fd4:	08 95       	ret

00001fd6 <__fp_pscB>:
    1fd6:	00 24       	eor	r0, r0
    1fd8:	0a 94       	dec	r0
    1fda:	12 16       	cp	r1, r18
    1fdc:	13 06       	cpc	r1, r19
    1fde:	14 06       	cpc	r1, r20
    1fe0:	05 06       	cpc	r0, r21
    1fe2:	08 95       	ret

00001fe4 <__fp_round>:
    1fe4:	09 2e       	mov	r0, r25
    1fe6:	03 94       	inc	r0
    1fe8:	00 0c       	add	r0, r0
    1fea:	11 f4       	brne	.+4      	; 0x1ff0 <__fp_round+0xc>
    1fec:	88 23       	and	r24, r24
    1fee:	52 f0       	brmi	.+20     	; 0x2004 <__fp_round+0x20>
    1ff0:	bb 0f       	add	r27, r27
    1ff2:	40 f4       	brcc	.+16     	; 0x2004 <__fp_round+0x20>
    1ff4:	bf 2b       	or	r27, r31
    1ff6:	11 f4       	brne	.+4      	; 0x1ffc <__fp_round+0x18>
    1ff8:	60 ff       	sbrs	r22, 0
    1ffa:	04 c0       	rjmp	.+8      	; 0x2004 <__fp_round+0x20>
    1ffc:	6f 5f       	subi	r22, 0xFF	; 255
    1ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    2000:	8f 4f       	sbci	r24, 0xFF	; 255
    2002:	9f 4f       	sbci	r25, 0xFF	; 255
    2004:	08 95       	ret

00002006 <__fp_split3>:
    2006:	57 fd       	sbrc	r21, 7
    2008:	90 58       	subi	r25, 0x80	; 128
    200a:	44 0f       	add	r20, r20
    200c:	55 1f       	adc	r21, r21
    200e:	59 f0       	breq	.+22     	; 0x2026 <__fp_splitA+0x10>
    2010:	5f 3f       	cpi	r21, 0xFF	; 255
    2012:	71 f0       	breq	.+28     	; 0x2030 <__fp_splitA+0x1a>
    2014:	47 95       	ror	r20

00002016 <__fp_splitA>:
    2016:	88 0f       	add	r24, r24
    2018:	97 fb       	bst	r25, 7
    201a:	99 1f       	adc	r25, r25
    201c:	61 f0       	breq	.+24     	; 0x2036 <__fp_splitA+0x20>
    201e:	9f 3f       	cpi	r25, 0xFF	; 255
    2020:	79 f0       	breq	.+30     	; 0x2040 <__fp_splitA+0x2a>
    2022:	87 95       	ror	r24
    2024:	08 95       	ret
    2026:	12 16       	cp	r1, r18
    2028:	13 06       	cpc	r1, r19
    202a:	14 06       	cpc	r1, r20
    202c:	55 1f       	adc	r21, r21
    202e:	f2 cf       	rjmp	.-28     	; 0x2014 <__fp_split3+0xe>
    2030:	46 95       	lsr	r20
    2032:	f1 df       	rcall	.-30     	; 0x2016 <__fp_splitA>
    2034:	08 c0       	rjmp	.+16     	; 0x2046 <__fp_splitA+0x30>
    2036:	16 16       	cp	r1, r22
    2038:	17 06       	cpc	r1, r23
    203a:	18 06       	cpc	r1, r24
    203c:	99 1f       	adc	r25, r25
    203e:	f1 cf       	rjmp	.-30     	; 0x2022 <__fp_splitA+0xc>
    2040:	86 95       	lsr	r24
    2042:	71 05       	cpc	r23, r1
    2044:	61 05       	cpc	r22, r1
    2046:	08 94       	sec
    2048:	08 95       	ret

0000204a <__fp_zero>:
    204a:	e8 94       	clt

0000204c <__fp_szero>:
    204c:	bb 27       	eor	r27, r27
    204e:	66 27       	eor	r22, r22
    2050:	77 27       	eor	r23, r23
    2052:	cb 01       	movw	r24, r22
    2054:	97 f9       	bld	r25, 7
    2056:	08 95       	ret

00002058 <__gesf2>:
    2058:	8a df       	rcall	.-236    	; 0x1f6e <__fp_cmp>
    205a:	08 f4       	brcc	.+2      	; 0x205e <__gesf2+0x6>
    205c:	8f ef       	ldi	r24, 0xFF	; 255
    205e:	08 95       	ret

00002060 <clear>:
    2060:	e8 ed       	ldi	r30, 0xD8	; 216
    2062:	f1 e0       	ldi	r31, 0x01	; 1
    2064:	11 92       	st	Z+, r1
    2066:	83 e0       	ldi	r24, 0x03	; 3
    2068:	e0 3d       	cpi	r30, 0xD0	; 208
    206a:	f8 07       	cpc	r31, r24
    206c:	d9 f7       	brne	.-10     	; 0x2064 <clear+0x4>
    206e:	08 95       	ret

00002070 <set_pixel>:
    2070:	84 35       	cpi	r24, 0x54	; 84
    2072:	80 f5       	brcc	.+96     	; 0x20d4 <set_pixel+0x64>
    2074:	60 33       	cpi	r22, 0x30	; 48
    2076:	70 f5       	brcc	.+92     	; 0x20d4 <set_pixel+0x64>
    2078:	26 2f       	mov	r18, r22
    207a:	26 95       	lsr	r18
    207c:	26 95       	lsr	r18
    207e:	26 95       	lsr	r18
    2080:	67 70       	andi	r22, 0x07	; 7
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	44 23       	and	r20, r20
    2086:	99 f0       	breq	.+38     	; 0x20ae <set_pixel+0x3e>
    2088:	e4 e5       	ldi	r30, 0x54	; 84
    208a:	2e 9f       	mul	r18, r30
    208c:	f0 01       	movw	r30, r0
    208e:	11 24       	eor	r1, r1
    2090:	e8 0f       	add	r30, r24
    2092:	f9 1f       	adc	r31, r25
    2094:	e8 52       	subi	r30, 0x28	; 40
    2096:	fe 4f       	sbci	r31, 0xFE	; 254
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <set_pixel+0x32>
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	6a 95       	dec	r22
    20a4:	e2 f7       	brpl	.-8      	; 0x209e <set_pixel+0x2e>
    20a6:	20 81       	ld	r18, Z
    20a8:	28 2b       	or	r18, r24
    20aa:	20 83       	st	Z, r18
    20ac:	08 95       	ret
    20ae:	e4 e5       	ldi	r30, 0x54	; 84
    20b0:	2e 9f       	mul	r18, r30
    20b2:	f0 01       	movw	r30, r0
    20b4:	11 24       	eor	r1, r1
    20b6:	e8 0f       	add	r30, r24
    20b8:	f9 1f       	adc	r31, r25
    20ba:	e8 52       	subi	r30, 0x28	; 40
    20bc:	fe 4f       	sbci	r31, 0xFE	; 254
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <set_pixel+0x58>
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	6a 95       	dec	r22
    20ca:	e2 f7       	brpl	.-8      	; 0x20c4 <set_pixel+0x54>
    20cc:	80 95       	com	r24
    20ce:	20 81       	ld	r18, Z
    20d0:	28 23       	and	r18, r24
    20d2:	20 83       	st	Z, r18
    20d4:	08 95       	ret

000020d6 <draw_line>:
    20d6:	2f 92       	push	r2
    20d8:	3f 92       	push	r3
    20da:	4f 92       	push	r4
    20dc:	5f 92       	push	r5
    20de:	6f 92       	push	r6
    20e0:	7f 92       	push	r7
    20e2:	8f 92       	push	r8
    20e4:	9f 92       	push	r9
    20e6:	af 92       	push	r10
    20e8:	bf 92       	push	r11
    20ea:	cf 92       	push	r12
    20ec:	df 92       	push	r13
    20ee:	ef 92       	push	r14
    20f0:	ff 92       	push	r15
    20f2:	0f 93       	push	r16
    20f4:	1f 93       	push	r17
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	66 97       	sbiw	r28, 0x16	; 22
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	cd bf       	out	0x3d, r28	; 61
    210a:	c8 2e       	mov	r12, r24
    210c:	d6 2e       	mov	r13, r22
    210e:	49 87       	std	Y+9, r20	; 0x09
    2110:	2a 87       	std	Y+10, r18	; 0x0a
    2112:	84 17       	cp	r24, r20
    2114:	59 f4       	brne	.+22     	; 0x212c <draw_line+0x56>
    2116:	16 2f       	mov	r17, r22
    2118:	05 c0       	rjmp	.+10     	; 0x2124 <draw_line+0x4e>
    211a:	8c 2d       	mov	r24, r12
    211c:	61 2f       	mov	r22, r17
    211e:	41 e0       	ldi	r20, 0x01	; 1
    2120:	a7 df       	rcall	.-178    	; 0x2070 <set_pixel>
    2122:	1f 5f       	subi	r17, 0xFF	; 255
    2124:	2a 85       	ldd	r18, Y+10	; 0x0a
    2126:	21 17       	cp	r18, r17
    2128:	c0 f7       	brcc	.-16     	; 0x211a <draw_line+0x44>
    212a:	a3 c1       	rjmp	.+838    	; 0x2472 <draw_line+0x39c>
    212c:	3a 85       	ldd	r19, Y+10	; 0x0a
    212e:	63 17       	cp	r22, r19
    2130:	59 f4       	brne	.+22     	; 0x2148 <draw_line+0x72>
    2132:	18 2f       	mov	r17, r24
    2134:	05 c0       	rjmp	.+10     	; 0x2140 <draw_line+0x6a>
    2136:	81 2f       	mov	r24, r17
    2138:	6d 2d       	mov	r22, r13
    213a:	41 e0       	ldi	r20, 0x01	; 1
    213c:	99 df       	rcall	.-206    	; 0x2070 <set_pixel>
    213e:	1f 5f       	subi	r17, 0xFF	; 255
    2140:	49 85       	ldd	r20, Y+9	; 0x09
    2142:	41 17       	cp	r20, r17
    2144:	c0 f7       	brcc	.-16     	; 0x2136 <draw_line+0x60>
    2146:	95 c1       	rjmp	.+810    	; 0x2472 <draw_line+0x39c>
    2148:	5a 85       	ldd	r21, Y+10	; 0x0a
    214a:	65 2f       	mov	r22, r21
    214c:	70 e0       	ldi	r23, 0x00	; 0
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	d0 de       	rcall	.-608    	; 0x1ef4 <__floatunsisf>
    2154:	7b 01       	movw	r14, r22
    2156:	8c 01       	movw	r16, r24
    2158:	8d 2d       	mov	r24, r13
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	9c 87       	std	Y+12, r25	; 0x0c
    215e:	8b 87       	std	Y+11, r24	; 0x0b
    2160:	fc 01       	movw	r30, r24
    2162:	bf 01       	movw	r22, r30
    2164:	88 27       	eor	r24, r24
    2166:	77 fd       	sbrc	r23, 7
    2168:	80 95       	com	r24
    216a:	98 2f       	mov	r25, r24
    216c:	c5 de       	rcall	.-630    	; 0x1ef8 <__floatsisf>
    216e:	9b 01       	movw	r18, r22
    2170:	ac 01       	movw	r20, r24
    2172:	c8 01       	movw	r24, r16
    2174:	b7 01       	movw	r22, r14
    2176:	24 de       	rcall	.-952    	; 0x1dc0 <__subsf3>
    2178:	1b 01       	movw	r2, r22
    217a:	2c 01       	movw	r4, r24
    217c:	f9 85       	ldd	r31, Y+9	; 0x09
    217e:	6f 2f       	mov	r22, r31
    2180:	70 e0       	ldi	r23, 0x00	; 0
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	b6 de       	rcall	.-660    	; 0x1ef4 <__floatunsisf>
    2188:	7b 01       	movw	r14, r22
    218a:	8c 01       	movw	r16, r24
    218c:	ac 2c       	mov	r10, r12
    218e:	bb 24       	eor	r11, r11
    2190:	b5 01       	movw	r22, r10
    2192:	88 27       	eor	r24, r24
    2194:	77 fd       	sbrc	r23, 7
    2196:	80 95       	com	r24
    2198:	98 2f       	mov	r25, r24
    219a:	ae de       	rcall	.-676    	; 0x1ef8 <__floatsisf>
    219c:	9b 01       	movw	r18, r22
    219e:	ac 01       	movw	r20, r24
    21a0:	c8 01       	movw	r24, r16
    21a2:	b7 01       	movw	r22, r14
    21a4:	0d de       	rcall	.-998    	; 0x1dc0 <__subsf3>
    21a6:	3b 01       	movw	r6, r22
    21a8:	4c 01       	movw	r8, r24
    21aa:	c2 01       	movw	r24, r4
    21ac:	b1 01       	movw	r22, r2
    21ae:	a4 01       	movw	r20, r8
    21b0:	93 01       	movw	r18, r6
    21b2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__divsf3>
    21b6:	7b 01       	movw	r14, r22
    21b8:	8c 01       	movw	r16, r24
    21ba:	29 85       	ldd	r18, Y+9	; 0x09
    21bc:	c2 16       	cp	r12, r18
    21be:	08 f0       	brcs	.+2      	; 0x21c2 <draw_line+0xec>
    21c0:	38 c0       	rjmp	.+112    	; 0x2232 <draw_line+0x15c>
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e8       	ldi	r20, 0x80	; 128
    21c8:	5f e3       	ldi	r21, 0x3F	; 63
    21ca:	46 df       	rcall	.-372    	; 0x2058 <__gesf2>
    21cc:	18 16       	cp	r1, r24
    21ce:	24 f4       	brge	.+8      	; 0x21d8 <draw_line+0x102>
    21d0:	71 e0       	ldi	r23, 0x01	; 1
    21d2:	c7 2e       	mov	r12, r23
    21d4:	d1 2c       	mov	r13, r1
    21d6:	37 c1       	rjmp	.+622    	; 0x2446 <draw_line+0x370>
    21d8:	c8 01       	movw	r24, r16
    21da:	b7 01       	movw	r22, r14
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e8       	ldi	r20, 0x80	; 128
    21e2:	5f e3       	ldi	r21, 0x3F	; 63
    21e4:	52 de       	rcall	.-860    	; 0x1e8a <__cmpsf2>
    21e6:	18 16       	cp	r1, r24
    21e8:	64 f0       	brlt	.+24     	; 0x2202 <draw_line+0x12c>
    21ea:	c8 01       	movw	r24, r16
    21ec:	b7 01       	movw	r22, r14
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	50 e0       	ldi	r21, 0x00	; 0
    21f6:	30 df       	rcall	.-416    	; 0x2058 <__gesf2>
    21f8:	18 16       	cp	r1, r24
    21fa:	1c f4       	brge	.+6      	; 0x2202 <draw_line+0x12c>
    21fc:	cc 24       	eor	r12, r12
    21fe:	dd 24       	eor	r13, r13
    2200:	50 c0       	rjmp	.+160    	; 0x22a2 <draw_line+0x1cc>
    2202:	c8 01       	movw	r24, r16
    2204:	b7 01       	movw	r22, r14
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	3d de       	rcall	.-902    	; 0x1e8a <__cmpsf2>
    2210:	18 16       	cp	r1, r24
    2212:	0c f4       	brge	.+2      	; 0x2216 <draw_line+0x140>
    2214:	11 c1       	rjmp	.+546    	; 0x2438 <draw_line+0x362>
    2216:	c8 01       	movw	r24, r16
    2218:	b7 01       	movw	r22, r14
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e8       	ldi	r20, 0x80	; 128
    2220:	5f eb       	ldi	r21, 0xBF	; 191
    2222:	1a df       	rcall	.-460    	; 0x2058 <__gesf2>
    2224:	18 16       	cp	r1, r24
    2226:	0c f0       	brlt	.+2      	; 0x222a <draw_line+0x154>
    2228:	07 c1       	rjmp	.+526    	; 0x2438 <draw_line+0x362>
    222a:	67 e0       	ldi	r22, 0x07	; 7
    222c:	c6 2e       	mov	r12, r22
    222e:	d1 2c       	mov	r13, r1
    2230:	38 c0       	rjmp	.+112    	; 0x22a2 <draw_line+0x1cc>
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e8       	ldi	r20, 0x80	; 128
    2238:	5f e3       	ldi	r21, 0x3F	; 63
    223a:	0e df       	rcall	.-484    	; 0x2058 <__gesf2>
    223c:	18 16       	cp	r1, r24
    223e:	24 f4       	brge	.+8      	; 0x2248 <draw_line+0x172>
    2240:	55 e0       	ldi	r21, 0x05	; 5
    2242:	c5 2e       	mov	r12, r21
    2244:	d1 2c       	mov	r13, r1
    2246:	ff c0       	rjmp	.+510    	; 0x2446 <draw_line+0x370>
    2248:	c8 01       	movw	r24, r16
    224a:	b7 01       	movw	r22, r14
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	1a de       	rcall	.-972    	; 0x1e8a <__cmpsf2>
    2256:	18 16       	cp	r1, r24
    2258:	6c f0       	brlt	.+26     	; 0x2274 <draw_line+0x19e>
    225a:	c8 01       	movw	r24, r16
    225c:	b7 01       	movw	r22, r14
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	50 e0       	ldi	r21, 0x00	; 0
    2266:	f8 de       	rcall	.-528    	; 0x2058 <__gesf2>
    2268:	18 16       	cp	r1, r24
    226a:	24 f4       	brge	.+8      	; 0x2274 <draw_line+0x19e>
    226c:	44 e0       	ldi	r20, 0x04	; 4
    226e:	c4 2e       	mov	r12, r20
    2270:	d1 2c       	mov	r13, r1
    2272:	17 c0       	rjmp	.+46     	; 0x22a2 <draw_line+0x1cc>
    2274:	c8 01       	movw	r24, r16
    2276:	b7 01       	movw	r22, r14
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e0       	ldi	r20, 0x00	; 0
    227e:	50 e0       	ldi	r21, 0x00	; 0
    2280:	04 de       	rcall	.-1016   	; 0x1e8a <__cmpsf2>
    2282:	18 16       	cp	r1, r24
    2284:	0c f4       	brge	.+2      	; 0x2288 <draw_line+0x1b2>
    2286:	dc c0       	rjmp	.+440    	; 0x2440 <draw_line+0x36a>
    2288:	c8 01       	movw	r24, r16
    228a:	b7 01       	movw	r22, r14
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	40 e8       	ldi	r20, 0x80	; 128
    2292:	5f eb       	ldi	r21, 0xBF	; 191
    2294:	e1 de       	rcall	.-574    	; 0x2058 <__gesf2>
    2296:	18 16       	cp	r1, r24
    2298:	0c f0       	brlt	.+2      	; 0x229c <draw_line+0x1c6>
    229a:	d2 c0       	rjmp	.+420    	; 0x2440 <draw_line+0x36a>
    229c:	33 e0       	ldi	r19, 0x03	; 3
    229e:	c3 2e       	mov	r12, r19
    22a0:	d1 2c       	mov	r13, r1
    22a2:	4b 85       	ldd	r20, Y+11	; 0x0b
    22a4:	5c 85       	ldd	r21, Y+12	; 0x0c
    22a6:	5a 83       	std	Y+2, r21	; 0x02
    22a8:	49 83       	std	Y+1, r20	; 0x01
    22aa:	be 82       	std	Y+6, r11	; 0x06
    22ac:	ad 82       	std	Y+5, r10	; 0x05
    22ae:	99 85       	ldd	r25, Y+9	; 0x09
    22b0:	89 2f       	mov	r24, r25
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	9c 83       	std	Y+4, r25	; 0x04
    22b6:	8b 83       	std	Y+3, r24	; 0x03
    22b8:	17 01       	movw	r2, r14
    22ba:	28 01       	movw	r4, r16
    22bc:	e1 e0       	ldi	r30, 0x01	; 1
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	f8 87       	std	Y+8, r31	; 0x08
    22c2:	ef 83       	std	Y+7, r30	; 0x07
    22c4:	f7 e0       	ldi	r31, 0x07	; 7
    22c6:	cf 16       	cp	r12, r31
    22c8:	d1 04       	cpc	r13, r1
    22ca:	28 f4       	brcc	.+10     	; 0x22d6 <draw_line+0x200>
    22cc:	23 e0       	ldi	r18, 0x03	; 3
    22ce:	c2 16       	cp	r12, r18
    22d0:	d1 04       	cpc	r13, r1
    22d2:	40 f4       	brcc	.+16     	; 0x22e4 <draw_line+0x20e>
    22d4:	04 c0       	rjmp	.+8      	; 0x22de <draw_line+0x208>
    22d6:	37 e0       	ldi	r19, 0x07	; 7
    22d8:	c3 16       	cp	r12, r19
    22da:	d1 04       	cpc	r13, r1
    22dc:	29 f4       	brne	.+10     	; 0x22e8 <draw_line+0x212>
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <draw_line+0x212>
    22e4:	8f ef       	ldi	r24, 0xFF	; 255
    22e6:	9f ef       	ldi	r25, 0xFF	; 255
    22e8:	ad 80       	ldd	r10, Y+5	; 0x05
    22ea:	be 80       	ldd	r11, Y+6	; 0x06
    22ec:	0f 2e       	mov	r0, r31
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	6f 2e       	mov	r6, r31
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	7f 2e       	mov	r7, r31
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	8f 2e       	mov	r8, r31
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	9f 2e       	mov	r9, r31
    22fe:	f0 2d       	mov	r31, r0
    2300:	a2 01       	movw	r20, r4
    2302:	91 01       	movw	r18, r2
    2304:	50 58       	subi	r21, 0x80	; 128
    2306:	2d 87       	std	Y+13, r18	; 0x0d
    2308:	3e 87       	std	Y+14, r19	; 0x0e
    230a:	4f 87       	std	Y+15, r20	; 0x0f
    230c:	58 8b       	std	Y+16, r21	; 0x10
    230e:	9c 01       	movw	r18, r24
    2310:	44 27       	eor	r20, r20
    2312:	37 fd       	sbrc	r19, 7
    2314:	40 95       	com	r20
    2316:	54 2f       	mov	r21, r20
    2318:	29 8b       	std	Y+17, r18	; 0x11
    231a:	3a 8b       	std	Y+18, r19	; 0x12
    231c:	4b 8b       	std	Y+19, r20	; 0x13
    231e:	5c 8b       	std	Y+20, r21	; 0x14
    2320:	7a c0       	rjmp	.+244    	; 0x2416 <draw_line+0x340>
    2322:	4f 81       	ldd	r20, Y+7	; 0x07
    2324:	58 85       	ldd	r21, Y+8	; 0x08
    2326:	45 2b       	or	r20, r21
    2328:	19 f0       	breq	.+6      	; 0x2330 <draw_line+0x25a>
    232a:	8a 2d       	mov	r24, r10
    232c:	69 81       	ldd	r22, Y+1	; 0x01
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <draw_line+0x25e>
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	6a 2d       	mov	r22, r10
    2334:	41 e0       	ldi	r20, 0x01	; 1
    2336:	9c de       	rcall	.-712    	; 0x2070 <set_pixel>
    2338:	c2 01       	movw	r24, r4
    233a:	b1 01       	movw	r22, r2
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e0       	ldi	r20, 0x00	; 0
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	89 de       	rcall	.-750    	; 0x2058 <__gesf2>
    2346:	88 23       	and	r24, r24
    2348:	1c f0       	brlt	.+6      	; 0x2350 <draw_line+0x27a>
    234a:	a2 01       	movw	r20, r4
    234c:	91 01       	movw	r18, r2
    234e:	04 c0       	rjmp	.+8      	; 0x2358 <draw_line+0x282>
    2350:	2d 85       	ldd	r18, Y+13	; 0x0d
    2352:	3e 85       	ldd	r19, Y+14	; 0x0e
    2354:	4f 85       	ldd	r20, Y+15	; 0x0f
    2356:	58 89       	ldd	r21, Y+16	; 0x10
    2358:	c4 01       	movw	r24, r8
    235a:	b3 01       	movw	r22, r6
    235c:	32 dd       	rcall	.-1436   	; 0x1dc2 <__addsf3>
    235e:	3b 01       	movw	r6, r22
    2360:	4c 01       	movw	r8, r24
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e0       	ldi	r20, 0x00	; 0
    2368:	5f e3       	ldi	r21, 0x3F	; 63
    236a:	76 de       	rcall	.-788    	; 0x2058 <__gesf2>
    236c:	18 16       	cp	r1, r24
    236e:	0c f0       	brlt	.+2      	; 0x2372 <draw_line+0x29c>
    2370:	44 c0       	rjmp	.+136    	; 0x23fa <draw_line+0x324>
    2372:	69 89       	ldd	r22, Y+17	; 0x11
    2374:	7a 89       	ldd	r23, Y+18	; 0x12
    2376:	8b 89       	ldd	r24, Y+19	; 0x13
    2378:	9c 89       	ldd	r25, Y+20	; 0x14
    237a:	be dd       	rcall	.-1156   	; 0x1ef8 <__floatsisf>
    237c:	9b 01       	movw	r18, r22
    237e:	ac 01       	movw	r20, r24
    2380:	c2 01       	movw	r24, r4
    2382:	b1 01       	movw	r22, r2
    2384:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__mulsf3>
    2388:	7b 01       	movw	r14, r22
    238a:	8c 01       	movw	r16, r24
    238c:	1e 8a       	std	Y+22, r1	; 0x16
    238e:	1d 8a       	std	Y+21, r1	; 0x15
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	50 e0       	ldi	r21, 0x00	; 0
    2398:	5f de       	rcall	.-834    	; 0x2058 <__gesf2>
    239a:	18 16       	cp	r1, r24
    239c:	24 f4       	brge	.+8      	; 0x23a6 <draw_line+0x2d0>
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	9e 8b       	std	Y+22, r25	; 0x16
    23a4:	8d 8b       	std	Y+21, r24	; 0x15
    23a6:	cc 24       	eor	r12, r12
    23a8:	dd 24       	eor	r13, r13
    23aa:	c8 01       	movw	r24, r16
    23ac:	b7 01       	movw	r22, r14
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e0       	ldi	r20, 0x00	; 0
    23b4:	50 e0       	ldi	r21, 0x00	; 0
    23b6:	69 dd       	rcall	.-1326   	; 0x1e8a <__cmpsf2>
    23b8:	88 23       	and	r24, r24
    23ba:	1c f4       	brge	.+6      	; 0x23c2 <draw_line+0x2ec>
    23bc:	21 e0       	ldi	r18, 0x01	; 1
    23be:	c2 2e       	mov	r12, r18
    23c0:	d1 2c       	mov	r13, r1
    23c2:	ed 89       	ldd	r30, Y+21	; 0x15
    23c4:	fe 89       	ldd	r31, Y+22	; 0x16
    23c6:	ec 19       	sub	r30, r12
    23c8:	fd 09       	sbc	r31, r13
    23ca:	31 97       	sbiw	r30, 0x01	; 1
    23cc:	39 f4       	brne	.+14     	; 0x23dc <draw_line+0x306>
    23ce:	29 81       	ldd	r18, Y+1	; 0x01
    23d0:	3a 81       	ldd	r19, Y+2	; 0x02
    23d2:	2f 5f       	subi	r18, 0xFF	; 255
    23d4:	3f 4f       	sbci	r19, 0xFF	; 255
    23d6:	3a 83       	std	Y+2, r19	; 0x02
    23d8:	29 83       	std	Y+1, r18	; 0x01
    23da:	06 c0       	rjmp	.+12     	; 0x23e8 <draw_line+0x312>
    23dc:	49 81       	ldd	r20, Y+1	; 0x01
    23de:	5a 81       	ldd	r21, Y+2	; 0x02
    23e0:	41 50       	subi	r20, 0x01	; 1
    23e2:	50 40       	sbci	r21, 0x00	; 0
    23e4:	5a 83       	std	Y+2, r21	; 0x02
    23e6:	49 83       	std	Y+1, r20	; 0x01
    23e8:	c4 01       	movw	r24, r8
    23ea:	b3 01       	movw	r22, r6
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e8       	ldi	r20, 0x80	; 128
    23f2:	5f e3       	ldi	r21, 0x3F	; 63
    23f4:	e5 dc       	rcall	.-1590   	; 0x1dc0 <__subsf3>
    23f6:	3b 01       	movw	r6, r22
    23f8:	4c 01       	movw	r8, r24
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	ed 81       	ldd	r30, Y+5	; 0x05
    2400:	fe 81       	ldd	r31, Y+6	; 0x06
    2402:	e8 17       	cp	r30, r24
    2404:	f9 07       	cpc	r31, r25
    2406:	20 f4       	brcc	.+8      	; 0x2410 <draw_line+0x33a>
    2408:	08 94       	sec
    240a:	a1 1c       	adc	r10, r1
    240c:	b1 1c       	adc	r11, r1
    240e:	03 c0       	rjmp	.+6      	; 0x2416 <draw_line+0x340>
    2410:	08 94       	sec
    2412:	a1 08       	sbc	r10, r1
    2414:	b1 08       	sbc	r11, r1
    2416:	2b 81       	ldd	r18, Y+3	; 0x03
    2418:	3c 81       	ldd	r19, Y+4	; 0x04
    241a:	4d 81       	ldd	r20, Y+5	; 0x05
    241c:	5e 81       	ldd	r21, Y+6	; 0x06
    241e:	42 17       	cp	r20, r18
    2420:	53 07       	cpc	r21, r19
    2422:	20 f4       	brcc	.+8      	; 0x242c <draw_line+0x356>
    2424:	2a 15       	cp	r18, r10
    2426:	3b 05       	cpc	r19, r11
    2428:	20 f1       	brcs	.+72     	; 0x2472 <draw_line+0x39c>
    242a:	7b cf       	rjmp	.-266    	; 0x2322 <draw_line+0x24c>
    242c:	8b 81       	ldd	r24, Y+3	; 0x03
    242e:	9c 81       	ldd	r25, Y+4	; 0x04
    2430:	a8 16       	cp	r10, r24
    2432:	b9 06       	cpc	r11, r25
    2434:	f0 f0       	brcs	.+60     	; 0x2472 <draw_line+0x39c>
    2436:	75 cf       	rjmp	.-278    	; 0x2322 <draw_line+0x24c>
    2438:	96 e0       	ldi	r25, 0x06	; 6
    243a:	c9 2e       	mov	r12, r25
    243c:	d1 2c       	mov	r13, r1
    243e:	03 c0       	rjmp	.+6      	; 0x2446 <draw_line+0x370>
    2440:	82 e0       	ldi	r24, 0x02	; 2
    2442:	c8 2e       	mov	r12, r24
    2444:	d1 2c       	mov	r13, r1
    2446:	c4 01       	movw	r24, r8
    2448:	b3 01       	movw	r22, r6
    244a:	a2 01       	movw	r20, r4
    244c:	91 01       	movw	r18, r2
    244e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__divsf3>
    2452:	1b 01       	movw	r2, r22
    2454:	2c 01       	movw	r4, r24
    2456:	ba 82       	std	Y+2, r11	; 0x02
    2458:	a9 82       	std	Y+1, r10	; 0x01
    245a:	eb 85       	ldd	r30, Y+11	; 0x0b
    245c:	fc 85       	ldd	r31, Y+12	; 0x0c
    245e:	fe 83       	std	Y+6, r31	; 0x06
    2460:	ed 83       	std	Y+5, r30	; 0x05
    2462:	3a 85       	ldd	r19, Y+10	; 0x0a
    2464:	23 2f       	mov	r18, r19
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	3c 83       	std	Y+4, r19	; 0x04
    246a:	2b 83       	std	Y+3, r18	; 0x03
    246c:	18 86       	std	Y+8, r1	; 0x08
    246e:	1f 82       	std	Y+7, r1	; 0x07
    2470:	29 cf       	rjmp	.-430    	; 0x22c4 <draw_line+0x1ee>
    2472:	66 96       	adiw	r28, 0x16	; 22
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	cd bf       	out	0x3d, r28	; 61
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	1f 91       	pop	r17
    2484:	0f 91       	pop	r16
    2486:	ff 90       	pop	r15
    2488:	ef 90       	pop	r14
    248a:	df 90       	pop	r13
    248c:	cf 90       	pop	r12
    248e:	bf 90       	pop	r11
    2490:	af 90       	pop	r10
    2492:	9f 90       	pop	r9
    2494:	8f 90       	pop	r8
    2496:	7f 90       	pop	r7
    2498:	6f 90       	pop	r6
    249a:	5f 90       	pop	r5
    249c:	4f 90       	pop	r4
    249e:	3f 90       	pop	r3
    24a0:	2f 90       	pop	r2
    24a2:	08 95       	ret

000024a4 <draw_character>:
    24a4:	8f 92       	push	r8
    24a6:	9f 92       	push	r9
    24a8:	af 92       	push	r10
    24aa:	bf 92       	push	r11
    24ac:	cf 92       	push	r12
    24ae:	df 92       	push	r13
    24b0:	ef 92       	push	r14
    24b2:	ff 92       	push	r15
    24b4:	0f 93       	push	r16
    24b6:	1f 93       	push	r17
    24b8:	cf 93       	push	r28
    24ba:	df 93       	push	r29
    24bc:	d6 2e       	mov	r13, r22
    24be:	c4 2e       	mov	r12, r20
    24c0:	95 e0       	ldi	r25, 0x05	; 5
    24c2:	89 9f       	mul	r24, r25
    24c4:	c0 01       	movw	r24, r0
    24c6:	11 24       	eor	r1, r1
    24c8:	8c 01       	movw	r16, r24
    24ca:	04 5f       	subi	r16, 0xF4	; 244
    24cc:	1f 4f       	sbci	r17, 0xFF	; 255
    24ce:	f1 e0       	ldi	r31, 0x01	; 1
    24d0:	8f 2e       	mov	r8, r31
    24d2:	91 2c       	mov	r9, r1
    24d4:	e1 e1       	ldi	r30, 0x11	; 17
    24d6:	ae 2e       	mov	r10, r30
    24d8:	e0 e0       	ldi	r30, 0x00	; 0
    24da:	be 2e       	mov	r11, r30
    24dc:	a8 0e       	add	r10, r24
    24de:	b9 1e       	adc	r11, r25
    24e0:	1d c0       	rjmp	.+58     	; 0x251c <draw_character+0x78>
    24e2:	6c 2d       	mov	r22, r12
    24e4:	6c 0f       	add	r22, r28
    24e6:	a4 01       	movw	r20, r8
    24e8:	0c 2e       	mov	r0, r28
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <draw_character+0x4c>
    24ec:	44 0f       	add	r20, r20
    24ee:	55 1f       	adc	r21, r21
    24f0:	0a 94       	dec	r0
    24f2:	e2 f7       	brpl	.-8      	; 0x24ec <draw_character+0x48>
    24f4:	4e 21       	and	r20, r14
    24f6:	5f 21       	and	r21, r15
    24f8:	0c 2e       	mov	r0, r28
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <draw_character+0x5c>
    24fc:	55 95       	asr	r21
    24fe:	47 95       	ror	r20
    2500:	0a 94       	dec	r0
    2502:	e2 f7       	brpl	.-8      	; 0x24fc <draw_character+0x58>
    2504:	8d 2d       	mov	r24, r13
    2506:	b4 dd       	rcall	.-1176   	; 0x2070 <set_pixel>
    2508:	21 96       	adiw	r28, 0x01	; 1
    250a:	c8 30       	cpi	r28, 0x08	; 8
    250c:	d1 05       	cpc	r29, r1
    250e:	49 f7       	brne	.-46     	; 0x24e2 <draw_character+0x3e>
    2510:	0f 5f       	subi	r16, 0xFF	; 255
    2512:	1f 4f       	sbci	r17, 0xFF	; 255
    2514:	d3 94       	inc	r13
    2516:	0a 15       	cp	r16, r10
    2518:	1b 05       	cpc	r17, r11
    251a:	39 f0       	breq	.+14     	; 0x252a <draw_character+0x86>
    251c:	c0 e0       	ldi	r28, 0x00	; 0
    251e:	d0 e0       	ldi	r29, 0x00	; 0
    2520:	f8 01       	movw	r30, r16
    2522:	84 91       	lpm	r24, Z+
    2524:	e8 2e       	mov	r14, r24
    2526:	ff 24       	eor	r15, r15
    2528:	dc cf       	rjmp	.-72     	; 0x24e2 <draw_character+0x3e>
    252a:	df 91       	pop	r29
    252c:	cf 91       	pop	r28
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	ff 90       	pop	r15
    2534:	ef 90       	pop	r14
    2536:	df 90       	pop	r13
    2538:	cf 90       	pop	r12
    253a:	bf 90       	pop	r11
    253c:	af 90       	pop	r10
    253e:	9f 90       	pop	r9
    2540:	8f 90       	pop	r8
    2542:	08 95       	ret

00002544 <draw_string>:
    2544:	0f 93       	push	r16
    2546:	1f 93       	push	r17
    2548:	cf 93       	push	r28
    254a:	df 93       	push	r29
    254c:	ec 01       	movw	r28, r24
    254e:	16 2f       	mov	r17, r22
    2550:	04 2f       	mov	r16, r20
    2552:	05 c0       	rjmp	.+10     	; 0x255e <draw_string+0x1a>
    2554:	61 2f       	mov	r22, r17
    2556:	40 2f       	mov	r20, r16
    2558:	a5 df       	rcall	.-182    	; 0x24a4 <draw_character>
    255a:	21 96       	adiw	r28, 0x01	; 1
    255c:	1b 5f       	subi	r17, 0xFB	; 251
    255e:	88 81       	ld	r24, Y
    2560:	88 23       	and	r24, r24
    2562:	c1 f7       	brne	.-16     	; 0x2554 <draw_string+0x10>
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	1f 91       	pop	r17
    256a:	0f 91       	pop	r16
    256c:	08 95       	ret

0000256e <refresh>:
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	60 e0       	ldi	r22, 0x00	; 0
    2576:	55 d0       	rcall	.+170    	; 0x2622 <LCDPosition>
    2578:	c8 ed       	ldi	r28, 0xD8	; 216
    257a:	d1 e0       	ldi	r29, 0x01	; 1
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	69 91       	ld	r22, Y+
    2580:	07 d0       	rcall	.+14     	; 0x2590 <LCDWrite>
    2582:	83 e0       	ldi	r24, 0x03	; 3
    2584:	c0 3d       	cpi	r28, 0xD0	; 208
    2586:	d8 07       	cpc	r29, r24
    2588:	c9 f7       	brne	.-14     	; 0x257c <refresh+0xe>
    258a:	df 91       	pop	r29
    258c:	cf 91       	pop	r28
    258e:	08 95       	ret

00002590 <LCDWrite>:
    2590:	95 b1       	in	r25, 0x05	; 5
    2592:	82 95       	swap	r24
    2594:	88 0f       	add	r24, r24
    2596:	80 7e       	andi	r24, 0xE0	; 224
    2598:	9f 7d       	andi	r25, 0xDF	; 223
    259a:	98 2b       	or	r25, r24
    259c:	95 b9       	out	0x05, r25	; 5
    259e:	5f 98       	cbi	0x0b, 7	; 11
    25a0:	27 e0       	ldi	r18, 0x07	; 7
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	70 e0       	ldi	r23, 0x00	; 0
    25a6:	8f 98       	cbi	0x11, 7	; 17
    25a8:	cb 01       	movw	r24, r22
    25aa:	02 2e       	mov	r0, r18
    25ac:	02 c0       	rjmp	.+4      	; 0x25b2 <LCDWrite+0x22>
    25ae:	95 95       	asr	r25
    25b0:	87 95       	ror	r24
    25b2:	0a 94       	dec	r0
    25b4:	e2 f7       	brpl	.-8      	; 0x25ae <LCDWrite+0x1e>
    25b6:	80 ff       	sbrs	r24, 0
    25b8:	02 c0       	rjmp	.+4      	; 0x25be <LCDWrite+0x2e>
    25ba:	2e 9a       	sbi	0x05, 6	; 5
    25bc:	01 c0       	rjmp	.+2      	; 0x25c0 <LCDWrite+0x30>
    25be:	2e 98       	cbi	0x05, 6	; 5
    25c0:	8f 9a       	sbi	0x11, 7	; 17
    25c2:	21 50       	subi	r18, 0x01	; 1
    25c4:	30 40       	sbci	r19, 0x00	; 0
    25c6:	8f ef       	ldi	r24, 0xFF	; 255
    25c8:	2f 3f       	cpi	r18, 0xFF	; 255
    25ca:	38 07       	cpc	r19, r24
    25cc:	61 f7       	brne	.-40     	; 0x25a6 <LCDWrite+0x16>
    25ce:	5f 9a       	sbi	0x0b, 7	; 11
    25d0:	08 95       	ret

000025d2 <LCDInitialise>:
    25d2:	1f 93       	push	r17
    25d4:	18 2f       	mov	r17, r24
    25d6:	57 9a       	sbi	0x0a, 7	; 10
    25d8:	24 9a       	sbi	0x04, 4	; 4
    25da:	25 9a       	sbi	0x04, 5	; 4
    25dc:	26 9a       	sbi	0x04, 6	; 4
    25de:	87 9a       	sbi	0x10, 7	; 16
    25e0:	2c 98       	cbi	0x05, 4	; 5
    25e2:	5f 9a       	sbi	0x0b, 7	; 11
    25e4:	2c 9a       	sbi	0x05, 4	; 5
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	61 e2       	ldi	r22, 0x21	; 33
    25ea:	d2 df       	rcall	.-92     	; 0x2590 <LCDWrite>
    25ec:	10 68       	ori	r17, 0x80	; 128
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	61 2f       	mov	r22, r17
    25f2:	ce df       	rcall	.-100    	; 0x2590 <LCDWrite>
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	64 e0       	ldi	r22, 0x04	; 4
    25f8:	cb df       	rcall	.-106    	; 0x2590 <LCDWrite>
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	63 e1       	ldi	r22, 0x13	; 19
    25fe:	c8 df       	rcall	.-112    	; 0x2590 <LCDWrite>
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	6c e0       	ldi	r22, 0x0C	; 12
    2604:	c5 df       	rcall	.-118    	; 0x2590 <LCDWrite>
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	60 e2       	ldi	r22, 0x20	; 32
    260a:	c2 df       	rcall	.-124    	; 0x2590 <LCDWrite>
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	6c e0       	ldi	r22, 0x0C	; 12
    2610:	bf df       	rcall	.-130    	; 0x2590 <LCDWrite>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	60 e4       	ldi	r22, 0x40	; 64
    2616:	bc df       	rcall	.-136    	; 0x2590 <LCDWrite>
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	60 e8       	ldi	r22, 0x80	; 128
    261c:	b9 df       	rcall	.-142    	; 0x2590 <LCDWrite>
    261e:	1f 91       	pop	r17
    2620:	08 95       	ret

00002622 <LCDPosition>:
    2622:	1f 93       	push	r17
    2624:	18 2f       	mov	r17, r24
    2626:	60 64       	ori	r22, 0x40	; 64
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	b2 df       	rcall	.-156    	; 0x2590 <LCDWrite>
    262c:	10 68       	ori	r17, 0x80	; 128
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	61 2f       	mov	r22, r17
    2632:	ae df       	rcall	.-164    	; 0x2590 <LCDWrite>
    2634:	1f 91       	pop	r17
    2636:	08 95       	ret

00002638 <init_sprite>:
    2638:	8f 92       	push	r8
    263a:	9f 92       	push	r9
    263c:	af 92       	push	r10
    263e:	bf 92       	push	r11
    2640:	cf 92       	push	r12
    2642:	df 92       	push	r13
    2644:	ef 92       	push	r14
    2646:	ff 92       	push	r15
    2648:	0f 93       	push	r16
    264a:	1f 93       	push	r17
    264c:	4c 01       	movw	r8, r24
    264e:	a4 2e       	mov	r10, r20
    2650:	12 2f       	mov	r17, r18
    2652:	70 e0       	ldi	r23, 0x00	; 0
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	4d dc       	rcall	.-1894   	; 0x1ef4 <__floatunsisf>
    265a:	f4 01       	movw	r30, r8
    265c:	60 83       	st	Z, r22
    265e:	71 83       	std	Z+1, r23	; 0x01
    2660:	82 83       	std	Z+2, r24	; 0x02
    2662:	93 83       	std	Z+3, r25	; 0x03
    2664:	bb 24       	eor	r11, r11
    2666:	cc 24       	eor	r12, r12
    2668:	dd 24       	eor	r13, r13
    266a:	c6 01       	movw	r24, r12
    266c:	b5 01       	movw	r22, r10
    266e:	42 dc       	rcall	.-1916   	; 0x1ef4 <__floatunsisf>
    2670:	f4 01       	movw	r30, r8
    2672:	64 83       	std	Z+4, r22	; 0x04
    2674:	75 83       	std	Z+5, r23	; 0x05
    2676:	86 83       	std	Z+6, r24	; 0x06
    2678:	97 83       	std	Z+7, r25	; 0x07
    267a:	10 87       	std	Z+8, r17	; 0x08
    267c:	01 87       	std	Z+9, r16	; 0x09
    267e:	f4 86       	std	Z+12, r15	; 0x0c
    2680:	e3 86       	std	Z+11, r14	; 0x0b
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	ff 90       	pop	r15
    2688:	ef 90       	pop	r14
    268a:	df 90       	pop	r13
    268c:	cf 90       	pop	r12
    268e:	bf 90       	pop	r11
    2690:	af 90       	pop	r10
    2692:	9f 90       	pop	r9
    2694:	8f 90       	pop	r8
    2696:	08 95       	ret

00002698 <draw_sprite>:
    2698:	2f 92       	push	r2
    269a:	3f 92       	push	r3
    269c:	4f 92       	push	r4
    269e:	5f 92       	push	r5
    26a0:	7f 92       	push	r7
    26a2:	8f 92       	push	r8
    26a4:	9f 92       	push	r9
    26a6:	af 92       	push	r10
    26a8:	bf 92       	push	r11
    26aa:	cf 92       	push	r12
    26ac:	df 92       	push	r13
    26ae:	ef 92       	push	r14
    26b0:	ff 92       	push	r15
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <draw_sprite+0x24>
    26bc:	00 d0       	rcall	.+0      	; 0x26be <draw_sprite+0x26>
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	2c 01       	movw	r4, r24
    26c4:	dc 01       	movw	r26, r24
    26c6:	1a 96       	adiw	r26, 0x0a	; 10
    26c8:	8c 91       	ld	r24, X
    26ca:	88 23       	and	r24, r24
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <draw_sprite+0x38>
    26ce:	96 c0       	rjmp	.+300    	; 0x27fc <draw_sprite+0x164>
    26d0:	22 24       	eor	r2, r2
    26d2:	33 24       	eor	r3, r3
    26d4:	1a 82       	std	Y+2, r1	; 0x02
    26d6:	19 82       	std	Y+1, r1	; 0x01
    26d8:	87 c0       	rjmp	.+270    	; 0x27e8 <draw_sprite+0x150>
    26da:	e9 81       	ldd	r30, Y+1	; 0x01
    26dc:	fa 81       	ldd	r31, Y+2	; 0x02
    26de:	bf 01       	movw	r22, r30
    26e0:	88 27       	eor	r24, r24
    26e2:	77 fd       	sbrc	r23, 7
    26e4:	80 95       	com	r24
    26e6:	98 2f       	mov	r25, r24
    26e8:	07 dc       	rcall	.-2034   	; 0x1ef8 <__floatsisf>
    26ea:	d2 01       	movw	r26, r4
    26ec:	14 96       	adiw	r26, 0x04	; 4
    26ee:	2d 91       	ld	r18, X+
    26f0:	3d 91       	ld	r19, X+
    26f2:	4d 91       	ld	r20, X+
    26f4:	5c 91       	ld	r21, X
    26f6:	17 97       	sbiw	r26, 0x07	; 7
    26f8:	64 db       	rcall	.-2360   	; 0x1dc2 <__addsf3>
    26fa:	5b 01       	movw	r10, r22
    26fc:	6c 01       	movw	r12, r24
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	50 e0       	ldi	r21, 0x00	; 0
    2706:	c1 db       	rcall	.-2174   	; 0x1e8a <__cmpsf2>
    2708:	87 fd       	sbrc	r24, 7
    270a:	68 c0       	rjmp	.+208    	; 0x27dc <draw_sprite+0x144>
    270c:	c6 01       	movw	r24, r12
    270e:	b5 01       	movw	r22, r10
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	40 e4       	ldi	r20, 0x40	; 64
    2716:	52 e4       	ldi	r21, 0x42	; 66
    2718:	9f dc       	rcall	.-1730   	; 0x2058 <__gesf2>
    271a:	87 ff       	sbrs	r24, 7
    271c:	6f c0       	rjmp	.+222    	; 0x27fc <draw_sprite+0x164>
    271e:	1c 82       	std	Y+4, r1	; 0x04
    2720:	1b 82       	std	Y+3, r1	; 0x03
    2722:	45 c0       	rjmp	.+138    	; 0x27ae <draw_sprite+0x116>
    2724:	d2 01       	movw	r26, r4
    2726:	1b 96       	adiw	r26, 0x0b	; 11
    2728:	ed 91       	ld	r30, X+
    272a:	fc 91       	ld	r31, X
    272c:	1c 97       	sbiw	r26, 0x0c	; 12
    272e:	e2 0d       	add	r30, r2
    2730:	f3 1d       	adc	r31, r3
    2732:	70 80       	ld	r7, Z
    2734:	eb 81       	ldd	r30, Y+3	; 0x03
    2736:	fc 81       	ldd	r31, Y+4	; 0x04
    2738:	bf 01       	movw	r22, r30
    273a:	88 27       	eor	r24, r24
    273c:	77 fd       	sbrc	r23, 7
    273e:	80 95       	com	r24
    2740:	98 2f       	mov	r25, r24
    2742:	da db       	rcall	.-2124   	; 0x1ef8 <__floatsisf>
    2744:	d2 01       	movw	r26, r4
    2746:	2d 91       	ld	r18, X+
    2748:	3d 91       	ld	r19, X+
    274a:	4d 91       	ld	r20, X+
    274c:	5c 91       	ld	r21, X
    274e:	39 db       	rcall	.-2446   	; 0x1dc2 <__addsf3>
    2750:	7b 01       	movw	r14, r22
    2752:	8c 01       	movw	r16, r24
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e0       	ldi	r20, 0x00	; 0
    275a:	50 e0       	ldi	r21, 0x00	; 0
    275c:	7d dc       	rcall	.-1798   	; 0x2058 <__gesf2>
    275e:	88 23       	and	r24, r24
    2760:	cc f0       	brlt	.+50     	; 0x2794 <draw_sprite+0xfc>
    2762:	c8 01       	movw	r24, r16
    2764:	b7 01       	movw	r22, r14
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	48 ea       	ldi	r20, 0xA8	; 168
    276c:	52 e4       	ldi	r21, 0x42	; 66
    276e:	8d db       	rcall	.-2278   	; 0x1e8a <__cmpsf2>
    2770:	88 23       	and	r24, r24
    2772:	84 f4       	brge	.+32     	; 0x2794 <draw_sprite+0xfc>
    2774:	78 20       	and	r7, r8
    2776:	71 f0       	breq	.+28     	; 0x2794 <draw_sprite+0xfc>
    2778:	c8 01       	movw	r24, r16
    277a:	b7 01       	movw	r22, r14
    277c:	8f db       	rcall	.-2274   	; 0x1e9c <__fixunssfsi>
    277e:	7b 01       	movw	r14, r22
    2780:	8c 01       	movw	r16, r24
    2782:	c6 01       	movw	r24, r12
    2784:	b5 01       	movw	r22, r10
    2786:	8a db       	rcall	.-2284   	; 0x1e9c <__fixunssfsi>
    2788:	9b 01       	movw	r18, r22
    278a:	ac 01       	movw	r20, r24
    278c:	8e 2d       	mov	r24, r14
    278e:	62 2f       	mov	r22, r18
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	6e dc       	rcall	.-1828   	; 0x2070 <set_pixel>
    2794:	eb 81       	ldd	r30, Y+3	; 0x03
    2796:	fc 81       	ldd	r31, Y+4	; 0x04
    2798:	31 96       	adiw	r30, 0x01	; 1
    279a:	fc 83       	std	Y+4, r31	; 0x04
    279c:	eb 83       	std	Y+3, r30	; 0x03
    279e:	cf 01       	movw	r24, r30
    27a0:	87 70       	andi	r24, 0x07	; 7
    27a2:	90 70       	andi	r25, 0x00	; 0
    27a4:	89 2b       	or	r24, r25
    27a6:	39 f4       	brne	.+14     	; 0x27b6 <draw_sprite+0x11e>
    27a8:	08 94       	sec
    27aa:	21 1c       	adc	r2, r1
    27ac:	31 1c       	adc	r3, r1
    27ae:	90 e8       	ldi	r25, 0x80	; 128
    27b0:	89 2e       	mov	r8, r25
    27b2:	91 2c       	mov	r9, r1
    27b4:	02 c0       	rjmp	.+4      	; 0x27ba <draw_sprite+0x122>
    27b6:	95 94       	asr	r9
    27b8:	87 94       	ror	r8
    27ba:	d2 01       	movw	r26, r4
    27bc:	18 96       	adiw	r26, 0x08	; 8
    27be:	8c 91       	ld	r24, X
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	eb 81       	ldd	r30, Y+3	; 0x03
    27c4:	fc 81       	ldd	r31, Y+4	; 0x04
    27c6:	e8 17       	cp	r30, r24
    27c8:	f9 07       	cpc	r31, r25
    27ca:	0c f4       	brge	.+2      	; 0x27ce <draw_sprite+0x136>
    27cc:	ab cf       	rjmp	.-170    	; 0x2724 <draw_sprite+0x8c>
    27ce:	87 70       	andi	r24, 0x07	; 7
    27d0:	90 70       	andi	r25, 0x00	; 0
    27d2:	89 2b       	or	r24, r25
    27d4:	19 f0       	breq	.+6      	; 0x27dc <draw_sprite+0x144>
    27d6:	08 94       	sec
    27d8:	21 1c       	adc	r2, r1
    27da:	31 1c       	adc	r3, r1
    27dc:	29 81       	ldd	r18, Y+1	; 0x01
    27de:	3a 81       	ldd	r19, Y+2	; 0x02
    27e0:	2f 5f       	subi	r18, 0xFF	; 255
    27e2:	3f 4f       	sbci	r19, 0xFF	; 255
    27e4:	3a 83       	std	Y+2, r19	; 0x02
    27e6:	29 83       	std	Y+1, r18	; 0x01
    27e8:	d2 01       	movw	r26, r4
    27ea:	19 96       	adiw	r26, 0x09	; 9
    27ec:	8c 91       	ld	r24, X
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	e9 81       	ldd	r30, Y+1	; 0x01
    27f2:	fa 81       	ldd	r31, Y+2	; 0x02
    27f4:	e8 17       	cp	r30, r24
    27f6:	f9 07       	cpc	r31, r25
    27f8:	0c f4       	brge	.+2      	; 0x27fc <draw_sprite+0x164>
    27fa:	6f cf       	rjmp	.-290    	; 0x26da <draw_sprite+0x42>
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	1f 91       	pop	r17
    280a:	0f 91       	pop	r16
    280c:	ff 90       	pop	r15
    280e:	ef 90       	pop	r14
    2810:	df 90       	pop	r13
    2812:	cf 90       	pop	r12
    2814:	bf 90       	pop	r11
    2816:	af 90       	pop	r10
    2818:	9f 90       	pop	r9
    281a:	8f 90       	pop	r8
    281c:	7f 90       	pop	r7
    281e:	5f 90       	pop	r5
    2820:	4f 90       	pop	r4
    2822:	3f 90       	pop	r3
    2824:	2f 90       	pop	r2
    2826:	08 95       	ret

00002828 <__divmodhi4>:
    2828:	97 fb       	bst	r25, 7
    282a:	09 2e       	mov	r0, r25
    282c:	07 26       	eor	r0, r23
    282e:	0a d0       	rcall	.+20     	; 0x2844 <__divmodhi4_neg1>
    2830:	77 fd       	sbrc	r23, 7
    2832:	04 d0       	rcall	.+8      	; 0x283c <__divmodhi4_neg2>
    2834:	0c d0       	rcall	.+24     	; 0x284e <__udivmodhi4>
    2836:	06 d0       	rcall	.+12     	; 0x2844 <__divmodhi4_neg1>
    2838:	00 20       	and	r0, r0
    283a:	1a f4       	brpl	.+6      	; 0x2842 <__divmodhi4_exit>

0000283c <__divmodhi4_neg2>:
    283c:	70 95       	com	r23
    283e:	61 95       	neg	r22
    2840:	7f 4f       	sbci	r23, 0xFF	; 255

00002842 <__divmodhi4_exit>:
    2842:	08 95       	ret

00002844 <__divmodhi4_neg1>:
    2844:	f6 f7       	brtc	.-4      	; 0x2842 <__divmodhi4_exit>
    2846:	90 95       	com	r25
    2848:	81 95       	neg	r24
    284a:	9f 4f       	sbci	r25, 0xFF	; 255
    284c:	08 95       	ret

0000284e <__udivmodhi4>:
    284e:	aa 1b       	sub	r26, r26
    2850:	bb 1b       	sub	r27, r27
    2852:	51 e1       	ldi	r21, 0x11	; 17
    2854:	07 c0       	rjmp	.+14     	; 0x2864 <__udivmodhi4_ep>

00002856 <__udivmodhi4_loop>:
    2856:	aa 1f       	adc	r26, r26
    2858:	bb 1f       	adc	r27, r27
    285a:	a6 17       	cp	r26, r22
    285c:	b7 07       	cpc	r27, r23
    285e:	10 f0       	brcs	.+4      	; 0x2864 <__udivmodhi4_ep>
    2860:	a6 1b       	sub	r26, r22
    2862:	b7 0b       	sbc	r27, r23

00002864 <__udivmodhi4_ep>:
    2864:	88 1f       	adc	r24, r24
    2866:	99 1f       	adc	r25, r25
    2868:	5a 95       	dec	r21
    286a:	a9 f7       	brne	.-22     	; 0x2856 <__udivmodhi4_loop>
    286c:	80 95       	com	r24
    286e:	90 95       	com	r25
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	08 95       	ret

00002876 <__prologue_saves__>:
    2876:	2f 92       	push	r2
    2878:	3f 92       	push	r3
    287a:	4f 92       	push	r4
    287c:	5f 92       	push	r5
    287e:	6f 92       	push	r6
    2880:	7f 92       	push	r7
    2882:	8f 92       	push	r8
    2884:	9f 92       	push	r9
    2886:	af 92       	push	r10
    2888:	bf 92       	push	r11
    288a:	cf 92       	push	r12
    288c:	df 92       	push	r13
    288e:	ef 92       	push	r14
    2890:	ff 92       	push	r15
    2892:	0f 93       	push	r16
    2894:	1f 93       	push	r17
    2896:	cf 93       	push	r28
    2898:	df 93       	push	r29
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	ca 1b       	sub	r28, r26
    28a0:	db 0b       	sbc	r29, r27
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	de bf       	out	0x3e, r29	; 62
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	cd bf       	out	0x3d, r28	; 61
    28ac:	09 94       	ijmp

000028ae <__epilogue_restores__>:
    28ae:	2a 88       	ldd	r2, Y+18	; 0x12
    28b0:	39 88       	ldd	r3, Y+17	; 0x11
    28b2:	48 88       	ldd	r4, Y+16	; 0x10
    28b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    28b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    28b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    28ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    28bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    28be:	aa 84       	ldd	r10, Y+10	; 0x0a
    28c0:	b9 84       	ldd	r11, Y+9	; 0x09
    28c2:	c8 84       	ldd	r12, Y+8	; 0x08
    28c4:	df 80       	ldd	r13, Y+7	; 0x07
    28c6:	ee 80       	ldd	r14, Y+6	; 0x06
    28c8:	fd 80       	ldd	r15, Y+5	; 0x05
    28ca:	0c 81       	ldd	r16, Y+4	; 0x04
    28cc:	1b 81       	ldd	r17, Y+3	; 0x03
    28ce:	aa 81       	ldd	r26, Y+2	; 0x02
    28d0:	b9 81       	ldd	r27, Y+1	; 0x01
    28d2:	ce 0f       	add	r28, r30
    28d4:	d1 1d       	adc	r29, r1
    28d6:	0f b6       	in	r0, 0x3f	; 63
    28d8:	f8 94       	cli
    28da:	de bf       	out	0x3e, r29	; 62
    28dc:	0f be       	out	0x3f, r0	; 63
    28de:	cd bf       	out	0x3d, r28	; 61
    28e0:	ed 01       	movw	r28, r26
    28e2:	08 95       	ret

000028e4 <do_rand>:
    28e4:	a0 e0       	ldi	r26, 0x00	; 0
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e7 e7       	ldi	r30, 0x77	; 119
    28ea:	f4 e1       	ldi	r31, 0x14	; 20
    28ec:	cc cf       	rjmp	.-104    	; 0x2886 <__prologue_saves__+0x10>
    28ee:	ec 01       	movw	r28, r24
    28f0:	a8 80       	ld	r10, Y
    28f2:	b9 80       	ldd	r11, Y+1	; 0x01
    28f4:	ca 80       	ldd	r12, Y+2	; 0x02
    28f6:	db 80       	ldd	r13, Y+3	; 0x03
    28f8:	a1 14       	cp	r10, r1
    28fa:	b1 04       	cpc	r11, r1
    28fc:	c1 04       	cpc	r12, r1
    28fe:	d1 04       	cpc	r13, r1
    2900:	41 f4       	brne	.+16     	; 0x2912 <do_rand+0x2e>
    2902:	84 e2       	ldi	r24, 0x24	; 36
    2904:	a8 2e       	mov	r10, r24
    2906:	89 ed       	ldi	r24, 0xD9	; 217
    2908:	b8 2e       	mov	r11, r24
    290a:	8b e5       	ldi	r24, 0x5B	; 91
    290c:	c8 2e       	mov	r12, r24
    290e:	87 e0       	ldi	r24, 0x07	; 7
    2910:	d8 2e       	mov	r13, r24
    2912:	c6 01       	movw	r24, r12
    2914:	b5 01       	movw	r22, r10
    2916:	2d e1       	ldi	r18, 0x1D	; 29
    2918:	33 ef       	ldi	r19, 0xF3	; 243
    291a:	41 e0       	ldi	r20, 0x01	; 1
    291c:	50 e0       	ldi	r21, 0x00	; 0
    291e:	58 d0       	rcall	.+176    	; 0x29d0 <__divmodsi4>
    2920:	27 ea       	ldi	r18, 0xA7	; 167
    2922:	31 e4       	ldi	r19, 0x41	; 65
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	50 e0       	ldi	r21, 0x00	; 0
    2928:	34 d0       	rcall	.+104    	; 0x2992 <__mulsi3>
    292a:	7b 01       	movw	r14, r22
    292c:	8c 01       	movw	r16, r24
    292e:	c6 01       	movw	r24, r12
    2930:	b5 01       	movw	r22, r10
    2932:	2d e1       	ldi	r18, 0x1D	; 29
    2934:	33 ef       	ldi	r19, 0xF3	; 243
    2936:	41 e0       	ldi	r20, 0x01	; 1
    2938:	50 e0       	ldi	r21, 0x00	; 0
    293a:	4a d0       	rcall	.+148    	; 0x29d0 <__divmodsi4>
    293c:	ca 01       	movw	r24, r20
    293e:	b9 01       	movw	r22, r18
    2940:	2c ee       	ldi	r18, 0xEC	; 236
    2942:	34 ef       	ldi	r19, 0xF4	; 244
    2944:	4f ef       	ldi	r20, 0xFF	; 255
    2946:	5f ef       	ldi	r21, 0xFF	; 255
    2948:	24 d0       	rcall	.+72     	; 0x2992 <__mulsi3>
    294a:	6e 0d       	add	r22, r14
    294c:	7f 1d       	adc	r23, r15
    294e:	80 1f       	adc	r24, r16
    2950:	91 1f       	adc	r25, r17
    2952:	97 ff       	sbrs	r25, 7
    2954:	04 c0       	rjmp	.+8      	; 0x295e <do_rand+0x7a>
    2956:	61 50       	subi	r22, 0x01	; 1
    2958:	70 40       	sbci	r23, 0x00	; 0
    295a:	80 40       	sbci	r24, 0x00	; 0
    295c:	90 48       	sbci	r25, 0x80	; 128
    295e:	68 83       	st	Y, r22
    2960:	79 83       	std	Y+1, r23	; 0x01
    2962:	8a 83       	std	Y+2, r24	; 0x02
    2964:	9b 83       	std	Y+3, r25	; 0x03
    2966:	9b 01       	movw	r18, r22
    2968:	3f 77       	andi	r19, 0x7F	; 127
    296a:	c9 01       	movw	r24, r18
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
    2970:	ea e0       	ldi	r30, 0x0A	; 10
    2972:	a5 cf       	rjmp	.-182    	; 0x28be <__epilogue_restores__+0x10>

00002974 <rand_r>:
    2974:	b7 cf       	rjmp	.-146    	; 0x28e4 <do_rand>

00002976 <rand>:
    2976:	8b e9       	ldi	r24, 0x9B	; 155
    2978:	91 e0       	ldi	r25, 0x01	; 1
    297a:	b4 cf       	rjmp	.-152    	; 0x28e4 <do_rand>

0000297c <srand>:
    297c:	a0 e0       	ldi	r26, 0x00	; 0
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	80 93 9b 01 	sts	0x019B, r24
    2984:	90 93 9c 01 	sts	0x019C, r25
    2988:	a0 93 9d 01 	sts	0x019D, r26
    298c:	b0 93 9e 01 	sts	0x019E, r27
    2990:	08 95       	ret

00002992 <__mulsi3>:
    2992:	62 9f       	mul	r22, r18
    2994:	d0 01       	movw	r26, r0
    2996:	73 9f       	mul	r23, r19
    2998:	f0 01       	movw	r30, r0
    299a:	82 9f       	mul	r24, r18
    299c:	e0 0d       	add	r30, r0
    299e:	f1 1d       	adc	r31, r1
    29a0:	64 9f       	mul	r22, r20
    29a2:	e0 0d       	add	r30, r0
    29a4:	f1 1d       	adc	r31, r1
    29a6:	92 9f       	mul	r25, r18
    29a8:	f0 0d       	add	r31, r0
    29aa:	83 9f       	mul	r24, r19
    29ac:	f0 0d       	add	r31, r0
    29ae:	74 9f       	mul	r23, r20
    29b0:	f0 0d       	add	r31, r0
    29b2:	65 9f       	mul	r22, r21
    29b4:	f0 0d       	add	r31, r0
    29b6:	99 27       	eor	r25, r25
    29b8:	72 9f       	mul	r23, r18
    29ba:	b0 0d       	add	r27, r0
    29bc:	e1 1d       	adc	r30, r1
    29be:	f9 1f       	adc	r31, r25
    29c0:	63 9f       	mul	r22, r19
    29c2:	b0 0d       	add	r27, r0
    29c4:	e1 1d       	adc	r30, r1
    29c6:	f9 1f       	adc	r31, r25
    29c8:	bd 01       	movw	r22, r26
    29ca:	cf 01       	movw	r24, r30
    29cc:	11 24       	eor	r1, r1
    29ce:	08 95       	ret

000029d0 <__divmodsi4>:
    29d0:	97 fb       	bst	r25, 7
    29d2:	09 2e       	mov	r0, r25
    29d4:	05 26       	eor	r0, r21
    29d6:	0e d0       	rcall	.+28     	; 0x29f4 <__divmodsi4_neg1>
    29d8:	57 fd       	sbrc	r21, 7
    29da:	04 d0       	rcall	.+8      	; 0x29e4 <__divmodsi4_neg2>
    29dc:	14 d0       	rcall	.+40     	; 0x2a06 <__udivmodsi4>
    29de:	0a d0       	rcall	.+20     	; 0x29f4 <__divmodsi4_neg1>
    29e0:	00 1c       	adc	r0, r0
    29e2:	38 f4       	brcc	.+14     	; 0x29f2 <__divmodsi4_exit>

000029e4 <__divmodsi4_neg2>:
    29e4:	50 95       	com	r21
    29e6:	40 95       	com	r20
    29e8:	30 95       	com	r19
    29ea:	21 95       	neg	r18
    29ec:	3f 4f       	sbci	r19, 0xFF	; 255
    29ee:	4f 4f       	sbci	r20, 0xFF	; 255
    29f0:	5f 4f       	sbci	r21, 0xFF	; 255

000029f2 <__divmodsi4_exit>:
    29f2:	08 95       	ret

000029f4 <__divmodsi4_neg1>:
    29f4:	f6 f7       	brtc	.-4      	; 0x29f2 <__divmodsi4_exit>
    29f6:	90 95       	com	r25
    29f8:	80 95       	com	r24
    29fa:	70 95       	com	r23
    29fc:	61 95       	neg	r22
    29fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2a00:	8f 4f       	sbci	r24, 0xFF	; 255
    2a02:	9f 4f       	sbci	r25, 0xFF	; 255
    2a04:	08 95       	ret

00002a06 <__udivmodsi4>:
    2a06:	a1 e2       	ldi	r26, 0x21	; 33
    2a08:	1a 2e       	mov	r1, r26
    2a0a:	aa 1b       	sub	r26, r26
    2a0c:	bb 1b       	sub	r27, r27
    2a0e:	fd 01       	movw	r30, r26
    2a10:	0d c0       	rjmp	.+26     	; 0x2a2c <__udivmodsi4_ep>

00002a12 <__udivmodsi4_loop>:
    2a12:	aa 1f       	adc	r26, r26
    2a14:	bb 1f       	adc	r27, r27
    2a16:	ee 1f       	adc	r30, r30
    2a18:	ff 1f       	adc	r31, r31
    2a1a:	a2 17       	cp	r26, r18
    2a1c:	b3 07       	cpc	r27, r19
    2a1e:	e4 07       	cpc	r30, r20
    2a20:	f5 07       	cpc	r31, r21
    2a22:	20 f0       	brcs	.+8      	; 0x2a2c <__udivmodsi4_ep>
    2a24:	a2 1b       	sub	r26, r18
    2a26:	b3 0b       	sbc	r27, r19
    2a28:	e4 0b       	sbc	r30, r20
    2a2a:	f5 0b       	sbc	r31, r21

00002a2c <__udivmodsi4_ep>:
    2a2c:	66 1f       	adc	r22, r22
    2a2e:	77 1f       	adc	r23, r23
    2a30:	88 1f       	adc	r24, r24
    2a32:	99 1f       	adc	r25, r25
    2a34:	1a 94       	dec	r1
    2a36:	69 f7       	brne	.-38     	; 0x2a12 <__udivmodsi4_loop>
    2a38:	60 95       	com	r22
    2a3a:	70 95       	com	r23
    2a3c:	80 95       	com	r24
    2a3e:	90 95       	com	r25
    2a40:	9b 01       	movw	r18, r22
    2a42:	ac 01       	movw	r20, r24
    2a44:	bd 01       	movw	r22, r26
    2a46:	cf 01       	movw	r24, r30
    2a48:	08 95       	ret

00002a4a <_exit>:
    2a4a:	f8 94       	cli

00002a4c <__stop_program>:
    2a4c:	ff cf       	rjmp	.-2      	; 0x2a4c <__stop_program>
