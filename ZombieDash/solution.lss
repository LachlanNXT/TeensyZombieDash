
solution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800100  00002de0  00002e74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002de0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000023a  008001b0  008001b0  00002f24  2**0
                  ALLOC
  3 .debug_aranges 00000200  00000000  00000000  00002f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000576  00000000  00000000  00003124  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000024e6  00000000  00000000  0000369a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000da0  00000000  00000000  00005b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001d4f  00000000  00000000  00006920  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000300  00000000  00000000  00008670  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000078c  00000000  00000000  00008970  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000171e  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000270  00000000  00000000  0000a81a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c1       	rjmp	.+650    	; 0x28c <__ctors_end>
       2:	00 00       	nop
       4:	60 c1       	rjmp	.+704    	; 0x2c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c1       	rjmp	.+700    	; 0x2c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c1       	rjmp	.+696    	; 0x2c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c1       	rjmp	.+692    	; 0x2c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c1       	rjmp	.+688    	; 0x2c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c1       	rjmp	.+684    	; 0x2c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c1       	rjmp	.+680    	; 0x2c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c1       	rjmp	.+676    	; 0x2c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	81 c4       	rjmp	.+2306   	; 0x928 <__vector_9>
      26:	00 00       	nop
      28:	4e c1       	rjmp	.+668    	; 0x2c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c1       	rjmp	.+664    	; 0x2c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c1       	rjmp	.+660    	; 0x2c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c1       	rjmp	.+656    	; 0x2c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c1       	rjmp	.+652    	; 0x2c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c1       	rjmp	.+648    	; 0x2c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c1       	rjmp	.+644    	; 0x2c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c1       	rjmp	.+640    	; 0x2c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c1       	rjmp	.+636    	; 0x2c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c1       	rjmp	.+632    	; 0x2c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c1       	rjmp	.+628    	; 0x2c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c1       	rjmp	.+624    	; 0x2c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c1       	rjmp	.+620    	; 0x2c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__vector_23>
      60:	32 c1       	rjmp	.+612    	; 0x2c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c1       	rjmp	.+608    	; 0x2c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c1       	rjmp	.+604    	; 0x2c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c1       	rjmp	.+600    	; 0x2c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c1       	rjmp	.+596    	; 0x2c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c1       	rjmp	.+592    	; 0x2c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c1       	rjmp	.+588    	; 0x2c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c1       	rjmp	.+584    	; 0x2c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c1       	rjmp	.+580    	; 0x2c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c1       	rjmp	.+576    	; 0x2c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c1       	rjmp	.+572    	; 0x2c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1c c1       	rjmp	.+568    	; 0x2c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1a c1       	rjmp	.+564    	; 0x2c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	18 c1       	rjmp	.+560    	; 0x2c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	16 c1       	rjmp	.+556    	; 0x2c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	14 c1       	rjmp	.+552    	; 0x2c6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	12 c1       	rjmp	.+548    	; 0x2c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	10 c1       	rjmp	.+544    	; 0x2c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0e c1       	rjmp	.+540    	; 0x2c6 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ASCII>:
      ac:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      bc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      cc:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      dc:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      ec:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      fc:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     10c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     11c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     12c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     13c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     14c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     15c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     16c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     17c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     18c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     19c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1ac:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1bc:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1cc:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1dc:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1ec:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1fc:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     20c:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     21c:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     22c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     23c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     24c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     25c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     26c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     27c:	00 00 41 36 08 00 10 08 08 10 08 78 46 41 46 78     ..A6.......xFAFx

0000028c <__ctors_end>:
     28c:	11 24       	eor	r1, r1
     28e:	1f be       	out	0x3f, r1	; 63
     290:	cf ef       	ldi	r28, 0xFF	; 255
     292:	da e0       	ldi	r29, 0x0A	; 10
     294:	de bf       	out	0x3e, r29	; 62
     296:	cd bf       	out	0x3d, r28	; 61

00000298 <__do_copy_data>:
     298:	11 e0       	ldi	r17, 0x01	; 1
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b1 e0       	ldi	r27, 0x01	; 1
     29e:	e0 ee       	ldi	r30, 0xE0	; 224
     2a0:	fd e2       	ldi	r31, 0x2D	; 45
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <.do_copy_data_start>

000002a4 <.do_copy_data_loop>:
     2a4:	05 90       	lpm	r0, Z+
     2a6:	0d 92       	st	X+, r0

000002a8 <.do_copy_data_start>:
     2a8:	a0 3b       	cpi	r26, 0xB0	; 176
     2aa:	b1 07       	cpc	r27, r17
     2ac:	d9 f7       	brne	.-10     	; 0x2a4 <.do_copy_data_loop>

000002ae <__do_clear_bss>:
     2ae:	13 e0       	ldi	r17, 0x03	; 3
     2b0:	a0 eb       	ldi	r26, 0xB0	; 176
     2b2:	b1 e0       	ldi	r27, 0x01	; 1
     2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <.do_clear_bss_start>

000002b6 <.do_clear_bss_loop>:
     2b6:	1d 92       	st	X+, r1

000002b8 <.do_clear_bss_start>:
     2b8:	aa 3e       	cpi	r26, 0xEA	; 234
     2ba:	b1 07       	cpc	r27, r17
     2bc:	e1 f7       	brne	.-8      	; 0x2b6 <.do_clear_bss_loop>
     2be:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <main>
     2c2:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <_exit>

000002c6 <__bad_interrupt>:
     2c6:	9c ce       	rjmp	.-712    	; 0x0 <__vectors>

000002c8 <__mulsf3>:
     2c8:	a0 e2       	ldi	r26, 0x20	; 32
     2ca:	b0 e0       	ldi	r27, 0x00	; 0
     2cc:	ea e6       	ldi	r30, 0x6A	; 106
     2ce:	f1 e0       	ldi	r31, 0x01	; 1
     2d0:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__prologue_saves__>
     2d4:	69 83       	std	Y+1, r22	; 0x01
     2d6:	7a 83       	std	Y+2, r23	; 0x02
     2d8:	8b 83       	std	Y+3, r24	; 0x03
     2da:	9c 83       	std	Y+4, r25	; 0x04
     2dc:	2d 83       	std	Y+5, r18	; 0x05
     2de:	3e 83       	std	Y+6, r19	; 0x06
     2e0:	4f 83       	std	Y+7, r20	; 0x07
     2e2:	58 87       	std	Y+8, r21	; 0x08
     2e4:	ce 01       	movw	r24, r28
     2e6:	01 96       	adiw	r24, 0x01	; 1
     2e8:	be 01       	movw	r22, r28
     2ea:	67 5f       	subi	r22, 0xF7	; 247
     2ec:	7f 4f       	sbci	r23, 0xFF	; 255
     2ee:	61 d2       	rcall	.+1218   	; 0x7b2 <__unpack_f>
     2f0:	ce 01       	movw	r24, r28
     2f2:	05 96       	adiw	r24, 0x05	; 5
     2f4:	be 01       	movw	r22, r28
     2f6:	6f 5e       	subi	r22, 0xEF	; 239
     2f8:	7f 4f       	sbci	r23, 0xFF	; 255
     2fa:	5b d2       	rcall	.+1206   	; 0x7b2 <__unpack_f>
     2fc:	99 85       	ldd	r25, Y+9	; 0x09
     2fe:	92 30       	cpi	r25, 0x02	; 2
     300:	88 f0       	brcs	.+34     	; 0x324 <__mulsf3+0x5c>
     302:	89 89       	ldd	r24, Y+17	; 0x11
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	c8 f0       	brcs	.+50     	; 0x33a <__mulsf3+0x72>
     308:	94 30       	cpi	r25, 0x04	; 4
     30a:	19 f4       	brne	.+6      	; 0x312 <__mulsf3+0x4a>
     30c:	82 30       	cpi	r24, 0x02	; 2
     30e:	51 f4       	brne	.+20     	; 0x324 <__mulsf3+0x5c>
     310:	04 c0       	rjmp	.+8      	; 0x31a <__mulsf3+0x52>
     312:	84 30       	cpi	r24, 0x04	; 4
     314:	29 f4       	brne	.+10     	; 0x320 <__mulsf3+0x58>
     316:	92 30       	cpi	r25, 0x02	; 2
     318:	81 f4       	brne	.+32     	; 0x33a <__mulsf3+0x72>
     31a:	83 ea       	ldi	r24, 0xA3	; 163
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	c6 c0       	rjmp	.+396    	; 0x4ac <__mulsf3+0x1e4>
     320:	92 30       	cpi	r25, 0x02	; 2
     322:	49 f4       	brne	.+18     	; 0x336 <__mulsf3+0x6e>
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	9a 85       	ldd	r25, Y+10	; 0x0a
     328:	8a 89       	ldd	r24, Y+18	; 0x12
     32a:	98 13       	cpse	r25, r24
     32c:	21 e0       	ldi	r18, 0x01	; 1
     32e:	2a 87       	std	Y+10, r18	; 0x0a
     330:	ce 01       	movw	r24, r28
     332:	09 96       	adiw	r24, 0x09	; 9
     334:	bb c0       	rjmp	.+374    	; 0x4ac <__mulsf3+0x1e4>
     336:	82 30       	cpi	r24, 0x02	; 2
     338:	49 f4       	brne	.+18     	; 0x34c <__mulsf3+0x84>
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	9a 85       	ldd	r25, Y+10	; 0x0a
     33e:	8a 89       	ldd	r24, Y+18	; 0x12
     340:	98 13       	cpse	r25, r24
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	2a 8b       	std	Y+18, r18	; 0x12
     346:	ce 01       	movw	r24, r28
     348:	41 96       	adiw	r24, 0x11	; 17
     34a:	b0 c0       	rjmp	.+352    	; 0x4ac <__mulsf3+0x1e4>
     34c:	2d 84       	ldd	r2, Y+13	; 0x0d
     34e:	3e 84       	ldd	r3, Y+14	; 0x0e
     350:	4f 84       	ldd	r4, Y+15	; 0x0f
     352:	58 88       	ldd	r5, Y+16	; 0x10
     354:	6d 88       	ldd	r6, Y+21	; 0x15
     356:	7e 88       	ldd	r7, Y+22	; 0x16
     358:	8f 88       	ldd	r8, Y+23	; 0x17
     35a:	98 8c       	ldd	r9, Y+24	; 0x18
     35c:	ee 24       	eor	r14, r14
     35e:	ff 24       	eor	r15, r15
     360:	87 01       	movw	r16, r14
     362:	aa 24       	eor	r10, r10
     364:	bb 24       	eor	r11, r11
     366:	65 01       	movw	r12, r10
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	e0 e0       	ldi	r30, 0x00	; 0
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	c1 01       	movw	r24, r2
     376:	81 70       	andi	r24, 0x01	; 1
     378:	90 70       	andi	r25, 0x00	; 0
     37a:	89 2b       	or	r24, r25
     37c:	e9 f0       	breq	.+58     	; 0x3b8 <__mulsf3+0xf0>
     37e:	e6 0c       	add	r14, r6
     380:	f7 1c       	adc	r15, r7
     382:	08 1d       	adc	r16, r8
     384:	19 1d       	adc	r17, r9
     386:	9a 01       	movw	r18, r20
     388:	ab 01       	movw	r20, r22
     38a:	2a 0d       	add	r18, r10
     38c:	3b 1d       	adc	r19, r11
     38e:	4c 1d       	adc	r20, r12
     390:	5d 1d       	adc	r21, r13
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	a0 e0       	ldi	r26, 0x00	; 0
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e6 14       	cp	r14, r6
     39c:	f7 04       	cpc	r15, r7
     39e:	08 05       	cpc	r16, r8
     3a0:	19 05       	cpc	r17, r9
     3a2:	20 f4       	brcc	.+8      	; 0x3ac <__mulsf3+0xe4>
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	a0 e0       	ldi	r26, 0x00	; 0
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	ba 01       	movw	r22, r20
     3ae:	a9 01       	movw	r20, r18
     3b0:	48 0f       	add	r20, r24
     3b2:	59 1f       	adc	r21, r25
     3b4:	6a 1f       	adc	r22, r26
     3b6:	7b 1f       	adc	r23, r27
     3b8:	aa 0c       	add	r10, r10
     3ba:	bb 1c       	adc	r11, r11
     3bc:	cc 1c       	adc	r12, r12
     3be:	dd 1c       	adc	r13, r13
     3c0:	97 fe       	sbrs	r9, 7
     3c2:	08 c0       	rjmp	.+16     	; 0x3d4 <__mulsf3+0x10c>
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	a8 2a       	or	r10, r24
     3ce:	b9 2a       	or	r11, r25
     3d0:	ca 2a       	or	r12, r26
     3d2:	db 2a       	or	r13, r27
     3d4:	31 96       	adiw	r30, 0x01	; 1
     3d6:	e0 32       	cpi	r30, 0x20	; 32
     3d8:	f1 05       	cpc	r31, r1
     3da:	49 f0       	breq	.+18     	; 0x3ee <__mulsf3+0x126>
     3dc:	66 0c       	add	r6, r6
     3de:	77 1c       	adc	r7, r7
     3e0:	88 1c       	adc	r8, r8
     3e2:	99 1c       	adc	r9, r9
     3e4:	56 94       	lsr	r5
     3e6:	47 94       	ror	r4
     3e8:	37 94       	ror	r3
     3ea:	27 94       	ror	r2
     3ec:	c3 cf       	rjmp	.-122    	; 0x374 <__mulsf3+0xac>
     3ee:	fa 85       	ldd	r31, Y+10	; 0x0a
     3f0:	ea 89       	ldd	r30, Y+18	; 0x12
     3f2:	2b 89       	ldd	r18, Y+19	; 0x13
     3f4:	3c 89       	ldd	r19, Y+20	; 0x14
     3f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3f8:	9c 85       	ldd	r25, Y+12	; 0x0c
     3fa:	28 0f       	add	r18, r24
     3fc:	39 1f       	adc	r19, r25
     3fe:	2e 5f       	subi	r18, 0xFE	; 254
     400:	3f 4f       	sbci	r19, 0xFF	; 255
     402:	17 c0       	rjmp	.+46     	; 0x432 <__mulsf3+0x16a>
     404:	ca 01       	movw	r24, r20
     406:	81 70       	andi	r24, 0x01	; 1
     408:	90 70       	andi	r25, 0x00	; 0
     40a:	89 2b       	or	r24, r25
     40c:	61 f0       	breq	.+24     	; 0x426 <__mulsf3+0x15e>
     40e:	16 95       	lsr	r17
     410:	07 95       	ror	r16
     412:	f7 94       	ror	r15
     414:	e7 94       	ror	r14
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	a0 e0       	ldi	r26, 0x00	; 0
     41c:	b0 e8       	ldi	r27, 0x80	; 128
     41e:	e8 2a       	or	r14, r24
     420:	f9 2a       	or	r15, r25
     422:	0a 2b       	or	r16, r26
     424:	1b 2b       	or	r17, r27
     426:	76 95       	lsr	r23
     428:	67 95       	ror	r22
     42a:	57 95       	ror	r21
     42c:	47 95       	ror	r20
     42e:	2f 5f       	subi	r18, 0xFF	; 255
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	77 fd       	sbrc	r23, 7
     434:	e7 cf       	rjmp	.-50     	; 0x404 <__mulsf3+0x13c>
     436:	0c c0       	rjmp	.+24     	; 0x450 <__mulsf3+0x188>
     438:	44 0f       	add	r20, r20
     43a:	55 1f       	adc	r21, r21
     43c:	66 1f       	adc	r22, r22
     43e:	77 1f       	adc	r23, r23
     440:	17 fd       	sbrc	r17, 7
     442:	41 60       	ori	r20, 0x01	; 1
     444:	ee 0c       	add	r14, r14
     446:	ff 1c       	adc	r15, r15
     448:	00 1f       	adc	r16, r16
     44a:	11 1f       	adc	r17, r17
     44c:	21 50       	subi	r18, 0x01	; 1
     44e:	30 40       	sbci	r19, 0x00	; 0
     450:	40 30       	cpi	r20, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	59 07       	cpc	r21, r25
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	69 07       	cpc	r22, r25
     45a:	90 e4       	ldi	r25, 0x40	; 64
     45c:	79 07       	cpc	r23, r25
     45e:	60 f3       	brcs	.-40     	; 0x438 <__mulsf3+0x170>
     460:	2b 8f       	std	Y+27, r18	; 0x1b
     462:	3c 8f       	std	Y+28, r19	; 0x1c
     464:	db 01       	movw	r26, r22
     466:	ca 01       	movw	r24, r20
     468:	8f 77       	andi	r24, 0x7F	; 127
     46a:	90 70       	andi	r25, 0x00	; 0
     46c:	a0 70       	andi	r26, 0x00	; 0
     46e:	b0 70       	andi	r27, 0x00	; 0
     470:	80 34       	cpi	r24, 0x40	; 64
     472:	91 05       	cpc	r25, r1
     474:	a1 05       	cpc	r26, r1
     476:	b1 05       	cpc	r27, r1
     478:	61 f4       	brne	.+24     	; 0x492 <__mulsf3+0x1ca>
     47a:	47 fd       	sbrc	r20, 7
     47c:	0a c0       	rjmp	.+20     	; 0x492 <__mulsf3+0x1ca>
     47e:	e1 14       	cp	r14, r1
     480:	f1 04       	cpc	r15, r1
     482:	01 05       	cpc	r16, r1
     484:	11 05       	cpc	r17, r1
     486:	29 f0       	breq	.+10     	; 0x492 <__mulsf3+0x1ca>
     488:	40 5c       	subi	r20, 0xC0	; 192
     48a:	5f 4f       	sbci	r21, 0xFF	; 255
     48c:	6f 4f       	sbci	r22, 0xFF	; 255
     48e:	7f 4f       	sbci	r23, 0xFF	; 255
     490:	40 78       	andi	r20, 0x80	; 128
     492:	1a 8e       	std	Y+26, r1	; 0x1a
     494:	fe 17       	cp	r31, r30
     496:	11 f0       	breq	.+4      	; 0x49c <__mulsf3+0x1d4>
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	8a 8f       	std	Y+26, r24	; 0x1a
     49c:	4d 8f       	std	Y+29, r20	; 0x1d
     49e:	5e 8f       	std	Y+30, r21	; 0x1e
     4a0:	6f 8f       	std	Y+31, r22	; 0x1f
     4a2:	78 a3       	std	Y+32, r23	; 0x20
     4a4:	83 e0       	ldi	r24, 0x03	; 3
     4a6:	89 8f       	std	Y+25, r24	; 0x19
     4a8:	ce 01       	movw	r24, r28
     4aa:	49 96       	adiw	r24, 0x19	; 25
     4ac:	ad d0       	rcall	.+346    	; 0x608 <__pack_f>
     4ae:	a0 96       	adiw	r28, 0x20	; 32
     4b0:	e2 e1       	ldi	r30, 0x12	; 18
     4b2:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__epilogue_restores__>

000004b6 <__divsf3>:
     4b6:	a8 e1       	ldi	r26, 0x18	; 24
     4b8:	b0 e0       	ldi	r27, 0x00	; 0
     4ba:	e1 e6       	ldi	r30, 0x61	; 97
     4bc:	f2 e0       	ldi	r31, 0x02	; 2
     4be:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <__prologue_saves__+0x10>
     4c2:	69 83       	std	Y+1, r22	; 0x01
     4c4:	7a 83       	std	Y+2, r23	; 0x02
     4c6:	8b 83       	std	Y+3, r24	; 0x03
     4c8:	9c 83       	std	Y+4, r25	; 0x04
     4ca:	2d 83       	std	Y+5, r18	; 0x05
     4cc:	3e 83       	std	Y+6, r19	; 0x06
     4ce:	4f 83       	std	Y+7, r20	; 0x07
     4d0:	58 87       	std	Y+8, r21	; 0x08
     4d2:	b9 e0       	ldi	r27, 0x09	; 9
     4d4:	eb 2e       	mov	r14, r27
     4d6:	f1 2c       	mov	r15, r1
     4d8:	ec 0e       	add	r14, r28
     4da:	fd 1e       	adc	r15, r29
     4dc:	ce 01       	movw	r24, r28
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	b7 01       	movw	r22, r14
     4e2:	67 d1       	rcall	.+718    	; 0x7b2 <__unpack_f>
     4e4:	8e 01       	movw	r16, r28
     4e6:	0f 5e       	subi	r16, 0xEF	; 239
     4e8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ea:	ce 01       	movw	r24, r28
     4ec:	05 96       	adiw	r24, 0x05	; 5
     4ee:	b8 01       	movw	r22, r16
     4f0:	60 d1       	rcall	.+704    	; 0x7b2 <__unpack_f>
     4f2:	29 85       	ldd	r18, Y+9	; 0x09
     4f4:	22 30       	cpi	r18, 0x02	; 2
     4f6:	08 f4       	brcc	.+2      	; 0x4fa <__divsf3+0x44>
     4f8:	7e c0       	rjmp	.+252    	; 0x5f6 <__divsf3+0x140>
     4fa:	39 89       	ldd	r19, Y+17	; 0x11
     4fc:	32 30       	cpi	r19, 0x02	; 2
     4fe:	10 f4       	brcc	.+4      	; 0x504 <__divsf3+0x4e>
     500:	b8 01       	movw	r22, r16
     502:	7c c0       	rjmp	.+248    	; 0x5fc <__divsf3+0x146>
     504:	8a 85       	ldd	r24, Y+10	; 0x0a
     506:	9a 89       	ldd	r25, Y+18	; 0x12
     508:	89 27       	eor	r24, r25
     50a:	8a 87       	std	Y+10, r24	; 0x0a
     50c:	24 30       	cpi	r18, 0x04	; 4
     50e:	11 f0       	breq	.+4      	; 0x514 <__divsf3+0x5e>
     510:	22 30       	cpi	r18, 0x02	; 2
     512:	31 f4       	brne	.+12     	; 0x520 <__divsf3+0x6a>
     514:	23 17       	cp	r18, r19
     516:	09 f0       	breq	.+2      	; 0x51a <__divsf3+0x64>
     518:	6e c0       	rjmp	.+220    	; 0x5f6 <__divsf3+0x140>
     51a:	63 ea       	ldi	r22, 0xA3	; 163
     51c:	71 e0       	ldi	r23, 0x01	; 1
     51e:	6e c0       	rjmp	.+220    	; 0x5fc <__divsf3+0x146>
     520:	34 30       	cpi	r19, 0x04	; 4
     522:	39 f4       	brne	.+14     	; 0x532 <__divsf3+0x7c>
     524:	1d 86       	std	Y+13, r1	; 0x0d
     526:	1e 86       	std	Y+14, r1	; 0x0e
     528:	1f 86       	std	Y+15, r1	; 0x0f
     52a:	18 8a       	std	Y+16, r1	; 0x10
     52c:	1c 86       	std	Y+12, r1	; 0x0c
     52e:	1b 86       	std	Y+11, r1	; 0x0b
     530:	04 c0       	rjmp	.+8      	; 0x53a <__divsf3+0x84>
     532:	32 30       	cpi	r19, 0x02	; 2
     534:	21 f4       	brne	.+8      	; 0x53e <__divsf3+0x88>
     536:	84 e0       	ldi	r24, 0x04	; 4
     538:	89 87       	std	Y+9, r24	; 0x09
     53a:	b7 01       	movw	r22, r14
     53c:	5f c0       	rjmp	.+190    	; 0x5fc <__divsf3+0x146>
     53e:	2b 85       	ldd	r18, Y+11	; 0x0b
     540:	3c 85       	ldd	r19, Y+12	; 0x0c
     542:	8b 89       	ldd	r24, Y+19	; 0x13
     544:	9c 89       	ldd	r25, Y+20	; 0x14
     546:	28 1b       	sub	r18, r24
     548:	39 0b       	sbc	r19, r25
     54a:	3c 87       	std	Y+12, r19	; 0x0c
     54c:	2b 87       	std	Y+11, r18	; 0x0b
     54e:	ed 84       	ldd	r14, Y+13	; 0x0d
     550:	fe 84       	ldd	r15, Y+14	; 0x0e
     552:	0f 85       	ldd	r16, Y+15	; 0x0f
     554:	18 89       	ldd	r17, Y+16	; 0x10
     556:	ad 88       	ldd	r10, Y+21	; 0x15
     558:	be 88       	ldd	r11, Y+22	; 0x16
     55a:	cf 88       	ldd	r12, Y+23	; 0x17
     55c:	d8 8c       	ldd	r13, Y+24	; 0x18
     55e:	ea 14       	cp	r14, r10
     560:	fb 04       	cpc	r15, r11
     562:	0c 05       	cpc	r16, r12
     564:	1d 05       	cpc	r17, r13
     566:	40 f4       	brcc	.+16     	; 0x578 <__divsf3+0xc2>
     568:	ee 0c       	add	r14, r14
     56a:	ff 1c       	adc	r15, r15
     56c:	00 1f       	adc	r16, r16
     56e:	11 1f       	adc	r17, r17
     570:	21 50       	subi	r18, 0x01	; 1
     572:	30 40       	sbci	r19, 0x00	; 0
     574:	3c 87       	std	Y+12, r19	; 0x0c
     576:	2b 87       	std	Y+11, r18	; 0x0b
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e4       	ldi	r27, 0x40	; 64
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	ea 14       	cp	r14, r10
     58e:	fb 04       	cpc	r15, r11
     590:	0c 05       	cpc	r16, r12
     592:	1d 05       	cpc	r17, r13
     594:	40 f0       	brcs	.+16     	; 0x5a6 <__divsf3+0xf0>
     596:	28 2b       	or	r18, r24
     598:	39 2b       	or	r19, r25
     59a:	4a 2b       	or	r20, r26
     59c:	5b 2b       	or	r21, r27
     59e:	ea 18       	sub	r14, r10
     5a0:	fb 08       	sbc	r15, r11
     5a2:	0c 09       	sbc	r16, r12
     5a4:	1d 09       	sbc	r17, r13
     5a6:	b6 95       	lsr	r27
     5a8:	a7 95       	ror	r26
     5aa:	97 95       	ror	r25
     5ac:	87 95       	ror	r24
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	6f 5f       	subi	r22, 0xFF	; 255
     5b8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ba:	6f 31       	cpi	r22, 0x1F	; 31
     5bc:	71 05       	cpc	r23, r1
     5be:	31 f7       	brne	.-52     	; 0x58c <__divsf3+0xd6>
     5c0:	da 01       	movw	r26, r20
     5c2:	c9 01       	movw	r24, r18
     5c4:	8f 77       	andi	r24, 0x7F	; 127
     5c6:	90 70       	andi	r25, 0x00	; 0
     5c8:	a0 70       	andi	r26, 0x00	; 0
     5ca:	b0 70       	andi	r27, 0x00	; 0
     5cc:	80 34       	cpi	r24, 0x40	; 64
     5ce:	91 05       	cpc	r25, r1
     5d0:	a1 05       	cpc	r26, r1
     5d2:	b1 05       	cpc	r27, r1
     5d4:	61 f4       	brne	.+24     	; 0x5ee <__divsf3+0x138>
     5d6:	27 fd       	sbrc	r18, 7
     5d8:	0a c0       	rjmp	.+20     	; 0x5ee <__divsf3+0x138>
     5da:	e1 14       	cp	r14, r1
     5dc:	f1 04       	cpc	r15, r1
     5de:	01 05       	cpc	r16, r1
     5e0:	11 05       	cpc	r17, r1
     5e2:	29 f0       	breq	.+10     	; 0x5ee <__divsf3+0x138>
     5e4:	20 5c       	subi	r18, 0xC0	; 192
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	4f 4f       	sbci	r20, 0xFF	; 255
     5ea:	5f 4f       	sbci	r21, 0xFF	; 255
     5ec:	20 78       	andi	r18, 0x80	; 128
     5ee:	2d 87       	std	Y+13, r18	; 0x0d
     5f0:	3e 87       	std	Y+14, r19	; 0x0e
     5f2:	4f 87       	std	Y+15, r20	; 0x0f
     5f4:	58 8b       	std	Y+16, r21	; 0x10
     5f6:	be 01       	movw	r22, r28
     5f8:	67 5f       	subi	r22, 0xF7	; 247
     5fa:	7f 4f       	sbci	r23, 0xFF	; 255
     5fc:	cb 01       	movw	r24, r22
     5fe:	04 d0       	rcall	.+8      	; 0x608 <__pack_f>
     600:	68 96       	adiw	r28, 0x18	; 24
     602:	ea e0       	ldi	r30, 0x0A	; 10
     604:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__epilogue_restores__+0x10>

00000608 <__pack_f>:
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	fc 01       	movw	r30, r24
     614:	e4 80       	ldd	r14, Z+4	; 0x04
     616:	f5 80       	ldd	r15, Z+5	; 0x05
     618:	06 81       	ldd	r16, Z+6	; 0x06
     61a:	17 81       	ldd	r17, Z+7	; 0x07
     61c:	d1 80       	ldd	r13, Z+1	; 0x01
     61e:	80 81       	ld	r24, Z
     620:	82 30       	cpi	r24, 0x02	; 2
     622:	48 f4       	brcc	.+18     	; 0x636 <__pack_f+0x2e>
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	a0 e1       	ldi	r26, 0x10	; 16
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	e8 2a       	or	r14, r24
     62e:	f9 2a       	or	r15, r25
     630:	0a 2b       	or	r16, r26
     632:	1b 2b       	or	r17, r27
     634:	a5 c0       	rjmp	.+330    	; 0x780 <__pack_f+0x178>
     636:	84 30       	cpi	r24, 0x04	; 4
     638:	09 f4       	brne	.+2      	; 0x63c <__pack_f+0x34>
     63a:	9f c0       	rjmp	.+318    	; 0x77a <__pack_f+0x172>
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	21 f4       	brne	.+8      	; 0x648 <__pack_f+0x40>
     640:	ee 24       	eor	r14, r14
     642:	ff 24       	eor	r15, r15
     644:	87 01       	movw	r16, r14
     646:	05 c0       	rjmp	.+10     	; 0x652 <__pack_f+0x4a>
     648:	e1 14       	cp	r14, r1
     64a:	f1 04       	cpc	r15, r1
     64c:	01 05       	cpc	r16, r1
     64e:	11 05       	cpc	r17, r1
     650:	19 f4       	brne	.+6      	; 0x658 <__pack_f+0x50>
     652:	e0 e0       	ldi	r30, 0x00	; 0
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	96 c0       	rjmp	.+300    	; 0x784 <__pack_f+0x17c>
     658:	62 81       	ldd	r22, Z+2	; 0x02
     65a:	73 81       	ldd	r23, Z+3	; 0x03
     65c:	9f ef       	ldi	r25, 0xFF	; 255
     65e:	62 38       	cpi	r22, 0x82	; 130
     660:	79 07       	cpc	r23, r25
     662:	0c f0       	brlt	.+2      	; 0x666 <__pack_f+0x5e>
     664:	5b c0       	rjmp	.+182    	; 0x71c <__pack_f+0x114>
     666:	22 e8       	ldi	r18, 0x82	; 130
     668:	3f ef       	ldi	r19, 0xFF	; 255
     66a:	26 1b       	sub	r18, r22
     66c:	37 0b       	sbc	r19, r23
     66e:	2a 31       	cpi	r18, 0x1A	; 26
     670:	31 05       	cpc	r19, r1
     672:	2c f0       	brlt	.+10     	; 0x67e <__pack_f+0x76>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	2a c0       	rjmp	.+84     	; 0x6d2 <__pack_f+0xca>
     67e:	b8 01       	movw	r22, r16
     680:	a7 01       	movw	r20, r14
     682:	02 2e       	mov	r0, r18
     684:	04 c0       	rjmp	.+8      	; 0x68e <__pack_f+0x86>
     686:	76 95       	lsr	r23
     688:	67 95       	ror	r22
     68a:	57 95       	ror	r21
     68c:	47 95       	ror	r20
     68e:	0a 94       	dec	r0
     690:	d2 f7       	brpl	.-12     	; 0x686 <__pack_f+0x7e>
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	a0 e0       	ldi	r26, 0x00	; 0
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	04 c0       	rjmp	.+8      	; 0x6a4 <__pack_f+0x9c>
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	aa 1f       	adc	r26, r26
     6a2:	bb 1f       	adc	r27, r27
     6a4:	2a 95       	dec	r18
     6a6:	d2 f7       	brpl	.-12     	; 0x69c <__pack_f+0x94>
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	a1 09       	sbc	r26, r1
     6ac:	b1 09       	sbc	r27, r1
     6ae:	8e 21       	and	r24, r14
     6b0:	9f 21       	and	r25, r15
     6b2:	a0 23       	and	r26, r16
     6b4:	b1 23       	and	r27, r17
     6b6:	00 97       	sbiw	r24, 0x00	; 0
     6b8:	a1 05       	cpc	r26, r1
     6ba:	b1 05       	cpc	r27, r1
     6bc:	21 f0       	breq	.+8      	; 0x6c6 <__pack_f+0xbe>
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	a0 e0       	ldi	r26, 0x00	; 0
     6c4:	b0 e0       	ldi	r27, 0x00	; 0
     6c6:	9a 01       	movw	r18, r20
     6c8:	ab 01       	movw	r20, r22
     6ca:	28 2b       	or	r18, r24
     6cc:	39 2b       	or	r19, r25
     6ce:	4a 2b       	or	r20, r26
     6d0:	5b 2b       	or	r21, r27
     6d2:	da 01       	movw	r26, r20
     6d4:	c9 01       	movw	r24, r18
     6d6:	8f 77       	andi	r24, 0x7F	; 127
     6d8:	90 70       	andi	r25, 0x00	; 0
     6da:	a0 70       	andi	r26, 0x00	; 0
     6dc:	b0 70       	andi	r27, 0x00	; 0
     6de:	80 34       	cpi	r24, 0x40	; 64
     6e0:	91 05       	cpc	r25, r1
     6e2:	a1 05       	cpc	r26, r1
     6e4:	b1 05       	cpc	r27, r1
     6e6:	39 f4       	brne	.+14     	; 0x6f6 <__pack_f+0xee>
     6e8:	27 ff       	sbrs	r18, 7
     6ea:	09 c0       	rjmp	.+18     	; 0x6fe <__pack_f+0xf6>
     6ec:	20 5c       	subi	r18, 0xC0	; 192
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
     6f0:	4f 4f       	sbci	r20, 0xFF	; 255
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <__pack_f+0xf6>
     6f6:	21 5c       	subi	r18, 0xC1	; 193
     6f8:	3f 4f       	sbci	r19, 0xFF	; 255
     6fa:	4f 4f       	sbci	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	e0 e0       	ldi	r30, 0x00	; 0
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	20 30       	cpi	r18, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	3a 07       	cpc	r19, r26
     708:	a0 e0       	ldi	r26, 0x00	; 0
     70a:	4a 07       	cpc	r20, r26
     70c:	a0 e4       	ldi	r26, 0x40	; 64
     70e:	5a 07       	cpc	r21, r26
     710:	10 f0       	brcs	.+4      	; 0x716 <__pack_f+0x10e>
     712:	e1 e0       	ldi	r30, 0x01	; 1
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	79 01       	movw	r14, r18
     718:	8a 01       	movw	r16, r20
     71a:	27 c0       	rjmp	.+78     	; 0x76a <__pack_f+0x162>
     71c:	60 38       	cpi	r22, 0x80	; 128
     71e:	71 05       	cpc	r23, r1
     720:	64 f5       	brge	.+88     	; 0x77a <__pack_f+0x172>
     722:	fb 01       	movw	r30, r22
     724:	e1 58       	subi	r30, 0x81	; 129
     726:	ff 4f       	sbci	r31, 0xFF	; 255
     728:	d8 01       	movw	r26, r16
     72a:	c7 01       	movw	r24, r14
     72c:	8f 77       	andi	r24, 0x7F	; 127
     72e:	90 70       	andi	r25, 0x00	; 0
     730:	a0 70       	andi	r26, 0x00	; 0
     732:	b0 70       	andi	r27, 0x00	; 0
     734:	80 34       	cpi	r24, 0x40	; 64
     736:	91 05       	cpc	r25, r1
     738:	a1 05       	cpc	r26, r1
     73a:	b1 05       	cpc	r27, r1
     73c:	39 f4       	brne	.+14     	; 0x74c <__pack_f+0x144>
     73e:	e7 fe       	sbrs	r14, 7
     740:	0d c0       	rjmp	.+26     	; 0x75c <__pack_f+0x154>
     742:	80 e4       	ldi	r24, 0x40	; 64
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	a0 e0       	ldi	r26, 0x00	; 0
     748:	b0 e0       	ldi	r27, 0x00	; 0
     74a:	04 c0       	rjmp	.+8      	; 0x754 <__pack_f+0x14c>
     74c:	8f e3       	ldi	r24, 0x3F	; 63
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	a0 e0       	ldi	r26, 0x00	; 0
     752:	b0 e0       	ldi	r27, 0x00	; 0
     754:	e8 0e       	add	r14, r24
     756:	f9 1e       	adc	r15, r25
     758:	0a 1f       	adc	r16, r26
     75a:	1b 1f       	adc	r17, r27
     75c:	17 ff       	sbrs	r17, 7
     75e:	05 c0       	rjmp	.+10     	; 0x76a <__pack_f+0x162>
     760:	16 95       	lsr	r17
     762:	07 95       	ror	r16
     764:	f7 94       	ror	r15
     766:	e7 94       	ror	r14
     768:	31 96       	adiw	r30, 0x01	; 1
     76a:	87 e0       	ldi	r24, 0x07	; 7
     76c:	16 95       	lsr	r17
     76e:	07 95       	ror	r16
     770:	f7 94       	ror	r15
     772:	e7 94       	ror	r14
     774:	8a 95       	dec	r24
     776:	d1 f7       	brne	.-12     	; 0x76c <__pack_f+0x164>
     778:	05 c0       	rjmp	.+10     	; 0x784 <__pack_f+0x17c>
     77a:	ee 24       	eor	r14, r14
     77c:	ff 24       	eor	r15, r15
     77e:	87 01       	movw	r16, r14
     780:	ef ef       	ldi	r30, 0xFF	; 255
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	6e 2f       	mov	r22, r30
     786:	67 95       	ror	r22
     788:	66 27       	eor	r22, r22
     78a:	67 95       	ror	r22
     78c:	90 2f       	mov	r25, r16
     78e:	9f 77       	andi	r25, 0x7F	; 127
     790:	d7 94       	ror	r13
     792:	dd 24       	eor	r13, r13
     794:	d7 94       	ror	r13
     796:	8e 2f       	mov	r24, r30
     798:	86 95       	lsr	r24
     79a:	49 2f       	mov	r20, r25
     79c:	46 2b       	or	r20, r22
     79e:	58 2f       	mov	r21, r24
     7a0:	5d 29       	or	r21, r13
     7a2:	b7 01       	movw	r22, r14
     7a4:	ca 01       	movw	r24, r20
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	08 95       	ret

000007b2 <__unpack_f>:
     7b2:	fc 01       	movw	r30, r24
     7b4:	db 01       	movw	r26, r22
     7b6:	40 81       	ld	r20, Z
     7b8:	51 81       	ldd	r21, Z+1	; 0x01
     7ba:	22 81       	ldd	r18, Z+2	; 0x02
     7bc:	62 2f       	mov	r22, r18
     7be:	6f 77       	andi	r22, 0x7F	; 127
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	22 1f       	adc	r18, r18
     7c4:	22 27       	eor	r18, r18
     7c6:	22 1f       	adc	r18, r18
     7c8:	93 81       	ldd	r25, Z+3	; 0x03
     7ca:	89 2f       	mov	r24, r25
     7cc:	88 0f       	add	r24, r24
     7ce:	82 2b       	or	r24, r18
     7d0:	28 2f       	mov	r18, r24
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	99 1f       	adc	r25, r25
     7d6:	99 27       	eor	r25, r25
     7d8:	99 1f       	adc	r25, r25
     7da:	11 96       	adiw	r26, 0x01	; 1
     7dc:	9c 93       	st	X, r25
     7de:	11 97       	sbiw	r26, 0x01	; 1
     7e0:	21 15       	cp	r18, r1
     7e2:	31 05       	cpc	r19, r1
     7e4:	a9 f5       	brne	.+106    	; 0x850 <__unpack_f+0x9e>
     7e6:	41 15       	cp	r20, r1
     7e8:	51 05       	cpc	r21, r1
     7ea:	61 05       	cpc	r22, r1
     7ec:	71 05       	cpc	r23, r1
     7ee:	11 f4       	brne	.+4      	; 0x7f4 <__unpack_f+0x42>
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	37 c0       	rjmp	.+110    	; 0x862 <__unpack_f+0xb0>
     7f4:	82 e8       	ldi	r24, 0x82	; 130
     7f6:	9f ef       	ldi	r25, 0xFF	; 255
     7f8:	13 96       	adiw	r26, 0x03	; 3
     7fa:	9c 93       	st	X, r25
     7fc:	8e 93       	st	-X, r24
     7fe:	12 97       	sbiw	r26, 0x02	; 2
     800:	9a 01       	movw	r18, r20
     802:	ab 01       	movw	r20, r22
     804:	67 e0       	ldi	r22, 0x07	; 7
     806:	22 0f       	add	r18, r18
     808:	33 1f       	adc	r19, r19
     80a:	44 1f       	adc	r20, r20
     80c:	55 1f       	adc	r21, r21
     80e:	6a 95       	dec	r22
     810:	d1 f7       	brne	.-12     	; 0x806 <__unpack_f+0x54>
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	8c 93       	st	X, r24
     816:	0d c0       	rjmp	.+26     	; 0x832 <__unpack_f+0x80>
     818:	22 0f       	add	r18, r18
     81a:	33 1f       	adc	r19, r19
     81c:	44 1f       	adc	r20, r20
     81e:	55 1f       	adc	r21, r21
     820:	12 96       	adiw	r26, 0x02	; 2
     822:	8d 91       	ld	r24, X+
     824:	9c 91       	ld	r25, X
     826:	13 97       	sbiw	r26, 0x03	; 3
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	13 96       	adiw	r26, 0x03	; 3
     82c:	9c 93       	st	X, r25
     82e:	8e 93       	st	-X, r24
     830:	12 97       	sbiw	r26, 0x02	; 2
     832:	20 30       	cpi	r18, 0x00	; 0
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	38 07       	cpc	r19, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	48 07       	cpc	r20, r24
     83c:	80 e4       	ldi	r24, 0x40	; 64
     83e:	58 07       	cpc	r21, r24
     840:	58 f3       	brcs	.-42     	; 0x818 <__unpack_f+0x66>
     842:	14 96       	adiw	r26, 0x04	; 4
     844:	2d 93       	st	X+, r18
     846:	3d 93       	st	X+, r19
     848:	4d 93       	st	X+, r20
     84a:	5c 93       	st	X, r21
     84c:	17 97       	sbiw	r26, 0x07	; 7
     84e:	08 95       	ret
     850:	2f 3f       	cpi	r18, 0xFF	; 255
     852:	31 05       	cpc	r19, r1
     854:	79 f4       	brne	.+30     	; 0x874 <__unpack_f+0xc2>
     856:	41 15       	cp	r20, r1
     858:	51 05       	cpc	r21, r1
     85a:	61 05       	cpc	r22, r1
     85c:	71 05       	cpc	r23, r1
     85e:	19 f4       	brne	.+6      	; 0x866 <__unpack_f+0xb4>
     860:	84 e0       	ldi	r24, 0x04	; 4
     862:	8c 93       	st	X, r24
     864:	08 95       	ret
     866:	64 ff       	sbrs	r22, 4
     868:	03 c0       	rjmp	.+6      	; 0x870 <__unpack_f+0xbe>
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	8c 93       	st	X, r24
     86e:	12 c0       	rjmp	.+36     	; 0x894 <__unpack_f+0xe2>
     870:	1c 92       	st	X, r1
     872:	10 c0       	rjmp	.+32     	; 0x894 <__unpack_f+0xe2>
     874:	2f 57       	subi	r18, 0x7F	; 127
     876:	30 40       	sbci	r19, 0x00	; 0
     878:	13 96       	adiw	r26, 0x03	; 3
     87a:	3c 93       	st	X, r19
     87c:	2e 93       	st	-X, r18
     87e:	12 97       	sbiw	r26, 0x02	; 2
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	8c 93       	st	X, r24
     884:	87 e0       	ldi	r24, 0x07	; 7
     886:	44 0f       	add	r20, r20
     888:	55 1f       	adc	r21, r21
     88a:	66 1f       	adc	r22, r22
     88c:	77 1f       	adc	r23, r23
     88e:	8a 95       	dec	r24
     890:	d1 f7       	brne	.-12     	; 0x886 <__unpack_f+0xd4>
     892:	70 64       	ori	r23, 0x40	; 64
     894:	14 96       	adiw	r26, 0x04	; 4
     896:	4d 93       	st	X+, r20
     898:	5d 93       	st	X+, r21
     89a:	6d 93       	st	X+, r22
     89c:	7c 93       	st	X, r23
     89e:	17 97       	sbiw	r26, 0x07	; 7
     8a0:	08 95       	ret

000008a2 <buttonCheck>:
	}
}

void buttonCheck() {

	RIGHT = 0; LEFT = 0;
     8a2:	10 92 b3 01 	sts	0x01B3, r1
     8a6:	10 92 b2 01 	sts	0x01B2, r1
     8aa:	10 92 b1 01 	sts	0x01B1, r1
     8ae:	10 92 b0 01 	sts	0x01B0, r1
	
	if(PINB & 0b00000010) {
     8b2:	19 9b       	sbis	0x03, 1	; 3
     8b4:	11 c0       	rjmp	.+34     	; 0x8d8 <buttonCheck+0x36>
     8b6:	84 ef       	ldi	r24, 0xF4	; 244
     8b8:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8ba:	20 e9       	ldi	r18, 0x90	; 144
     8bc:	31 e0       	ldi	r19, 0x01	; 1
     8be:	f9 01       	movw	r30, r18
     8c0:	31 97       	sbiw	r30, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <buttonCheck+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c6:	d9 f7       	brne	.-10     	; 0x8be <buttonCheck+0x1c>
	_delay_ms(50);
	if(PINB & 0b00000010) {
     8c8:	19 9b       	sbis	0x03, 1	; 3
     8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <buttonCheck+0x36>
		// Send output to PORTD.
		//PORTB |= (1<<3); //PORTB = 0b11111111;
		RIGHT = 1;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	90 93 b3 01 	sts	0x01B3, r25
     8d4:	80 93 b2 01 	sts	0x01B2, r24
	}
	}
	
	if (PINB & 0b00000001 ) {
     8d8:	18 9b       	sbis	0x03, 0	; 3
     8da:	11 c0       	rjmp	.+34     	; 0x8fe <buttonCheck+0x5c>
     8dc:	84 ef       	ldi	r24, 0xF4	; 244
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	20 e9       	ldi	r18, 0x90	; 144
     8e2:	31 e0       	ldi	r19, 0x01	; 1
     8e4:	f9 01       	movw	r30, r18
     8e6:	31 97       	sbiw	r30, 0x01	; 1
     8e8:	f1 f7       	brne	.-4      	; 0x8e6 <buttonCheck+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ec:	d9 f7       	brne	.-10     	; 0x8e4 <buttonCheck+0x42>
	_delay_ms(50);
	if (PINB & 0b00000001 ) {
     8ee:	18 9b       	sbis	0x03, 0	; 3
     8f0:	06 c0       	rjmp	.+12     	; 0x8fe <buttonCheck+0x5c>
		//PORTB |= (1<<2);
		LEFT = 1;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	90 93 b1 01 	sts	0x01B1, r25
     8fa:	80 93 b0 01 	sts	0x01B0, r24
     8fe:	08 95       	ret

00000900 <PinChangeInit>:
}

void PinChangeInit(void)
{
	//Enable PCINT0 and PCINT1 (both buttons) in the PCMSK0 register
	PCMSK0 |= (1<<PCINT0);
     900:	eb e6       	ldi	r30, 0x6B	; 107
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	81 60       	ori	r24, 0x01	; 1
     908:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT1);
     90a:	80 81       	ld	r24, Z
     90c:	82 60       	ori	r24, 0x02	; 2
     90e:	80 83       	st	Z, r24

	//Enable Pin change interrupts in the Pin Change Interrupt Control Register
	PCICR |= (1<<PCIE0);
     910:	e8 e6       	ldi	r30, 0x68	; 104
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	81 60       	ori	r24, 0x01	; 1
     918:	80 83       	st	Z, r24
	
	//Set the PCINT0 and PCINT1 interrupts to trigger on rising edge
	EICRA |= ((1<<ISC00)&&(1<<ISC01)&&(1<<ISC10)&&(1<<ISC11));
     91a:	e9 e6       	ldi	r30, 0x69	; 105
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	81 60       	ori	r24, 0x01	; 1
     922:	80 83       	st	Z, r24
		
	//Ensure to enable global interrupts as well.
	sei();
     924:	78 94       	sei
}
     926:	08 95       	ret

00000928 <__vector_9>:

ISR(PCINT0_vect) {	
     928:	1f 92       	push	r1
     92a:	0f 92       	push	r0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	0f 92       	push	r0
     930:	11 24       	eor	r1, r1
     932:	8f 93       	push	r24
     934:	9f 93       	push	r25
	RIGHT = 0; LEFT = 0;
     936:	10 92 b3 01 	sts	0x01B3, r1
     93a:	10 92 b2 01 	sts	0x01B2, r1
     93e:	10 92 b1 01 	sts	0x01B1, r1
     942:	10 92 b0 01 	sts	0x01B0, r1
	
	if(PINB & 0b00000010) {
     946:	19 9b       	sbis	0x03, 1	; 3
     948:	06 c0       	rjmp	.+12     	; 0x956 <__vector_9+0x2e>
	//_delay_ms(50);
	//if(PINB & 0b00000010) {
		// Send output to PORTD.
		//PORTB |= (1<<3); //PORTB = 0b11111111;
		RIGHT = 1;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	90 93 b3 01 	sts	0x01B3, r25
     952:	80 93 b2 01 	sts	0x01B2, r24
	//}
	}
	
	if (PINB & 0b00000001 ) {
     956:	18 9b       	sbis	0x03, 0	; 3
     958:	06 c0       	rjmp	.+12     	; 0x966 <__vector_9+0x3e>
	//_delay_ms(50);
	//if (PINB & 0b00000001 ) {
		//PORTB |= (1<<2);
		LEFT = 1;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	90 93 b1 01 	sts	0x01B1, r25
     962:	80 93 b0 01 	sts	0x01B0, r24
	}
	clear();
	draw_character('*',heroX,heroY);
	refresh();
	*/
}
     966:	9f 91       	pop	r25
     968:	8f 91       	pop	r24
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0
     970:	1f 90       	pop	r1
     972:	18 95       	reti

00000974 <TimerInit>:

void TimerInit(void)
{
	//Set to Normal Timer Mode using TCCR0A and TCCR0B
	TCCR0A &= ~((1<<WGM01)|(WGM00));
     974:	84 b5       	in	r24, 0x24	; 36
     976:	8d 7f       	andi	r24, 0xFD	; 253
     978:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~((1<<WGM02));
     97a:	85 b5       	in	r24, 0x25	; 37
     97c:	87 7f       	andi	r24, 0xF7	; 247
     97e:	85 bd       	out	0x25, r24	; 37
	
	//Set Prescaler using TCCR0B, using Clock Speed find timer speed = 1/(Clock Speed/Prescaler)
	//Prescaler = 1024
	//Timer Speed = 128 nano seconds NOT 16MHZ
	//Timer Overflow Speed = 32640 nano seconds (Timer Speed * 255) - (255 since 8-bit timer) NOT 16MHZ
	TCCR0B |= (1<<CS02)|(1<<CS00);
     980:	85 b5       	in	r24, 0x25	; 37
     982:	85 60       	ori	r24, 0x05	; 5
     984:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~((1<<CS01));
     986:	85 b5       	in	r24, 0x25	; 37
     988:	8d 7f       	andi	r24, 0xFD	; 253
     98a:	85 bd       	out	0x25, r24	; 37
	
	//Enable TOIE0 interrupt in the TIMSK0 register
	TIMSK0 |= (1<<TOIE0);
     98c:	ee e6       	ldi	r30, 0x6E	; 110
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	81 60       	ori	r24, 0x01	; 1
     994:	80 83       	st	Z, r24
	
	//Ensure to enable global interrupts as well.
	sei();
     996:	78 94       	sei
}
     998:	08 95       	ret

0000099a <setupHero>:
	zombie[i] -> is_visible = 1;
	}
	}
}

void setupHero(void) {
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
	int middle_x = screen_x/2;
	int middle_y = screen_y/2 + 5;
     9a6:	80 91 6c 01 	lds	r24, 0x016C
     9aa:	90 91 6d 01 	lds	r25, 0x016D
     9ae:	62 e0       	ldi	r22, 0x02	; 2
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
     9b6:	7b 01       	movw	r14, r22
     9b8:	85 e0       	ldi	r24, 0x05	; 5
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	e8 0e       	add	r14, r24
     9be:	f9 1e       	adc	r15, r25
	my_pointer -> x = middle_x;
     9c0:	c0 90 da 01 	lds	r12, 0x01DA
     9c4:	d0 90 db 01 	lds	r13, 0x01DB
     9c8:	80 91 68 01 	lds	r24, 0x0168
     9cc:	90 91 69 01 	lds	r25, 0x0169
     9d0:	62 e0       	ldi	r22, 0x02	; 2
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
     9d8:	88 27       	eor	r24, r24
     9da:	77 fd       	sbrc	r23, 7
     9dc:	80 95       	com	r24
     9de:	98 2f       	mov	r25, r24
     9e0:	0e 94 45 11 	call	0x228a	; 0x228a <__floatsisf>
     9e4:	f6 01       	movw	r30, r12
     9e6:	60 83       	st	Z, r22
     9e8:	71 83       	std	Z+1, r23	; 0x01
     9ea:	82 83       	std	Z+2, r24	; 0x02
     9ec:	93 83       	std	Z+3, r25	; 0x03
	my_pointer -> y = middle_y;
     9ee:	00 27       	eor	r16, r16
     9f0:	f7 fc       	sbrc	r15, 7
     9f2:	00 95       	com	r16
     9f4:	10 2f       	mov	r17, r16
     9f6:	c8 01       	movw	r24, r16
     9f8:	b7 01       	movw	r22, r14
     9fa:	0e 94 45 11 	call	0x228a	; 0x228a <__floatsisf>
     9fe:	f6 01       	movw	r30, r12
     a00:	64 83       	std	Z+4, r22	; 0x04
     a02:	75 83       	std	Z+5, r23	; 0x05
     a04:	86 83       	std	Z+6, r24	; 0x06
     a06:	97 83       	std	Z+7, r25	; 0x07
}
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12
     a14:	08 95       	ret

00000a16 <isInPit>:
	draw_line(pitLeft,pitTop,pitLeft,pitBottom);
	draw_line(pitRight,pitTop,pitRight,pitBottom);
	
}

int isInPit(Sprite *sprite) {
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	8c 01       	movw	r16, r24
	int x = sprite -> x;
     a1c:	dc 01       	movw	r26, r24
     a1e:	6d 91       	ld	r22, X+
     a20:	7d 91       	ld	r23, X+
     a22:	8d 91       	ld	r24, X+
     a24:	9c 91       	ld	r25, X
     a26:	0e 94 12 11 	call	0x2224	; 0x2224 <__fixsfsi>
     a2a:	fb 01       	movw	r30, r22
	int y = sprite -> y;
     a2c:	d8 01       	movw	r26, r16
     a2e:	14 96       	adiw	r26, 0x04	; 4
     a30:	4d 91       	ld	r20, X+
     a32:	5d 91       	ld	r21, X+
     a34:	6d 91       	ld	r22, X+
     a36:	7c 91       	ld	r23, X
     a38:	17 97       	sbiw	r26, 0x07	; 7
	if ((x > pitLeft && x < pitRight - width +1 && y > pitTop && y < pitBottom - height +1)) {
     a3a:	80 91 d8 01 	lds	r24, 0x01D8
     a3e:	90 91 d9 01 	lds	r25, 0x01D9
     a42:	8e 17       	cp	r24, r30
     a44:	9f 07       	cpc	r25, r31
     a46:	44 f5       	brge	.+80     	; 0xa98 <isInPit+0x82>
     a48:	20 91 8a 01 	lds	r18, 0x018A
     a4c:	80 91 d0 01 	lds	r24, 0x01D0
     a50:	90 91 d1 01 	lds	r25, 0x01D1
     a54:	82 1b       	sub	r24, r18
     a56:	91 09       	sbc	r25, r1
     a58:	8e 17       	cp	r24, r30
     a5a:	9f 07       	cpc	r25, r31
     a5c:	ec f0       	brlt	.+58     	; 0xa98 <isInPit+0x82>
	
}

int isInPit(Sprite *sprite) {
	int x = sprite -> x;
	int y = sprite -> y;
     a5e:	cb 01       	movw	r24, r22
     a60:	ba 01       	movw	r22, r20
     a62:	0e 94 12 11 	call	0x2224	; 0x2224 <__fixsfsi>
	if ((x > pitLeft && x < pitRight - width +1 && y > pitTop && y < pitBottom - height +1)) {
     a66:	80 91 de 01 	lds	r24, 0x01DE
     a6a:	90 91 df 01 	lds	r25, 0x01DF
     a6e:	86 17       	cp	r24, r22
     a70:	97 07       	cpc	r25, r23
     a72:	94 f4       	brge	.+36     	; 0xa98 <isInPit+0x82>
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	20 91 8b 01 	lds	r18, 0x018B
     a7a:	80 91 d6 01 	lds	r24, 0x01D6
     a7e:	90 91 d7 01 	lds	r25, 0x01D7
     a82:	82 1b       	sub	r24, r18
     a84:	91 09       	sbc	r25, r1
     a86:	86 17       	cp	r24, r22
     a88:	97 07       	cpc	r25, r23
     a8a:	0c f4       	brge	.+2      	; 0xa8e <isInPit+0x78>
     a8c:	31 e0       	ldi	r19, 0x01	; 1
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	38 27       	eor	r19, r24
     a92:	23 2f       	mov	r18, r19
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <isInPit+0x86>
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
	}
	else {
	return 0;
	}

}
     a9c:	c9 01       	movw	r24, r18
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	08 95       	ret

00000aa4 <heroForward>:
		}
		heroForward();
	}
}

void heroForward(void) {
     aa4:	6f 92       	push	r6
     aa6:	7f 92       	push	r7
     aa8:	8f 92       	push	r8
     aaa:	9f 92       	push	r9
     aac:	af 92       	push	r10
     aae:	bf 92       	push	r11
     ab0:	cf 92       	push	r12
     ab2:	df 92       	push	r13
     ab4:	ef 92       	push	r14
     ab6:	ff 92       	push	r15
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
	int HeroX = 1;
	int HeroY = 0;
	int Up,Down,Left,Right;
	
	// is hero in pit?
	if (isInPit(my_pointer)) {
     ac0:	00 91 da 01 	lds	r16, 0x01DA
     ac4:	10 91 db 01 	lds	r17, 0x01DB
     ac8:	c8 01       	movw	r24, r16
     aca:	a5 df       	rcall	.-182    	; 0xa16 <isInPit>
     acc:	89 2b       	or	r24, r25
     ace:	e9 f0       	breq	.+58     	; 0xb0a <__stack+0xb>
	Up = pitTop+2;
     ad0:	60 90 de 01 	lds	r6, 0x01DE
     ad4:	70 90 df 01 	lds	r7, 0x01DF
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	68 0e       	add	r6, r24
     ade:	79 1e       	adc	r7, r25
	Down = pitBottom - 4;
     ae0:	a0 90 d6 01 	lds	r10, 0x01D6
     ae4:	b0 90 d7 01 	lds	r11, 0x01D7
     ae8:	ec ef       	ldi	r30, 0xFC	; 252
     aea:	ff ef       	ldi	r31, 0xFF	; 255
     aec:	ae 0e       	add	r10, r30
     aee:	bf 1e       	adc	r11, r31
	Left = pitLeft+2;
     af0:	80 90 d8 01 	lds	r8, 0x01D8
     af4:	90 90 d9 01 	lds	r9, 0x01D9
     af8:	88 0e       	add	r8, r24
     afa:	99 1e       	adc	r9, r25
	Right = pitRight -4;
     afc:	c0 90 d0 01 	lds	r12, 0x01D0
     b00:	d0 90 d1 01 	lds	r13, 0x01D1
     b04:	ce 0e       	add	r12, r30
     b06:	df 1e       	adc	r13, r31
     b08:	14 c0       	rjmp	.+40     	; 0xb32 <__stack+0x33>
	} else {
	Up = 10;
	Down = screen_y-1;
     b0a:	a0 90 6c 01 	lds	r10, 0x016C
     b0e:	b0 90 6d 01 	lds	r11, 0x016D
     b12:	08 94       	sec
     b14:	a1 08       	sbc	r10, r1
     b16:	b1 08       	sbc	r11, r1
	Left = 2;
	Right = screen_x-1;
     b18:	c0 90 68 01 	lds	r12, 0x0168
     b1c:	d0 90 69 01 	lds	r13, 0x0169
     b20:	08 94       	sec
     b22:	c1 08       	sbc	r12, r1
     b24:	d1 08       	sbc	r13, r1
     b26:	3a e0       	ldi	r19, 0x0A	; 10
     b28:	63 2e       	mov	r6, r19
     b2a:	71 2c       	mov	r7, r1
     b2c:	22 e0       	ldi	r18, 0x02	; 2
     b2e:	82 2e       	mov	r8, r18
     b30:	91 2c       	mov	r9, r1
	}

	// update direction of movement
	if (Direction == 0) {
     b32:	80 91 74 01 	lds	r24, 0x0174
     b36:	90 91 75 01 	lds	r25, 0x0175
     b3a:	89 2b       	or	r24, r25
     b3c:	21 f0       	breq	.+8      	; 0xb46 <__stack+0x47>
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	e9 2e       	mov	r14, r25
     b42:	f1 2c       	mov	r15, r1
     b44:	39 c0       	rjmp	.+114    	; 0xbb8 <__stack+0xb9>
		sword -> bitmap = bitSwordDown;
     b46:	c0 91 cc 01 	lds	r28, 0x01CC
     b4a:	d0 91 cd 01 	lds	r29, 0x01CD
     b4e:	87 e9       	ldi	r24, 0x97	; 151
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	9c 87       	std	Y+12, r25	; 0x0c
     b54:	8b 87       	std	Y+11, r24	; 0x0b
		if (gotSword) {
     b56:	80 91 c8 01 	lds	r24, 0x01C8
     b5a:	90 91 c9 01 	lds	r25, 0x01C9
     b5e:	89 2b       	or	r24, r25
     b60:	b9 f0       	breq	.+46     	; 0xb90 <__stack+0x91>
		sword -> x = my_pointer -> x;
     b62:	f8 01       	movw	r30, r16
     b64:	80 81       	ld	r24, Z
     b66:	91 81       	ldd	r25, Z+1	; 0x01
     b68:	a2 81       	ldd	r26, Z+2	; 0x02
     b6a:	b3 81       	ldd	r27, Z+3	; 0x03
     b6c:	88 83       	st	Y, r24
     b6e:	99 83       	std	Y+1, r25	; 0x01
     b70:	aa 83       	std	Y+2, r26	; 0x02
     b72:	bb 83       	std	Y+3, r27	; 0x03
		sword -> y = my_pointer -> y + 4;
     b74:	64 81       	ldd	r22, Z+4	; 0x04
     b76:	75 81       	ldd	r23, Z+5	; 0x05
     b78:	86 81       	ldd	r24, Z+6	; 0x06
     b7a:	97 81       	ldd	r25, Z+7	; 0x07
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	40 e8       	ldi	r20, 0x80	; 128
     b82:	50 e4       	ldi	r21, 0x40	; 64
     b84:	0e 94 aa 10 	call	0x2154	; 0x2154 <__addsf3>
     b88:	6c 83       	std	Y+4, r22	; 0x04
     b8a:	7d 83       	std	Y+5, r23	; 0x05
     b8c:	8e 83       	std	Y+6, r24	; 0x06
     b8e:	9f 83       	std	Y+7, r25	; 0x07
		}
		HeroY = 1;
		HeroX = 0;
		if (my_pointer -> y > Down) {
     b90:	b5 01       	movw	r22, r10
     b92:	88 27       	eor	r24, r24
     b94:	77 fd       	sbrc	r23, 7
     b96:	80 95       	com	r24
     b98:	98 2f       	mov	r25, r24
     b9a:	0e 94 45 11 	call	0x228a	; 0x228a <__floatsisf>
     b9e:	9b 01       	movw	r18, r22
     ba0:	ac 01       	movw	r20, r24
     ba2:	f8 01       	movw	r30, r16
     ba4:	64 81       	ldd	r22, Z+4	; 0x04
     ba6:	75 81       	ldd	r23, Z+5	; 0x05
     ba8:	86 81       	ldd	r24, Z+6	; 0x06
     baa:	97 81       	ldd	r25, Z+7	; 0x07
     bac:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__gesf2>
     bb0:	18 16       	cp	r1, r24
     bb2:	2c f4       	brge	.+10     	; 0xbbe <__stack+0xbf>
     bb4:	ee 24       	eor	r14, r14
     bb6:	ff 24       	eor	r15, r15
     bb8:	c0 e0       	ldi	r28, 0x00	; 0
     bba:	d0 e0       	ldi	r29, 0x00	; 0
     bbc:	04 c0       	rjmp	.+8      	; 0xbc6 <__stack+0xc7>
     bbe:	ee 24       	eor	r14, r14
     bc0:	ff 24       	eor	r15, r15
     bc2:	c1 e0       	ldi	r28, 0x01	; 1
     bc4:	d0 e0       	ldi	r29, 0x00	; 0
		HeroY = 0;
		}
	}
	if (Direction == 1) {
     bc6:	80 91 74 01 	lds	r24, 0x0174
     bca:	90 91 75 01 	lds	r25, 0x0175
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <__stack+0xd5>
     bd2:	40 c0       	rjmp	.+128    	; 0xc54 <__stack+0x155>
		sword -> bitmap = bitSwordRight;
     bd4:	c0 91 cc 01 	lds	r28, 0x01CC
     bd8:	d0 91 cd 01 	lds	r29, 0x01CD
     bdc:	81 e9       	ldi	r24, 0x91	; 145
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	9c 87       	std	Y+12, r25	; 0x0c
     be2:	8b 87       	std	Y+11, r24	; 0x0b
		if (gotSword) {
     be4:	80 91 c8 01 	lds	r24, 0x01C8
     be8:	90 91 c9 01 	lds	r25, 0x01C9
     bec:	89 2b       	or	r24, r25
     bee:	c1 f0       	breq	.+48     	; 0xc20 <__stack+0x121>
		sword -> x = my_pointer -> x + 4;
     bf0:	f8 01       	movw	r30, r16
     bf2:	60 81       	ld	r22, Z
     bf4:	71 81       	ldd	r23, Z+1	; 0x01
     bf6:	82 81       	ldd	r24, Z+2	; 0x02
     bf8:	93 81       	ldd	r25, Z+3	; 0x03
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e8       	ldi	r20, 0x80	; 128
     c00:	50 e4       	ldi	r21, 0x40	; 64
     c02:	0e 94 aa 10 	call	0x2154	; 0x2154 <__addsf3>
     c06:	68 83       	st	Y, r22
     c08:	79 83       	std	Y+1, r23	; 0x01
     c0a:	8a 83       	std	Y+2, r24	; 0x02
     c0c:	9b 83       	std	Y+3, r25	; 0x03
		sword -> y = my_pointer -> y;
     c0e:	f8 01       	movw	r30, r16
     c10:	84 81       	ldd	r24, Z+4	; 0x04
     c12:	95 81       	ldd	r25, Z+5	; 0x05
     c14:	a6 81       	ldd	r26, Z+6	; 0x06
     c16:	b7 81       	ldd	r27, Z+7	; 0x07
     c18:	8c 83       	std	Y+4, r24	; 0x04
     c1a:	9d 83       	std	Y+5, r25	; 0x05
     c1c:	ae 83       	std	Y+6, r26	; 0x06
     c1e:	bf 83       	std	Y+7, r27	; 0x07
		}
		HeroX = 1;
		HeroY = 0;
		if (my_pointer -> x > Right) {
     c20:	b6 01       	movw	r22, r12
     c22:	88 27       	eor	r24, r24
     c24:	77 fd       	sbrc	r23, 7
     c26:	80 95       	com	r24
     c28:	98 2f       	mov	r25, r24
     c2a:	0e 94 45 11 	call	0x228a	; 0x228a <__floatsisf>
     c2e:	9b 01       	movw	r18, r22
     c30:	ac 01       	movw	r20, r24
     c32:	f8 01       	movw	r30, r16
     c34:	60 81       	ld	r22, Z
     c36:	71 81       	ldd	r23, Z+1	; 0x01
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__gesf2>
     c40:	18 16       	cp	r1, r24
     c42:	1c f4       	brge	.+6      	; 0xc4a <__stack+0x14b>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	03 c0       	rjmp	.+6      	; 0xc50 <__stack+0x151>
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	e8 2e       	mov	r14, r24
     c4e:	f1 2c       	mov	r15, r1
     c50:	c0 e0       	ldi	r28, 0x00	; 0
     c52:	d0 e0       	ldi	r29, 0x00	; 0
		HeroX = 0;
		}
	}
	if (Direction == 2) {
     c54:	80 91 74 01 	lds	r24, 0x0174
     c58:	90 91 75 01 	lds	r25, 0x0175
     c5c:	02 97       	sbiw	r24, 0x02	; 2
     c5e:	09 f0       	breq	.+2      	; 0xc62 <__stack+0x163>
     c60:	40 c0       	rjmp	.+128    	; 0xce2 <__stack+0x1e3>
		sword -> bitmap = bitSwordUp;
     c62:	c0 91 cc 01 	lds	r28, 0x01CC
     c66:	d0 91 cd 01 	lds	r29, 0x01CD
     c6a:	84 e9       	ldi	r24, 0x94	; 148
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	9c 87       	std	Y+12, r25	; 0x0c
     c70:	8b 87       	std	Y+11, r24	; 0x0b
		if (gotSword) {
     c72:	80 91 c8 01 	lds	r24, 0x01C8
     c76:	90 91 c9 01 	lds	r25, 0x01C9
     c7a:	89 2b       	or	r24, r25
     c7c:	b9 f0       	breq	.+46     	; 0xcac <__stack+0x1ad>
		sword -> x = my_pointer -> x;
     c7e:	f8 01       	movw	r30, r16
     c80:	80 81       	ld	r24, Z
     c82:	91 81       	ldd	r25, Z+1	; 0x01
     c84:	a2 81       	ldd	r26, Z+2	; 0x02
     c86:	b3 81       	ldd	r27, Z+3	; 0x03
     c88:	88 83       	st	Y, r24
     c8a:	99 83       	std	Y+1, r25	; 0x01
     c8c:	aa 83       	std	Y+2, r26	; 0x02
     c8e:	bb 83       	std	Y+3, r27	; 0x03
		sword -> y = my_pointer -> y - 4;
     c90:	64 81       	ldd	r22, Z+4	; 0x04
     c92:	75 81       	ldd	r23, Z+5	; 0x05
     c94:	86 81       	ldd	r24, Z+6	; 0x06
     c96:	97 81       	ldd	r25, Z+7	; 0x07
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	40 e8       	ldi	r20, 0x80	; 128
     c9e:	50 e4       	ldi	r21, 0x40	; 64
     ca0:	0e 94 a9 10 	call	0x2152	; 0x2152 <__subsf3>
     ca4:	6c 83       	std	Y+4, r22	; 0x04
     ca6:	7d 83       	std	Y+5, r23	; 0x05
     ca8:	8e 83       	std	Y+6, r24	; 0x06
     caa:	9f 83       	std	Y+7, r25	; 0x07
		}
		HeroY = -1;
		HeroX = 0;
		if (my_pointer -> y < Up) {
     cac:	b3 01       	movw	r22, r6
     cae:	88 27       	eor	r24, r24
     cb0:	77 fd       	sbrc	r23, 7
     cb2:	80 95       	com	r24
     cb4:	98 2f       	mov	r25, r24
     cb6:	0e 94 45 11 	call	0x228a	; 0x228a <__floatsisf>
     cba:	9b 01       	movw	r18, r22
     cbc:	ac 01       	movw	r20, r24
     cbe:	f8 01       	movw	r30, r16
     cc0:	64 81       	ldd	r22, Z+4	; 0x04
     cc2:	75 81       	ldd	r23, Z+5	; 0x05
     cc4:	86 81       	ldd	r24, Z+6	; 0x06
     cc6:	97 81       	ldd	r25, Z+7	; 0x07
     cc8:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
     ccc:	88 23       	and	r24, r24
     cce:	2c f4       	brge	.+10     	; 0xcda <__stack+0x1db>
     cd0:	ee 24       	eor	r14, r14
     cd2:	ff 24       	eor	r15, r15
     cd4:	c0 e0       	ldi	r28, 0x00	; 0
     cd6:	d0 e0       	ldi	r29, 0x00	; 0
     cd8:	04 c0       	rjmp	.+8      	; 0xce2 <__stack+0x1e3>
     cda:	ee 24       	eor	r14, r14
     cdc:	ff 24       	eor	r15, r15
     cde:	cf ef       	ldi	r28, 0xFF	; 255
     ce0:	df ef       	ldi	r29, 0xFF	; 255
		HeroY = 0;
		}
	}
	if (Direction == 3) {
     ce2:	80 91 74 01 	lds	r24, 0x0174
     ce6:	90 91 75 01 	lds	r25, 0x0175
     cea:	03 97       	sbiw	r24, 0x03	; 3
     cec:	09 f0       	breq	.+2      	; 0xcf0 <__stack+0x1f1>
     cee:	40 c0       	rjmp	.+128    	; 0xd70 <__stack+0x271>
		sword -> bitmap = bitSwordLeft;
     cf0:	c0 91 cc 01 	lds	r28, 0x01CC
     cf4:	d0 91 cd 01 	lds	r29, 0x01CD
     cf8:	8e e8       	ldi	r24, 0x8E	; 142
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	9c 87       	std	Y+12, r25	; 0x0c
     cfe:	8b 87       	std	Y+11, r24	; 0x0b
		if (gotSword) {
     d00:	80 91 c8 01 	lds	r24, 0x01C8
     d04:	90 91 c9 01 	lds	r25, 0x01C9
     d08:	89 2b       	or	r24, r25
     d0a:	c1 f0       	breq	.+48     	; 0xd3c <__stack+0x23d>
		sword -> x = my_pointer -> x - 4;
     d0c:	f8 01       	movw	r30, r16
     d0e:	60 81       	ld	r22, Z
     d10:	71 81       	ldd	r23, Z+1	; 0x01
     d12:	82 81       	ldd	r24, Z+2	; 0x02
     d14:	93 81       	ldd	r25, Z+3	; 0x03
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e8       	ldi	r20, 0x80	; 128
     d1c:	50 e4       	ldi	r21, 0x40	; 64
     d1e:	0e 94 a9 10 	call	0x2152	; 0x2152 <__subsf3>
     d22:	68 83       	st	Y, r22
     d24:	79 83       	std	Y+1, r23	; 0x01
     d26:	8a 83       	std	Y+2, r24	; 0x02
     d28:	9b 83       	std	Y+3, r25	; 0x03
		sword -> y = my_pointer -> y;
     d2a:	f8 01       	movw	r30, r16
     d2c:	84 81       	ldd	r24, Z+4	; 0x04
     d2e:	95 81       	ldd	r25, Z+5	; 0x05
     d30:	a6 81       	ldd	r26, Z+6	; 0x06
     d32:	b7 81       	ldd	r27, Z+7	; 0x07
     d34:	8c 83       	std	Y+4, r24	; 0x04
     d36:	9d 83       	std	Y+5, r25	; 0x05
     d38:	ae 83       	std	Y+6, r26	; 0x06
     d3a:	bf 83       	std	Y+7, r27	; 0x07
		}
		HeroX = -1;
		HeroY = 0;
		if (my_pointer -> x < Left) {
     d3c:	b4 01       	movw	r22, r8
     d3e:	88 27       	eor	r24, r24
     d40:	77 fd       	sbrc	r23, 7
     d42:	80 95       	com	r24
     d44:	98 2f       	mov	r25, r24
     d46:	0e 94 45 11 	call	0x228a	; 0x228a <__floatsisf>
     d4a:	9b 01       	movw	r18, r22
     d4c:	ac 01       	movw	r20, r24
     d4e:	f8 01       	movw	r30, r16
     d50:	60 81       	ld	r22, Z
     d52:	71 81       	ldd	r23, Z+1	; 0x01
     d54:	82 81       	ldd	r24, Z+2	; 0x02
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	0e 94 0e 11 	call	0x221c	; 0x221c <__cmpsf2>
     d5c:	88 23       	and	r24, r24
     d5e:	1c f4       	brge	.+6      	; 0xd66 <__stack+0x267>
     d60:	ee 24       	eor	r14, r14
     d62:	ff 24       	eor	r15, r15
     d64:	03 c0       	rjmp	.+6      	; 0xd6c <__stack+0x26d>
     d66:	ee 24       	eor	r14, r14
     d68:	ea 94       	dec	r14
     d6a:	fe 2c       	mov	r15, r14
     d6c:	c0 e0       	ldi	r28, 0x00	; 0
     d6e:	d0 e0       	ldi	r29, 0x00	; 0
		HeroX = 0;
		}
	}
	
	if (isInPit(my_pointer)) {
     d70:	c8 01       	movw	r24, r16
     d72:	51 de       	rcall	.-862    	; 0xa16 <isInPit>
     d74:	89 2b       	or	r24, r25
     d76:	09 f4       	brne	.+2      	; 0xd7a <__stack+0x27b>
     d78:	81 c0       	rjmp	.+258    	; 0xe7c <__stack+0x37d>
		int x = my_pointer -> x;
     d7a:	f8 01       	movw	r30, r16
     d7c:	60 81       	ld	r22, Z
     d7e:	71 81       	ldd	r23, Z+1	; 0x01
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	93 81       	ldd	r25, Z+3	; 0x03
     d84:	0e 94 12 11 	call	0x2224	; 0x2224 <__fixsfsi>
		int y = my_pointer -> y;
     d88:	f8 01       	movw	r30, r16
     d8a:	24 81       	ldd	r18, Z+4	; 0x04
     d8c:	35 81       	ldd	r19, Z+5	; 0x05
     d8e:	46 81       	ldd	r20, Z+6	; 0x06
     d90:	57 81       	ldd	r21, Z+7	; 0x07
		if (LEFT && RIGHT && x > Right ) {
     d92:	80 91 b0 01 	lds	r24, 0x01B0
     d96:	90 91 b1 01 	lds	r25, 0x01B1
     d9a:	89 2b       	or	r24, r25
     d9c:	99 f0       	breq	.+38     	; 0xdc4 <__stack+0x2c5>
     d9e:	80 91 b2 01 	lds	r24, 0x01B2
     da2:	90 91 b3 01 	lds	r25, 0x01B3
     da6:	89 2b       	or	r24, r25
     da8:	69 f0       	breq	.+26     	; 0xdc4 <__stack+0x2c5>
     daa:	c6 16       	cp	r12, r22
     dac:	d7 06       	cpc	r13, r23
     dae:	54 f4       	brge	.+20     	; 0xdc4 <__stack+0x2c5>
		
		my_pointer -> x = Right + 4;	
     db0:	84 e0       	ldi	r24, 0x04	; 4
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	c8 0e       	add	r12, r24
     db6:	d9 1e       	adc	r13, r25
     db8:	b6 01       	movw	r22, r12
     dba:	88 27       	eor	r24, r24
     dbc:	77 fd       	sbrc	r23, 7
     dbe:	80 95       	com	r24
     dc0:	98 2f       	mov	r25, r24
     dc2:	18 c0       	rjmp	.+48     	; 0xdf4 <__stack+0x2f5>
		
		} else if (LEFT && RIGHT && x < Left ) {
     dc4:	80 91 b0 01 	lds	r24, 0x01B0
     dc8:	90 91 b1 01 	lds	r25, 0x01B1
     dcc:	89 2b       	or	r24, r25
     dce:	d1 f0       	breq	.+52     	; 0xe04 <__stack+0x305>
     dd0:	80 91 b2 01 	lds	r24, 0x01B2
     dd4:	90 91 b3 01 	lds	r25, 0x01B3
     dd8:	89 2b       	or	r24, r25
     dda:	a1 f0       	breq	.+40     	; 0xe04 <__stack+0x305>
     ddc:	68 15       	cp	r22, r8
     dde:	79 05       	cpc	r23, r9
     de0:	8c f4       	brge	.+34     	; 0xe04 <__stack+0x305>
		
		my_pointer -> x = Left - 4;
     de2:	8c ef       	ldi	r24, 0xFC	; 252
     de4:	9f ef       	ldi	r25, 0xFF	; 255
     de6:	88 0e       	add	r8, r24
     de8:	99 1e       	adc	r9, r25
     dea:	b4 01       	movw	r22, r8
     dec:	88 27       	eor	r24, r24
     dee:	77 fd       	sbrc	r23, 7
     df0:	80 95       	com	r24
     df2:	98 2f       	mov	r25, r24
     df4:	0e 94 45 11 	call	0x228a	; 0x228a <__floatsisf>
     df8:	f8 01       	movw	r30, r16
     dfa:	60 83       	st	Z, r22
     dfc:	71 83       	std	Z+1, r23	; 0x01
     dfe:	82 83       	std	Z+2, r24	; 0x02
     e00:	93 83       	std	Z+3, r25	; 0x03
     e02:	3c c0       	rjmp	.+120    	; 0xe7c <__stack+0x37d>
		}
	}
	
	if (isInPit(my_pointer)) {
		int x = my_pointer -> x;
		int y = my_pointer -> y;
     e04:	ca 01       	movw	r24, r20
     e06:	b9 01       	movw	r22, r18
     e08:	0e 94 12 11 	call	0x2224	; 0x2224 <__fixsfsi>
		
		} else if (LEFT && RIGHT && x < Left ) {
		
		my_pointer -> x = Left - 4;
		
		} else if (LEFT && RIGHT && y < Up ) {
     e0c:	80 91 b0 01 	lds	r24, 0x01B0
     e10:	90 91 b1 01 	lds	r25, 0x01B1
     e14:	89 2b       	or	r24, r25
     e16:	99 f0       	breq	.+38     	; 0xe3e <__stack+0x33f>
     e18:	80 91 b2 01 	lds	r24, 0x01B2
     e1c:	90 91 b3 01 	lds	r25, 0x01B3
     e20:	89 2b       	or	r24, r25
     e22:	69 f0       	breq	.+26     	; 0xe3e <__stack+0x33f>
     e24:	66 15       	cp	r22, r6
     e26:	77 05       	cpc	r23, r7
     e28:	54 f4       	brge	.+20     	; 0xe3e <__stack+0x33f>
		
		my_pointer -> y = Up - 4;
     e2a:	8c ef       	ldi	r24, 0xFC	; 252
     e2c:	9f ef       	ldi	r25, 0xFF	; 255
     e2e:	68 0e       	add	r6, r24
     e30:	79 1e       	adc	r7, r25
     e32:	b3 01       	movw	r22, r6
     e34:	88 27       	eor	r24, r24
     e36:	77 fd       	sbrc	r23, 7
     e38:	80 95       	com	r24
     e3a:	98 2f       	mov	r25, r24
     e3c:	18 c0       	rjmp	.+48     	; 0xe6e <__stack+0x36f>
		
		} else if (LEFT && RIGHT && y > Down ) {
     e3e:	80 91 b0 01 	lds	r24, 0x01B0
     e42:	90 91 b1 01 	lds	r25, 0x01B1
     e46:	89 2b       	or	r24, r25
     e48:	c9 f0       	breq	.+50     	; 0xe7c <__stack+0x37d>
     e4a:	80 91 b2 01 	lds	r24, 0x01B2
     e4e:	90 91 b3 01 	lds	r25, 0x01B3
     e52:	89 2b       	or	r24, r25
     e54:	99 f0       	breq	.+38     	; 0xe7c <__stack+0x37d>
     e56:	a6 16       	cp	r10, r22
     e58:	b7 06       	cpc	r11, r23
     e5a:	84 f4       	brge	.+32     	; 0xe7c <__stack+0x37d>
		
		my_pointer -> y = Down + 4;
     e5c:	84 e0       	ldi	r24, 0x04	; 4
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	a8 0e       	add	r10, r24
     e62:	b9 1e       	adc	r11, r25
     e64:	b5 01       	movw	r22, r10
     e66:	88 27       	eor	r24, r24
     e68:	77 fd       	sbrc	r23, 7
     e6a:	80 95       	com	r24
     e6c:	98 2f       	mov	r25, r24
     e6e:	0e 94 45 11 	call	0x228a	; 0x228a <__floatsisf>
     e72:	f8 01       	movw	r30, r16
     e74:	64 83       	std	Z+4, r22	; 0x04
     e76:	75 83       	std	Z+5, r23	; 0x05
     e78:	86 83       	std	Z+6, r24	; 0x06
     e7a:	97 83       	std	Z+7, r25	; 0x07
		
		}
	}	
		
	my_pointer -> x += HeroX;
     e7c:	b7 01       	movw	r22, r14
     e7e:	88 27       	eor	r24, r24
     e80:	77 fd       	sbrc	r23, 7
     e82:	80 95       	com	r24
     e84:	98 2f       	mov	r25, r24
     e86:	0e 94 45 11 	call	0x228a	; 0x228a <__floatsisf>
     e8a:	9b 01       	movw	r18, r22
     e8c:	ac 01       	movw	r20, r24
     e8e:	f8 01       	movw	r30, r16
     e90:	60 81       	ld	r22, Z
     e92:	71 81       	ldd	r23, Z+1	; 0x01
     e94:	82 81       	ldd	r24, Z+2	; 0x02
     e96:	93 81       	ldd	r25, Z+3	; 0x03
     e98:	0e 94 aa 10 	call	0x2154	; 0x2154 <__addsf3>
     e9c:	f8 01       	movw	r30, r16
     e9e:	60 83       	st	Z, r22
     ea0:	71 83       	std	Z+1, r23	; 0x01
     ea2:	82 83       	std	Z+2, r24	; 0x02
     ea4:	93 83       	std	Z+3, r25	; 0x03
	my_pointer -> y += HeroY;
     ea6:	be 01       	movw	r22, r28
     ea8:	88 27       	eor	r24, r24
     eaa:	77 fd       	sbrc	r23, 7
     eac:	80 95       	com	r24
     eae:	98 2f       	mov	r25, r24
     eb0:	0e 94 45 11 	call	0x228a	; 0x228a <__floatsisf>
     eb4:	9b 01       	movw	r18, r22
     eb6:	ac 01       	movw	r20, r24
     eb8:	f8 01       	movw	r30, r16
     eba:	64 81       	ldd	r22, Z+4	; 0x04
     ebc:	75 81       	ldd	r23, Z+5	; 0x05
     ebe:	86 81       	ldd	r24, Z+6	; 0x06
     ec0:	97 81       	ldd	r25, Z+7	; 0x07
     ec2:	0e 94 aa 10 	call	0x2154	; 0x2154 <__addsf3>
     ec6:	f8 01       	movw	r30, r16
     ec8:	64 83       	std	Z+4, r22	; 0x04
     eca:	75 83       	std	Z+5, r23	; 0x05
     ecc:	86 83       	std	Z+6, r24	; 0x06
     ece:	97 83       	std	Z+7, r25	; 0x07

}
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	ff 90       	pop	r15
     eda:	ef 90       	pop	r14
     edc:	df 90       	pop	r13
     ede:	cf 90       	pop	r12
     ee0:	bf 90       	pop	r11
     ee2:	af 90       	pop	r10
     ee4:	9f 90       	pop	r9
     ee6:	8f 90       	pop	r8
     ee8:	7f 90       	pop	r7
     eea:	6f 90       	pop	r6
     eec:	08 95       	ret

00000eee <drawPit>:

}

void drawPit(void) {

	draw_line(pitLeft,pitTop,pitRight,pitTop);
     eee:	20 91 de 01 	lds	r18, 0x01DE
     ef2:	80 91 d8 01 	lds	r24, 0x01D8
     ef6:	62 2f       	mov	r22, r18
     ef8:	40 91 d0 01 	lds	r20, 0x01D0
     efc:	0e 94 34 12 	call	0x2468	; 0x2468 <draw_line>
	draw_line(pitLeft,pitBottom,pitRight,pitBottom);
     f00:	20 91 d6 01 	lds	r18, 0x01D6
     f04:	80 91 d8 01 	lds	r24, 0x01D8
     f08:	62 2f       	mov	r22, r18
     f0a:	40 91 d0 01 	lds	r20, 0x01D0
     f0e:	0e 94 34 12 	call	0x2468	; 0x2468 <draw_line>
	draw_line(pitLeft,pitTop,pitLeft,pitBottom);
     f12:	40 91 d8 01 	lds	r20, 0x01D8
     f16:	84 2f       	mov	r24, r20
     f18:	60 91 de 01 	lds	r22, 0x01DE
     f1c:	20 91 d6 01 	lds	r18, 0x01D6
     f20:	0e 94 34 12 	call	0x2468	; 0x2468 <draw_line>
	draw_line(pitRight,pitTop,pitRight,pitBottom);
     f24:	40 91 d0 01 	lds	r20, 0x01D0
     f28:	84 2f       	mov	r24, r20
     f2a:	60 91 de 01 	lds	r22, 0x01DE
     f2e:	20 91 d6 01 	lds	r18, 0x01D6
     f32:	0c 94 34 12 	jmp	0x2468	; 0x2468 <draw_line>

00000f36 <drawScreen>:

	}
	
}

void drawScreen(void) {
     f36:	0f 93       	push	r16
     f38:	1f 93       	push	r17
	draw_line(0,8,screen_x_Full,8);
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	68 e0       	ldi	r22, 0x08	; 8
     f3e:	40 91 6a 01 	lds	r20, 0x016A
     f42:	28 e0       	ldi	r18, 0x08	; 8
     f44:	0e 94 34 12 	call	0x2468	; 0x2468 <draw_line>
	draw_line(0,8,0,screen_y_Full);
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	68 e0       	ldi	r22, 0x08	; 8
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	20 91 6e 01 	lds	r18, 0x016E
     f52:	0e 94 34 12 	call	0x2468	; 0x2468 <draw_line>
	draw_line(screen_x_Full,8,screen_x_Full,screen_y_Full);
     f56:	40 91 6a 01 	lds	r20, 0x016A
     f5a:	84 2f       	mov	r24, r20
     f5c:	68 e0       	ldi	r22, 0x08	; 8
     f5e:	20 91 6e 01 	lds	r18, 0x016E
     f62:	0e 94 34 12 	call	0x2468	; 0x2468 <draw_line>
	draw_line(0,screen_y_Full,screen_x_Full,screen_y_Full);
     f66:	20 91 6e 01 	lds	r18, 0x016E
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	62 2f       	mov	r22, r18
     f6e:	40 91 6a 01 	lds	r20, 0x016A
     f72:	0e 94 34 12 	call	0x2468	; 0x2468 <draw_line>
	draw_string("L: ",0,0);
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <draw_string>
	draw_character((0x30 + Lives),11,0);
     f82:	80 91 8c 01 	lds	r24, 0x018C
     f86:	80 5d       	subi	r24, 0xD0	; 208
     f88:	6b e0       	ldi	r22, 0x0B	; 11
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	0e 94 1b 14 	call	0x2836	; 0x2836 <draw_character>
	draw_string("S: ", 21,0);
     f90:	84 e0       	ldi	r24, 0x04	; 4
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	65 e1       	ldi	r22, 0x15	; 21
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <draw_string>
	int temp = Score/10;
     f9c:	00 91 c6 01 	lds	r16, 0x01C6
     fa0:	10 91 c7 01 	lds	r17, 0x01C7
	draw_character((0x30 + Score%10),37,0);
     fa4:	c8 01       	movw	r24, r16
     fa6:	6a e0       	ldi	r22, 0x0A	; 10
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
     fae:	80 5d       	subi	r24, 0xD0	; 208
     fb0:	65 e2       	ldi	r22, 0x25	; 37
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	0e 94 1b 14 	call	0x2836	; 0x2836 <draw_character>
	//if (Score > 9) 
	draw_character((0x30 + temp),31,0); //
     fb8:	c8 01       	movw	r24, r16
     fba:	6a e0       	ldi	r22, 0x0A	; 10
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
     fc2:	86 2f       	mov	r24, r22
     fc4:	80 5d       	subi	r24, 0xD0	; 208
     fc6:	6f e1       	ldi	r22, 0x1F	; 31
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	0e 94 1b 14 	call	0x2836	; 0x2836 <draw_character>
	//draw_character((0x30 + scoreCounter),40,0);
	draw_character((0x30 + Direction),78,0);
     fce:	80 91 74 01 	lds	r24, 0x0174
     fd2:	90 91 75 01 	lds	r25, 0x0175
     fd6:	80 5d       	subi	r24, 0xD0	; 208
     fd8:	6e e4       	ldi	r22, 0x4E	; 78
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	0e 94 1b 14 	call	0x2836	; 0x2836 <draw_character>
	draw_character((0x30 + isInPit(my_pointer)),70,0);
     fe0:	80 91 da 01 	lds	r24, 0x01DA
     fe4:	90 91 db 01 	lds	r25, 0x01DB
     fe8:	16 dd       	rcall	.-1492   	; 0xa16 <isInPit>
     fea:	80 5d       	subi	r24, 0xD0	; 208
     fec:	66 e4       	ldi	r22, 0x46	; 70
     fee:	40 e0       	ldi	r20, 0x00	; 0
     ff0:	0e 94 1b 14 	call	0x2836	; 0x2836 <draw_character>

}
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	08 95       	ret

00000ffa <CountDown>:
	Score = 0;
	activeZombies = numZombies;
	
}

void CountDown() {
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	13 e3       	ldi	r17, 0x33	; 51
    1002:	c0 e9       	ldi	r28, 0x90	; 144
    1004:	d1 e0       	ldi	r29, 0x01	; 1
	for (char i= 0x3; i>0x0; i--) {
		clear();
    1006:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <clear>
		draw_string("Game Start In: ", 2,22); // 15*5 = 75 (84 - 75)/2 = 4
    100a:	88 e0       	ldi	r24, 0x08	; 8
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	62 e0       	ldi	r22, 0x02	; 2
    1010:	46 e1       	ldi	r20, 0x16	; 22
    1012:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <draw_string>
		draw_character((0x30 + i), 75,22);
    1016:	81 2f       	mov	r24, r17
    1018:	6b e4       	ldi	r22, 0x4B	; 75
    101a:	46 e1       	ldi	r20, 0x16	; 22
    101c:	0e 94 1b 14 	call	0x2836	; 0x2836 <draw_character>
		refresh();
    1020:	0e 94 80 14 	call	0x2900	; 0x2900 <refresh>
    1024:	80 e1       	ldi	r24, 0x10	; 16
    1026:	97 e2       	ldi	r25, 0x27	; 39
    1028:	fe 01       	movw	r30, r28
    102a:	31 97       	sbiw	r30, 0x01	; 1
    102c:	f1 f7       	brne	.-4      	; 0x102a <CountDown+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    102e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1030:	d9 f7       	brne	.-10     	; 0x1028 <CountDown+0x2e>
    1032:	11 50       	subi	r17, 0x01	; 1
	activeZombies = numZombies;
	
}

void CountDown() {
	for (char i= 0x3; i>0x0; i--) {
    1034:	10 33       	cpi	r17, 0x30	; 48
    1036:	39 f7       	brne	.-50     	; 0x1006 <CountDown+0xc>
		draw_string("Game Start In: ", 2,22); // 15*5 = 75 (84 - 75)/2 = 4
		draw_character((0x30 + i), 75,22);
		refresh();
		_delay_ms(1000);
	}
}
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	08 95       	ret

00001040 <seedWithButtonPress>:
	return out;
}

void seedWithButtonPress() {
// turn on teensy LED
PORTD |= 0b01000000;
    1040:	5e 9a       	sbi	0x0b, 6	; 11
// Configure port B for the buttons....
DDRB |= 0b00001100;
    1042:	84 b1       	in	r24, 0x04	; 4
    1044:	8c 60       	ori	r24, 0x0C	; 12
    1046:	84 b9       	out	0x04, r24	; 4
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <seedWithButtonPress+0x12>
// Wait for the button press on SW0 while iterating the seed
unsigned int seed = 0;
while (!RIGHT && !LEFT) {
seed++;
    104e:	2f 5f       	subi	r18, 0xFF	; 255
    1050:	3f 4f       	sbci	r19, 0xFF	; 255
PORTD |= 0b01000000;
// Configure port B for the buttons....
DDRB |= 0b00001100;
// Wait for the button press on SW0 while iterating the seed
unsigned int seed = 0;
while (!RIGHT && !LEFT) {
    1052:	80 91 b2 01 	lds	r24, 0x01B2
    1056:	90 91 b3 01 	lds	r25, 0x01B3
    105a:	89 2b       	or	r24, r25
    105c:	31 f4       	brne	.+12     	; 0x106a <seedWithButtonPress+0x2a>
    105e:	80 91 b0 01 	lds	r24, 0x01B0
    1062:	90 91 b1 01 	lds	r25, 0x01B1
    1066:	89 2b       	or	r24, r25
    1068:	91 f3       	breq	.-28     	; 0x104e <seedWithButtonPress+0xe>
seed++;
}
// Seed the random number generator
srand(seed);
    106a:	c9 01       	movw	r24, r18
    106c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <srand>
// What does dgbI do? where is it from?
// dbgI((int) seed, 10);
// turn off teensy LED
PORTD = 0b00000000;
    1070:	1b b8       	out	0x0b, r1	; 11
}
    1072:	08 95       	ret

00001074 <randInRange>:
		LEFT = 0;
	}
	*/
}

int randInRange(int min, int max) {
    1074:	ef 92       	push	r14
    1076:	ff 92       	push	r15
    1078:	0f 93       	push	r16
    107a:	1f 93       	push	r17
    107c:	8c 01       	movw	r16, r24
    107e:	7b 01       	movw	r14, r22
	int out = min + rand()%(max+1 - min);
    1080:	0e 94 84 16 	call	0x2d08	; 0x2d08 <rand>
    1084:	e0 1a       	sub	r14, r16
    1086:	f1 0a       	sbc	r15, r17
    1088:	08 94       	sec
    108a:	e1 1c       	adc	r14, r1
    108c:	f1 1c       	adc	r15, r1
    108e:	b7 01       	movw	r22, r14
    1090:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
    1094:	9c 01       	movw	r18, r24
    1096:	20 0f       	add	r18, r16
    1098:	31 1f       	adc	r19, r17
	return out;
}
    109a:	c9 01       	movw	r24, r18
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	08 95       	ret

000010a6 <setupGrenade>:
	int y = randInRange(9,screen_y);
	sword -> x = x;
	sword -> y = y;
}

void setupGrenade(void) {
    10a6:	8f 92       	push	r8
    10a8:	9f 92       	push	r9
    10aa:	af 92       	push	r10
    10ac:	bf 92       	push	r11
    10ae:	cf 92       	push	r12
    10b0:	df 92       	push	r13
    10b2:	ef 92       	push	r14
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
	int x = randInRange(2,screen_x);
    10ba:	60 91 68 01 	lds	r22, 0x0168
    10be:	70 91 69 01 	lds	r23, 0x0169
    10c2:	82 e0       	ldi	r24, 0x02	; 2
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	d6 df       	rcall	.-84     	; 0x1074 <randInRange>
    10c8:	7c 01       	movw	r14, r24
	int y = randInRange(9,screen_y);
    10ca:	60 91 6c 01 	lds	r22, 0x016C
    10ce:	70 91 6d 01 	lds	r23, 0x016D
    10d2:	89 e0       	ldi	r24, 0x09	; 9
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	ce df       	rcall	.-100    	; 0x1074 <randInRange>
    10d8:	5c 01       	movw	r10, r24
	grenade -> x = x;
    10da:	80 90 d2 01 	lds	r8, 0x01D2
    10de:	90 90 d3 01 	lds	r9, 0x01D3
    10e2:	00 27       	eor	r16, r16
    10e4:	f7 fc       	sbrc	r15, 7
    10e6:	00 95       	com	r16
    10e8:	10 2f       	mov	r17, r16
    10ea:	c8 01       	movw	r24, r16
    10ec:	b7 01       	movw	r22, r14
    10ee:	0e 94 45 11 	call	0x228a	; 0x228a <__floatsisf>
    10f2:	f4 01       	movw	r30, r8
    10f4:	60 83       	st	Z, r22
    10f6:	71 83       	std	Z+1, r23	; 0x01
    10f8:	82 83       	std	Z+2, r24	; 0x02
    10fa:	93 83       	std	Z+3, r25	; 0x03
	grenade -> y = y;
    10fc:	cc 24       	eor	r12, r12
    10fe:	b7 fc       	sbrc	r11, 7
    1100:	c0 94       	com	r12
    1102:	dc 2c       	mov	r13, r12
    1104:	c6 01       	movw	r24, r12
    1106:	b5 01       	movw	r22, r10
    1108:	0e 94 45 11 	call	0x228a	; 0x228a <__floatsisf>
    110c:	f4 01       	movw	r30, r8
    110e:	64 83       	std	Z+4, r22	; 0x04
    1110:	75 83       	std	Z+5, r23	; 0x05
    1112:	86 83       	std	Z+6, r24	; 0x06
    1114:	97 83       	std	Z+7, r25	; 0x07
}
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	ff 90       	pop	r15
    111c:	ef 90       	pop	r14
    111e:	df 90       	pop	r13
    1120:	cf 90       	pop	r12
    1122:	bf 90       	pop	r11
    1124:	af 90       	pop	r10
    1126:	9f 90       	pop	r9
    1128:	8f 90       	pop	r8
    112a:	08 95       	ret

0000112c <setupSword>:
	return 0;
	}

}

void setupSword(void) {
    112c:	8f 92       	push	r8
    112e:	9f 92       	push	r9
    1130:	af 92       	push	r10
    1132:	bf 92       	push	r11
    1134:	cf 92       	push	r12
    1136:	df 92       	push	r13
    1138:	ef 92       	push	r14
    113a:	ff 92       	push	r15
    113c:	0f 93       	push	r16
    113e:	1f 93       	push	r17
	int x = randInRange(2,screen_x);
    1140:	60 91 68 01 	lds	r22, 0x0168
    1144:	70 91 69 01 	lds	r23, 0x0169
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	93 df       	rcall	.-218    	; 0x1074 <randInRange>
    114e:	7c 01       	movw	r14, r24
	int y = randInRange(9,screen_y);
    1150:	60 91 6c 01 	lds	r22, 0x016C
    1154:	70 91 6d 01 	lds	r23, 0x016D
    1158:	89 e0       	ldi	r24, 0x09	; 9
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	8b df       	rcall	.-234    	; 0x1074 <randInRange>
    115e:	5c 01       	movw	r10, r24
	sword -> x = x;
    1160:	80 90 cc 01 	lds	r8, 0x01CC
    1164:	90 90 cd 01 	lds	r9, 0x01CD
    1168:	00 27       	eor	r16, r16
    116a:	f7 fc       	sbrc	r15, 7
    116c:	00 95       	com	r16
    116e:	10 2f       	mov	r17, r16
    1170:	c8 01       	movw	r24, r16
    1172:	b7 01       	movw	r22, r14
    1174:	0e 94 45 11 	call	0x228a	; 0x228a <__floatsisf>
    1178:	f4 01       	movw	r30, r8
    117a:	60 83       	st	Z, r22
    117c:	71 83       	std	Z+1, r23	; 0x01
    117e:	82 83       	std	Z+2, r24	; 0x02
    1180:	93 83       	std	Z+3, r25	; 0x03
	sword -> y = y;
    1182:	cc 24       	eor	r12, r12
    1184:	b7 fc       	sbrc	r11, 7
    1186:	c0 94       	com	r12
    1188:	dc 2c       	mov	r13, r12
    118a:	c6 01       	movw	r24, r12
    118c:	b5 01       	movw	r22, r10
    118e:	0e 94 45 11 	call	0x228a	; 0x228a <__floatsisf>
    1192:	f4 01       	movw	r30, r8
    1194:	64 83       	std	Z+4, r22	; 0x04
    1196:	75 83       	std	Z+5, r23	; 0x05
    1198:	86 83       	std	Z+6, r24	; 0x06
    119a:	97 83       	std	Z+7, r25	; 0x07
}
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	ff 90       	pop	r15
    11a2:	ef 90       	pop	r14
    11a4:	df 90       	pop	r13
    11a6:	cf 90       	pop	r12
    11a8:	bf 90       	pop	r11
    11aa:	af 90       	pop	r10
    11ac:	9f 90       	pop	r9
    11ae:	8f 90       	pop	r8
    11b0:	08 95       	ret

000011b2 <setupPit>:
	gotSword = 1;
	}
	
}

void setupPit(void) {
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17

	int pitwidth = randInRange(6,12);
    11ba:	86 e0       	ldi	r24, 0x06	; 6
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	6c e0       	ldi	r22, 0x0C	; 12
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	58 df       	rcall	.-336    	; 0x1074 <randInRange>
    11c4:	8c 01       	movw	r16, r24
	int pitheight = randInRange(6,12);
    11c6:	86 e0       	ldi	r24, 0x06	; 6
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	6c e0       	ldi	r22, 0x0C	; 12
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	52 df       	rcall	.-348    	; 0x1074 <randInRange>
    11d0:	7c 01       	movw	r14, r24
	pitLeft = randInRange(20,screen_x_Full-20);
    11d2:	60 91 6a 01 	lds	r22, 0x016A
    11d6:	70 91 6b 01 	lds	r23, 0x016B
    11da:	64 51       	subi	r22, 0x14	; 20
    11dc:	70 40       	sbci	r23, 0x00	; 0
    11de:	84 e1       	ldi	r24, 0x14	; 20
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	48 df       	rcall	.-368    	; 0x1074 <randInRange>
    11e4:	90 93 d9 01 	sts	0x01D9, r25
    11e8:	80 93 d8 01 	sts	0x01D8, r24
	pitRight = pitLeft + pitwidth;
    11ec:	80 0f       	add	r24, r16
    11ee:	91 1f       	adc	r25, r17
    11f0:	90 93 d1 01 	sts	0x01D1, r25
    11f4:	80 93 d0 01 	sts	0x01D0, r24
	pitTop = randInRange(9+20,screen_y_Full-20);
    11f8:	60 91 6e 01 	lds	r22, 0x016E
    11fc:	70 91 6f 01 	lds	r23, 0x016F
    1200:	64 51       	subi	r22, 0x14	; 20
    1202:	70 40       	sbci	r23, 0x00	; 0
    1204:	8d e1       	ldi	r24, 0x1D	; 29
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	35 df       	rcall	.-406    	; 0x1074 <randInRange>
    120a:	90 93 df 01 	sts	0x01DF, r25
    120e:	80 93 de 01 	sts	0x01DE, r24
	pitBottom = pitTop + pitheight;
    1212:	8e 0d       	add	r24, r14
    1214:	9f 1d       	adc	r25, r15
    1216:	90 93 d7 01 	sts	0x01D7, r25
    121a:	80 93 d6 01 	sts	0x01D6, r24
	drawPit();
    121e:	67 de       	rcall	.-818    	; 0xeee <drawPit>

}
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	08 95       	ret

0000122a <setupZombies>:
	draw_character((0x30 + Direction),78,0);
	draw_character((0x30 + isInPit(my_pointer)),70,0);

}

void setupZombies(void ) {
    122a:	2f 92       	push	r2
    122c:	3f 92       	push	r3
    122e:	4f 92       	push	r4
    1230:	5f 92       	push	r5
    1232:	6f 92       	push	r6
    1234:	7f 92       	push	r7
    1236:	8f 92       	push	r8
    1238:	9f 92       	push	r9
    123a:	af 92       	push	r10
    123c:	bf 92       	push	r11
    123e:	cf 92       	push	r12
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	00 d0       	rcall	.+0      	; 0x1250 <setupZombies+0x26>
    1250:	00 d0       	rcall	.+0      	; 0x1252 <setupZombies+0x28>
    1252:	00 d0       	rcall	.+0      	; 0x1254 <setupZombies+0x2a>
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62

	int middle_x = screen_x/2;
    1258:	80 91 68 01 	lds	r24, 0x0168
    125c:	90 91 69 01 	lds	r25, 0x0169
    1260:	62 e0       	ldi	r22, 0x02	; 2
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
    1268:	6d 83       	std	Y+5, r22	; 0x05
    126a:	7e 83       	std	Y+6, r23	; 0x06
	int middle_y = screen_y/2 + 5;
    126c:	80 91 6c 01 	lds	r24, 0x016C
    1270:	90 91 6d 01 	lds	r25, 0x016D
    1274:	62 e0       	ldi	r22, 0x02	; 2
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
    127c:	1b 01       	movw	r2, r22
    127e:	85 e0       	ldi	r24, 0x05	; 5
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	28 0e       	add	r2, r24
    1284:	39 1e       	adc	r3, r25
    1286:	a0 ee       	ldi	r26, 0xE0	; 224
    1288:	b1 e0       	ldi	r27, 0x01	; 1
    128a:	ba 83       	std	Y+2, r27	; 0x02
    128c:	a9 83       	std	Y+1, r26	; 0x01
    128e:	2d 01       	movw	r4, r26
    1290:	66 24       	eor	r6, r6
    1292:	77 24       	eor	r7, r7
	byte x, y;
	
	for (int i = 0; i<numZombies/4; i++) {
		x = randInRange(1,middle_x-10);
    1294:	ed 81       	ldd	r30, Y+5	; 0x05
    1296:	fe 81       	ldd	r31, Y+6	; 0x06
    1298:	3a 97       	sbiw	r30, 0x0a	; 10
    129a:	fc 83       	std	Y+4, r31	; 0x04
    129c:	eb 83       	std	Y+3, r30	; 0x03
    129e:	2f c0       	rjmp	.+94     	; 0x12fe <setupZombies+0xd4>
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	6b 81       	ldd	r22, Y+3	; 0x03
    12a6:	7c 81       	ldd	r23, Y+4	; 0x04
    12a8:	e5 de       	rcall	.-566    	; 0x1074 <randInRange>
    12aa:	a8 2e       	mov	r10, r24
		y = randInRange(9, screen_y-1);
    12ac:	60 91 6c 01 	lds	r22, 0x016C
    12b0:	70 91 6d 01 	lds	r23, 0x016D
    12b4:	61 50       	subi	r22, 0x01	; 1
    12b6:	70 40       	sbci	r23, 0x00	; 0
    12b8:	89 e0       	ldi	r24, 0x09	; 9
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	db de       	rcall	.-586    	; 0x1074 <randInRange>
    12be:	e8 2e       	mov	r14, r24
		zombie[i] -> x = x;
    12c0:	d2 01       	movw	r26, r4
    12c2:	8d 90       	ld	r8, X+
    12c4:	9d 90       	ld	r9, X+
    12c6:	2d 01       	movw	r4, r26
    12c8:	bb 24       	eor	r11, r11
    12ca:	cc 24       	eor	r12, r12
    12cc:	dd 24       	eor	r13, r13
    12ce:	c6 01       	movw	r24, r12
    12d0:	b5 01       	movw	r22, r10
    12d2:	d9 d7       	rcall	.+4018   	; 0x2286 <__floatunsisf>
    12d4:	f4 01       	movw	r30, r8
    12d6:	60 83       	st	Z, r22
    12d8:	71 83       	std	Z+1, r23	; 0x01
    12da:	82 83       	std	Z+2, r24	; 0x02
    12dc:	93 83       	std	Z+3, r25	; 0x03
		zombie[i] -> y = y;
    12de:	ff 24       	eor	r15, r15
    12e0:	00 e0       	ldi	r16, 0x00	; 0
    12e2:	10 e0       	ldi	r17, 0x00	; 0
    12e4:	c8 01       	movw	r24, r16
    12e6:	b7 01       	movw	r22, r14
    12e8:	ce d7       	rcall	.+3996   	; 0x2286 <__floatunsisf>
    12ea:	d4 01       	movw	r26, r8
    12ec:	14 96       	adiw	r26, 0x04	; 4
    12ee:	6d 93       	st	X+, r22
    12f0:	7d 93       	st	X+, r23
    12f2:	8d 93       	st	X+, r24
    12f4:	9c 93       	st	X, r25
    12f6:	17 97       	sbiw	r26, 0x07	; 7

	int middle_x = screen_x/2;
	int middle_y = screen_y/2 + 5;
	byte x, y;
	
	for (int i = 0; i<numZombies/4; i++) {
    12f8:	08 94       	sec
    12fa:	61 1c       	adc	r6, r1
    12fc:	71 1c       	adc	r7, r1
    12fe:	80 91 88 01 	lds	r24, 0x0188
    1302:	90 91 89 01 	lds	r25, 0x0189
    1306:	64 e0       	ldi	r22, 0x04	; 4
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
    130e:	66 16       	cp	r6, r22
    1310:	77 06       	cpc	r7, r23
    1312:	34 f2       	brlt	.-116    	; 0x12a0 <setupZombies+0x76>
    1314:	66 24       	eor	r6, r6
    1316:	77 24       	eor	r7, r7
		y = randInRange(9, screen_y-1);
		zombie[i] -> x = x;
		zombie[i] -> y = y;
	}
	for (int i = 0; i<numZombies/4; i++) {
		x = randInRange(middle_x+10,screen_x);
    1318:	4d 80       	ldd	r4, Y+5	; 0x05
    131a:	5e 80       	ldd	r5, Y+6	; 0x06
    131c:	ea e0       	ldi	r30, 0x0A	; 10
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	4e 0e       	add	r4, r30
    1322:	5f 1e       	adc	r5, r31
    1324:	3c c0       	rjmp	.+120    	; 0x139e <setupZombies+0x174>
    1326:	60 91 68 01 	lds	r22, 0x0168
    132a:	70 91 69 01 	lds	r23, 0x0169
    132e:	c2 01       	movw	r24, r4
    1330:	a1 de       	rcall	.-702    	; 0x1074 <randInRange>
    1332:	a8 2e       	mov	r10, r24
		y = randInRange(9, screen_y-1);
    1334:	60 91 6c 01 	lds	r22, 0x016C
    1338:	70 91 6d 01 	lds	r23, 0x016D
    133c:	61 50       	subi	r22, 0x01	; 1
    133e:	70 40       	sbci	r23, 0x00	; 0
    1340:	89 e0       	ldi	r24, 0x09	; 9
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	97 de       	rcall	.-722    	; 0x1074 <randInRange>
    1346:	e8 2e       	mov	r14, r24
		zombie[i+(numZombies/4)] -> x = x;
    1348:	80 91 88 01 	lds	r24, 0x0188
    134c:	90 91 89 01 	lds	r25, 0x0189
    1350:	64 e0       	ldi	r22, 0x04	; 4
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
    1358:	fb 01       	movw	r30, r22
    135a:	e6 0d       	add	r30, r6
    135c:	f7 1d       	adc	r31, r7
    135e:	ee 0f       	add	r30, r30
    1360:	ff 1f       	adc	r31, r31
    1362:	e0 52       	subi	r30, 0x20	; 32
    1364:	fe 4f       	sbci	r31, 0xFE	; 254
    1366:	80 80       	ld	r8, Z
    1368:	91 80       	ldd	r9, Z+1	; 0x01
    136a:	bb 24       	eor	r11, r11
    136c:	cc 24       	eor	r12, r12
    136e:	dd 24       	eor	r13, r13
    1370:	c6 01       	movw	r24, r12
    1372:	b5 01       	movw	r22, r10
    1374:	88 d7       	rcall	.+3856   	; 0x2286 <__floatunsisf>
    1376:	d4 01       	movw	r26, r8
    1378:	6d 93       	st	X+, r22
    137a:	7d 93       	st	X+, r23
    137c:	8d 93       	st	X+, r24
    137e:	9c 93       	st	X, r25
    1380:	13 97       	sbiw	r26, 0x03	; 3
		zombie[i+(numZombies/4)] -> y = y;
    1382:	ff 24       	eor	r15, r15
    1384:	00 e0       	ldi	r16, 0x00	; 0
    1386:	10 e0       	ldi	r17, 0x00	; 0
    1388:	c8 01       	movw	r24, r16
    138a:	b7 01       	movw	r22, r14
    138c:	7c d7       	rcall	.+3832   	; 0x2286 <__floatunsisf>
    138e:	f4 01       	movw	r30, r8
    1390:	64 83       	std	Z+4, r22	; 0x04
    1392:	75 83       	std	Z+5, r23	; 0x05
    1394:	86 83       	std	Z+6, r24	; 0x06
    1396:	97 83       	std	Z+7, r25	; 0x07
		x = randInRange(1,middle_x-10);
		y = randInRange(9, screen_y-1);
		zombie[i] -> x = x;
		zombie[i] -> y = y;
	}
	for (int i = 0; i<numZombies/4; i++) {
    1398:	08 94       	sec
    139a:	61 1c       	adc	r6, r1
    139c:	71 1c       	adc	r7, r1
    139e:	80 91 88 01 	lds	r24, 0x0188
    13a2:	90 91 89 01 	lds	r25, 0x0189
    13a6:	64 e0       	ldi	r22, 0x04	; 4
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
    13ae:	66 16       	cp	r6, r22
    13b0:	77 06       	cpc	r7, r23
    13b2:	0c f4       	brge	.+2      	; 0x13b6 <setupZombies+0x18c>
    13b4:	b8 cf       	rjmp	.-144    	; 0x1326 <setupZombies+0xfc>
    13b6:	44 24       	eor	r4, r4
    13b8:	55 24       	eor	r5, r5
		zombie[i+(numZombies/4)] -> x = x;
		zombie[i+(numZombies/4)] -> y = y;
	}
	for (int i = 0; i<numZombies/4; i++) {
		x = randInRange(1,screen_x);
		y = randInRange(9, middle_y-10);
    13ba:	e6 ef       	ldi	r30, 0xF6	; 246
    13bc:	6e 2e       	mov	r6, r30
    13be:	ef ef       	ldi	r30, 0xFF	; 255
    13c0:	7e 2e       	mov	r7, r30
    13c2:	62 0c       	add	r6, r2
    13c4:	73 1c       	adc	r7, r3
    13c6:	38 c0       	rjmp	.+112    	; 0x1438 <setupZombies+0x20e>
		y = randInRange(9, screen_y-1);
		zombie[i+(numZombies/4)] -> x = x;
		zombie[i+(numZombies/4)] -> y = y;
	}
	for (int i = 0; i<numZombies/4; i++) {
		x = randInRange(1,screen_x);
    13c8:	60 91 68 01 	lds	r22, 0x0168
    13cc:	70 91 69 01 	lds	r23, 0x0169
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	4f de       	rcall	.-866    	; 0x1074 <randInRange>
    13d6:	e8 2e       	mov	r14, r24
		y = randInRange(9, middle_y-10);
    13d8:	89 e0       	ldi	r24, 0x09	; 9
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	b3 01       	movw	r22, r6
    13de:	4a de       	rcall	.-876    	; 0x1074 <randInRange>
    13e0:	a8 2e       	mov	r10, r24
		zombie[i+(numZombies/2)] -> x = x;
    13e2:	80 91 88 01 	lds	r24, 0x0188
    13e6:	90 91 89 01 	lds	r25, 0x0189
    13ea:	62 e0       	ldi	r22, 0x02	; 2
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
    13f2:	fb 01       	movw	r30, r22
    13f4:	e4 0d       	add	r30, r4
    13f6:	f5 1d       	adc	r31, r5
    13f8:	ee 0f       	add	r30, r30
    13fa:	ff 1f       	adc	r31, r31
    13fc:	e0 52       	subi	r30, 0x20	; 32
    13fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1400:	80 80       	ld	r8, Z
    1402:	91 80       	ldd	r9, Z+1	; 0x01
    1404:	ff 24       	eor	r15, r15
    1406:	00 e0       	ldi	r16, 0x00	; 0
    1408:	10 e0       	ldi	r17, 0x00	; 0
    140a:	c8 01       	movw	r24, r16
    140c:	b7 01       	movw	r22, r14
    140e:	3b d7       	rcall	.+3702   	; 0x2286 <__floatunsisf>
    1410:	d4 01       	movw	r26, r8
    1412:	6d 93       	st	X+, r22
    1414:	7d 93       	st	X+, r23
    1416:	8d 93       	st	X+, r24
    1418:	9c 93       	st	X, r25
    141a:	13 97       	sbiw	r26, 0x03	; 3
		zombie[i+(numZombies/2)] -> y = y;
    141c:	bb 24       	eor	r11, r11
    141e:	cc 24       	eor	r12, r12
    1420:	dd 24       	eor	r13, r13
    1422:	c6 01       	movw	r24, r12
    1424:	b5 01       	movw	r22, r10
    1426:	2f d7       	rcall	.+3678   	; 0x2286 <__floatunsisf>
    1428:	f4 01       	movw	r30, r8
    142a:	64 83       	std	Z+4, r22	; 0x04
    142c:	75 83       	std	Z+5, r23	; 0x05
    142e:	86 83       	std	Z+6, r24	; 0x06
    1430:	97 83       	std	Z+7, r25	; 0x07
		x = randInRange(middle_x+10,screen_x);
		y = randInRange(9, screen_y-1);
		zombie[i+(numZombies/4)] -> x = x;
		zombie[i+(numZombies/4)] -> y = y;
	}
	for (int i = 0; i<numZombies/4; i++) {
    1432:	08 94       	sec
    1434:	41 1c       	adc	r4, r1
    1436:	51 1c       	adc	r5, r1
    1438:	80 91 88 01 	lds	r24, 0x0188
    143c:	90 91 89 01 	lds	r25, 0x0189
    1440:	64 e0       	ldi	r22, 0x04	; 4
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
    1448:	46 16       	cp	r4, r22
    144a:	57 06       	cpc	r5, r23
    144c:	0c f4       	brge	.+2      	; 0x1450 <setupZombies+0x226>
    144e:	bc cf       	rjmp	.-136    	; 0x13c8 <setupZombies+0x19e>
    1450:	44 24       	eor	r4, r4
    1452:	55 24       	eor	r5, r5
		zombie[i+(numZombies/2)] -> x = x;
		zombie[i+(numZombies/2)] -> y = y;
	}
	for (int i = 0; i<numZombies/4; i++) {
		x = randInRange(1,screen_x);
		y = randInRange(middle_y+10,screen_y);
    1454:	6a e0       	ldi	r22, 0x0A	; 10
    1456:	66 2e       	mov	r6, r22
    1458:	71 2c       	mov	r7, r1
    145a:	62 0c       	add	r6, r2
    145c:	73 1c       	adc	r7, r3
    145e:	3f c0       	rjmp	.+126    	; 0x14de <setupZombies+0x2b4>
		y = randInRange(9, middle_y-10);
		zombie[i+(numZombies/2)] -> x = x;
		zombie[i+(numZombies/2)] -> y = y;
	}
	for (int i = 0; i<numZombies/4; i++) {
		x = randInRange(1,screen_x);
    1460:	60 91 68 01 	lds	r22, 0x0168
    1464:	70 91 69 01 	lds	r23, 0x0169
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	03 de       	rcall	.-1018   	; 0x1074 <randInRange>
    146e:	e8 2e       	mov	r14, r24
		y = randInRange(middle_y+10,screen_y);
    1470:	60 91 6c 01 	lds	r22, 0x016C
    1474:	70 91 6d 01 	lds	r23, 0x016D
    1478:	c3 01       	movw	r24, r6
    147a:	fc dd       	rcall	.-1032   	; 0x1074 <randInRange>
    147c:	a8 2e       	mov	r10, r24
		zombie[i+(3*numZombies/4)] -> x = x;
    147e:	20 91 88 01 	lds	r18, 0x0188
    1482:	30 91 89 01 	lds	r19, 0x0189
    1486:	c9 01       	movw	r24, r18
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	82 0f       	add	r24, r18
    148e:	93 1f       	adc	r25, r19
    1490:	64 e0       	ldi	r22, 0x04	; 4
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
    1498:	fb 01       	movw	r30, r22
    149a:	e4 0d       	add	r30, r4
    149c:	f5 1d       	adc	r31, r5
    149e:	ee 0f       	add	r30, r30
    14a0:	ff 1f       	adc	r31, r31
    14a2:	e0 52       	subi	r30, 0x20	; 32
    14a4:	fe 4f       	sbci	r31, 0xFE	; 254
    14a6:	80 80       	ld	r8, Z
    14a8:	91 80       	ldd	r9, Z+1	; 0x01
    14aa:	ff 24       	eor	r15, r15
    14ac:	00 e0       	ldi	r16, 0x00	; 0
    14ae:	10 e0       	ldi	r17, 0x00	; 0
    14b0:	c8 01       	movw	r24, r16
    14b2:	b7 01       	movw	r22, r14
    14b4:	e8 d6       	rcall	.+3536   	; 0x2286 <__floatunsisf>
    14b6:	d4 01       	movw	r26, r8
    14b8:	6d 93       	st	X+, r22
    14ba:	7d 93       	st	X+, r23
    14bc:	8d 93       	st	X+, r24
    14be:	9c 93       	st	X, r25
    14c0:	13 97       	sbiw	r26, 0x03	; 3
		zombie[i+(3*numZombies/4)] -> y = y;
    14c2:	bb 24       	eor	r11, r11
    14c4:	cc 24       	eor	r12, r12
    14c6:	dd 24       	eor	r13, r13
    14c8:	c6 01       	movw	r24, r12
    14ca:	b5 01       	movw	r22, r10
    14cc:	dc d6       	rcall	.+3512   	; 0x2286 <__floatunsisf>
    14ce:	f4 01       	movw	r30, r8
    14d0:	64 83       	std	Z+4, r22	; 0x04
    14d2:	75 83       	std	Z+5, r23	; 0x05
    14d4:	86 83       	std	Z+6, r24	; 0x06
    14d6:	97 83       	std	Z+7, r25	; 0x07
		x = randInRange(1,screen_x);
		y = randInRange(9, middle_y-10);
		zombie[i+(numZombies/2)] -> x = x;
		zombie[i+(numZombies/2)] -> y = y;
	}
	for (int i = 0; i<numZombies/4; i++) {
    14d8:	08 94       	sec
    14da:	41 1c       	adc	r4, r1
    14dc:	51 1c       	adc	r5, r1
    14de:	80 91 88 01 	lds	r24, 0x0188
    14e2:	90 91 89 01 	lds	r25, 0x0189
    14e6:	64 e0       	ldi	r22, 0x04	; 4
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
    14ee:	46 16       	cp	r4, r22
    14f0:	57 06       	cpc	r5, r23
    14f2:	0c f4       	brge	.+2      	; 0x14f6 <setupZombies+0x2cc>
    14f4:	b5 cf       	rjmp	.-150    	; 0x1460 <setupZombies+0x236>
    14f6:	06 e7       	ldi	r16, 0x76	; 118
    14f8:	11 e0       	ldi	r17, 0x01	; 1
    14fa:	66 24       	eor	r6, r6
    14fc:	77 24       	eor	r7, r7
		zombie[i+(3*numZombies/4)] -> y = y;
	}
	for (int i = 0; i<numZombies; i++) {
	zDirection[i] = randInRange(0,3);
	if (notOver == 0) {
	zombie[i] -> is_visible = 1;
    14fe:	ee 24       	eor	r14, r14
    1500:	e3 94       	inc	r14
    1502:	1d c0       	rjmp	.+58     	; 0x153e <setupZombies+0x314>
		y = randInRange(middle_y+10,screen_y);
		zombie[i+(3*numZombies/4)] -> x = x;
		zombie[i+(3*numZombies/4)] -> y = y;
	}
	for (int i = 0; i<numZombies; i++) {
	zDirection[i] = randInRange(0,3);
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	63 e0       	ldi	r22, 0x03	; 3
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	b3 dd       	rcall	.-1178   	; 0x1074 <randInRange>
    150e:	d8 01       	movw	r26, r16
    1510:	8d 93       	st	X+, r24
    1512:	9c 93       	st	X, r25
	if (notOver == 0) {
    1514:	80 91 c4 01 	lds	r24, 0x01C4
    1518:	90 91 c5 01 	lds	r25, 0x01C5
    151c:	89 2b       	or	r24, r25
    151e:	29 f4       	brne	.+10     	; 0x152a <setupZombies+0x300>
	zombie[i] -> is_visible = 1;
    1520:	a9 81       	ldd	r26, Y+1	; 0x01
    1522:	ba 81       	ldd	r27, Y+2	; 0x02
    1524:	ed 91       	ld	r30, X+
    1526:	fc 91       	ld	r31, X
    1528:	e2 86       	std	Z+10, r14	; 0x0a
		x = randInRange(1,screen_x);
		y = randInRange(middle_y+10,screen_y);
		zombie[i+(3*numZombies/4)] -> x = x;
		zombie[i+(3*numZombies/4)] -> y = y;
	}
	for (int i = 0; i<numZombies; i++) {
    152a:	08 94       	sec
    152c:	61 1c       	adc	r6, r1
    152e:	71 1c       	adc	r7, r1
    1530:	0e 5f       	subi	r16, 0xFE	; 254
    1532:	1f 4f       	sbci	r17, 0xFF	; 255
    1534:	e9 81       	ldd	r30, Y+1	; 0x01
    1536:	fa 81       	ldd	r31, Y+2	; 0x02
    1538:	32 96       	adiw	r30, 0x02	; 2
    153a:	fa 83       	std	Y+2, r31	; 0x02
    153c:	e9 83       	std	Y+1, r30	; 0x01
    153e:	80 91 88 01 	lds	r24, 0x0188
    1542:	90 91 89 01 	lds	r25, 0x0189
    1546:	68 16       	cp	r6, r24
    1548:	79 06       	cpc	r7, r25
    154a:	e4 f2       	brlt	.-72     	; 0x1504 <setupZombies+0x2da>
	zDirection[i] = randInRange(0,3);
	if (notOver == 0) {
	zombie[i] -> is_visible = 1;
	}
	}
}
    154c:	26 96       	adiw	r28, 0x06	; 6
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	cf 90       	pop	r12
    1568:	bf 90       	pop	r11
    156a:	af 90       	pop	r10
    156c:	9f 90       	pop	r9
    156e:	8f 90       	pop	r8
    1570:	7f 90       	pop	r7
    1572:	6f 90       	pop	r6
    1574:	5f 90       	pop	r5
    1576:	4f 90       	pop	r4
    1578:	3f 90       	pop	r3
    157a:	2f 90       	pop	r2
    157c:	08 95       	ret

0000157e <zombiesForward>:
	my_pointer -> x += HeroX;
	my_pointer -> y += HeroY;

}

void zombiesForward(void) {
    157e:	2f 92       	push	r2
    1580:	3f 92       	push	r3
    1582:	4f 92       	push	r4
    1584:	5f 92       	push	r5
    1586:	6f 92       	push	r6
    1588:	7f 92       	push	r7
    158a:	8f 92       	push	r8
    158c:	9f 92       	push	r9
    158e:	af 92       	push	r10
    1590:	bf 92       	push	r11
    1592:	cf 92       	push	r12
    1594:	df 92       	push	r13
    1596:	ef 92       	push	r14
    1598:	ff 92       	push	r15
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <zombiesForward+0x26>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <zombiesForward+0x28>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	20 ee       	ldi	r18, 0xE0	; 224
    15ac:	31 e0       	ldi	r19, 0x01	; 1
    15ae:	3a 83       	std	Y+2, r19	; 0x02
    15b0:	29 83       	std	Y+1, r18	; 0x01
    15b2:	56 e7       	ldi	r21, 0x76	; 118
    15b4:	65 2e       	mov	r6, r21
    15b6:	51 e0       	ldi	r21, 0x01	; 1
    15b8:	75 2e       	mov	r7, r21
    15ba:	44 24       	eor	r4, r4
    15bc:	55 24       	eor	r5, r5
    15be:	cc 24       	eor	r12, r12
    15c0:	dd 24       	eor	r13, r13
    15c2:	22 24       	eor	r2, r2
    15c4:	33 24       	eor	r3, r3
    15c6:	f8 c0       	rjmp	.+496    	; 0x17b8 <zombiesForward+0x23a>
	
	//for all zombies
	for (int i = 0; i<numZombies; i++) {
		
		// change of direction with probability 5% each way
		range = randInRange(1,100);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	64 e6       	ldi	r22, 0x64	; 100
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	51 dd       	rcall	.-1374   	; 0x1074 <randInRange>
		if (range < 6) {
    15d2:	86 30       	cpi	r24, 0x06	; 6
    15d4:	91 05       	cpc	r25, r1
    15d6:	6c f4       	brge	.+26     	; 0x15f2 <zombiesForward+0x74>
			zDirection[i] = (zDirection[i]-1);
    15d8:	f3 01       	movw	r30, r6
    15da:	80 81       	ld	r24, Z
    15dc:	91 81       	ldd	r25, Z+1	; 0x01
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	91 83       	std	Z+1, r25	; 0x01
    15e2:	80 83       	st	Z, r24
			if (zDirection[i] < 0) {
    15e4:	97 ff       	sbrs	r25, 7
    15e6:	12 c0       	rjmp	.+36     	; 0x160c <zombiesForward+0x8e>
			zDirection[i] = 3;
    15e8:	23 e0       	ldi	r18, 0x03	; 3
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	31 83       	std	Z+1, r19	; 0x01
    15ee:	20 83       	st	Z, r18
    15f0:	0d c0       	rjmp	.+26     	; 0x160c <zombiesForward+0x8e>
			}
		}
		else if (range > 95) {
    15f2:	80 36       	cpi	r24, 0x60	; 96
    15f4:	91 05       	cpc	r25, r1
    15f6:	54 f0       	brlt	.+20     	; 0x160c <zombiesForward+0x8e>
			zDirection[i] = (zDirection[i]+1)%4;
    15f8:	f3 01       	movw	r30, r6
    15fa:	80 81       	ld	r24, Z
    15fc:	91 81       	ldd	r25, Z+1	; 0x01
    15fe:	01 96       	adiw	r24, 0x01	; 1
    1600:	64 e0       	ldi	r22, 0x04	; 4
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
    1608:	91 83       	std	Z+1, r25	; 0x01
    160a:	80 83       	st	Z, r24
		}
		
		// is zombie in pit?
		if (isInPit(zombie[i])) {
    160c:	e9 81       	ldd	r30, Y+1	; 0x01
    160e:	fa 81       	ldd	r31, Y+2	; 0x02
    1610:	a0 80       	ld	r10, Z
    1612:	b1 80       	ldd	r11, Z+1	; 0x01
    1614:	c5 01       	movw	r24, r10
    1616:	ff d9       	rcall	.-3074   	; 0xa16 <isInPit>
    1618:	89 2b       	or	r24, r25
    161a:	f1 f0       	breq	.+60     	; 0x1658 <zombiesForward+0xda>
			Up = pitTop+2;
    161c:	e0 90 de 01 	lds	r14, 0x01DE
    1620:	f0 90 df 01 	lds	r15, 0x01DF
    1624:	22 e0       	ldi	r18, 0x02	; 2
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	e2 0e       	add	r14, r18
    162a:	f3 1e       	adc	r15, r19
			Down = pitBottom - 4;
    162c:	20 91 d6 01 	lds	r18, 0x01D6
    1630:	30 91 d7 01 	lds	r19, 0x01D7
    1634:	24 50       	subi	r18, 0x04	; 4
    1636:	30 40       	sbci	r19, 0x00	; 0
			Left = pitLeft+2;
    1638:	80 90 d8 01 	lds	r8, 0x01D8
    163c:	90 90 d9 01 	lds	r9, 0x01D9
    1640:	82 e0       	ldi	r24, 0x02	; 2
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	88 0e       	add	r8, r24
    1646:	99 1e       	adc	r9, r25
			Right = pitRight -4;
    1648:	e0 91 d0 01 	lds	r30, 0x01D0
    164c:	f0 91 d1 01 	lds	r31, 0x01D1
    1650:	34 97       	sbiw	r30, 0x04	; 4
    1652:	fc 83       	std	Y+4, r31	; 0x04
    1654:	eb 83       	std	Y+3, r30	; 0x03
    1656:	13 c0       	rjmp	.+38     	; 0x167e <zombiesForward+0x100>
		} else {
			Up = 10;
			Down = screen_y-1;
    1658:	20 91 6c 01 	lds	r18, 0x016C
    165c:	30 91 6d 01 	lds	r19, 0x016D
    1660:	21 50       	subi	r18, 0x01	; 1
    1662:	30 40       	sbci	r19, 0x00	; 0
			Left = 2;
			Right = screen_x-1;
    1664:	80 91 68 01 	lds	r24, 0x0168
    1668:	90 91 69 01 	lds	r25, 0x0169
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	9c 83       	std	Y+4, r25	; 0x04
    1670:	8b 83       	std	Y+3, r24	; 0x03
    1672:	4a e0       	ldi	r20, 0x0A	; 10
    1674:	e4 2e       	mov	r14, r20
    1676:	f1 2c       	mov	r15, r1
    1678:	92 e0       	ldi	r25, 0x02	; 2
    167a:	89 2e       	mov	r8, r25
    167c:	91 2c       	mov	r9, r1
		}
	
		if (zDirection[i] == 0) {
    167e:	f3 01       	movw	r30, r6
    1680:	00 81       	ld	r16, Z
    1682:	11 81       	ldd	r17, Z+1	; 0x01
    1684:	01 15       	cp	r16, r1
    1686:	11 05       	cpc	r17, r1
    1688:	b1 f4       	brne	.+44     	; 0x16b6 <zombiesForward+0x138>
			ZY = 1;
			ZX = 0;
			if ((zombie[i] -> y > Down)) {
    168a:	b9 01       	movw	r22, r18
    168c:	88 27       	eor	r24, r24
    168e:	77 fd       	sbrc	r23, 7
    1690:	80 95       	com	r24
    1692:	98 2f       	mov	r25, r24
    1694:	fa d5       	rcall	.+3060   	; 0x228a <__floatsisf>
    1696:	9b 01       	movw	r18, r22
    1698:	ac 01       	movw	r20, r24
    169a:	f5 01       	movw	r30, r10
    169c:	64 81       	ldd	r22, Z+4	; 0x04
    169e:	75 81       	ldd	r23, Z+5	; 0x05
    16a0:	86 81       	ldd	r24, Z+6	; 0x06
    16a2:	97 81       	ldd	r25, Z+7	; 0x07
    16a4:	a2 d6       	rcall	.+3396   	; 0x23ea <__gesf2>
    16a6:	18 16       	cp	r1, r24
    16a8:	0c f4       	brge	.+2      	; 0x16ac <zombiesForward+0x12e>
    16aa:	4f c0       	rjmp	.+158    	; 0x174a <zombiesForward+0x1cc>
    16ac:	44 24       	eor	r4, r4
    16ae:	55 24       	eor	r5, r5
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	c8 2e       	mov	r12, r24
    16b4:	d1 2c       	mov	r13, r1
			ZY = 0;
			}
		}
		if (zDirection[i] == 1) {
    16b6:	01 30       	cpi	r16, 0x01	; 1
    16b8:	11 05       	cpc	r17, r1
    16ba:	a1 f4       	brne	.+40     	; 0x16e4 <zombiesForward+0x166>
			ZX = 1;
			ZY = 0;
			if ((zombie[i] -> x > Right)) {
    16bc:	2b 81       	ldd	r18, Y+3	; 0x03
    16be:	3c 81       	ldd	r19, Y+4	; 0x04
    16c0:	b9 01       	movw	r22, r18
    16c2:	88 27       	eor	r24, r24
    16c4:	77 fd       	sbrc	r23, 7
    16c6:	80 95       	com	r24
    16c8:	98 2f       	mov	r25, r24
    16ca:	df d5       	rcall	.+3006   	; 0x228a <__floatsisf>
    16cc:	9b 01       	movw	r18, r22
    16ce:	ac 01       	movw	r20, r24
    16d0:	f5 01       	movw	r30, r10
    16d2:	60 81       	ld	r22, Z
    16d4:	71 81       	ldd	r23, Z+1	; 0x01
    16d6:	82 81       	ldd	r24, Z+2	; 0x02
    16d8:	93 81       	ldd	r25, Z+3	; 0x03
    16da:	87 d6       	rcall	.+3342   	; 0x23ea <__gesf2>
    16dc:	18 16       	cp	r1, r24
    16de:	0c f4       	brge	.+2      	; 0x16e2 <zombiesForward+0x164>
    16e0:	74 c0       	rjmp	.+232    	; 0x17ca <zombiesForward+0x24c>
    16e2:	17 c0       	rjmp	.+46     	; 0x1712 <zombiesForward+0x194>
			ZX = 0;
			}
		}
		if (zDirection[i] == 2) {
    16e4:	02 30       	cpi	r16, 0x02	; 2
    16e6:	11 05       	cpc	r17, r1
    16e8:	c9 f4       	brne	.+50     	; 0x171c <zombiesForward+0x19e>
			ZY = -1;
			ZX = 0;
			if ((zombie[i] -> y < Up)) {
    16ea:	b7 01       	movw	r22, r14
    16ec:	88 27       	eor	r24, r24
    16ee:	77 fd       	sbrc	r23, 7
    16f0:	80 95       	com	r24
    16f2:	98 2f       	mov	r25, r24
    16f4:	ca d5       	rcall	.+2964   	; 0x228a <__floatsisf>
    16f6:	9b 01       	movw	r18, r22
    16f8:	ac 01       	movw	r20, r24
    16fa:	f5 01       	movw	r30, r10
    16fc:	64 81       	ldd	r22, Z+4	; 0x04
    16fe:	75 81       	ldd	r23, Z+5	; 0x05
    1700:	86 81       	ldd	r24, Z+6	; 0x06
    1702:	97 81       	ldd	r25, Z+7	; 0x07
    1704:	8b d5       	rcall	.+2838   	; 0x221c <__cmpsf2>
    1706:	87 fd       	sbrc	r24, 7
    1708:	20 c0       	rjmp	.+64     	; 0x174a <zombiesForward+0x1cc>
    170a:	cc 24       	eor	r12, r12
    170c:	ca 94       	dec	r12
    170e:	dc 2c       	mov	r13, r12
    1710:	5e c0       	rjmp	.+188    	; 0x17ce <zombiesForward+0x250>
    1712:	b1 e0       	ldi	r27, 0x01	; 1
    1714:	4b 2e       	mov	r4, r27
    1716:	51 2c       	mov	r5, r1
    1718:	cc 24       	eor	r12, r12
    171a:	dd 24       	eor	r13, r13
			ZY = 0;
			}
		}
		if (zDirection[i] == 3) {
    171c:	03 30       	cpi	r16, 0x03	; 3
    171e:	11 05       	cpc	r17, r1
    1720:	c1 f4       	brne	.+48     	; 0x1752 <zombiesForward+0x1d4>
			ZX = -1;
			ZY = 0;
			if ((zombie[i] -> x < Left)) {
    1722:	b4 01       	movw	r22, r8
    1724:	88 27       	eor	r24, r24
    1726:	77 fd       	sbrc	r23, 7
    1728:	80 95       	com	r24
    172a:	98 2f       	mov	r25, r24
    172c:	ae d5       	rcall	.+2908   	; 0x228a <__floatsisf>
    172e:	9b 01       	movw	r18, r22
    1730:	ac 01       	movw	r20, r24
    1732:	f5 01       	movw	r30, r10
    1734:	60 81       	ld	r22, Z
    1736:	71 81       	ldd	r23, Z+1	; 0x01
    1738:	82 81       	ldd	r24, Z+2	; 0x02
    173a:	93 81       	ldd	r25, Z+3	; 0x03
    173c:	6f d5       	rcall	.+2782   	; 0x221c <__cmpsf2>
    173e:	87 fd       	sbrc	r24, 7
    1740:	04 c0       	rjmp	.+8      	; 0x174a <zombiesForward+0x1cc>
    1742:	44 24       	eor	r4, r4
    1744:	4a 94       	dec	r4
    1746:	54 2c       	mov	r5, r4
    1748:	02 c0       	rjmp	.+4      	; 0x174e <zombiesForward+0x1d0>
    174a:	44 24       	eor	r4, r4
    174c:	55 24       	eor	r5, r5
    174e:	cc 24       	eor	r12, r12
    1750:	dd 24       	eor	r13, r13
			ZX = 0;
			}
		}

		zombie[i] -> x += ZX;
    1752:	b2 01       	movw	r22, r4
    1754:	88 27       	eor	r24, r24
    1756:	77 fd       	sbrc	r23, 7
    1758:	80 95       	com	r24
    175a:	98 2f       	mov	r25, r24
    175c:	96 d5       	rcall	.+2860   	; 0x228a <__floatsisf>
    175e:	9b 01       	movw	r18, r22
    1760:	ac 01       	movw	r20, r24
    1762:	f5 01       	movw	r30, r10
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	93 81       	ldd	r25, Z+3	; 0x03
    176c:	f3 d4       	rcall	.+2534   	; 0x2154 <__addsf3>
    176e:	f5 01       	movw	r30, r10
    1770:	60 83       	st	Z, r22
    1772:	71 83       	std	Z+1, r23	; 0x01
    1774:	82 83       	std	Z+2, r24	; 0x02
    1776:	93 83       	std	Z+3, r25	; 0x03
		zombie[i] -> y += ZY;
    1778:	e9 81       	ldd	r30, Y+1	; 0x01
    177a:	fa 81       	ldd	r31, Y+2	; 0x02
    177c:	01 91       	ld	r16, Z+
    177e:	11 91       	ld	r17, Z+
    1780:	fa 83       	std	Y+2, r31	; 0x02
    1782:	e9 83       	std	Y+1, r30	; 0x01
    1784:	b6 01       	movw	r22, r12
    1786:	88 27       	eor	r24, r24
    1788:	77 fd       	sbrc	r23, 7
    178a:	80 95       	com	r24
    178c:	98 2f       	mov	r25, r24
    178e:	7d d5       	rcall	.+2810   	; 0x228a <__floatsisf>
    1790:	9b 01       	movw	r18, r22
    1792:	ac 01       	movw	r20, r24
    1794:	f8 01       	movw	r30, r16
    1796:	64 81       	ldd	r22, Z+4	; 0x04
    1798:	75 81       	ldd	r23, Z+5	; 0x05
    179a:	86 81       	ldd	r24, Z+6	; 0x06
    179c:	97 81       	ldd	r25, Z+7	; 0x07
    179e:	da d4       	rcall	.+2484   	; 0x2154 <__addsf3>
    17a0:	f8 01       	movw	r30, r16
    17a2:	64 83       	std	Z+4, r22	; 0x04
    17a4:	75 83       	std	Z+5, r23	; 0x05
    17a6:	86 83       	std	Z+6, r24	; 0x06
    17a8:	97 83       	std	Z+7, r25	; 0x07
	int range, ZX = 0;
	int ZY = 0;
	int Up,Left,Down,Right;
	
	//for all zombies
	for (int i = 0; i<numZombies; i++) {
    17aa:	08 94       	sec
    17ac:	21 1c       	adc	r2, r1
    17ae:	31 1c       	adc	r3, r1
    17b0:	22 e0       	ldi	r18, 0x02	; 2
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	62 0e       	add	r6, r18
    17b6:	73 1e       	adc	r7, r19
    17b8:	80 91 88 01 	lds	r24, 0x0188
    17bc:	90 91 89 01 	lds	r25, 0x0189
    17c0:	28 16       	cp	r2, r24
    17c2:	39 06       	cpc	r3, r25
    17c4:	0c f4       	brge	.+2      	; 0x17c8 <zombiesForward+0x24a>
    17c6:	00 cf       	rjmp	.-512    	; 0x15c8 <zombiesForward+0x4a>
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <zombiesForward+0x256>
		zombie[i] -> x += ZX;
		zombie[i] -> y += ZY;

	}
	
}
    17ca:	cc 24       	eor	r12, r12
    17cc:	dd 24       	eor	r13, r13
    17ce:	44 24       	eor	r4, r4
    17d0:	55 24       	eor	r5, r5
    17d2:	bf cf       	rjmp	.-130    	; 0x1752 <zombiesForward+0x1d4>
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	ff 90       	pop	r15
    17e6:	ef 90       	pop	r14
    17e8:	df 90       	pop	r13
    17ea:	cf 90       	pop	r12
    17ec:	bf 90       	pop	r11
    17ee:	af 90       	pop	r10
    17f0:	9f 90       	pop	r9
    17f2:	8f 90       	pop	r8
    17f4:	7f 90       	pop	r7
    17f6:	6f 90       	pop	r6
    17f8:	5f 90       	pop	r5
    17fa:	4f 90       	pop	r4
    17fc:	3f 90       	pop	r3
    17fe:	2f 90       	pop	r2
    1800:	08 95       	ret

00001802 <__vector_23>:
	sei();
}


ISR(TIMER0_OVF_vect)
{
    1802:	1f 92       	push	r1
    1804:	0f 92       	push	r0
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	0f 92       	push	r0
    180a:	11 24       	eor	r1, r1
    180c:	2f 93       	push	r18
    180e:	3f 93       	push	r19
    1810:	4f 93       	push	r20
    1812:	5f 93       	push	r21
    1814:	6f 93       	push	r22
    1816:	7f 93       	push	r23
    1818:	8f 93       	push	r24
    181a:	9f 93       	push	r25
    181c:	af 93       	push	r26
    181e:	bf 93       	push	r27
    1820:	ef 93       	push	r30
    1822:	ff 93       	push	r31
	//Clear the flag by writing a one
	TIFR0 |= (1<<TOV0);
    1824:	a8 9a       	sbi	0x15, 0	; 21
	//Add one to our clockCounter
	clockCounter++;
    1826:	80 91 bc 01 	lds	r24, 0x01BC
    182a:	90 91 bd 01 	lds	r25, 0x01BD
    182e:	01 96       	adiw	r24, 0x01	; 1
    1830:	90 93 bd 01 	sts	0x01BD, r25
    1834:	80 93 bc 01 	sts	0x01BC, r24
	//DEBUG LED
	//PORTB ^= (1<<PINB2);
	//Check to see if our clockCounter is greater/equal to than our MAX_CLOCK_COUNTER_FOR_100MSECOND
	if(clockCounter >= MAX_CLOCK_COUNTER_FOR_100MSECOND && GAMEON)
    1838:	80 91 bc 01 	lds	r24, 0x01BC
    183c:	90 91 bd 01 	lds	r25, 0x01BD
    1840:	05 97       	sbiw	r24, 0x05	; 5
    1842:	0c f4       	brge	.+2      	; 0x1846 <__vector_23+0x44>
    1844:	3b c0       	rjmp	.+118    	; 0x18bc <__vector_23+0xba>
    1846:	80 91 c2 01 	lds	r24, 0x01C2
    184a:	90 91 c3 01 	lds	r25, 0x01C3
    184e:	89 2b       	or	r24, r25
    1850:	a9 f1       	breq	.+106    	; 0x18bc <__vector_23+0xba>
	{
		//PORTB ^= (1<<PINB3);
		//Reset clockCounter
		clockCounter = 0;
    1852:	10 92 bd 01 	sts	0x01BD, r1
    1856:	10 92 bc 01 	sts	0x01BC, r1
		stepsCounter++;
    185a:	80 91 be 01 	lds	r24, 0x01BE
    185e:	90 91 bf 01 	lds	r25, 0x01BF
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	90 93 bf 01 	sts	0x01BF, r25
    1868:	80 93 be 01 	sts	0x01BE, r24
		if (stepsCounter>9) {
    186c:	80 91 be 01 	lds	r24, 0x01BE
    1870:	90 91 bf 01 	lds	r25, 0x01BF
    1874:	0a 97       	sbiw	r24, 0x0a	; 10
    1876:	74 f0       	brlt	.+28     	; 0x1894 <__vector_23+0x92>
		scoreCounter++;
    1878:	80 91 c0 01 	lds	r24, 0x01C0
    187c:	90 91 c1 01 	lds	r25, 0x01C1
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	90 93 c1 01 	sts	0x01C1, r25
    1886:	80 93 c0 01 	sts	0x01C0, r24
		stepsCounter = 0;
    188a:	10 92 bf 01 	sts	0x01BF, r1
    188e:	10 92 be 01 	sts	0x01BE, r1
		zombiesForward();		
    1892:	75 de       	rcall	.-790    	; 0x157e <zombiesForward>
		}
		if (scoreCounter>5) {
    1894:	80 91 c0 01 	lds	r24, 0x01C0
    1898:	90 91 c1 01 	lds	r25, 0x01C1
    189c:	06 97       	sbiw	r24, 0x06	; 6
    189e:	6c f0       	brlt	.+26     	; 0x18ba <__vector_23+0xb8>
		scoreCounter = 0;
    18a0:	10 92 c1 01 	sts	0x01C1, r1
    18a4:	10 92 c0 01 	sts	0x01C0, r1
		Score++;
    18a8:	80 91 c6 01 	lds	r24, 0x01C6
    18ac:	90 91 c7 01 	lds	r25, 0x01C7
    18b0:	01 96       	adiw	r24, 0x01	; 1
    18b2:	90 93 c7 01 	sts	0x01C7, r25
    18b6:	80 93 c6 01 	sts	0x01C6, r24
		}
		heroForward();
    18ba:	f4 d8       	rcall	.-3608   	; 0xaa4 <heroForward>
	}
}
    18bc:	ff 91       	pop	r31
    18be:	ef 91       	pop	r30
    18c0:	bf 91       	pop	r27
    18c2:	af 91       	pop	r26
    18c4:	9f 91       	pop	r25
    18c6:	8f 91       	pop	r24
    18c8:	7f 91       	pop	r23
    18ca:	6f 91       	pop	r22
    18cc:	5f 91       	pop	r21
    18ce:	4f 91       	pop	r20
    18d0:	3f 91       	pop	r19
    18d2:	2f 91       	pop	r18
    18d4:	0f 90       	pop	r0
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	0f 90       	pop	r0
    18da:	1f 90       	pop	r1
    18dc:	18 95       	reti

000018de <setupGame>:
void setupGame() {

	// SW0 and SW1 are connected to pins B0 and B1
	// LED1 and LED2 connected to pins B2 and B3
	// 0 for input 1 for output
	DDRB |= 0b00001100;
    18de:	84 b1       	in	r24, 0x04	; 4
    18e0:	8c 60       	ori	r24, 0x0C	; 12
    18e2:	84 b9       	out	0x04, r24	; 4
    // Teensy LED is connected to D6
    DDRD |= 0b01000000;
    18e4:	56 9a       	sbi	0x0a, 6	; 10
    // turn OFF LED initially
	PORTD |= 0b00000000;
    18e6:	8b b1       	in	r24, 0x0b	; 11
    18e8:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<2)||(1<<3); //not sure why this is here
    18ea:	28 9a       	sbi	0x05, 0	; 5
	
	//initialise clock
	//CLKPR |= 1 << CLKPCE;
	//CLKPR |= 1 << CLKPS0;
	CPU_PRESCALE(CPU_16MHz);
    18ec:	e1 e6       	ldi	r30, 0x61	; 97
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 e8       	ldi	r24, 0x80	; 128
    18f2:	80 83       	st	Z, r24
    18f4:	10 82       	st	Z, r1
	
	
	LCDInitialise(LCD_DEFAULT_CONTRAST);
    18f6:	8f e3       	ldi	r24, 0x3F	; 63
    18f8:	0e 94 b2 14 	call	0x2964	; 0x2964 <LCDInitialise>
	clear();
    18fc:	7a d5       	rcall	.+2804   	; 0x23f2 <clear>
	
	PinChangeInit();
    18fe:	00 d8       	rcall	.-4096   	; 0x900 <PinChangeInit>
	TimerInit();
    1900:	39 d8       	rcall	.-3982   	; 0x974 <TimerInit>
	
	clear();
    1902:	77 d5       	rcall	.+2798   	; 0x23f2 <clear>
	draw_string("ZombieDash v1.0", 4,0); // 15*5 = 75 (84 - 75)/2 = 4
    1904:	88 e1       	ldi	r24, 0x18	; 24
    1906:	91 e0       	ldi	r25, 0x01	; 1
    1908:	64 e0       	ldi	r22, 0x04	; 4
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	e4 d7       	rcall	.+4040   	; 0x28d6 <draw_string>
	draw_string("Lachlan Robinson", 2,9); // 16*5 = 80 (84 - 80)/2 = 2
    190e:	88 e2       	ldi	r24, 0x28	; 40
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	62 e0       	ldi	r22, 0x02	; 2
    1914:	49 e0       	ldi	r20, 0x09	; 9
    1916:	df d7       	rcall	.+4030   	; 0x28d6 <draw_string>
	draw_string("n8845409", 22, 28); // 8*5 = 40 (84 - 40)/2 = 22
    1918:	89 e3       	ldi	r24, 0x39	; 57
    191a:	91 e0       	ldi	r25, 0x01	; 1
    191c:	66 e1       	ldi	r22, 0x16	; 22
    191e:	4c e1       	ldi	r20, 0x1C	; 28
    1920:	da d7       	rcall	.+4020   	; 0x28d6 <draw_string>
	refresh();
    1922:	ee d7       	rcall	.+4060   	; 0x2900 <refresh>
	
	seedWithButtonPress();
    1924:	8d db       	rcall	.-2278   	; 0x1040 <seedWithButtonPress>
	buttonCheck();
    1926:	0e 94 51 04 	call	0x8a2	; 0x8a2 <buttonCheck>
	CountDown();
    192a:	67 db       	rcall	.-2354   	; 0xffa <CountDown>
	Lives = 3;
    192c:	83 e0       	ldi	r24, 0x03	; 3
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	90 93 8d 01 	sts	0x018D, r25
    1934:	80 93 8c 01 	sts	0x018C, r24
	Score = 0;
    1938:	10 92 c7 01 	sts	0x01C7, r1
    193c:	10 92 c6 01 	sts	0x01C6, r1
	activeZombies = numZombies;
    1940:	80 91 88 01 	lds	r24, 0x0188
    1944:	90 91 89 01 	lds	r25, 0x0189
    1948:	90 93 87 01 	sts	0x0187, r25
    194c:	80 93 86 01 	sts	0x0186, r24
	
}
    1950:	08 95       	ret

00001952 <winScreen>:
	int y = randInRange(9,screen_y);
	grenade -> x = x;
	grenade -> y = y;
}

void winScreen(void) {
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29

	int middle_x = screen_x/2;
    195a:	c0 91 68 01 	lds	r28, 0x0168
    195e:	d0 91 69 01 	lds	r29, 0x0169
	int middle_y = screen_y/2;
    1962:	00 91 6c 01 	lds	r16, 0x016C
    1966:	10 91 6d 01 	lds	r17, 0x016D
    196a:	88 e8       	ldi	r24, 0x88	; 136
    196c:	93 e1       	ldi	r25, 0x13	; 19
    196e:	20 e9       	ldi	r18, 0x90	; 144
    1970:	31 e0       	ldi	r19, 0x01	; 1
    1972:	f9 01       	movw	r30, r18
    1974:	31 97       	sbiw	r30, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <winScreen+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1978:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197a:	d9 f7       	brne	.-10     	; 0x1972 <winScreen+0x20>
	_delay_ms(500);
	clear();
    197c:	3a d5       	rcall	.+2676   	; 0x23f2 <clear>
	draw_string("You WIN!", middle_x-17,middle_y);
    197e:	ce 01       	movw	r24, r28
    1980:	62 e0       	ldi	r22, 0x02	; 2
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
    1988:	26 2f       	mov	r18, r22
    198a:	21 51       	subi	r18, 0x11	; 17
    198c:	c8 01       	movw	r24, r16
    198e:	62 e0       	ldi	r22, 0x02	; 2
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
    1996:	46 2f       	mov	r20, r22
    1998:	82 e4       	ldi	r24, 0x42	; 66
    199a:	91 e0       	ldi	r25, 0x01	; 1
    199c:	62 2f       	mov	r22, r18
    199e:	9b d7       	rcall	.+3894   	; 0x28d6 <draw_string>
	refresh();
    19a0:	af d7       	rcall	.+3934   	; 0x2900 <refresh>
    19a2:	88 e9       	ldi	r24, 0x98	; 152
    19a4:	9a e3       	ldi	r25, 0x3A	; 58
    19a6:	20 e9       	ldi	r18, 0x90	; 144
    19a8:	31 e0       	ldi	r19, 0x01	; 1
    19aa:	f9 01       	movw	r30, r18
    19ac:	31 97       	sbiw	r30, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <winScreen+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b2:	d9 f7       	brne	.-10     	; 0x19aa <winScreen+0x58>
	_delay_ms(1500);
	setupGame();
    19b4:	94 df       	rcall	.-216    	; 0x18de <setupGame>
	setupHero();
    19b6:	0e 94 cd 04 	call	0x99a	; 0x99a <setupHero>
	setupZombies();	
    19ba:	37 dc       	rcall	.-1938   	; 0x122a <setupZombies>
	setupPit();
    19bc:	fa db       	rcall	.-2060   	; 0x11b2 <setupPit>
	setupSword();
    19be:	b6 db       	rcall	.-2196   	; 0x112c <setupSword>
	gotSword = 0;
    19c0:	10 92 c9 01 	sts	0x01C9, r1
    19c4:	10 92 c8 01 	sts	0x01C8, r1
	setupGrenade();
    19c8:	6e db       	rcall	.-2340   	; 0x10a6 <setupGrenade>
	gotGrenade = 0;
    19ca:	10 92 cb 01 	sts	0x01CB, r1
    19ce:	10 92 ca 01 	sts	0x01CA, r1

    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	08 95       	ret

000019dc <collision>:
	int middle_y = screen_y/2 + 5;
	my_pointer -> x = middle_x;
	my_pointer -> y = middle_y;
}

void collision(void) {
    19dc:	2f 92       	push	r2
    19de:	3f 92       	push	r3
    19e0:	4f 92       	push	r4
    19e2:	5f 92       	push	r5
    19e4:	6f 92       	push	r6
    19e6:	7f 92       	push	r7
    19e8:	8f 92       	push	r8
    19ea:	9f 92       	push	r9
    19ec:	af 92       	push	r10
    19ee:	bf 92       	push	r11
    19f0:	cf 92       	push	r12
    19f2:	df 92       	push	r13
    19f4:	ef 92       	push	r14
    19f6:	ff 92       	push	r15
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	28 97       	sbiw	r28, 0x08	; 8
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61

	int middle_x = screen_x/2;
    1a10:	80 91 68 01 	lds	r24, 0x0168
    1a14:	90 91 69 01 	lds	r25, 0x0169
    1a18:	62 e0       	ldi	r22, 0x02	; 2
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
    1a20:	56 2e       	mov	r5, r22
	int middle_y = screen_y/2;
    1a22:	80 91 6c 01 	lds	r24, 0x016C
    1a26:	90 91 6d 01 	lds	r25, 0x016D
    1a2a:	62 e0       	ldi	r22, 0x02	; 2
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__divmodhi4>
    1a32:	6a 83       	std	Y+2, r22	; 0x02
	
	byte x = my_pointer -> x;
    1a34:	00 91 da 01 	lds	r16, 0x01DA
    1a38:	10 91 db 01 	lds	r17, 0x01DB
    1a3c:	d8 01       	movw	r26, r16
    1a3e:	6d 91       	ld	r22, X+
    1a40:	7d 91       	ld	r23, X+
    1a42:	8d 91       	ld	r24, X+
    1a44:	9c 91       	ld	r25, X
    1a46:	f3 d3       	rcall	.+2022   	; 0x222e <__fixunssfsi>
    1a48:	46 2e       	mov	r4, r22
	byte y = my_pointer -> y;
    1a4a:	f8 01       	movw	r30, r16
    1a4c:	64 81       	ldd	r22, Z+4	; 0x04
    1a4e:	75 81       	ldd	r23, Z+5	; 0x05
    1a50:	86 81       	ldd	r24, Z+6	; 0x06
    1a52:	97 81       	ldd	r25, Z+7	; 0x07
    1a54:	ec d3       	rcall	.+2008   	; 0x222e <__fixunssfsi>
    1a56:	69 83       	std	Y+1, r22	; 0x01
	
	int sx = sword -> x;
    1a58:	00 91 cc 01 	lds	r16, 0x01CC
    1a5c:	10 91 cd 01 	lds	r17, 0x01CD
    1a60:	d8 01       	movw	r26, r16
    1a62:	6d 91       	ld	r22, X+
    1a64:	7d 91       	ld	r23, X+
    1a66:	8d 91       	ld	r24, X+
    1a68:	9c 91       	ld	r25, X
    1a6a:	dc d3       	rcall	.+1976   	; 0x2224 <__fixsfsi>
    1a6c:	6b 01       	movw	r12, r22
	int sy = sword -> y;
    1a6e:	f8 01       	movw	r30, r16
    1a70:	64 81       	ldd	r22, Z+4	; 0x04
    1a72:	75 81       	ldd	r23, Z+5	; 0x05
    1a74:	86 81       	ldd	r24, Z+6	; 0x06
    1a76:	97 81       	ldd	r25, Z+7	; 0x07
    1a78:	d5 d3       	rcall	.+1962   	; 0x2224 <__fixsfsi>
    1a7a:	5b 01       	movw	r10, r22
    1a7c:	70 ee       	ldi	r23, 0xE0	; 224
    1a7e:	e7 2e       	mov	r14, r23
    1a80:	71 e0       	ldi	r23, 0x01	; 1
    1a82:	f7 2e       	mov	r15, r23
    1a84:	88 24       	eor	r8, r8
    1a86:	99 24       	eor	r9, r9
			zombie[i] -> is_visible = 0;
			Score++;
			activeZombies--;
		}
		
		if (x > zx - width && x < zx + width && y > zy - height && y < zy + height && (zombie[i] -> is_visible == 1) ) {
    1a88:	24 2d       	mov	r18, r4
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	3c 83       	std	Y+4, r19	; 0x04
    1a8e:	2b 83       	std	Y+3, r18	; 0x03
    1a90:	39 81       	ldd	r19, Y+1	; 0x01
    1a92:	23 2e       	mov	r2, r19
    1a94:	33 24       	eor	r3, r3
    1a96:	60 e9       	ldi	r22, 0x90	; 144
    1a98:	66 2e       	mov	r6, r22
    1a9a:	61 e0       	ldi	r22, 0x01	; 1
    1a9c:	76 2e       	mov	r7, r22
				gotGrenade = 0;
			}
			else {
				_delay_ms(300);
				clear();
				draw_string("Game OVER!", middle_x-25,middle_y);
    1a9e:	87 ee       	ldi	r24, 0xE7	; 231
    1aa0:	58 0e       	add	r5, r24
    1aa2:	e8 c0       	rjmp	.+464    	; 0x1c74 <collision+0x298>
	int sx = sword -> x;
	int sy = sword -> y;
	
	// checking zombie collisions
	for (int i = 0; i<numZombies; i++) {
		byte zx = zombie[i] -> x;
    1aa4:	d7 01       	movw	r26, r14
    1aa6:	0d 90       	ld	r0, X+
    1aa8:	bc 91       	ld	r27, X
    1aaa:	a0 2d       	mov	r26, r0
    1aac:	b8 87       	std	Y+8, r27	; 0x08
    1aae:	af 83       	std	Y+7, r26	; 0x07
		byte zy = zombie[i] -> y;
    1ab0:	14 96       	adiw	r26, 0x04	; 4
    1ab2:	6d 91       	ld	r22, X+
    1ab4:	7d 91       	ld	r23, X+
    1ab6:	8d 91       	ld	r24, X+
    1ab8:	9c 91       	ld	r25, X
    1aba:	17 97       	sbiw	r26, 0x07	; 7
    1abc:	b8 d3       	rcall	.+1904   	; 0x222e <__fixunssfsi>
    1abe:	16 2f       	mov	r17, r22
		
		if (sx > zx - width && sx < zx + width && sy > zy - height && sy < zy + height && gotSword && (zombie[i] -> is_visible == 1) ) {
    1ac0:	ef 81       	ldd	r30, Y+7	; 0x07
    1ac2:	f8 85       	ldd	r31, Y+8	; 0x08
    1ac4:	60 81       	ld	r22, Z
    1ac6:	71 81       	ldd	r23, Z+1	; 0x01
    1ac8:	82 81       	ldd	r24, Z+2	; 0x02
    1aca:	93 81       	ldd	r25, Z+3	; 0x03
    1acc:	b0 d3       	rcall	.+1888   	; 0x222e <__fixunssfsi>
    1ace:	70 e0       	ldi	r23, 0x00	; 0
    1ad0:	e0 2f       	mov	r30, r16
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	9b 01       	movw	r18, r22
    1ad6:	2e 1b       	sub	r18, r30
    1ad8:	3f 0b       	sbc	r19, r31
    1ada:	3e 83       	std	Y+6, r19	; 0x06
    1adc:	2d 83       	std	Y+5, r18	; 0x05
    1ade:	2c 15       	cp	r18, r12
    1ae0:	3d 05       	cpc	r19, r13
    1ae2:	c4 f5       	brge	.+112    	; 0x1b54 <collision+0x178>
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	8e 0f       	add	r24, r30
    1ae8:	9f 1f       	adc	r25, r31
    1aea:	c8 16       	cp	r12, r24
    1aec:	d9 06       	cpc	r13, r25
    1aee:	94 f5       	brge	.+100    	; 0x1b54 <collision+0x178>
    1af0:	21 2f       	mov	r18, r17
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	80 91 8b 01 	lds	r24, 0x018B
    1af8:	48 2f       	mov	r20, r24
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	c9 01       	movw	r24, r18
    1afe:	84 1b       	sub	r24, r20
    1b00:	95 0b       	sbc	r25, r21
    1b02:	8a 15       	cp	r24, r10
    1b04:	9b 05       	cpc	r25, r11
    1b06:	34 f5       	brge	.+76     	; 0x1b54 <collision+0x178>
    1b08:	24 0f       	add	r18, r20
    1b0a:	35 1f       	adc	r19, r21
    1b0c:	a2 16       	cp	r10, r18
    1b0e:	b3 06       	cpc	r11, r19
    1b10:	0c f5       	brge	.+66     	; 0x1b54 <collision+0x178>
    1b12:	80 91 c8 01 	lds	r24, 0x01C8
    1b16:	90 91 c9 01 	lds	r25, 0x01C9
    1b1a:	89 2b       	or	r24, r25
    1b1c:	d9 f0       	breq	.+54     	; 0x1b54 <collision+0x178>
    1b1e:	af 81       	ldd	r26, Y+7	; 0x07
    1b20:	b8 85       	ldd	r27, Y+8	; 0x08
    1b22:	1a 96       	adiw	r26, 0x0a	; 10
    1b24:	8c 91       	ld	r24, X
    1b26:	1a 97       	sbiw	r26, 0x0a	; 10
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	a1 f4       	brne	.+40     	; 0x1b54 <collision+0x178>
			zombie[i] -> is_visible = 0;
    1b2c:	1a 96       	adiw	r26, 0x0a	; 10
    1b2e:	1c 92       	st	X, r1
			Score++;
    1b30:	80 91 c6 01 	lds	r24, 0x01C6
    1b34:	90 91 c7 01 	lds	r25, 0x01C7
    1b38:	01 96       	adiw	r24, 0x01	; 1
    1b3a:	90 93 c7 01 	sts	0x01C7, r25
    1b3e:	80 93 c6 01 	sts	0x01C6, r24
			activeZombies--;
    1b42:	80 91 86 01 	lds	r24, 0x0186
    1b46:	90 91 87 01 	lds	r25, 0x0187
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	90 93 87 01 	sts	0x0187, r25
    1b50:	80 93 86 01 	sts	0x0186, r24
		}
		
		if (x > zx - width && x < zx + width && y > zy - height && y < zy + height && (zombie[i] -> is_visible == 1) ) {
    1b54:	2b 81       	ldd	r18, Y+3	; 0x03
    1b56:	3c 81       	ldd	r19, Y+4	; 0x04
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5c:	82 17       	cp	r24, r18
    1b5e:	93 07       	cpc	r25, r19
    1b60:	0c f0       	brlt	.+2      	; 0x1b64 <collision+0x188>
    1b62:	81 c0       	rjmp	.+258    	; 0x1c66 <collision+0x28a>
    1b64:	6e 0f       	add	r22, r30
    1b66:	7f 1f       	adc	r23, r31
    1b68:	26 17       	cp	r18, r22
    1b6a:	37 07       	cpc	r19, r23
    1b6c:	0c f0       	brlt	.+2      	; 0x1b70 <collision+0x194>
    1b6e:	7b c0       	rjmp	.+246    	; 0x1c66 <collision+0x28a>
    1b70:	61 2f       	mov	r22, r17
    1b72:	70 e0       	ldi	r23, 0x00	; 0
    1b74:	80 91 8b 01 	lds	r24, 0x018B
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	82 1b       	sub	r24, r18
    1b80:	93 0b       	sbc	r25, r19
    1b82:	82 15       	cp	r24, r2
    1b84:	93 05       	cpc	r25, r3
    1b86:	0c f0       	brlt	.+2      	; 0x1b8a <collision+0x1ae>
    1b88:	6e c0       	rjmp	.+220    	; 0x1c66 <collision+0x28a>
    1b8a:	62 0f       	add	r22, r18
    1b8c:	73 1f       	adc	r23, r19
    1b8e:	26 16       	cp	r2, r22
    1b90:	37 06       	cpc	r3, r23
    1b92:	0c f0       	brlt	.+2      	; 0x1b96 <collision+0x1ba>
    1b94:	68 c0       	rjmp	.+208    	; 0x1c66 <collision+0x28a>
    1b96:	d7 01       	movw	r26, r14
    1b98:	ed 91       	ld	r30, X+
    1b9a:	fc 91       	ld	r31, X
    1b9c:	82 85       	ldd	r24, Z+10	; 0x0a
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <collision+0x1c8>
    1ba2:	61 c0       	rjmp	.+194    	; 0x1c66 <collision+0x28a>
		GAMEON = 0;
    1ba4:	10 92 c3 01 	sts	0x01C3, r1
    1ba8:	10 92 c2 01 	sts	0x01C2, r1
			if (Lives>0) {
    1bac:	80 91 8c 01 	lds	r24, 0x018C
    1bb0:	90 91 8d 01 	lds	r25, 0x018D
    1bb4:	18 16       	cp	r1, r24
    1bb6:	19 06       	cpc	r1, r25
    1bb8:	64 f5       	brge	.+88     	; 0x1c12 <collision+0x236>
    1bba:	88 eb       	ldi	r24, 0xB8	; 184
    1bbc:	9b e0       	ldi	r25, 0x0B	; 11
    1bbe:	f3 01       	movw	r30, r6
    1bc0:	31 97       	sbiw	r30, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <collision+0x1e4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc6:	d9 f7       	brne	.-10     	; 0x1bbe <collision+0x1e2>
				_delay_ms(300);
				clear();
    1bc8:	14 d4       	rcall	.+2088   	; 0x23f2 <clear>
				draw_string("Touched A Zombie!",0,middle_y);
    1bca:	8b e4       	ldi	r24, 0x4B	; 75
    1bcc:	91 e0       	ldi	r25, 0x01	; 1
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	4a 81       	ldd	r20, Y+2	; 0x02
    1bd2:	81 d6       	rcall	.+3330   	; 0x28d6 <draw_string>
				refresh();
    1bd4:	95 d6       	rcall	.+3370   	; 0x2900 <refresh>
    1bd6:	88 e9       	ldi	r24, 0x98	; 152
    1bd8:	9a e3       	ldi	r25, 0x3A	; 58
    1bda:	f3 01       	movw	r30, r6
    1bdc:	31 97       	sbiw	r30, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <collision+0x200>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be2:	d9 f7       	brne	.-10     	; 0x1bda <collision+0x1fe>
				_delay_ms(1500);
				Lives--;
    1be4:	80 91 8c 01 	lds	r24, 0x018C
    1be8:	90 91 8d 01 	lds	r25, 0x018D
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	90 93 8d 01 	sts	0x018D, r25
    1bf2:	80 93 8c 01 	sts	0x018C, r24
				setupHero();
    1bf6:	0e 94 cd 04 	call	0x99a	; 0x99a <setupHero>
				notOver = 1;
    1bfa:	e1 e0       	ldi	r30, 0x01	; 1
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	f0 93 c5 01 	sts	0x01C5, r31
    1c02:	e0 93 c4 01 	sts	0x01C4, r30
				setupZombies();
    1c06:	11 db       	rcall	.-2526   	; 0x122a <setupZombies>
				notOver = 0;
    1c08:	10 92 c5 01 	sts	0x01C5, r1
    1c0c:	10 92 c4 01 	sts	0x01C4, r1
    1c10:	1a c0       	rjmp	.+52     	; 0x1c46 <collision+0x26a>
				setupSword();
				gotSword = 0;
				setupGrenade();
				gotGrenade = 0;
    1c12:	88 eb       	ldi	r24, 0xB8	; 184
    1c14:	9b e0       	ldi	r25, 0x0B	; 11
    1c16:	f3 01       	movw	r30, r6
    1c18:	31 97       	sbiw	r30, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <collision+0x23c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1e:	d9 f7       	brne	.-10     	; 0x1c16 <collision+0x23a>
			}
			else {
				_delay_ms(300);
				clear();
    1c20:	e8 d3       	rcall	.+2000   	; 0x23f2 <clear>
				draw_string("Game OVER!", middle_x-25,middle_y);
    1c22:	8d e5       	ldi	r24, 0x5D	; 93
    1c24:	91 e0       	ldi	r25, 0x01	; 1
    1c26:	65 2d       	mov	r22, r5
    1c28:	4a 81       	ldd	r20, Y+2	; 0x02
    1c2a:	55 d6       	rcall	.+3242   	; 0x28d6 <draw_string>
				refresh();
    1c2c:	69 d6       	rcall	.+3282   	; 0x2900 <refresh>
    1c2e:	88 e9       	ldi	r24, 0x98	; 152
    1c30:	9a e3       	ldi	r25, 0x3A	; 58
    1c32:	f3 01       	movw	r30, r6
    1c34:	31 97       	sbiw	r30, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <collision+0x258>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c38:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3a:	d9 f7       	brne	.-10     	; 0x1c32 <collision+0x256>
				_delay_ms(1500);
				setupGame();
    1c3c:	50 de       	rcall	.-864    	; 0x18de <setupGame>
				setupHero();
    1c3e:	0e 94 cd 04 	call	0x99a	; 0x99a <setupHero>
				setupZombies();	
    1c42:	f3 da       	rcall	.-2586   	; 0x122a <setupZombies>
				setupPit();
    1c44:	b6 da       	rcall	.-2708   	; 0x11b2 <setupPit>
				setupSword();
    1c46:	72 da       	rcall	.-2844   	; 0x112c <setupSword>
				gotSword = 0;
    1c48:	10 92 c9 01 	sts	0x01C9, r1
    1c4c:	10 92 c8 01 	sts	0x01C8, r1
				setupGrenade();
    1c50:	2a da       	rcall	.-2988   	; 0x10a6 <setupGrenade>
				gotGrenade = 0;
    1c52:	10 92 cb 01 	sts	0x01CB, r1
    1c56:	10 92 ca 01 	sts	0x01CA, r1
			}
		GAMEON = 1;	
    1c5a:	21 e0       	ldi	r18, 0x01	; 1
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	30 93 c3 01 	sts	0x01C3, r19
    1c62:	20 93 c2 01 	sts	0x01C2, r18
	
	int sx = sword -> x;
	int sy = sword -> y;
	
	// checking zombie collisions
	for (int i = 0; i<numZombies; i++) {
    1c66:	08 94       	sec
    1c68:	81 1c       	adc	r8, r1
    1c6a:	91 1c       	adc	r9, r1
    1c6c:	82 e0       	ldi	r24, 0x02	; 2
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	e8 0e       	add	r14, r24
    1c72:	f9 1e       	adc	r15, r25
    1c74:	80 91 88 01 	lds	r24, 0x0188
    1c78:	90 91 89 01 	lds	r25, 0x0189
    1c7c:	00 91 8a 01 	lds	r16, 0x018A
    1c80:	88 16       	cp	r8, r24
    1c82:	99 06       	cpc	r9, r25
    1c84:	0c f4       	brge	.+2      	; 0x1c88 <collision+0x2ac>
    1c86:	0e cf       	rjmp	.-484    	; 0x1aa4 <collision+0xc8>
			}
		GAMEON = 1;	
		}
	} 
	
	if (x > sx - width && x < sx + width && y > sy - height && y < sy + height) {
    1c88:	64 2d       	mov	r22, r4
    1c8a:	70 e0       	ldi	r23, 0x00	; 0
    1c8c:	20 2f       	mov	r18, r16
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	c6 01       	movw	r24, r12
    1c92:	82 1b       	sub	r24, r18
    1c94:	93 0b       	sbc	r25, r19
    1c96:	86 17       	cp	r24, r22
    1c98:	97 07       	cpc	r25, r23
    1c9a:	ec f4       	brge	.+58     	; 0x1cd6 <collision+0x2fa>
    1c9c:	2c 0d       	add	r18, r12
    1c9e:	3d 1d       	adc	r19, r13
    1ca0:	62 17       	cp	r22, r18
    1ca2:	73 07       	cpc	r23, r19
    1ca4:	c4 f4       	brge	.+48     	; 0x1cd6 <collision+0x2fa>
    1ca6:	99 81       	ldd	r25, Y+1	; 0x01
    1ca8:	69 2f       	mov	r22, r25
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	80 91 8b 01 	lds	r24, 0x018B
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	c5 01       	movw	r24, r10
    1cb6:	82 1b       	sub	r24, r18
    1cb8:	93 0b       	sbc	r25, r19
    1cba:	86 17       	cp	r24, r22
    1cbc:	97 07       	cpc	r25, r23
    1cbe:	5c f4       	brge	.+22     	; 0x1cd6 <collision+0x2fa>
    1cc0:	2a 0d       	add	r18, r10
    1cc2:	3b 1d       	adc	r19, r11
    1cc4:	62 17       	cp	r22, r18
    1cc6:	73 07       	cpc	r23, r19
    1cc8:	34 f4       	brge	.+12     	; 0x1cd6 <collision+0x2fa>
	gotSword = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	90 93 c9 01 	sts	0x01C9, r25
    1cd2:	80 93 c8 01 	sts	0x01C8, r24
	}
	
}
    1cd6:	28 96       	adiw	r28, 0x08	; 8
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	ff 90       	pop	r15
    1cec:	ef 90       	pop	r14
    1cee:	df 90       	pop	r13
    1cf0:	cf 90       	pop	r12
    1cf2:	bf 90       	pop	r11
    1cf4:	af 90       	pop	r10
    1cf6:	9f 90       	pop	r9
    1cf8:	8f 90       	pop	r8
    1cfa:	7f 90       	pop	r7
    1cfc:	6f 90       	pop	r6
    1cfe:	5f 90       	pop	r5
    1d00:	4f 90       	pop	r4
    1d02:	3f 90       	pop	r3
    1d04:	2f 90       	pop	r2
    1d06:	08 95       	ret

00001d08 <main>:
#include "my_functions.h"

#define NUM_BLOCKS 10
#define MAX_CLOCK_COUNTER_FOR_100MSECOND 5

int main() {
    1d08:	2f 92       	push	r2
    1d0a:	3f 92       	push	r3
    1d0c:	4f 92       	push	r4
    1d0e:	5f 92       	push	r5
    1d10:	6f 92       	push	r6
    1d12:	7f 92       	push	r7
    1d14:	8f 92       	push	r8
    1d16:	9f 92       	push	r9
    1d18:	af 92       	push	r10
    1d1a:	bf 92       	push	r11
    1d1c:	cf 92       	push	r12
    1d1e:	df 92       	push	r13
    1d20:	ef 92       	push	r14
    1d22:	ff 92       	push	r15
    1d24:	0f 93       	push	r16
    1d26:	1f 93       	push	r17
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	c5 57       	subi	r28, 0x75	; 117
    1d32:	d0 40       	sbci	r29, 0x00	; 0
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
		}
	}
	
	
	return 0;
}
    1d3e:	2d b7       	in	r18, 0x3d	; 61
    1d40:	3e b7       	in	r19, 0x3e	; 62
    1d42:	e5 96       	adiw	r28, 0x35	; 53
    1d44:	3f af       	std	Y+63, r19	; 0x3f
    1d46:	2e af       	std	Y+62, r18	; 0x3e
    1d48:	e5 97       	sbiw	r28, 0x35	; 53
	
	// INSERT_CODE_HERE
	//draw_string("eWWZ begins!",0,0);

	// screen setup etc
	setupGame();
    1d4a:	c9 dd       	rcall	.-1134   	; 0x18de <setupGame>
	clear();
    1d4c:	52 d3       	rcall	.+1700   	; 0x23f2 <clear>
	refresh();
    1d4e:	d8 d5       	rcall	.+2992   	; 0x2900 <refresh>
	// sprites
	byte bitHero [] = {
		BYTE( 10100000),
		BYTE( 11100000),
		BYTE( 10100000),
	};
    1d50:	de 01       	movw	r26, r28
    1d52:	11 96       	adiw	r26, 0x01	; 1
    1d54:	e0 ea       	ldi	r30, 0xA0	; 160
    1d56:	f1 e0       	ldi	r31, 0x01	; 1
    1d58:	83 e0       	ldi	r24, 0x03	; 3
    1d5a:	01 90       	ld	r0, Z+
    1d5c:	0d 92       	st	X+, r0
    1d5e:	81 50       	subi	r24, 0x01	; 1
    1d60:	e1 f7       	brne	.-8      	; 0x1d5a <main+0x52>
		
	byte bitZombie [] = {
		BYTE( 11100000),
		BYTE( 01000000),
		BYTE( 11100000),
	};
    1d62:	de 01       	movw	r26, r28
    1d64:	14 96       	adiw	r26, 0x04	; 4
    1d66:	ed e9       	ldi	r30, 0x9D	; 157
    1d68:	f1 e0       	ldi	r31, 0x01	; 1
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
    1d6c:	01 90       	ld	r0, Z+
    1d6e:	0d 92       	st	X+, r0
    1d70:	81 50       	subi	r24, 0x01	; 1
    1d72:	e1 f7       	brne	.-8      	; 0x1d6c <main+0x64>
	
	byte bitGrenade [] = {
		BYTE( 01000000),
		BYTE( 10100000),
		BYTE( 01000000),	
	};
    1d74:	de 01       	movw	r26, r28
    1d76:	17 96       	adiw	r26, 0x07	; 7
    1d78:	ea e9       	ldi	r30, 0x9A	; 154
    1d7a:	f1 e0       	ldi	r31, 0x01	; 1
    1d7c:	83 e0       	ldi	r24, 0x03	; 3
    1d7e:	01 90       	ld	r0, Z+
    1d80:	0d 92       	st	X+, r0
    1d82:	81 50       	subi	r24, 0x01	; 1
    1d84:	e1 f7       	brne	.-8      	; 0x1d7e <main+0x76>
	
	// screen parameters
	screen_x -= width;
    1d86:	20 91 8a 01 	lds	r18, 0x018A
    1d8a:	80 91 68 01 	lds	r24, 0x0168
    1d8e:	90 91 69 01 	lds	r25, 0x0169
    1d92:	82 1b       	sub	r24, r18
    1d94:	91 09       	sbc	r25, r1
    1d96:	90 93 69 01 	sts	0x0169, r25
    1d9a:	80 93 68 01 	sts	0x0168, r24
	screen_y -= height;
    1d9e:	40 91 8b 01 	lds	r20, 0x018B
    1da2:	20 91 6c 01 	lds	r18, 0x016C
    1da6:	30 91 6d 01 	lds	r19, 0x016D
    1daa:	24 1b       	sub	r18, r20
    1dac:	31 09       	sbc	r19, r1
    1dae:	30 93 6d 01 	sts	0x016D, r19
    1db2:	20 93 6c 01 	sts	0x016C, r18

	int middle_x = screen_x/2;
    1db6:	62 e0       	ldi	r22, 0x02	; 2
    1db8:	70 e0       	ldi	r23, 0x00	; 0
    1dba:	ff d6       	rcall	.+3582   	; 0x2bba <__divmodhi4>
    1dbc:	e6 96       	adiw	r28, 0x36	; 54
    1dbe:	6f af       	std	Y+63, r22	; 0x3f
    1dc0:	e6 97       	sbiw	r28, 0x36	; 54
	int middle_y = screen_y/2 + 5;
    1dc2:	c9 01       	movw	r24, r18
    1dc4:	62 e0       	ldi	r22, 0x02	; 2
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	f8 d6       	rcall	.+3568   	; 0x2bba <__divmodhi4>
    1dca:	4b 01       	movw	r8, r22
    1dcc:	45 e0       	ldi	r20, 0x05	; 5
    1dce:	50 e0       	ldi	r21, 0x00	; 0
    1dd0:	84 0e       	add	r8, r20
    1dd2:	95 1e       	adc	r9, r21
		refresh();
		_delay_ms(500);
	
	}*/
	
	Sprite zombies[numZombies]; 
    1dd4:	20 91 88 01 	lds	r18, 0x0188
    1dd8:	30 91 89 01 	lds	r19, 0x0189
    1ddc:	85 e1       	ldi	r24, 0x15	; 21
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	dc 01       	movw	r26, r24
    1de2:	2a 9f       	mul	r18, r26
    1de4:	c0 01       	movw	r24, r0
    1de6:	2b 9f       	mul	r18, r27
    1de8:	90 0d       	add	r25, r0
    1dea:	3a 9f       	mul	r19, r26
    1dec:	90 0d       	add	r25, r0
    1dee:	11 24       	eor	r1, r1
    1df0:	ed b7       	in	r30, 0x3d	; 61
    1df2:	fe b7       	in	r31, 0x3e	; 62
    1df4:	e8 1b       	sub	r30, r24
    1df6:	f9 0b       	sbc	r31, r25
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	fe bf       	out	0x3e, r31	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	ed bf       	out	0x3d, r30	; 61
    1e02:	6d b6       	in	r6, 0x3d	; 61
    1e04:	7e b6       	in	r7, 0x3e	; 62
    1e06:	08 94       	sec
    1e08:	61 1c       	adc	r6, r1
    1e0a:	71 1c       	adc	r7, r1
    1e0c:	e6 96       	adiw	r28, 0x36	; 54
    1e0e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1e10:	e6 97       	sbiw	r28, 0x36	; 54
    1e12:	e0 ee       	ldi	r30, 0xE0	; 224
    1e14:	ae 2e       	mov	r10, r30
    1e16:	e1 e0       	ldi	r30, 0x01	; 1
    1e18:	be 2e       	mov	r11, r30
    1e1a:	cc 24       	eor	r12, r12
    1e1c:	dd 24       	eor	r13, r13
	for (int i = 0; i<numZombies; i++) {
	zombie[i] = &zombies[i];
    1e1e:	75 e1       	ldi	r23, 0x15	; 21
    1e20:	27 2e       	mov	r2, r23
    1e22:	31 2c       	mov	r3, r1
	init_sprite(zombie[i], middle_x + 3*i, middle_y, width, height, bitZombie);
    1e24:	64 e0       	ldi	r22, 0x04	; 4
    1e26:	46 2e       	mov	r4, r22
    1e28:	51 2c       	mov	r5, r1
    1e2a:	4c 0e       	add	r4, r28
    1e2c:	5d 1e       	adc	r5, r29
    1e2e:	19 c0       	rjmp	.+50     	; 0x1e62 <main+0x15a>
	
	}*/
	
	Sprite zombies[numZombies]; 
	for (int i = 0; i<numZombies; i++) {
	zombie[i] = &zombies[i];
    1e30:	c2 9c       	mul	r12, r2
    1e32:	c0 01       	movw	r24, r0
    1e34:	c3 9c       	mul	r12, r3
    1e36:	90 0d       	add	r25, r0
    1e38:	d2 9c       	mul	r13, r2
    1e3a:	90 0d       	add	r25, r0
    1e3c:	11 24       	eor	r1, r1
    1e3e:	86 0d       	add	r24, r6
    1e40:	97 1d       	adc	r25, r7
    1e42:	d5 01       	movw	r26, r10
    1e44:	8d 93       	st	X+, r24
    1e46:	9d 93       	st	X+, r25
    1e48:	5d 01       	movw	r10, r26
	init_sprite(zombie[i], middle_x + 3*i, middle_y, width, height, bitZombie);
    1e4a:	61 2f       	mov	r22, r17
    1e4c:	48 2d       	mov	r20, r8
    1e4e:	20 91 8a 01 	lds	r18, 0x018A
    1e52:	00 91 8b 01 	lds	r16, 0x018B
    1e56:	72 01       	movw	r14, r4
    1e58:	b8 d5       	rcall	.+2928   	; 0x29ca <init_sprite>
		_delay_ms(500);
	
	}*/
	
	Sprite zombies[numZombies]; 
	for (int i = 0; i<numZombies; i++) {
    1e5a:	08 94       	sec
    1e5c:	c1 1c       	adc	r12, r1
    1e5e:	d1 1c       	adc	r13, r1
    1e60:	1d 5f       	subi	r17, 0xFD	; 253
    1e62:	80 91 88 01 	lds	r24, 0x0188
    1e66:	90 91 89 01 	lds	r25, 0x0189
    1e6a:	c8 16       	cp	r12, r24
    1e6c:	d9 06       	cpc	r13, r25
    1e6e:	04 f3       	brlt	.-64     	; 0x1e30 <main+0x128>
	zombie[i] = &zombies[i];
	init_sprite(zombie[i], middle_x + 3*i, middle_y, width, height, bitZombie);
	}
	
	Sprite swords, swordsStatus;
	sword = &swords;
    1e70:	ce 01       	movw	r24, r28
    1e72:	0a 96       	adiw	r24, 0x0a	; 10
    1e74:	90 93 cd 01 	sts	0x01CD, r25
    1e78:	80 93 cc 01 	sts	0x01CC, r24
	swordStatus = &swordsStatus;
    1e7c:	9e 01       	movw	r18, r28
    1e7e:	21 5e       	subi	r18, 0xE1	; 225
    1e80:	3f 4f       	sbci	r19, 0xFF	; 255
    1e82:	30 93 d5 01 	sts	0x01D5, r19
    1e86:	20 93 d4 01 	sts	0x01D4, r18
	init_sprite(sword, -10,-10, width, height, bitSwordLeft);
    1e8a:	66 ef       	ldi	r22, 0xF6	; 246
    1e8c:	46 ef       	ldi	r20, 0xF6	; 246
    1e8e:	20 91 8a 01 	lds	r18, 0x018A
    1e92:	00 91 8b 01 	lds	r16, 0x018B
    1e96:	5e e8       	ldi	r21, 0x8E	; 142
    1e98:	e5 2e       	mov	r14, r21
    1e9a:	51 e0       	ldi	r21, 0x01	; 1
    1e9c:	f5 2e       	mov	r15, r21
    1e9e:	95 d5       	rcall	.+2858   	; 0x29ca <init_sprite>
	init_sprite(swordStatus, -10,-10, width, height, bitSwordUp);
    1ea0:	80 91 d4 01 	lds	r24, 0x01D4
    1ea4:	90 91 d5 01 	lds	r25, 0x01D5
    1ea8:	66 ef       	ldi	r22, 0xF6	; 246
    1eaa:	46 ef       	ldi	r20, 0xF6	; 246
    1eac:	20 91 8a 01 	lds	r18, 0x018A
    1eb0:	00 91 8b 01 	lds	r16, 0x018B
    1eb4:	34 e9       	ldi	r19, 0x94	; 148
    1eb6:	e3 2e       	mov	r14, r19
    1eb8:	31 e0       	ldi	r19, 0x01	; 1
    1eba:	f3 2e       	mov	r15, r19
    1ebc:	86 d5       	rcall	.+2828   	; 0x29ca <init_sprite>
	
	Sprite grenades, grenadesStatus;
	grenade = &grenades;
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	c4 96       	adiw	r24, 0x34	; 52
    1ec2:	90 93 d3 01 	sts	0x01D3, r25
    1ec6:	80 93 d2 01 	sts	0x01D2, r24
	grenadeStatus = &grenadesStatus;
    1eca:	9e 01       	movw	r18, r28
    1ecc:	27 5b       	subi	r18, 0xB7	; 183
    1ece:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed0:	30 93 dd 01 	sts	0x01DD, r19
    1ed4:	20 93 dc 01 	sts	0x01DC, r18
	init_sprite(grenade, -10,-10, width, height, bitGrenade);
    1ed8:	27 e0       	ldi	r18, 0x07	; 7
    1eda:	c2 2e       	mov	r12, r18
    1edc:	d1 2c       	mov	r13, r1
    1ede:	cc 0e       	add	r12, r28
    1ee0:	dd 1e       	adc	r13, r29
    1ee2:	66 ef       	ldi	r22, 0xF6	; 246
    1ee4:	46 ef       	ldi	r20, 0xF6	; 246
    1ee6:	20 91 8a 01 	lds	r18, 0x018A
    1eea:	00 91 8b 01 	lds	r16, 0x018B
    1eee:	76 01       	movw	r14, r12
    1ef0:	6c d5       	rcall	.+2776   	; 0x29ca <init_sprite>
	init_sprite(grenadeStatus, -10,-10, width, height, bitGrenade);
    1ef2:	80 91 dc 01 	lds	r24, 0x01DC
    1ef6:	90 91 dd 01 	lds	r25, 0x01DD
    1efa:	66 ef       	ldi	r22, 0xF6	; 246
    1efc:	46 ef       	ldi	r20, 0xF6	; 246
    1efe:	20 91 8a 01 	lds	r18, 0x018A
    1f02:	00 91 8b 01 	lds	r16, 0x018B
    1f06:	61 d5       	rcall	.+2754   	; 0x29ca <init_sprite>

	setupGrenade();
    1f08:	ce d8       	rcall	.-3684   	; 0x10a6 <setupGrenade>
	setupSword();
    1f0a:	10 d9       	rcall	.-3552   	; 0x112c <setupSword>
	setupZombies();
    1f0c:	8e d9       	rcall	.-3300   	; 0x122a <setupZombies>
	setupPit();
    1f0e:	51 d9       	rcall	.-3422   	; 0x11b2 <setupPit>
	// Hero sprite parameters
	x = screen_x/2 - width;
	y = screen_y/2 + 9/2;
	
	Sprite my_sprite;
	my_pointer = &my_sprite;
    1f10:	ce 01       	movw	r24, r28
    1f12:	82 5a       	subi	r24, 0xA2	; 162
    1f14:	9f 4f       	sbci	r25, 0xFF	; 255
    1f16:	90 93 db 01 	sts	0x01DB, r25
    1f1a:	80 93 da 01 	sts	0x01DA, r24

	init_sprite(my_pointer, middle_x, middle_y, width, height, bitHero);
    1f1e:	e6 96       	adiw	r28, 0x36	; 54
    1f20:	6f ad       	ldd	r22, Y+63	; 0x3f
    1f22:	e6 97       	sbiw	r28, 0x36	; 54
    1f24:	48 2d       	mov	r20, r8
    1f26:	20 91 8a 01 	lds	r18, 0x018A
    1f2a:	00 91 8b 01 	lds	r16, 0x018B
    1f2e:	7e 01       	movw	r14, r28
    1f30:	08 94       	sec
    1f32:	e1 1c       	adc	r14, r1
    1f34:	f1 1c       	adc	r15, r1
    1f36:	49 d5       	rcall	.+2706   	; 0x29ca <init_sprite>
	draw_sprite(my_pointer);
    1f38:	80 91 da 01 	lds	r24, 0x01DA
    1f3c:	90 91 db 01 	lds	r25, 0x01DB
    1f40:	74 d5       	rcall	.+2792   	; 0x2a2a <draw_sprite>
    1f42:	00 ee       	ldi	r16, 0xE0	; 224
    1f44:	e0 2e       	mov	r14, r16
    1f46:	01 e0       	ldi	r16, 0x01	; 1
    1f48:	f0 2e       	mov	r15, r16
    1f4a:	00 e0       	ldi	r16, 0x00	; 0
    1f4c:	10 e0       	ldi	r17, 0x00	; 0
    1f4e:	07 c0       	rjmp	.+14     	; 0x1f5e <main+0x256>
	for (int i = 0; i<numZombies; i++) {
	draw_sprite(zombie[i]);
    1f50:	f7 01       	movw	r30, r14
    1f52:	81 91       	ld	r24, Z+
    1f54:	91 91       	ld	r25, Z+
    1f56:	7f 01       	movw	r14, r30
    1f58:	68 d5       	rcall	.+2768   	; 0x2a2a <draw_sprite>
	Sprite my_sprite;
	my_pointer = &my_sprite;

	init_sprite(my_pointer, middle_x, middle_y, width, height, bitHero);
	draw_sprite(my_pointer);
	for (int i = 0; i<numZombies; i++) {
    1f5a:	0f 5f       	subi	r16, 0xFF	; 255
    1f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5e:	80 91 88 01 	lds	r24, 0x0188
    1f62:	90 91 89 01 	lds	r25, 0x0189
    1f66:	08 17       	cp	r16, r24
    1f68:	19 07       	cpc	r17, r25
    1f6a:	94 f3       	brlt	.-28     	; 0x1f50 <main+0x248>
	draw_sprite(zombie[i]);
	}
	
	refresh();
    1f6c:	c9 d4       	rcall	.+2450   	; 0x2900 <refresh>
    1f6e:	88 ee       	ldi	r24, 0xE8	; 232
    1f70:	93 e0       	ldi	r25, 0x03	; 3
    1f72:	20 e9       	ldi	r18, 0x90	; 144
    1f74:	31 e0       	ldi	r19, 0x01	; 1
    1f76:	f9 01       	movw	r30, r18
    1f78:	31 97       	sbiw	r30, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <main+0x270>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7e:	d9 f7       	brne	.-10     	; 0x1f76 <main+0x26e>
	//int add = 1;
	
	// initialise vars
	int notRIGHT = 1;
	int notLEFT = 1;
	GAMEON = 1;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	90 93 c3 01 	sts	0x01C3, r25
    1f88:	80 93 c2 01 	sts	0x01C2, r24
    1f8c:	11 e0       	ldi	r17, 0x01	; 1
    1f8e:	c1 2e       	mov	r12, r17
    1f90:	d1 2c       	mov	r13, r1
    1f92:	b1 e0       	ldi	r27, 0x01	; 1
    1f94:	ab 2e       	mov	r10, r27
    1f96:	b1 2c       	mov	r11, r1
		swordStatus -> x = 45;
		swordStatus -> y = 0;
		draw_sprite(swordStatus);
		}
		else {
		swordStatus -> x = -10;
    1f98:	0f 2e       	mov	r0, r31
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	6f 2e       	mov	r6, r31
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	7f 2e       	mov	r7, r31
    1fa2:	f0 e2       	ldi	r31, 0x20	; 32
    1fa4:	8f 2e       	mov	r8, r31
    1fa6:	f1 ec       	ldi	r31, 0xC1	; 193
    1fa8:	9f 2e       	mov	r9, r31
    1faa:	f0 2d       	mov	r31, r0
		draw_sprite(my_pointer);
		draw_sprite(sword);
		draw_sprite(grenade);
		if (gotSword) {
		swordStatus -> x = 45;
		swordStatus -> y = 0;
    1fac:	0f 2e       	mov	r0, r31
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	2f 2e       	mov	r2, r31
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	3f 2e       	mov	r3, r31
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	4f 2e       	mov	r4, r31
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	5f 2e       	mov	r5, r31
    1fbe:	f0 2d       	mov	r31, r0
    1fc0:	9c c0       	rjmp	.+312    	; 0x20fa <main+0x3f2>
		my_pointer -> y += add;
		my_pointer2 -> y -= add;
		if (my_pointer -> y < 1) add = -add;
		if (my_pointer -> y > screen_y) add = -add;
	*/
		clear();
    1fc2:	17 d2       	rcall	.+1070   	; 0x23f2 <clear>

		if (RIGHT == 0) {
    1fc4:	80 91 b2 01 	lds	r24, 0x01B2
    1fc8:	90 91 b3 01 	lds	r25, 0x01B3
    1fcc:	89 2b       	or	r24, r25
    1fce:	19 f4       	brne	.+6      	; 0x1fd6 <main+0x2ce>
    1fd0:	a1 e0       	ldi	r26, 0x01	; 1
    1fd2:	ca 2e       	mov	r12, r26
    1fd4:	d1 2c       	mov	r13, r1
			notRIGHT = 1;
		}
		if (LEFT == 0) {
    1fd6:	80 91 b0 01 	lds	r24, 0x01B0
    1fda:	90 91 b1 01 	lds	r25, 0x01B1
    1fde:	89 2b       	or	r24, r25
    1fe0:	19 f4       	brne	.+6      	; 0x1fe8 <main+0x2e0>
    1fe2:	f1 e0       	ldi	r31, 0x01	; 1
    1fe4:	af 2e       	mov	r10, r31
    1fe6:	b1 2c       	mov	r11, r1
			notLEFT = 1;
		}
		
		if (RIGHT && notRIGHT) {
    1fe8:	80 91 b2 01 	lds	r24, 0x01B2
    1fec:	90 91 b3 01 	lds	r25, 0x01B3
    1ff0:	89 2b       	or	r24, r25
    1ff2:	d1 f0       	breq	.+52     	; 0x2028 <main+0x320>
    1ff4:	c1 14       	cp	r12, r1
    1ff6:	d1 04       	cpc	r13, r1
    1ff8:	b9 f0       	breq	.+46     	; 0x2028 <main+0x320>
			notRIGHT = 0;
			Direction = (Direction-1);
    1ffa:	80 91 74 01 	lds	r24, 0x0174
    1ffe:	90 91 75 01 	lds	r25, 0x0175
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	90 93 75 01 	sts	0x0175, r25
    2008:	80 93 74 01 	sts	0x0174, r24
			if (Direction < 0) {
    200c:	80 91 74 01 	lds	r24, 0x0174
    2010:	90 91 75 01 	lds	r25, 0x0175
    2014:	97 ff       	sbrs	r25, 7
    2016:	06 c0       	rjmp	.+12     	; 0x2024 <main+0x31c>
			Direction = 3;
    2018:	23 e0       	ldi	r18, 0x03	; 3
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	30 93 75 01 	sts	0x0175, r19
    2020:	20 93 74 01 	sts	0x0174, r18
    2024:	cc 24       	eor	r12, r12
    2026:	dd 24       	eor	r13, r13
			//bitmapb = bitmaptemp;
			//my_pointer -> bitmap = bitmapa;
			//my_pointer2 -> bitmap = bitmapb;
			
		}
		if (LEFT & notLEFT) {
    2028:	80 91 b0 01 	lds	r24, 0x01B0
    202c:	90 91 b1 01 	lds	r25, 0x01B1
    2030:	8a 21       	and	r24, r10
    2032:	9b 21       	and	r25, r11
    2034:	89 2b       	or	r24, r25
    2036:	71 f0       	breq	.+28     	; 0x2054 <main+0x34c>
			notLEFT = 0;
			Direction = (Direction+1)%4;
    2038:	80 91 74 01 	lds	r24, 0x0174
    203c:	90 91 75 01 	lds	r25, 0x0175
    2040:	01 96       	adiw	r24, 0x01	; 1
    2042:	64 e0       	ldi	r22, 0x04	; 4
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	b9 d5       	rcall	.+2930   	; 0x2bba <__divmodhi4>
    2048:	90 93 75 01 	sts	0x0175, r25
    204c:	80 93 74 01 	sts	0x0174, r24
    2050:	aa 24       	eor	r10, r10
    2052:	bb 24       	eor	r11, r11
			
		}
		
		draw_sprite(my_pointer);
    2054:	80 91 da 01 	lds	r24, 0x01DA
    2058:	90 91 db 01 	lds	r25, 0x01DB
    205c:	e6 d4       	rcall	.+2508   	; 0x2a2a <draw_sprite>
		draw_sprite(sword);
    205e:	80 91 cc 01 	lds	r24, 0x01CC
    2062:	90 91 cd 01 	lds	r25, 0x01CD
    2066:	e1 d4       	rcall	.+2498   	; 0x2a2a <draw_sprite>
		draw_sprite(grenade);
    2068:	80 91 d2 01 	lds	r24, 0x01D2
    206c:	90 91 d3 01 	lds	r25, 0x01D3
    2070:	dc d4       	rcall	.+2488   	; 0x2a2a <draw_sprite>
		if (gotSword) {
    2072:	80 91 c8 01 	lds	r24, 0x01C8
    2076:	90 91 c9 01 	lds	r25, 0x01C9
    207a:	e0 91 d4 01 	lds	r30, 0x01D4
    207e:	f0 91 d5 01 	lds	r31, 0x01D5
    2082:	89 2b       	or	r24, r25
    2084:	69 f0       	breq	.+26     	; 0x20a0 <main+0x398>
		swordStatus -> x = 45;
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	a4 e3       	ldi	r26, 0x34	; 52
    208c:	b2 e4       	ldi	r27, 0x42	; 66
    208e:	80 83       	st	Z, r24
    2090:	91 83       	std	Z+1, r25	; 0x01
    2092:	a2 83       	std	Z+2, r26	; 0x02
    2094:	b3 83       	std	Z+3, r27	; 0x03
		swordStatus -> y = 0;
    2096:	24 82       	std	Z+4, r2	; 0x04
    2098:	35 82       	std	Z+5, r3	; 0x05
    209a:	46 82       	std	Z+6, r4	; 0x06
    209c:	57 82       	std	Z+7, r5	; 0x07
    209e:	08 c0       	rjmp	.+16     	; 0x20b0 <main+0x3a8>
		draw_sprite(swordStatus);
		}
		else {
		swordStatus -> x = -10;
    20a0:	60 82       	st	Z, r6
    20a2:	71 82       	std	Z+1, r7	; 0x01
    20a4:	82 82       	std	Z+2, r8	; 0x02
    20a6:	93 82       	std	Z+3, r9	; 0x03
		swordStatus -> y = -10;
    20a8:	64 82       	std	Z+4, r6	; 0x04
    20aa:	75 82       	std	Z+5, r7	; 0x05
    20ac:	86 82       	std	Z+6, r8	; 0x06
    20ae:	97 82       	std	Z+7, r9	; 0x07
		draw_sprite(swordStatus);
    20b0:	cf 01       	movw	r24, r30
    20b2:	bb d4       	rcall	.+2422   	; 0x2a2a <draw_sprite>
    20b4:	e0 ee       	ldi	r30, 0xE0	; 224
    20b6:	ee 2e       	mov	r14, r30
    20b8:	e1 e0       	ldi	r30, 0x01	; 1
    20ba:	fe 2e       	mov	r15, r30
    20bc:	00 e0       	ldi	r16, 0x00	; 0
    20be:	10 e0       	ldi	r17, 0x00	; 0
    20c0:	07 c0       	rjmp	.+14     	; 0x20d0 <main+0x3c8>
		}
		for (int i = 0; i<numZombies; i++) {
		draw_sprite(zombie[i]);
    20c2:	d7 01       	movw	r26, r14
    20c4:	8d 91       	ld	r24, X+
    20c6:	9d 91       	ld	r25, X+
    20c8:	7d 01       	movw	r14, r26
    20ca:	af d4       	rcall	.+2398   	; 0x2a2a <draw_sprite>
		else {
		swordStatus -> x = -10;
		swordStatus -> y = -10;
		draw_sprite(swordStatus);
		}
		for (int i = 0; i<numZombies; i++) {
    20cc:	0f 5f       	subi	r16, 0xFF	; 255
    20ce:	1f 4f       	sbci	r17, 0xFF	; 255
    20d0:	80 91 88 01 	lds	r24, 0x0188
    20d4:	90 91 89 01 	lds	r25, 0x0189
    20d8:	08 17       	cp	r16, r24
    20da:	19 07       	cpc	r17, r25
    20dc:	94 f3       	brlt	.-28     	; 0x20c2 <main+0x3ba>
		draw_sprite(zombie[i]);
		}
		drawPit();
    20de:	0e 94 77 07 	call	0xeee	; 0xeee <drawPit>
		drawScreen();
    20e2:	0e 94 9b 07 	call	0xf36	; 0xf36 <drawScreen>
		refresh();
    20e6:	0c d4       	rcall	.+2072   	; 0x2900 <refresh>
		collision();
    20e8:	79 dc       	rcall	.-1806   	; 0x19dc <collision>
		if (activeZombies < 1) {
    20ea:	80 91 86 01 	lds	r24, 0x0186
    20ee:	90 91 87 01 	lds	r25, 0x0187
    20f2:	18 16       	cp	r1, r24
    20f4:	19 06       	cpc	r1, r25
    20f6:	0c f0       	brlt	.+2      	; 0x20fa <main+0x3f2>
		winScreen();
    20f8:	2c dc       	rcall	.-1960   	; 0x1952 <winScreen>
	
	// initialise vars
	int notRIGHT = 1;
	int notLEFT = 1;
	GAMEON = 1;
	while(GAMEON){
    20fa:	80 91 c2 01 	lds	r24, 0x01C2
    20fe:	90 91 c3 01 	lds	r25, 0x01C3
    2102:	89 2b       	or	r24, r25
    2104:	09 f0       	breq	.+2      	; 0x2108 <main+0x400>
    2106:	5d cf       	rjmp	.-326    	; 0x1fc2 <main+0x2ba>
		}
	}
	
	
	return 0;
}
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	e5 96       	adiw	r28, 0x35	; 53
    210e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2110:	ff ad       	ldd	r31, Y+63	; 0x3f
    2112:	e5 97       	sbiw	r28, 0x35	; 53
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	fe bf       	out	0x3e, r31	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	ed bf       	out	0x3d, r30	; 61
    211e:	cb 58       	subi	r28, 0x8B	; 139
    2120:	df 4f       	sbci	r29, 0xFF	; 255
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	1f 91       	pop	r17
    2132:	0f 91       	pop	r16
    2134:	ff 90       	pop	r15
    2136:	ef 90       	pop	r14
    2138:	df 90       	pop	r13
    213a:	cf 90       	pop	r12
    213c:	bf 90       	pop	r11
    213e:	af 90       	pop	r10
    2140:	9f 90       	pop	r9
    2142:	8f 90       	pop	r8
    2144:	7f 90       	pop	r7
    2146:	6f 90       	pop	r6
    2148:	5f 90       	pop	r5
    214a:	4f 90       	pop	r4
    214c:	3f 90       	pop	r3
    214e:	2f 90       	pop	r2
    2150:	08 95       	ret

00002152 <__subsf3>:
    2152:	50 58       	subi	r21, 0x80	; 128

00002154 <__addsf3>:
    2154:	bb 27       	eor	r27, r27
    2156:	aa 27       	eor	r26, r26
    2158:	0e d0       	rcall	.+28     	; 0x2176 <__addsf3x>
    215a:	0d c1       	rjmp	.+538    	; 0x2376 <__fp_round>
    215c:	fe d0       	rcall	.+508    	; 0x235a <__fp_pscA>
    215e:	30 f0       	brcs	.+12     	; 0x216c <__addsf3+0x18>
    2160:	03 d1       	rcall	.+518    	; 0x2368 <__fp_pscB>
    2162:	20 f0       	brcs	.+8      	; 0x216c <__addsf3+0x18>
    2164:	31 f4       	brne	.+12     	; 0x2172 <__addsf3+0x1e>
    2166:	9f 3f       	cpi	r25, 0xFF	; 255
    2168:	11 f4       	brne	.+4      	; 0x216e <__addsf3+0x1a>
    216a:	1e f4       	brtc	.+6      	; 0x2172 <__addsf3+0x1e>
    216c:	f3 c0       	rjmp	.+486    	; 0x2354 <__fp_nan>
    216e:	0e f4       	brtc	.+2      	; 0x2172 <__addsf3+0x1e>
    2170:	e0 95       	com	r30
    2172:	e7 fb       	bst	r30, 7
    2174:	e9 c0       	rjmp	.+466    	; 0x2348 <__fp_inf>

00002176 <__addsf3x>:
    2176:	e9 2f       	mov	r30, r25
    2178:	0f d1       	rcall	.+542    	; 0x2398 <__fp_split3>
    217a:	80 f3       	brcs	.-32     	; 0x215c <__addsf3+0x8>
    217c:	ba 17       	cp	r27, r26
    217e:	62 07       	cpc	r22, r18
    2180:	73 07       	cpc	r23, r19
    2182:	84 07       	cpc	r24, r20
    2184:	95 07       	cpc	r25, r21
    2186:	18 f0       	brcs	.+6      	; 0x218e <__addsf3x+0x18>
    2188:	71 f4       	brne	.+28     	; 0x21a6 <__addsf3x+0x30>
    218a:	9e f5       	brtc	.+102    	; 0x21f2 <__addsf3x+0x7c>
    218c:	27 c1       	rjmp	.+590    	; 0x23dc <__fp_zero>
    218e:	0e f4       	brtc	.+2      	; 0x2192 <__addsf3x+0x1c>
    2190:	e0 95       	com	r30
    2192:	0b 2e       	mov	r0, r27
    2194:	ba 2f       	mov	r27, r26
    2196:	a0 2d       	mov	r26, r0
    2198:	0b 01       	movw	r0, r22
    219a:	b9 01       	movw	r22, r18
    219c:	90 01       	movw	r18, r0
    219e:	0c 01       	movw	r0, r24
    21a0:	ca 01       	movw	r24, r20
    21a2:	a0 01       	movw	r20, r0
    21a4:	11 24       	eor	r1, r1
    21a6:	ff 27       	eor	r31, r31
    21a8:	59 1b       	sub	r21, r25
    21aa:	99 f0       	breq	.+38     	; 0x21d2 <__addsf3x+0x5c>
    21ac:	59 3f       	cpi	r21, 0xF9	; 249
    21ae:	50 f4       	brcc	.+20     	; 0x21c4 <__addsf3x+0x4e>
    21b0:	50 3e       	cpi	r21, 0xE0	; 224
    21b2:	68 f1       	brcs	.+90     	; 0x220e <__addsf3x+0x98>
    21b4:	1a 16       	cp	r1, r26
    21b6:	f0 40       	sbci	r31, 0x00	; 0
    21b8:	a2 2f       	mov	r26, r18
    21ba:	23 2f       	mov	r18, r19
    21bc:	34 2f       	mov	r19, r20
    21be:	44 27       	eor	r20, r20
    21c0:	58 5f       	subi	r21, 0xF8	; 248
    21c2:	f3 cf       	rjmp	.-26     	; 0x21aa <__addsf3x+0x34>
    21c4:	46 95       	lsr	r20
    21c6:	37 95       	ror	r19
    21c8:	27 95       	ror	r18
    21ca:	a7 95       	ror	r26
    21cc:	f0 40       	sbci	r31, 0x00	; 0
    21ce:	53 95       	inc	r21
    21d0:	c9 f7       	brne	.-14     	; 0x21c4 <__addsf3x+0x4e>
    21d2:	7e f4       	brtc	.+30     	; 0x21f2 <__addsf3x+0x7c>
    21d4:	1f 16       	cp	r1, r31
    21d6:	ba 0b       	sbc	r27, r26
    21d8:	62 0b       	sbc	r22, r18
    21da:	73 0b       	sbc	r23, r19
    21dc:	84 0b       	sbc	r24, r20
    21de:	ba f0       	brmi	.+46     	; 0x220e <__addsf3x+0x98>
    21e0:	91 50       	subi	r25, 0x01	; 1
    21e2:	a1 f0       	breq	.+40     	; 0x220c <__addsf3x+0x96>
    21e4:	ff 0f       	add	r31, r31
    21e6:	bb 1f       	adc	r27, r27
    21e8:	66 1f       	adc	r22, r22
    21ea:	77 1f       	adc	r23, r23
    21ec:	88 1f       	adc	r24, r24
    21ee:	c2 f7       	brpl	.-16     	; 0x21e0 <__addsf3x+0x6a>
    21f0:	0e c0       	rjmp	.+28     	; 0x220e <__addsf3x+0x98>
    21f2:	ba 0f       	add	r27, r26
    21f4:	62 1f       	adc	r22, r18
    21f6:	73 1f       	adc	r23, r19
    21f8:	84 1f       	adc	r24, r20
    21fa:	48 f4       	brcc	.+18     	; 0x220e <__addsf3x+0x98>
    21fc:	87 95       	ror	r24
    21fe:	77 95       	ror	r23
    2200:	67 95       	ror	r22
    2202:	b7 95       	ror	r27
    2204:	f7 95       	ror	r31
    2206:	9e 3f       	cpi	r25, 0xFE	; 254
    2208:	08 f0       	brcs	.+2      	; 0x220c <__addsf3x+0x96>
    220a:	b3 cf       	rjmp	.-154    	; 0x2172 <__addsf3+0x1e>
    220c:	93 95       	inc	r25
    220e:	88 0f       	add	r24, r24
    2210:	08 f0       	brcs	.+2      	; 0x2214 <__addsf3x+0x9e>
    2212:	99 27       	eor	r25, r25
    2214:	ee 0f       	add	r30, r30
    2216:	97 95       	ror	r25
    2218:	87 95       	ror	r24
    221a:	08 95       	ret

0000221c <__cmpsf2>:
    221c:	71 d0       	rcall	.+226    	; 0x2300 <__fp_cmp>
    221e:	08 f4       	brcc	.+2      	; 0x2222 <__cmpsf2+0x6>
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	08 95       	ret

00002224 <__fixsfsi>:
    2224:	04 d0       	rcall	.+8      	; 0x222e <__fixunssfsi>
    2226:	68 94       	set
    2228:	b1 11       	cpse	r27, r1
    222a:	d9 c0       	rjmp	.+434    	; 0x23de <__fp_szero>
    222c:	08 95       	ret

0000222e <__fixunssfsi>:
    222e:	bc d0       	rcall	.+376    	; 0x23a8 <__fp_splitA>
    2230:	88 f0       	brcs	.+34     	; 0x2254 <__fixunssfsi+0x26>
    2232:	9f 57       	subi	r25, 0x7F	; 127
    2234:	90 f0       	brcs	.+36     	; 0x225a <__fixunssfsi+0x2c>
    2236:	b9 2f       	mov	r27, r25
    2238:	99 27       	eor	r25, r25
    223a:	b7 51       	subi	r27, 0x17	; 23
    223c:	a0 f0       	brcs	.+40     	; 0x2266 <__fixunssfsi+0x38>
    223e:	d1 f0       	breq	.+52     	; 0x2274 <__fixunssfsi+0x46>
    2240:	66 0f       	add	r22, r22
    2242:	77 1f       	adc	r23, r23
    2244:	88 1f       	adc	r24, r24
    2246:	99 1f       	adc	r25, r25
    2248:	1a f0       	brmi	.+6      	; 0x2250 <__fixunssfsi+0x22>
    224a:	ba 95       	dec	r27
    224c:	c9 f7       	brne	.-14     	; 0x2240 <__fixunssfsi+0x12>
    224e:	12 c0       	rjmp	.+36     	; 0x2274 <__fixunssfsi+0x46>
    2250:	b1 30       	cpi	r27, 0x01	; 1
    2252:	81 f0       	breq	.+32     	; 0x2274 <__fixunssfsi+0x46>
    2254:	c3 d0       	rcall	.+390    	; 0x23dc <__fp_zero>
    2256:	b1 e0       	ldi	r27, 0x01	; 1
    2258:	08 95       	ret
    225a:	c0 c0       	rjmp	.+384    	; 0x23dc <__fp_zero>
    225c:	67 2f       	mov	r22, r23
    225e:	78 2f       	mov	r23, r24
    2260:	88 27       	eor	r24, r24
    2262:	b8 5f       	subi	r27, 0xF8	; 248
    2264:	39 f0       	breq	.+14     	; 0x2274 <__fixunssfsi+0x46>
    2266:	b9 3f       	cpi	r27, 0xF9	; 249
    2268:	cc f3       	brlt	.-14     	; 0x225c <__fixunssfsi+0x2e>
    226a:	86 95       	lsr	r24
    226c:	77 95       	ror	r23
    226e:	67 95       	ror	r22
    2270:	b3 95       	inc	r27
    2272:	d9 f7       	brne	.-10     	; 0x226a <__fixunssfsi+0x3c>
    2274:	3e f4       	brtc	.+14     	; 0x2284 <__fixunssfsi+0x56>
    2276:	90 95       	com	r25
    2278:	80 95       	com	r24
    227a:	70 95       	com	r23
    227c:	61 95       	neg	r22
    227e:	7f 4f       	sbci	r23, 0xFF	; 255
    2280:	8f 4f       	sbci	r24, 0xFF	; 255
    2282:	9f 4f       	sbci	r25, 0xFF	; 255
    2284:	08 95       	ret

00002286 <__floatunsisf>:
    2286:	e8 94       	clt
    2288:	09 c0       	rjmp	.+18     	; 0x229c <__floatsisf+0x12>

0000228a <__floatsisf>:
    228a:	97 fb       	bst	r25, 7
    228c:	3e f4       	brtc	.+14     	; 0x229c <__floatsisf+0x12>
    228e:	90 95       	com	r25
    2290:	80 95       	com	r24
    2292:	70 95       	com	r23
    2294:	61 95       	neg	r22
    2296:	7f 4f       	sbci	r23, 0xFF	; 255
    2298:	8f 4f       	sbci	r24, 0xFF	; 255
    229a:	9f 4f       	sbci	r25, 0xFF	; 255
    229c:	99 23       	and	r25, r25
    229e:	a9 f0       	breq	.+42     	; 0x22ca <__floatsisf+0x40>
    22a0:	f9 2f       	mov	r31, r25
    22a2:	96 e9       	ldi	r25, 0x96	; 150
    22a4:	bb 27       	eor	r27, r27
    22a6:	93 95       	inc	r25
    22a8:	f6 95       	lsr	r31
    22aa:	87 95       	ror	r24
    22ac:	77 95       	ror	r23
    22ae:	67 95       	ror	r22
    22b0:	b7 95       	ror	r27
    22b2:	f1 11       	cpse	r31, r1
    22b4:	f8 cf       	rjmp	.-16     	; 0x22a6 <__floatsisf+0x1c>
    22b6:	fa f4       	brpl	.+62     	; 0x22f6 <__floatsisf+0x6c>
    22b8:	bb 0f       	add	r27, r27
    22ba:	11 f4       	brne	.+4      	; 0x22c0 <__floatsisf+0x36>
    22bc:	60 ff       	sbrs	r22, 0
    22be:	1b c0       	rjmp	.+54     	; 0x22f6 <__floatsisf+0x6c>
    22c0:	6f 5f       	subi	r22, 0xFF	; 255
    22c2:	7f 4f       	sbci	r23, 0xFF	; 255
    22c4:	8f 4f       	sbci	r24, 0xFF	; 255
    22c6:	9f 4f       	sbci	r25, 0xFF	; 255
    22c8:	16 c0       	rjmp	.+44     	; 0x22f6 <__floatsisf+0x6c>
    22ca:	88 23       	and	r24, r24
    22cc:	11 f0       	breq	.+4      	; 0x22d2 <__floatsisf+0x48>
    22ce:	96 e9       	ldi	r25, 0x96	; 150
    22d0:	11 c0       	rjmp	.+34     	; 0x22f4 <__floatsisf+0x6a>
    22d2:	77 23       	and	r23, r23
    22d4:	21 f0       	breq	.+8      	; 0x22de <__floatsisf+0x54>
    22d6:	9e e8       	ldi	r25, 0x8E	; 142
    22d8:	87 2f       	mov	r24, r23
    22da:	76 2f       	mov	r23, r22
    22dc:	05 c0       	rjmp	.+10     	; 0x22e8 <__floatsisf+0x5e>
    22de:	66 23       	and	r22, r22
    22e0:	71 f0       	breq	.+28     	; 0x22fe <__floatsisf+0x74>
    22e2:	96 e8       	ldi	r25, 0x86	; 134
    22e4:	86 2f       	mov	r24, r22
    22e6:	70 e0       	ldi	r23, 0x00	; 0
    22e8:	60 e0       	ldi	r22, 0x00	; 0
    22ea:	2a f0       	brmi	.+10     	; 0x22f6 <__floatsisf+0x6c>
    22ec:	9a 95       	dec	r25
    22ee:	66 0f       	add	r22, r22
    22f0:	77 1f       	adc	r23, r23
    22f2:	88 1f       	adc	r24, r24
    22f4:	da f7       	brpl	.-10     	; 0x22ec <__floatsisf+0x62>
    22f6:	88 0f       	add	r24, r24
    22f8:	96 95       	lsr	r25
    22fa:	87 95       	ror	r24
    22fc:	97 f9       	bld	r25, 7
    22fe:	08 95       	ret

00002300 <__fp_cmp>:
    2300:	99 0f       	add	r25, r25
    2302:	00 08       	sbc	r0, r0
    2304:	55 0f       	add	r21, r21
    2306:	aa 0b       	sbc	r26, r26
    2308:	e0 e8       	ldi	r30, 0x80	; 128
    230a:	fe ef       	ldi	r31, 0xFE	; 254
    230c:	16 16       	cp	r1, r22
    230e:	17 06       	cpc	r1, r23
    2310:	e8 07       	cpc	r30, r24
    2312:	f9 07       	cpc	r31, r25
    2314:	c0 f0       	brcs	.+48     	; 0x2346 <__fp_cmp+0x46>
    2316:	12 16       	cp	r1, r18
    2318:	13 06       	cpc	r1, r19
    231a:	e4 07       	cpc	r30, r20
    231c:	f5 07       	cpc	r31, r21
    231e:	98 f0       	brcs	.+38     	; 0x2346 <__fp_cmp+0x46>
    2320:	62 1b       	sub	r22, r18
    2322:	73 0b       	sbc	r23, r19
    2324:	84 0b       	sbc	r24, r20
    2326:	95 0b       	sbc	r25, r21
    2328:	39 f4       	brne	.+14     	; 0x2338 <__fp_cmp+0x38>
    232a:	0a 26       	eor	r0, r26
    232c:	61 f0       	breq	.+24     	; 0x2346 <__fp_cmp+0x46>
    232e:	23 2b       	or	r18, r19
    2330:	24 2b       	or	r18, r20
    2332:	25 2b       	or	r18, r21
    2334:	21 f4       	brne	.+8      	; 0x233e <__fp_cmp+0x3e>
    2336:	08 95       	ret
    2338:	0a 26       	eor	r0, r26
    233a:	09 f4       	brne	.+2      	; 0x233e <__fp_cmp+0x3e>
    233c:	a1 40       	sbci	r26, 0x01	; 1
    233e:	a6 95       	lsr	r26
    2340:	8f ef       	ldi	r24, 0xFF	; 255
    2342:	81 1d       	adc	r24, r1
    2344:	81 1d       	adc	r24, r1
    2346:	08 95       	ret

00002348 <__fp_inf>:
    2348:	97 f9       	bld	r25, 7
    234a:	9f 67       	ori	r25, 0x7F	; 127
    234c:	80 e8       	ldi	r24, 0x80	; 128
    234e:	70 e0       	ldi	r23, 0x00	; 0
    2350:	60 e0       	ldi	r22, 0x00	; 0
    2352:	08 95       	ret

00002354 <__fp_nan>:
    2354:	9f ef       	ldi	r25, 0xFF	; 255
    2356:	80 ec       	ldi	r24, 0xC0	; 192
    2358:	08 95       	ret

0000235a <__fp_pscA>:
    235a:	00 24       	eor	r0, r0
    235c:	0a 94       	dec	r0
    235e:	16 16       	cp	r1, r22
    2360:	17 06       	cpc	r1, r23
    2362:	18 06       	cpc	r1, r24
    2364:	09 06       	cpc	r0, r25
    2366:	08 95       	ret

00002368 <__fp_pscB>:
    2368:	00 24       	eor	r0, r0
    236a:	0a 94       	dec	r0
    236c:	12 16       	cp	r1, r18
    236e:	13 06       	cpc	r1, r19
    2370:	14 06       	cpc	r1, r20
    2372:	05 06       	cpc	r0, r21
    2374:	08 95       	ret

00002376 <__fp_round>:
    2376:	09 2e       	mov	r0, r25
    2378:	03 94       	inc	r0
    237a:	00 0c       	add	r0, r0
    237c:	11 f4       	brne	.+4      	; 0x2382 <__fp_round+0xc>
    237e:	88 23       	and	r24, r24
    2380:	52 f0       	brmi	.+20     	; 0x2396 <__fp_round+0x20>
    2382:	bb 0f       	add	r27, r27
    2384:	40 f4       	brcc	.+16     	; 0x2396 <__fp_round+0x20>
    2386:	bf 2b       	or	r27, r31
    2388:	11 f4       	brne	.+4      	; 0x238e <__fp_round+0x18>
    238a:	60 ff       	sbrs	r22, 0
    238c:	04 c0       	rjmp	.+8      	; 0x2396 <__fp_round+0x20>
    238e:	6f 5f       	subi	r22, 0xFF	; 255
    2390:	7f 4f       	sbci	r23, 0xFF	; 255
    2392:	8f 4f       	sbci	r24, 0xFF	; 255
    2394:	9f 4f       	sbci	r25, 0xFF	; 255
    2396:	08 95       	ret

00002398 <__fp_split3>:
    2398:	57 fd       	sbrc	r21, 7
    239a:	90 58       	subi	r25, 0x80	; 128
    239c:	44 0f       	add	r20, r20
    239e:	55 1f       	adc	r21, r21
    23a0:	59 f0       	breq	.+22     	; 0x23b8 <__fp_splitA+0x10>
    23a2:	5f 3f       	cpi	r21, 0xFF	; 255
    23a4:	71 f0       	breq	.+28     	; 0x23c2 <__fp_splitA+0x1a>
    23a6:	47 95       	ror	r20

000023a8 <__fp_splitA>:
    23a8:	88 0f       	add	r24, r24
    23aa:	97 fb       	bst	r25, 7
    23ac:	99 1f       	adc	r25, r25
    23ae:	61 f0       	breq	.+24     	; 0x23c8 <__fp_splitA+0x20>
    23b0:	9f 3f       	cpi	r25, 0xFF	; 255
    23b2:	79 f0       	breq	.+30     	; 0x23d2 <__fp_splitA+0x2a>
    23b4:	87 95       	ror	r24
    23b6:	08 95       	ret
    23b8:	12 16       	cp	r1, r18
    23ba:	13 06       	cpc	r1, r19
    23bc:	14 06       	cpc	r1, r20
    23be:	55 1f       	adc	r21, r21
    23c0:	f2 cf       	rjmp	.-28     	; 0x23a6 <__fp_split3+0xe>
    23c2:	46 95       	lsr	r20
    23c4:	f1 df       	rcall	.-30     	; 0x23a8 <__fp_splitA>
    23c6:	08 c0       	rjmp	.+16     	; 0x23d8 <__fp_splitA+0x30>
    23c8:	16 16       	cp	r1, r22
    23ca:	17 06       	cpc	r1, r23
    23cc:	18 06       	cpc	r1, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	f1 cf       	rjmp	.-30     	; 0x23b4 <__fp_splitA+0xc>
    23d2:	86 95       	lsr	r24
    23d4:	71 05       	cpc	r23, r1
    23d6:	61 05       	cpc	r22, r1
    23d8:	08 94       	sec
    23da:	08 95       	ret

000023dc <__fp_zero>:
    23dc:	e8 94       	clt

000023de <__fp_szero>:
    23de:	bb 27       	eor	r27, r27
    23e0:	66 27       	eor	r22, r22
    23e2:	77 27       	eor	r23, r23
    23e4:	cb 01       	movw	r24, r22
    23e6:	97 f9       	bld	r25, 7
    23e8:	08 95       	ret

000023ea <__gesf2>:
    23ea:	8a df       	rcall	.-236    	; 0x2300 <__fp_cmp>
    23ec:	08 f4       	brcc	.+2      	; 0x23f0 <__gesf2+0x6>
    23ee:	8f ef       	ldi	r24, 0xFF	; 255
    23f0:	08 95       	ret

000023f2 <clear>:
    23f2:	e2 ef       	ldi	r30, 0xF2	; 242
    23f4:	f1 e0       	ldi	r31, 0x01	; 1
    23f6:	11 92       	st	Z+, r1
    23f8:	83 e0       	ldi	r24, 0x03	; 3
    23fa:	ea 3e       	cpi	r30, 0xEA	; 234
    23fc:	f8 07       	cpc	r31, r24
    23fe:	d9 f7       	brne	.-10     	; 0x23f6 <clear+0x4>
    2400:	08 95       	ret

00002402 <set_pixel>:
    2402:	84 35       	cpi	r24, 0x54	; 84
    2404:	80 f5       	brcc	.+96     	; 0x2466 <set_pixel+0x64>
    2406:	60 33       	cpi	r22, 0x30	; 48
    2408:	70 f5       	brcc	.+92     	; 0x2466 <set_pixel+0x64>
    240a:	26 2f       	mov	r18, r22
    240c:	26 95       	lsr	r18
    240e:	26 95       	lsr	r18
    2410:	26 95       	lsr	r18
    2412:	67 70       	andi	r22, 0x07	; 7
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	44 23       	and	r20, r20
    2418:	99 f0       	breq	.+38     	; 0x2440 <set_pixel+0x3e>
    241a:	e4 e5       	ldi	r30, 0x54	; 84
    241c:	2e 9f       	mul	r18, r30
    241e:	f0 01       	movw	r30, r0
    2420:	11 24       	eor	r1, r1
    2422:	e8 0f       	add	r30, r24
    2424:	f9 1f       	adc	r31, r25
    2426:	ee 50       	subi	r30, 0x0E	; 14
    2428:	fe 4f       	sbci	r31, 0xFE	; 254
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	02 c0       	rjmp	.+4      	; 0x2434 <set_pixel+0x32>
    2430:	88 0f       	add	r24, r24
    2432:	99 1f       	adc	r25, r25
    2434:	6a 95       	dec	r22
    2436:	e2 f7       	brpl	.-8      	; 0x2430 <set_pixel+0x2e>
    2438:	20 81       	ld	r18, Z
    243a:	28 2b       	or	r18, r24
    243c:	20 83       	st	Z, r18
    243e:	08 95       	ret
    2440:	e4 e5       	ldi	r30, 0x54	; 84
    2442:	2e 9f       	mul	r18, r30
    2444:	f0 01       	movw	r30, r0
    2446:	11 24       	eor	r1, r1
    2448:	e8 0f       	add	r30, r24
    244a:	f9 1f       	adc	r31, r25
    244c:	ee 50       	subi	r30, 0x0E	; 14
    244e:	fe 4f       	sbci	r31, 0xFE	; 254
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	02 c0       	rjmp	.+4      	; 0x245a <set_pixel+0x58>
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	6a 95       	dec	r22
    245c:	e2 f7       	brpl	.-8      	; 0x2456 <set_pixel+0x54>
    245e:	80 95       	com	r24
    2460:	20 81       	ld	r18, Z
    2462:	28 23       	and	r18, r24
    2464:	20 83       	st	Z, r18
    2466:	08 95       	ret

00002468 <draw_line>:
    2468:	2f 92       	push	r2
    246a:	3f 92       	push	r3
    246c:	4f 92       	push	r4
    246e:	5f 92       	push	r5
    2470:	6f 92       	push	r6
    2472:	7f 92       	push	r7
    2474:	8f 92       	push	r8
    2476:	9f 92       	push	r9
    2478:	af 92       	push	r10
    247a:	bf 92       	push	r11
    247c:	cf 92       	push	r12
    247e:	df 92       	push	r13
    2480:	ef 92       	push	r14
    2482:	ff 92       	push	r15
    2484:	0f 93       	push	r16
    2486:	1f 93       	push	r17
    2488:	df 93       	push	r29
    248a:	cf 93       	push	r28
    248c:	cd b7       	in	r28, 0x3d	; 61
    248e:	de b7       	in	r29, 0x3e	; 62
    2490:	66 97       	sbiw	r28, 0x16	; 22
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	c8 2e       	mov	r12, r24
    249e:	d6 2e       	mov	r13, r22
    24a0:	49 87       	std	Y+9, r20	; 0x09
    24a2:	2a 87       	std	Y+10, r18	; 0x0a
    24a4:	84 17       	cp	r24, r20
    24a6:	59 f4       	brne	.+22     	; 0x24be <draw_line+0x56>
    24a8:	16 2f       	mov	r17, r22
    24aa:	05 c0       	rjmp	.+10     	; 0x24b6 <draw_line+0x4e>
    24ac:	8c 2d       	mov	r24, r12
    24ae:	61 2f       	mov	r22, r17
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	a7 df       	rcall	.-178    	; 0x2402 <set_pixel>
    24b4:	1f 5f       	subi	r17, 0xFF	; 255
    24b6:	2a 85       	ldd	r18, Y+10	; 0x0a
    24b8:	21 17       	cp	r18, r17
    24ba:	c0 f7       	brcc	.-16     	; 0x24ac <draw_line+0x44>
    24bc:	a3 c1       	rjmp	.+838    	; 0x2804 <draw_line+0x39c>
    24be:	3a 85       	ldd	r19, Y+10	; 0x0a
    24c0:	63 17       	cp	r22, r19
    24c2:	59 f4       	brne	.+22     	; 0x24da <draw_line+0x72>
    24c4:	18 2f       	mov	r17, r24
    24c6:	05 c0       	rjmp	.+10     	; 0x24d2 <draw_line+0x6a>
    24c8:	81 2f       	mov	r24, r17
    24ca:	6d 2d       	mov	r22, r13
    24cc:	41 e0       	ldi	r20, 0x01	; 1
    24ce:	99 df       	rcall	.-206    	; 0x2402 <set_pixel>
    24d0:	1f 5f       	subi	r17, 0xFF	; 255
    24d2:	49 85       	ldd	r20, Y+9	; 0x09
    24d4:	41 17       	cp	r20, r17
    24d6:	c0 f7       	brcc	.-16     	; 0x24c8 <draw_line+0x60>
    24d8:	95 c1       	rjmp	.+810    	; 0x2804 <draw_line+0x39c>
    24da:	5a 85       	ldd	r21, Y+10	; 0x0a
    24dc:	65 2f       	mov	r22, r21
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	d0 de       	rcall	.-608    	; 0x2286 <__floatunsisf>
    24e6:	7b 01       	movw	r14, r22
    24e8:	8c 01       	movw	r16, r24
    24ea:	8d 2d       	mov	r24, r13
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9c 87       	std	Y+12, r25	; 0x0c
    24f0:	8b 87       	std	Y+11, r24	; 0x0b
    24f2:	fc 01       	movw	r30, r24
    24f4:	bf 01       	movw	r22, r30
    24f6:	88 27       	eor	r24, r24
    24f8:	77 fd       	sbrc	r23, 7
    24fa:	80 95       	com	r24
    24fc:	98 2f       	mov	r25, r24
    24fe:	c5 de       	rcall	.-630    	; 0x228a <__floatsisf>
    2500:	9b 01       	movw	r18, r22
    2502:	ac 01       	movw	r20, r24
    2504:	c8 01       	movw	r24, r16
    2506:	b7 01       	movw	r22, r14
    2508:	24 de       	rcall	.-952    	; 0x2152 <__subsf3>
    250a:	1b 01       	movw	r2, r22
    250c:	2c 01       	movw	r4, r24
    250e:	f9 85       	ldd	r31, Y+9	; 0x09
    2510:	6f 2f       	mov	r22, r31
    2512:	70 e0       	ldi	r23, 0x00	; 0
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	b6 de       	rcall	.-660    	; 0x2286 <__floatunsisf>
    251a:	7b 01       	movw	r14, r22
    251c:	8c 01       	movw	r16, r24
    251e:	ac 2c       	mov	r10, r12
    2520:	bb 24       	eor	r11, r11
    2522:	b5 01       	movw	r22, r10
    2524:	88 27       	eor	r24, r24
    2526:	77 fd       	sbrc	r23, 7
    2528:	80 95       	com	r24
    252a:	98 2f       	mov	r25, r24
    252c:	ae de       	rcall	.-676    	; 0x228a <__floatsisf>
    252e:	9b 01       	movw	r18, r22
    2530:	ac 01       	movw	r20, r24
    2532:	c8 01       	movw	r24, r16
    2534:	b7 01       	movw	r22, r14
    2536:	0d de       	rcall	.-998    	; 0x2152 <__subsf3>
    2538:	3b 01       	movw	r6, r22
    253a:	4c 01       	movw	r8, r24
    253c:	c2 01       	movw	r24, r4
    253e:	b1 01       	movw	r22, r2
    2540:	a4 01       	movw	r20, r8
    2542:	93 01       	movw	r18, r6
    2544:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__divsf3>
    2548:	7b 01       	movw	r14, r22
    254a:	8c 01       	movw	r16, r24
    254c:	29 85       	ldd	r18, Y+9	; 0x09
    254e:	c2 16       	cp	r12, r18
    2550:	08 f0       	brcs	.+2      	; 0x2554 <draw_line+0xec>
    2552:	38 c0       	rjmp	.+112    	; 0x25c4 <draw_line+0x15c>
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e8       	ldi	r20, 0x80	; 128
    255a:	5f e3       	ldi	r21, 0x3F	; 63
    255c:	46 df       	rcall	.-372    	; 0x23ea <__gesf2>
    255e:	18 16       	cp	r1, r24
    2560:	24 f4       	brge	.+8      	; 0x256a <draw_line+0x102>
    2562:	71 e0       	ldi	r23, 0x01	; 1
    2564:	c7 2e       	mov	r12, r23
    2566:	d1 2c       	mov	r13, r1
    2568:	37 c1       	rjmp	.+622    	; 0x27d8 <draw_line+0x370>
    256a:	c8 01       	movw	r24, r16
    256c:	b7 01       	movw	r22, r14
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e8       	ldi	r20, 0x80	; 128
    2574:	5f e3       	ldi	r21, 0x3F	; 63
    2576:	52 de       	rcall	.-860    	; 0x221c <__cmpsf2>
    2578:	18 16       	cp	r1, r24
    257a:	64 f0       	brlt	.+24     	; 0x2594 <draw_line+0x12c>
    257c:	c8 01       	movw	r24, r16
    257e:	b7 01       	movw	r22, r14
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e0       	ldi	r20, 0x00	; 0
    2586:	50 e0       	ldi	r21, 0x00	; 0
    2588:	30 df       	rcall	.-416    	; 0x23ea <__gesf2>
    258a:	18 16       	cp	r1, r24
    258c:	1c f4       	brge	.+6      	; 0x2594 <draw_line+0x12c>
    258e:	cc 24       	eor	r12, r12
    2590:	dd 24       	eor	r13, r13
    2592:	50 c0       	rjmp	.+160    	; 0x2634 <draw_line+0x1cc>
    2594:	c8 01       	movw	r24, r16
    2596:	b7 01       	movw	r22, r14
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e0       	ldi	r20, 0x00	; 0
    259e:	50 e0       	ldi	r21, 0x00	; 0
    25a0:	3d de       	rcall	.-902    	; 0x221c <__cmpsf2>
    25a2:	18 16       	cp	r1, r24
    25a4:	0c f4       	brge	.+2      	; 0x25a8 <draw_line+0x140>
    25a6:	11 c1       	rjmp	.+546    	; 0x27ca <draw_line+0x362>
    25a8:	c8 01       	movw	r24, r16
    25aa:	b7 01       	movw	r22, r14
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e8       	ldi	r20, 0x80	; 128
    25b2:	5f eb       	ldi	r21, 0xBF	; 191
    25b4:	1a df       	rcall	.-460    	; 0x23ea <__gesf2>
    25b6:	18 16       	cp	r1, r24
    25b8:	0c f0       	brlt	.+2      	; 0x25bc <draw_line+0x154>
    25ba:	07 c1       	rjmp	.+526    	; 0x27ca <draw_line+0x362>
    25bc:	67 e0       	ldi	r22, 0x07	; 7
    25be:	c6 2e       	mov	r12, r22
    25c0:	d1 2c       	mov	r13, r1
    25c2:	38 c0       	rjmp	.+112    	; 0x2634 <draw_line+0x1cc>
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e8       	ldi	r20, 0x80	; 128
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	0e df       	rcall	.-484    	; 0x23ea <__gesf2>
    25ce:	18 16       	cp	r1, r24
    25d0:	24 f4       	brge	.+8      	; 0x25da <draw_line+0x172>
    25d2:	55 e0       	ldi	r21, 0x05	; 5
    25d4:	c5 2e       	mov	r12, r21
    25d6:	d1 2c       	mov	r13, r1
    25d8:	ff c0       	rjmp	.+510    	; 0x27d8 <draw_line+0x370>
    25da:	c8 01       	movw	r24, r16
    25dc:	b7 01       	movw	r22, r14
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e8       	ldi	r20, 0x80	; 128
    25e4:	5f e3       	ldi	r21, 0x3F	; 63
    25e6:	1a de       	rcall	.-972    	; 0x221c <__cmpsf2>
    25e8:	18 16       	cp	r1, r24
    25ea:	6c f0       	brlt	.+26     	; 0x2606 <draw_line+0x19e>
    25ec:	c8 01       	movw	r24, r16
    25ee:	b7 01       	movw	r22, r14
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	40 e0       	ldi	r20, 0x00	; 0
    25f6:	50 e0       	ldi	r21, 0x00	; 0
    25f8:	f8 de       	rcall	.-528    	; 0x23ea <__gesf2>
    25fa:	18 16       	cp	r1, r24
    25fc:	24 f4       	brge	.+8      	; 0x2606 <draw_line+0x19e>
    25fe:	44 e0       	ldi	r20, 0x04	; 4
    2600:	c4 2e       	mov	r12, r20
    2602:	d1 2c       	mov	r13, r1
    2604:	17 c0       	rjmp	.+46     	; 0x2634 <draw_line+0x1cc>
    2606:	c8 01       	movw	r24, r16
    2608:	b7 01       	movw	r22, r14
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e0       	ldi	r20, 0x00	; 0
    2610:	50 e0       	ldi	r21, 0x00	; 0
    2612:	04 de       	rcall	.-1016   	; 0x221c <__cmpsf2>
    2614:	18 16       	cp	r1, r24
    2616:	0c f4       	brge	.+2      	; 0x261a <draw_line+0x1b2>
    2618:	dc c0       	rjmp	.+440    	; 0x27d2 <draw_line+0x36a>
    261a:	c8 01       	movw	r24, r16
    261c:	b7 01       	movw	r22, r14
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e8       	ldi	r20, 0x80	; 128
    2624:	5f eb       	ldi	r21, 0xBF	; 191
    2626:	e1 de       	rcall	.-574    	; 0x23ea <__gesf2>
    2628:	18 16       	cp	r1, r24
    262a:	0c f0       	brlt	.+2      	; 0x262e <draw_line+0x1c6>
    262c:	d2 c0       	rjmp	.+420    	; 0x27d2 <draw_line+0x36a>
    262e:	33 e0       	ldi	r19, 0x03	; 3
    2630:	c3 2e       	mov	r12, r19
    2632:	d1 2c       	mov	r13, r1
    2634:	4b 85       	ldd	r20, Y+11	; 0x0b
    2636:	5c 85       	ldd	r21, Y+12	; 0x0c
    2638:	5a 83       	std	Y+2, r21	; 0x02
    263a:	49 83       	std	Y+1, r20	; 0x01
    263c:	be 82       	std	Y+6, r11	; 0x06
    263e:	ad 82       	std	Y+5, r10	; 0x05
    2640:	99 85       	ldd	r25, Y+9	; 0x09
    2642:	89 2f       	mov	r24, r25
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	9c 83       	std	Y+4, r25	; 0x04
    2648:	8b 83       	std	Y+3, r24	; 0x03
    264a:	17 01       	movw	r2, r14
    264c:	28 01       	movw	r4, r16
    264e:	e1 e0       	ldi	r30, 0x01	; 1
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	f8 87       	std	Y+8, r31	; 0x08
    2654:	ef 83       	std	Y+7, r30	; 0x07
    2656:	f7 e0       	ldi	r31, 0x07	; 7
    2658:	cf 16       	cp	r12, r31
    265a:	d1 04       	cpc	r13, r1
    265c:	28 f4       	brcc	.+10     	; 0x2668 <draw_line+0x200>
    265e:	23 e0       	ldi	r18, 0x03	; 3
    2660:	c2 16       	cp	r12, r18
    2662:	d1 04       	cpc	r13, r1
    2664:	40 f4       	brcc	.+16     	; 0x2676 <draw_line+0x20e>
    2666:	04 c0       	rjmp	.+8      	; 0x2670 <draw_line+0x208>
    2668:	37 e0       	ldi	r19, 0x07	; 7
    266a:	c3 16       	cp	r12, r19
    266c:	d1 04       	cpc	r13, r1
    266e:	29 f4       	brne	.+10     	; 0x267a <draw_line+0x212>
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	02 c0       	rjmp	.+4      	; 0x267a <draw_line+0x212>
    2676:	8f ef       	ldi	r24, 0xFF	; 255
    2678:	9f ef       	ldi	r25, 0xFF	; 255
    267a:	ad 80       	ldd	r10, Y+5	; 0x05
    267c:	be 80       	ldd	r11, Y+6	; 0x06
    267e:	0f 2e       	mov	r0, r31
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	6f 2e       	mov	r6, r31
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	7f 2e       	mov	r7, r31
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	8f 2e       	mov	r8, r31
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	9f 2e       	mov	r9, r31
    2690:	f0 2d       	mov	r31, r0
    2692:	a2 01       	movw	r20, r4
    2694:	91 01       	movw	r18, r2
    2696:	50 58       	subi	r21, 0x80	; 128
    2698:	2d 87       	std	Y+13, r18	; 0x0d
    269a:	3e 87       	std	Y+14, r19	; 0x0e
    269c:	4f 87       	std	Y+15, r20	; 0x0f
    269e:	58 8b       	std	Y+16, r21	; 0x10
    26a0:	9c 01       	movw	r18, r24
    26a2:	44 27       	eor	r20, r20
    26a4:	37 fd       	sbrc	r19, 7
    26a6:	40 95       	com	r20
    26a8:	54 2f       	mov	r21, r20
    26aa:	29 8b       	std	Y+17, r18	; 0x11
    26ac:	3a 8b       	std	Y+18, r19	; 0x12
    26ae:	4b 8b       	std	Y+19, r20	; 0x13
    26b0:	5c 8b       	std	Y+20, r21	; 0x14
    26b2:	7a c0       	rjmp	.+244    	; 0x27a8 <draw_line+0x340>
    26b4:	4f 81       	ldd	r20, Y+7	; 0x07
    26b6:	58 85       	ldd	r21, Y+8	; 0x08
    26b8:	45 2b       	or	r20, r21
    26ba:	19 f0       	breq	.+6      	; 0x26c2 <draw_line+0x25a>
    26bc:	8a 2d       	mov	r24, r10
    26be:	69 81       	ldd	r22, Y+1	; 0x01
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <draw_line+0x25e>
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	6a 2d       	mov	r22, r10
    26c6:	41 e0       	ldi	r20, 0x01	; 1
    26c8:	9c de       	rcall	.-712    	; 0x2402 <set_pixel>
    26ca:	c2 01       	movw	r24, r4
    26cc:	b1 01       	movw	r22, r2
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	40 e0       	ldi	r20, 0x00	; 0
    26d4:	50 e0       	ldi	r21, 0x00	; 0
    26d6:	89 de       	rcall	.-750    	; 0x23ea <__gesf2>
    26d8:	88 23       	and	r24, r24
    26da:	1c f0       	brlt	.+6      	; 0x26e2 <draw_line+0x27a>
    26dc:	a2 01       	movw	r20, r4
    26de:	91 01       	movw	r18, r2
    26e0:	04 c0       	rjmp	.+8      	; 0x26ea <draw_line+0x282>
    26e2:	2d 85       	ldd	r18, Y+13	; 0x0d
    26e4:	3e 85       	ldd	r19, Y+14	; 0x0e
    26e6:	4f 85       	ldd	r20, Y+15	; 0x0f
    26e8:	58 89       	ldd	r21, Y+16	; 0x10
    26ea:	c4 01       	movw	r24, r8
    26ec:	b3 01       	movw	r22, r6
    26ee:	32 dd       	rcall	.-1436   	; 0x2154 <__addsf3>
    26f0:	3b 01       	movw	r6, r22
    26f2:	4c 01       	movw	r8, r24
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	5f e3       	ldi	r21, 0x3F	; 63
    26fc:	76 de       	rcall	.-788    	; 0x23ea <__gesf2>
    26fe:	18 16       	cp	r1, r24
    2700:	0c f0       	brlt	.+2      	; 0x2704 <draw_line+0x29c>
    2702:	44 c0       	rjmp	.+136    	; 0x278c <draw_line+0x324>
    2704:	69 89       	ldd	r22, Y+17	; 0x11
    2706:	7a 89       	ldd	r23, Y+18	; 0x12
    2708:	8b 89       	ldd	r24, Y+19	; 0x13
    270a:	9c 89       	ldd	r25, Y+20	; 0x14
    270c:	be dd       	rcall	.-1156   	; 0x228a <__floatsisf>
    270e:	9b 01       	movw	r18, r22
    2710:	ac 01       	movw	r20, r24
    2712:	c2 01       	movw	r24, r4
    2714:	b1 01       	movw	r22, r2
    2716:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__mulsf3>
    271a:	7b 01       	movw	r14, r22
    271c:	8c 01       	movw	r16, r24
    271e:	1e 8a       	std	Y+22, r1	; 0x16
    2720:	1d 8a       	std	Y+21, r1	; 0x15
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e0       	ldi	r20, 0x00	; 0
    2728:	50 e0       	ldi	r21, 0x00	; 0
    272a:	5f de       	rcall	.-834    	; 0x23ea <__gesf2>
    272c:	18 16       	cp	r1, r24
    272e:	24 f4       	brge	.+8      	; 0x2738 <draw_line+0x2d0>
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	9e 8b       	std	Y+22, r25	; 0x16
    2736:	8d 8b       	std	Y+21, r24	; 0x15
    2738:	cc 24       	eor	r12, r12
    273a:	dd 24       	eor	r13, r13
    273c:	c8 01       	movw	r24, r16
    273e:	b7 01       	movw	r22, r14
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	40 e0       	ldi	r20, 0x00	; 0
    2746:	50 e0       	ldi	r21, 0x00	; 0
    2748:	69 dd       	rcall	.-1326   	; 0x221c <__cmpsf2>
    274a:	88 23       	and	r24, r24
    274c:	1c f4       	brge	.+6      	; 0x2754 <draw_line+0x2ec>
    274e:	21 e0       	ldi	r18, 0x01	; 1
    2750:	c2 2e       	mov	r12, r18
    2752:	d1 2c       	mov	r13, r1
    2754:	ed 89       	ldd	r30, Y+21	; 0x15
    2756:	fe 89       	ldd	r31, Y+22	; 0x16
    2758:	ec 19       	sub	r30, r12
    275a:	fd 09       	sbc	r31, r13
    275c:	31 97       	sbiw	r30, 0x01	; 1
    275e:	39 f4       	brne	.+14     	; 0x276e <draw_line+0x306>
    2760:	29 81       	ldd	r18, Y+1	; 0x01
    2762:	3a 81       	ldd	r19, Y+2	; 0x02
    2764:	2f 5f       	subi	r18, 0xFF	; 255
    2766:	3f 4f       	sbci	r19, 0xFF	; 255
    2768:	3a 83       	std	Y+2, r19	; 0x02
    276a:	29 83       	std	Y+1, r18	; 0x01
    276c:	06 c0       	rjmp	.+12     	; 0x277a <draw_line+0x312>
    276e:	49 81       	ldd	r20, Y+1	; 0x01
    2770:	5a 81       	ldd	r21, Y+2	; 0x02
    2772:	41 50       	subi	r20, 0x01	; 1
    2774:	50 40       	sbci	r21, 0x00	; 0
    2776:	5a 83       	std	Y+2, r21	; 0x02
    2778:	49 83       	std	Y+1, r20	; 0x01
    277a:	c4 01       	movw	r24, r8
    277c:	b3 01       	movw	r22, r6
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e8       	ldi	r20, 0x80	; 128
    2784:	5f e3       	ldi	r21, 0x3F	; 63
    2786:	e5 dc       	rcall	.-1590   	; 0x2152 <__subsf3>
    2788:	3b 01       	movw	r6, r22
    278a:	4c 01       	movw	r8, r24
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	9c 81       	ldd	r25, Y+4	; 0x04
    2790:	ed 81       	ldd	r30, Y+5	; 0x05
    2792:	fe 81       	ldd	r31, Y+6	; 0x06
    2794:	e8 17       	cp	r30, r24
    2796:	f9 07       	cpc	r31, r25
    2798:	20 f4       	brcc	.+8      	; 0x27a2 <draw_line+0x33a>
    279a:	08 94       	sec
    279c:	a1 1c       	adc	r10, r1
    279e:	b1 1c       	adc	r11, r1
    27a0:	03 c0       	rjmp	.+6      	; 0x27a8 <draw_line+0x340>
    27a2:	08 94       	sec
    27a4:	a1 08       	sbc	r10, r1
    27a6:	b1 08       	sbc	r11, r1
    27a8:	2b 81       	ldd	r18, Y+3	; 0x03
    27aa:	3c 81       	ldd	r19, Y+4	; 0x04
    27ac:	4d 81       	ldd	r20, Y+5	; 0x05
    27ae:	5e 81       	ldd	r21, Y+6	; 0x06
    27b0:	42 17       	cp	r20, r18
    27b2:	53 07       	cpc	r21, r19
    27b4:	20 f4       	brcc	.+8      	; 0x27be <draw_line+0x356>
    27b6:	2a 15       	cp	r18, r10
    27b8:	3b 05       	cpc	r19, r11
    27ba:	20 f1       	brcs	.+72     	; 0x2804 <draw_line+0x39c>
    27bc:	7b cf       	rjmp	.-266    	; 0x26b4 <draw_line+0x24c>
    27be:	8b 81       	ldd	r24, Y+3	; 0x03
    27c0:	9c 81       	ldd	r25, Y+4	; 0x04
    27c2:	a8 16       	cp	r10, r24
    27c4:	b9 06       	cpc	r11, r25
    27c6:	f0 f0       	brcs	.+60     	; 0x2804 <draw_line+0x39c>
    27c8:	75 cf       	rjmp	.-278    	; 0x26b4 <draw_line+0x24c>
    27ca:	96 e0       	ldi	r25, 0x06	; 6
    27cc:	c9 2e       	mov	r12, r25
    27ce:	d1 2c       	mov	r13, r1
    27d0:	03 c0       	rjmp	.+6      	; 0x27d8 <draw_line+0x370>
    27d2:	82 e0       	ldi	r24, 0x02	; 2
    27d4:	c8 2e       	mov	r12, r24
    27d6:	d1 2c       	mov	r13, r1
    27d8:	c4 01       	movw	r24, r8
    27da:	b3 01       	movw	r22, r6
    27dc:	a2 01       	movw	r20, r4
    27de:	91 01       	movw	r18, r2
    27e0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__divsf3>
    27e4:	1b 01       	movw	r2, r22
    27e6:	2c 01       	movw	r4, r24
    27e8:	ba 82       	std	Y+2, r11	; 0x02
    27ea:	a9 82       	std	Y+1, r10	; 0x01
    27ec:	eb 85       	ldd	r30, Y+11	; 0x0b
    27ee:	fc 85       	ldd	r31, Y+12	; 0x0c
    27f0:	fe 83       	std	Y+6, r31	; 0x06
    27f2:	ed 83       	std	Y+5, r30	; 0x05
    27f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    27f6:	23 2f       	mov	r18, r19
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	3c 83       	std	Y+4, r19	; 0x04
    27fc:	2b 83       	std	Y+3, r18	; 0x03
    27fe:	18 86       	std	Y+8, r1	; 0x08
    2800:	1f 82       	std	Y+7, r1	; 0x07
    2802:	29 cf       	rjmp	.-430    	; 0x2656 <draw_line+0x1ee>
    2804:	66 96       	adiw	r28, 0x16	; 22
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	cd bf       	out	0x3d, r28	; 61
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	1f 91       	pop	r17
    2816:	0f 91       	pop	r16
    2818:	ff 90       	pop	r15
    281a:	ef 90       	pop	r14
    281c:	df 90       	pop	r13
    281e:	cf 90       	pop	r12
    2820:	bf 90       	pop	r11
    2822:	af 90       	pop	r10
    2824:	9f 90       	pop	r9
    2826:	8f 90       	pop	r8
    2828:	7f 90       	pop	r7
    282a:	6f 90       	pop	r6
    282c:	5f 90       	pop	r5
    282e:	4f 90       	pop	r4
    2830:	3f 90       	pop	r3
    2832:	2f 90       	pop	r2
    2834:	08 95       	ret

00002836 <draw_character>:
    2836:	8f 92       	push	r8
    2838:	9f 92       	push	r9
    283a:	af 92       	push	r10
    283c:	bf 92       	push	r11
    283e:	cf 92       	push	r12
    2840:	df 92       	push	r13
    2842:	ef 92       	push	r14
    2844:	ff 92       	push	r15
    2846:	0f 93       	push	r16
    2848:	1f 93       	push	r17
    284a:	cf 93       	push	r28
    284c:	df 93       	push	r29
    284e:	d6 2e       	mov	r13, r22
    2850:	c4 2e       	mov	r12, r20
    2852:	95 e0       	ldi	r25, 0x05	; 5
    2854:	89 9f       	mul	r24, r25
    2856:	c0 01       	movw	r24, r0
    2858:	11 24       	eor	r1, r1
    285a:	8c 01       	movw	r16, r24
    285c:	04 5f       	subi	r16, 0xF4	; 244
    285e:	1f 4f       	sbci	r17, 0xFF	; 255
    2860:	f1 e0       	ldi	r31, 0x01	; 1
    2862:	8f 2e       	mov	r8, r31
    2864:	91 2c       	mov	r9, r1
    2866:	e1 e1       	ldi	r30, 0x11	; 17
    2868:	ae 2e       	mov	r10, r30
    286a:	e0 e0       	ldi	r30, 0x00	; 0
    286c:	be 2e       	mov	r11, r30
    286e:	a8 0e       	add	r10, r24
    2870:	b9 1e       	adc	r11, r25
    2872:	1d c0       	rjmp	.+58     	; 0x28ae <draw_character+0x78>
    2874:	6c 2d       	mov	r22, r12
    2876:	6c 0f       	add	r22, r28
    2878:	a4 01       	movw	r20, r8
    287a:	0c 2e       	mov	r0, r28
    287c:	02 c0       	rjmp	.+4      	; 0x2882 <draw_character+0x4c>
    287e:	44 0f       	add	r20, r20
    2880:	55 1f       	adc	r21, r21
    2882:	0a 94       	dec	r0
    2884:	e2 f7       	brpl	.-8      	; 0x287e <draw_character+0x48>
    2886:	4e 21       	and	r20, r14
    2888:	5f 21       	and	r21, r15
    288a:	0c 2e       	mov	r0, r28
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <draw_character+0x5c>
    288e:	55 95       	asr	r21
    2890:	47 95       	ror	r20
    2892:	0a 94       	dec	r0
    2894:	e2 f7       	brpl	.-8      	; 0x288e <draw_character+0x58>
    2896:	8d 2d       	mov	r24, r13
    2898:	b4 dd       	rcall	.-1176   	; 0x2402 <set_pixel>
    289a:	21 96       	adiw	r28, 0x01	; 1
    289c:	c8 30       	cpi	r28, 0x08	; 8
    289e:	d1 05       	cpc	r29, r1
    28a0:	49 f7       	brne	.-46     	; 0x2874 <draw_character+0x3e>
    28a2:	0f 5f       	subi	r16, 0xFF	; 255
    28a4:	1f 4f       	sbci	r17, 0xFF	; 255
    28a6:	d3 94       	inc	r13
    28a8:	0a 15       	cp	r16, r10
    28aa:	1b 05       	cpc	r17, r11
    28ac:	39 f0       	breq	.+14     	; 0x28bc <draw_character+0x86>
    28ae:	c0 e0       	ldi	r28, 0x00	; 0
    28b0:	d0 e0       	ldi	r29, 0x00	; 0
    28b2:	f8 01       	movw	r30, r16
    28b4:	84 91       	lpm	r24, Z+
    28b6:	e8 2e       	mov	r14, r24
    28b8:	ff 24       	eor	r15, r15
    28ba:	dc cf       	rjmp	.-72     	; 0x2874 <draw_character+0x3e>
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	1f 91       	pop	r17
    28c2:	0f 91       	pop	r16
    28c4:	ff 90       	pop	r15
    28c6:	ef 90       	pop	r14
    28c8:	df 90       	pop	r13
    28ca:	cf 90       	pop	r12
    28cc:	bf 90       	pop	r11
    28ce:	af 90       	pop	r10
    28d0:	9f 90       	pop	r9
    28d2:	8f 90       	pop	r8
    28d4:	08 95       	ret

000028d6 <draw_string>:
    28d6:	0f 93       	push	r16
    28d8:	1f 93       	push	r17
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	ec 01       	movw	r28, r24
    28e0:	16 2f       	mov	r17, r22
    28e2:	04 2f       	mov	r16, r20
    28e4:	05 c0       	rjmp	.+10     	; 0x28f0 <draw_string+0x1a>
    28e6:	61 2f       	mov	r22, r17
    28e8:	40 2f       	mov	r20, r16
    28ea:	a5 df       	rcall	.-182    	; 0x2836 <draw_character>
    28ec:	21 96       	adiw	r28, 0x01	; 1
    28ee:	1b 5f       	subi	r17, 0xFB	; 251
    28f0:	88 81       	ld	r24, Y
    28f2:	88 23       	and	r24, r24
    28f4:	c1 f7       	brne	.-16     	; 0x28e6 <draw_string+0x10>
    28f6:	df 91       	pop	r29
    28f8:	cf 91       	pop	r28
    28fa:	1f 91       	pop	r17
    28fc:	0f 91       	pop	r16
    28fe:	08 95       	ret

00002900 <refresh>:
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	60 e0       	ldi	r22, 0x00	; 0
    2908:	55 d0       	rcall	.+170    	; 0x29b4 <LCDPosition>
    290a:	c2 ef       	ldi	r28, 0xF2	; 242
    290c:	d1 e0       	ldi	r29, 0x01	; 1
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	69 91       	ld	r22, Y+
    2912:	07 d0       	rcall	.+14     	; 0x2922 <LCDWrite>
    2914:	83 e0       	ldi	r24, 0x03	; 3
    2916:	ca 3e       	cpi	r28, 0xEA	; 234
    2918:	d8 07       	cpc	r29, r24
    291a:	c9 f7       	brne	.-14     	; 0x290e <refresh+0xe>
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	08 95       	ret

00002922 <LCDWrite>:
    2922:	95 b1       	in	r25, 0x05	; 5
    2924:	82 95       	swap	r24
    2926:	88 0f       	add	r24, r24
    2928:	80 7e       	andi	r24, 0xE0	; 224
    292a:	9f 7d       	andi	r25, 0xDF	; 223
    292c:	98 2b       	or	r25, r24
    292e:	95 b9       	out	0x05, r25	; 5
    2930:	5f 98       	cbi	0x0b, 7	; 11
    2932:	27 e0       	ldi	r18, 0x07	; 7
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	70 e0       	ldi	r23, 0x00	; 0
    2938:	8f 98       	cbi	0x11, 7	; 17
    293a:	cb 01       	movw	r24, r22
    293c:	02 2e       	mov	r0, r18
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <LCDWrite+0x22>
    2940:	95 95       	asr	r25
    2942:	87 95       	ror	r24
    2944:	0a 94       	dec	r0
    2946:	e2 f7       	brpl	.-8      	; 0x2940 <LCDWrite+0x1e>
    2948:	80 ff       	sbrs	r24, 0
    294a:	02 c0       	rjmp	.+4      	; 0x2950 <LCDWrite+0x2e>
    294c:	2e 9a       	sbi	0x05, 6	; 5
    294e:	01 c0       	rjmp	.+2      	; 0x2952 <LCDWrite+0x30>
    2950:	2e 98       	cbi	0x05, 6	; 5
    2952:	8f 9a       	sbi	0x11, 7	; 17
    2954:	21 50       	subi	r18, 0x01	; 1
    2956:	30 40       	sbci	r19, 0x00	; 0
    2958:	8f ef       	ldi	r24, 0xFF	; 255
    295a:	2f 3f       	cpi	r18, 0xFF	; 255
    295c:	38 07       	cpc	r19, r24
    295e:	61 f7       	brne	.-40     	; 0x2938 <LCDWrite+0x16>
    2960:	5f 9a       	sbi	0x0b, 7	; 11
    2962:	08 95       	ret

00002964 <LCDInitialise>:
    2964:	1f 93       	push	r17
    2966:	18 2f       	mov	r17, r24
    2968:	57 9a       	sbi	0x0a, 7	; 10
    296a:	24 9a       	sbi	0x04, 4	; 4
    296c:	25 9a       	sbi	0x04, 5	; 4
    296e:	26 9a       	sbi	0x04, 6	; 4
    2970:	87 9a       	sbi	0x10, 7	; 16
    2972:	2c 98       	cbi	0x05, 4	; 5
    2974:	5f 9a       	sbi	0x0b, 7	; 11
    2976:	2c 9a       	sbi	0x05, 4	; 5
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	61 e2       	ldi	r22, 0x21	; 33
    297c:	d2 df       	rcall	.-92     	; 0x2922 <LCDWrite>
    297e:	10 68       	ori	r17, 0x80	; 128
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	61 2f       	mov	r22, r17
    2984:	ce df       	rcall	.-100    	; 0x2922 <LCDWrite>
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	64 e0       	ldi	r22, 0x04	; 4
    298a:	cb df       	rcall	.-106    	; 0x2922 <LCDWrite>
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	63 e1       	ldi	r22, 0x13	; 19
    2990:	c8 df       	rcall	.-112    	; 0x2922 <LCDWrite>
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	6c e0       	ldi	r22, 0x0C	; 12
    2996:	c5 df       	rcall	.-118    	; 0x2922 <LCDWrite>
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	60 e2       	ldi	r22, 0x20	; 32
    299c:	c2 df       	rcall	.-124    	; 0x2922 <LCDWrite>
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	6c e0       	ldi	r22, 0x0C	; 12
    29a2:	bf df       	rcall	.-130    	; 0x2922 <LCDWrite>
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	60 e4       	ldi	r22, 0x40	; 64
    29a8:	bc df       	rcall	.-136    	; 0x2922 <LCDWrite>
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	60 e8       	ldi	r22, 0x80	; 128
    29ae:	b9 df       	rcall	.-142    	; 0x2922 <LCDWrite>
    29b0:	1f 91       	pop	r17
    29b2:	08 95       	ret

000029b4 <LCDPosition>:
    29b4:	1f 93       	push	r17
    29b6:	18 2f       	mov	r17, r24
    29b8:	60 64       	ori	r22, 0x40	; 64
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	b2 df       	rcall	.-156    	; 0x2922 <LCDWrite>
    29be:	10 68       	ori	r17, 0x80	; 128
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	61 2f       	mov	r22, r17
    29c4:	ae df       	rcall	.-164    	; 0x2922 <LCDWrite>
    29c6:	1f 91       	pop	r17
    29c8:	08 95       	ret

000029ca <init_sprite>:
    29ca:	8f 92       	push	r8
    29cc:	9f 92       	push	r9
    29ce:	af 92       	push	r10
    29d0:	bf 92       	push	r11
    29d2:	cf 92       	push	r12
    29d4:	df 92       	push	r13
    29d6:	ef 92       	push	r14
    29d8:	ff 92       	push	r15
    29da:	0f 93       	push	r16
    29dc:	1f 93       	push	r17
    29de:	4c 01       	movw	r8, r24
    29e0:	a4 2e       	mov	r10, r20
    29e2:	12 2f       	mov	r17, r18
    29e4:	70 e0       	ldi	r23, 0x00	; 0
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	4d dc       	rcall	.-1894   	; 0x2286 <__floatunsisf>
    29ec:	f4 01       	movw	r30, r8
    29ee:	60 83       	st	Z, r22
    29f0:	71 83       	std	Z+1, r23	; 0x01
    29f2:	82 83       	std	Z+2, r24	; 0x02
    29f4:	93 83       	std	Z+3, r25	; 0x03
    29f6:	bb 24       	eor	r11, r11
    29f8:	cc 24       	eor	r12, r12
    29fa:	dd 24       	eor	r13, r13
    29fc:	c6 01       	movw	r24, r12
    29fe:	b5 01       	movw	r22, r10
    2a00:	42 dc       	rcall	.-1916   	; 0x2286 <__floatunsisf>
    2a02:	f4 01       	movw	r30, r8
    2a04:	64 83       	std	Z+4, r22	; 0x04
    2a06:	75 83       	std	Z+5, r23	; 0x05
    2a08:	86 83       	std	Z+6, r24	; 0x06
    2a0a:	97 83       	std	Z+7, r25	; 0x07
    2a0c:	10 87       	std	Z+8, r17	; 0x08
    2a0e:	01 87       	std	Z+9, r16	; 0x09
    2a10:	f4 86       	std	Z+12, r15	; 0x0c
    2a12:	e3 86       	std	Z+11, r14	; 0x0b
    2a14:	1f 91       	pop	r17
    2a16:	0f 91       	pop	r16
    2a18:	ff 90       	pop	r15
    2a1a:	ef 90       	pop	r14
    2a1c:	df 90       	pop	r13
    2a1e:	cf 90       	pop	r12
    2a20:	bf 90       	pop	r11
    2a22:	af 90       	pop	r10
    2a24:	9f 90       	pop	r9
    2a26:	8f 90       	pop	r8
    2a28:	08 95       	ret

00002a2a <draw_sprite>:
    2a2a:	2f 92       	push	r2
    2a2c:	3f 92       	push	r3
    2a2e:	4f 92       	push	r4
    2a30:	5f 92       	push	r5
    2a32:	7f 92       	push	r7
    2a34:	8f 92       	push	r8
    2a36:	9f 92       	push	r9
    2a38:	af 92       	push	r10
    2a3a:	bf 92       	push	r11
    2a3c:	cf 92       	push	r12
    2a3e:	df 92       	push	r13
    2a40:	ef 92       	push	r14
    2a42:	ff 92       	push	r15
    2a44:	0f 93       	push	r16
    2a46:	1f 93       	push	r17
    2a48:	df 93       	push	r29
    2a4a:	cf 93       	push	r28
    2a4c:	00 d0       	rcall	.+0      	; 0x2a4e <draw_sprite+0x24>
    2a4e:	00 d0       	rcall	.+0      	; 0x2a50 <draw_sprite+0x26>
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	2c 01       	movw	r4, r24
    2a56:	dc 01       	movw	r26, r24
    2a58:	1a 96       	adiw	r26, 0x0a	; 10
    2a5a:	8c 91       	ld	r24, X
    2a5c:	88 23       	and	r24, r24
    2a5e:	09 f4       	brne	.+2      	; 0x2a62 <draw_sprite+0x38>
    2a60:	96 c0       	rjmp	.+300    	; 0x2b8e <draw_sprite+0x164>
    2a62:	22 24       	eor	r2, r2
    2a64:	33 24       	eor	r3, r3
    2a66:	1a 82       	std	Y+2, r1	; 0x02
    2a68:	19 82       	std	Y+1, r1	; 0x01
    2a6a:	87 c0       	rjmp	.+270    	; 0x2b7a <draw_sprite+0x150>
    2a6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a70:	bf 01       	movw	r22, r30
    2a72:	88 27       	eor	r24, r24
    2a74:	77 fd       	sbrc	r23, 7
    2a76:	80 95       	com	r24
    2a78:	98 2f       	mov	r25, r24
    2a7a:	07 dc       	rcall	.-2034   	; 0x228a <__floatsisf>
    2a7c:	d2 01       	movw	r26, r4
    2a7e:	14 96       	adiw	r26, 0x04	; 4
    2a80:	2d 91       	ld	r18, X+
    2a82:	3d 91       	ld	r19, X+
    2a84:	4d 91       	ld	r20, X+
    2a86:	5c 91       	ld	r21, X
    2a88:	17 97       	sbiw	r26, 0x07	; 7
    2a8a:	64 db       	rcall	.-2360   	; 0x2154 <__addsf3>
    2a8c:	5b 01       	movw	r10, r22
    2a8e:	6c 01       	movw	r12, r24
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	40 e0       	ldi	r20, 0x00	; 0
    2a96:	50 e0       	ldi	r21, 0x00	; 0
    2a98:	c1 db       	rcall	.-2174   	; 0x221c <__cmpsf2>
    2a9a:	87 fd       	sbrc	r24, 7
    2a9c:	68 c0       	rjmp	.+208    	; 0x2b6e <draw_sprite+0x144>
    2a9e:	c6 01       	movw	r24, r12
    2aa0:	b5 01       	movw	r22, r10
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e4       	ldi	r20, 0x40	; 64
    2aa8:	52 e4       	ldi	r21, 0x42	; 66
    2aaa:	9f dc       	rcall	.-1730   	; 0x23ea <__gesf2>
    2aac:	87 ff       	sbrs	r24, 7
    2aae:	6f c0       	rjmp	.+222    	; 0x2b8e <draw_sprite+0x164>
    2ab0:	1c 82       	std	Y+4, r1	; 0x04
    2ab2:	1b 82       	std	Y+3, r1	; 0x03
    2ab4:	45 c0       	rjmp	.+138    	; 0x2b40 <draw_sprite+0x116>
    2ab6:	d2 01       	movw	r26, r4
    2ab8:	1b 96       	adiw	r26, 0x0b	; 11
    2aba:	ed 91       	ld	r30, X+
    2abc:	fc 91       	ld	r31, X
    2abe:	1c 97       	sbiw	r26, 0x0c	; 12
    2ac0:	e2 0d       	add	r30, r2
    2ac2:	f3 1d       	adc	r31, r3
    2ac4:	70 80       	ld	r7, Z
    2ac6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ac8:	fc 81       	ldd	r31, Y+4	; 0x04
    2aca:	bf 01       	movw	r22, r30
    2acc:	88 27       	eor	r24, r24
    2ace:	77 fd       	sbrc	r23, 7
    2ad0:	80 95       	com	r24
    2ad2:	98 2f       	mov	r25, r24
    2ad4:	da db       	rcall	.-2124   	; 0x228a <__floatsisf>
    2ad6:	d2 01       	movw	r26, r4
    2ad8:	2d 91       	ld	r18, X+
    2ada:	3d 91       	ld	r19, X+
    2adc:	4d 91       	ld	r20, X+
    2ade:	5c 91       	ld	r21, X
    2ae0:	39 db       	rcall	.-2446   	; 0x2154 <__addsf3>
    2ae2:	7b 01       	movw	r14, r22
    2ae4:	8c 01       	movw	r16, r24
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	40 e0       	ldi	r20, 0x00	; 0
    2aec:	50 e0       	ldi	r21, 0x00	; 0
    2aee:	7d dc       	rcall	.-1798   	; 0x23ea <__gesf2>
    2af0:	88 23       	and	r24, r24
    2af2:	cc f0       	brlt	.+50     	; 0x2b26 <draw_sprite+0xfc>
    2af4:	c8 01       	movw	r24, r16
    2af6:	b7 01       	movw	r22, r14
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	48 ea       	ldi	r20, 0xA8	; 168
    2afe:	52 e4       	ldi	r21, 0x42	; 66
    2b00:	8d db       	rcall	.-2278   	; 0x221c <__cmpsf2>
    2b02:	88 23       	and	r24, r24
    2b04:	84 f4       	brge	.+32     	; 0x2b26 <draw_sprite+0xfc>
    2b06:	78 20       	and	r7, r8
    2b08:	71 f0       	breq	.+28     	; 0x2b26 <draw_sprite+0xfc>
    2b0a:	c8 01       	movw	r24, r16
    2b0c:	b7 01       	movw	r22, r14
    2b0e:	8f db       	rcall	.-2274   	; 0x222e <__fixunssfsi>
    2b10:	7b 01       	movw	r14, r22
    2b12:	8c 01       	movw	r16, r24
    2b14:	c6 01       	movw	r24, r12
    2b16:	b5 01       	movw	r22, r10
    2b18:	8a db       	rcall	.-2284   	; 0x222e <__fixunssfsi>
    2b1a:	9b 01       	movw	r18, r22
    2b1c:	ac 01       	movw	r20, r24
    2b1e:	8e 2d       	mov	r24, r14
    2b20:	62 2f       	mov	r22, r18
    2b22:	41 e0       	ldi	r20, 0x01	; 1
    2b24:	6e dc       	rcall	.-1828   	; 0x2402 <set_pixel>
    2b26:	eb 81       	ldd	r30, Y+3	; 0x03
    2b28:	fc 81       	ldd	r31, Y+4	; 0x04
    2b2a:	31 96       	adiw	r30, 0x01	; 1
    2b2c:	fc 83       	std	Y+4, r31	; 0x04
    2b2e:	eb 83       	std	Y+3, r30	; 0x03
    2b30:	cf 01       	movw	r24, r30
    2b32:	87 70       	andi	r24, 0x07	; 7
    2b34:	90 70       	andi	r25, 0x00	; 0
    2b36:	89 2b       	or	r24, r25
    2b38:	39 f4       	brne	.+14     	; 0x2b48 <draw_sprite+0x11e>
    2b3a:	08 94       	sec
    2b3c:	21 1c       	adc	r2, r1
    2b3e:	31 1c       	adc	r3, r1
    2b40:	90 e8       	ldi	r25, 0x80	; 128
    2b42:	89 2e       	mov	r8, r25
    2b44:	91 2c       	mov	r9, r1
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <draw_sprite+0x122>
    2b48:	95 94       	asr	r9
    2b4a:	87 94       	ror	r8
    2b4c:	d2 01       	movw	r26, r4
    2b4e:	18 96       	adiw	r26, 0x08	; 8
    2b50:	8c 91       	ld	r24, X
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	eb 81       	ldd	r30, Y+3	; 0x03
    2b56:	fc 81       	ldd	r31, Y+4	; 0x04
    2b58:	e8 17       	cp	r30, r24
    2b5a:	f9 07       	cpc	r31, r25
    2b5c:	0c f4       	brge	.+2      	; 0x2b60 <draw_sprite+0x136>
    2b5e:	ab cf       	rjmp	.-170    	; 0x2ab6 <draw_sprite+0x8c>
    2b60:	87 70       	andi	r24, 0x07	; 7
    2b62:	90 70       	andi	r25, 0x00	; 0
    2b64:	89 2b       	or	r24, r25
    2b66:	19 f0       	breq	.+6      	; 0x2b6e <draw_sprite+0x144>
    2b68:	08 94       	sec
    2b6a:	21 1c       	adc	r2, r1
    2b6c:	31 1c       	adc	r3, r1
    2b6e:	29 81       	ldd	r18, Y+1	; 0x01
    2b70:	3a 81       	ldd	r19, Y+2	; 0x02
    2b72:	2f 5f       	subi	r18, 0xFF	; 255
    2b74:	3f 4f       	sbci	r19, 0xFF	; 255
    2b76:	3a 83       	std	Y+2, r19	; 0x02
    2b78:	29 83       	std	Y+1, r18	; 0x01
    2b7a:	d2 01       	movw	r26, r4
    2b7c:	19 96       	adiw	r26, 0x09	; 9
    2b7e:	8c 91       	ld	r24, X
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	e9 81       	ldd	r30, Y+1	; 0x01
    2b84:	fa 81       	ldd	r31, Y+2	; 0x02
    2b86:	e8 17       	cp	r30, r24
    2b88:	f9 07       	cpc	r31, r25
    2b8a:	0c f4       	brge	.+2      	; 0x2b8e <draw_sprite+0x164>
    2b8c:	6f cf       	rjmp	.-290    	; 0x2a6c <draw_sprite+0x42>
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	0f 90       	pop	r0
    2b96:	cf 91       	pop	r28
    2b98:	df 91       	pop	r29
    2b9a:	1f 91       	pop	r17
    2b9c:	0f 91       	pop	r16
    2b9e:	ff 90       	pop	r15
    2ba0:	ef 90       	pop	r14
    2ba2:	df 90       	pop	r13
    2ba4:	cf 90       	pop	r12
    2ba6:	bf 90       	pop	r11
    2ba8:	af 90       	pop	r10
    2baa:	9f 90       	pop	r9
    2bac:	8f 90       	pop	r8
    2bae:	7f 90       	pop	r7
    2bb0:	5f 90       	pop	r5
    2bb2:	4f 90       	pop	r4
    2bb4:	3f 90       	pop	r3
    2bb6:	2f 90       	pop	r2
    2bb8:	08 95       	ret

00002bba <__divmodhi4>:
    2bba:	97 fb       	bst	r25, 7
    2bbc:	09 2e       	mov	r0, r25
    2bbe:	07 26       	eor	r0, r23
    2bc0:	0a d0       	rcall	.+20     	; 0x2bd6 <__divmodhi4_neg1>
    2bc2:	77 fd       	sbrc	r23, 7
    2bc4:	04 d0       	rcall	.+8      	; 0x2bce <__divmodhi4_neg2>
    2bc6:	0c d0       	rcall	.+24     	; 0x2be0 <__udivmodhi4>
    2bc8:	06 d0       	rcall	.+12     	; 0x2bd6 <__divmodhi4_neg1>
    2bca:	00 20       	and	r0, r0
    2bcc:	1a f4       	brpl	.+6      	; 0x2bd4 <__divmodhi4_exit>

00002bce <__divmodhi4_neg2>:
    2bce:	70 95       	com	r23
    2bd0:	61 95       	neg	r22
    2bd2:	7f 4f       	sbci	r23, 0xFF	; 255

00002bd4 <__divmodhi4_exit>:
    2bd4:	08 95       	ret

00002bd6 <__divmodhi4_neg1>:
    2bd6:	f6 f7       	brtc	.-4      	; 0x2bd4 <__divmodhi4_exit>
    2bd8:	90 95       	com	r25
    2bda:	81 95       	neg	r24
    2bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bde:	08 95       	ret

00002be0 <__udivmodhi4>:
    2be0:	aa 1b       	sub	r26, r26
    2be2:	bb 1b       	sub	r27, r27
    2be4:	51 e1       	ldi	r21, 0x11	; 17
    2be6:	07 c0       	rjmp	.+14     	; 0x2bf6 <__udivmodhi4_ep>

00002be8 <__udivmodhi4_loop>:
    2be8:	aa 1f       	adc	r26, r26
    2bea:	bb 1f       	adc	r27, r27
    2bec:	a6 17       	cp	r26, r22
    2bee:	b7 07       	cpc	r27, r23
    2bf0:	10 f0       	brcs	.+4      	; 0x2bf6 <__udivmodhi4_ep>
    2bf2:	a6 1b       	sub	r26, r22
    2bf4:	b7 0b       	sbc	r27, r23

00002bf6 <__udivmodhi4_ep>:
    2bf6:	88 1f       	adc	r24, r24
    2bf8:	99 1f       	adc	r25, r25
    2bfa:	5a 95       	dec	r21
    2bfc:	a9 f7       	brne	.-22     	; 0x2be8 <__udivmodhi4_loop>
    2bfe:	80 95       	com	r24
    2c00:	90 95       	com	r25
    2c02:	bc 01       	movw	r22, r24
    2c04:	cd 01       	movw	r24, r26
    2c06:	08 95       	ret

00002c08 <__prologue_saves__>:
    2c08:	2f 92       	push	r2
    2c0a:	3f 92       	push	r3
    2c0c:	4f 92       	push	r4
    2c0e:	5f 92       	push	r5
    2c10:	6f 92       	push	r6
    2c12:	7f 92       	push	r7
    2c14:	8f 92       	push	r8
    2c16:	9f 92       	push	r9
    2c18:	af 92       	push	r10
    2c1a:	bf 92       	push	r11
    2c1c:	cf 92       	push	r12
    2c1e:	df 92       	push	r13
    2c20:	ef 92       	push	r14
    2c22:	ff 92       	push	r15
    2c24:	0f 93       	push	r16
    2c26:	1f 93       	push	r17
    2c28:	cf 93       	push	r28
    2c2a:	df 93       	push	r29
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
    2c30:	ca 1b       	sub	r28, r26
    2c32:	db 0b       	sbc	r29, r27
    2c34:	0f b6       	in	r0, 0x3f	; 63
    2c36:	f8 94       	cli
    2c38:	de bf       	out	0x3e, r29	; 62
    2c3a:	0f be       	out	0x3f, r0	; 63
    2c3c:	cd bf       	out	0x3d, r28	; 61
    2c3e:	09 94       	ijmp

00002c40 <__epilogue_restores__>:
    2c40:	2a 88       	ldd	r2, Y+18	; 0x12
    2c42:	39 88       	ldd	r3, Y+17	; 0x11
    2c44:	48 88       	ldd	r4, Y+16	; 0x10
    2c46:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c48:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c50:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c52:	b9 84       	ldd	r11, Y+9	; 0x09
    2c54:	c8 84       	ldd	r12, Y+8	; 0x08
    2c56:	df 80       	ldd	r13, Y+7	; 0x07
    2c58:	ee 80       	ldd	r14, Y+6	; 0x06
    2c5a:	fd 80       	ldd	r15, Y+5	; 0x05
    2c5c:	0c 81       	ldd	r16, Y+4	; 0x04
    2c5e:	1b 81       	ldd	r17, Y+3	; 0x03
    2c60:	aa 81       	ldd	r26, Y+2	; 0x02
    2c62:	b9 81       	ldd	r27, Y+1	; 0x01
    2c64:	ce 0f       	add	r28, r30
    2c66:	d1 1d       	adc	r29, r1
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	ed 01       	movw	r28, r26
    2c74:	08 95       	ret

00002c76 <do_rand>:
    2c76:	a0 e0       	ldi	r26, 0x00	; 0
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	e0 e4       	ldi	r30, 0x40	; 64
    2c7c:	f6 e1       	ldi	r31, 0x16	; 22
    2c7e:	cc cf       	rjmp	.-104    	; 0x2c18 <__prologue_saves__+0x10>
    2c80:	ec 01       	movw	r28, r24
    2c82:	a8 80       	ld	r10, Y
    2c84:	b9 80       	ldd	r11, Y+1	; 0x01
    2c86:	ca 80       	ldd	r12, Y+2	; 0x02
    2c88:	db 80       	ldd	r13, Y+3	; 0x03
    2c8a:	a1 14       	cp	r10, r1
    2c8c:	b1 04       	cpc	r11, r1
    2c8e:	c1 04       	cpc	r12, r1
    2c90:	d1 04       	cpc	r13, r1
    2c92:	41 f4       	brne	.+16     	; 0x2ca4 <do_rand+0x2e>
    2c94:	84 e2       	ldi	r24, 0x24	; 36
    2c96:	a8 2e       	mov	r10, r24
    2c98:	89 ed       	ldi	r24, 0xD9	; 217
    2c9a:	b8 2e       	mov	r11, r24
    2c9c:	8b e5       	ldi	r24, 0x5B	; 91
    2c9e:	c8 2e       	mov	r12, r24
    2ca0:	87 e0       	ldi	r24, 0x07	; 7
    2ca2:	d8 2e       	mov	r13, r24
    2ca4:	c6 01       	movw	r24, r12
    2ca6:	b5 01       	movw	r22, r10
    2ca8:	2d e1       	ldi	r18, 0x1D	; 29
    2caa:	33 ef       	ldi	r19, 0xF3	; 243
    2cac:	41 e0       	ldi	r20, 0x01	; 1
    2cae:	50 e0       	ldi	r21, 0x00	; 0
    2cb0:	58 d0       	rcall	.+176    	; 0x2d62 <__divmodsi4>
    2cb2:	27 ea       	ldi	r18, 0xA7	; 167
    2cb4:	31 e4       	ldi	r19, 0x41	; 65
    2cb6:	40 e0       	ldi	r20, 0x00	; 0
    2cb8:	50 e0       	ldi	r21, 0x00	; 0
    2cba:	34 d0       	rcall	.+104    	; 0x2d24 <__mulsi3>
    2cbc:	7b 01       	movw	r14, r22
    2cbe:	8c 01       	movw	r16, r24
    2cc0:	c6 01       	movw	r24, r12
    2cc2:	b5 01       	movw	r22, r10
    2cc4:	2d e1       	ldi	r18, 0x1D	; 29
    2cc6:	33 ef       	ldi	r19, 0xF3	; 243
    2cc8:	41 e0       	ldi	r20, 0x01	; 1
    2cca:	50 e0       	ldi	r21, 0x00	; 0
    2ccc:	4a d0       	rcall	.+148    	; 0x2d62 <__divmodsi4>
    2cce:	ca 01       	movw	r24, r20
    2cd0:	b9 01       	movw	r22, r18
    2cd2:	2c ee       	ldi	r18, 0xEC	; 236
    2cd4:	34 ef       	ldi	r19, 0xF4	; 244
    2cd6:	4f ef       	ldi	r20, 0xFF	; 255
    2cd8:	5f ef       	ldi	r21, 0xFF	; 255
    2cda:	24 d0       	rcall	.+72     	; 0x2d24 <__mulsi3>
    2cdc:	6e 0d       	add	r22, r14
    2cde:	7f 1d       	adc	r23, r15
    2ce0:	80 1f       	adc	r24, r16
    2ce2:	91 1f       	adc	r25, r17
    2ce4:	97 ff       	sbrs	r25, 7
    2ce6:	04 c0       	rjmp	.+8      	; 0x2cf0 <do_rand+0x7a>
    2ce8:	61 50       	subi	r22, 0x01	; 1
    2cea:	70 40       	sbci	r23, 0x00	; 0
    2cec:	80 40       	sbci	r24, 0x00	; 0
    2cee:	90 48       	sbci	r25, 0x80	; 128
    2cf0:	68 83       	st	Y, r22
    2cf2:	79 83       	std	Y+1, r23	; 0x01
    2cf4:	8a 83       	std	Y+2, r24	; 0x02
    2cf6:	9b 83       	std	Y+3, r25	; 0x03
    2cf8:	9b 01       	movw	r18, r22
    2cfa:	3f 77       	andi	r19, 0x7F	; 127
    2cfc:	c9 01       	movw	r24, r18
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	ea e0       	ldi	r30, 0x0A	; 10
    2d04:	a5 cf       	rjmp	.-182    	; 0x2c50 <__epilogue_restores__+0x10>

00002d06 <rand_r>:
    2d06:	b7 cf       	rjmp	.-146    	; 0x2c76 <do_rand>

00002d08 <rand>:
    2d08:	8b ea       	ldi	r24, 0xAB	; 171
    2d0a:	91 e0       	ldi	r25, 0x01	; 1
    2d0c:	b4 cf       	rjmp	.-152    	; 0x2c76 <do_rand>

00002d0e <srand>:
    2d0e:	a0 e0       	ldi	r26, 0x00	; 0
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	80 93 ab 01 	sts	0x01AB, r24
    2d16:	90 93 ac 01 	sts	0x01AC, r25
    2d1a:	a0 93 ad 01 	sts	0x01AD, r26
    2d1e:	b0 93 ae 01 	sts	0x01AE, r27
    2d22:	08 95       	ret

00002d24 <__mulsi3>:
    2d24:	62 9f       	mul	r22, r18
    2d26:	d0 01       	movw	r26, r0
    2d28:	73 9f       	mul	r23, r19
    2d2a:	f0 01       	movw	r30, r0
    2d2c:	82 9f       	mul	r24, r18
    2d2e:	e0 0d       	add	r30, r0
    2d30:	f1 1d       	adc	r31, r1
    2d32:	64 9f       	mul	r22, r20
    2d34:	e0 0d       	add	r30, r0
    2d36:	f1 1d       	adc	r31, r1
    2d38:	92 9f       	mul	r25, r18
    2d3a:	f0 0d       	add	r31, r0
    2d3c:	83 9f       	mul	r24, r19
    2d3e:	f0 0d       	add	r31, r0
    2d40:	74 9f       	mul	r23, r20
    2d42:	f0 0d       	add	r31, r0
    2d44:	65 9f       	mul	r22, r21
    2d46:	f0 0d       	add	r31, r0
    2d48:	99 27       	eor	r25, r25
    2d4a:	72 9f       	mul	r23, r18
    2d4c:	b0 0d       	add	r27, r0
    2d4e:	e1 1d       	adc	r30, r1
    2d50:	f9 1f       	adc	r31, r25
    2d52:	63 9f       	mul	r22, r19
    2d54:	b0 0d       	add	r27, r0
    2d56:	e1 1d       	adc	r30, r1
    2d58:	f9 1f       	adc	r31, r25
    2d5a:	bd 01       	movw	r22, r26
    2d5c:	cf 01       	movw	r24, r30
    2d5e:	11 24       	eor	r1, r1
    2d60:	08 95       	ret

00002d62 <__divmodsi4>:
    2d62:	97 fb       	bst	r25, 7
    2d64:	09 2e       	mov	r0, r25
    2d66:	05 26       	eor	r0, r21
    2d68:	0e d0       	rcall	.+28     	; 0x2d86 <__divmodsi4_neg1>
    2d6a:	57 fd       	sbrc	r21, 7
    2d6c:	04 d0       	rcall	.+8      	; 0x2d76 <__divmodsi4_neg2>
    2d6e:	14 d0       	rcall	.+40     	; 0x2d98 <__udivmodsi4>
    2d70:	0a d0       	rcall	.+20     	; 0x2d86 <__divmodsi4_neg1>
    2d72:	00 1c       	adc	r0, r0
    2d74:	38 f4       	brcc	.+14     	; 0x2d84 <__divmodsi4_exit>

00002d76 <__divmodsi4_neg2>:
    2d76:	50 95       	com	r21
    2d78:	40 95       	com	r20
    2d7a:	30 95       	com	r19
    2d7c:	21 95       	neg	r18
    2d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d80:	4f 4f       	sbci	r20, 0xFF	; 255
    2d82:	5f 4f       	sbci	r21, 0xFF	; 255

00002d84 <__divmodsi4_exit>:
    2d84:	08 95       	ret

00002d86 <__divmodsi4_neg1>:
    2d86:	f6 f7       	brtc	.-4      	; 0x2d84 <__divmodsi4_exit>
    2d88:	90 95       	com	r25
    2d8a:	80 95       	com	r24
    2d8c:	70 95       	com	r23
    2d8e:	61 95       	neg	r22
    2d90:	7f 4f       	sbci	r23, 0xFF	; 255
    2d92:	8f 4f       	sbci	r24, 0xFF	; 255
    2d94:	9f 4f       	sbci	r25, 0xFF	; 255
    2d96:	08 95       	ret

00002d98 <__udivmodsi4>:
    2d98:	a1 e2       	ldi	r26, 0x21	; 33
    2d9a:	1a 2e       	mov	r1, r26
    2d9c:	aa 1b       	sub	r26, r26
    2d9e:	bb 1b       	sub	r27, r27
    2da0:	fd 01       	movw	r30, r26
    2da2:	0d c0       	rjmp	.+26     	; 0x2dbe <__udivmodsi4_ep>

00002da4 <__udivmodsi4_loop>:
    2da4:	aa 1f       	adc	r26, r26
    2da6:	bb 1f       	adc	r27, r27
    2da8:	ee 1f       	adc	r30, r30
    2daa:	ff 1f       	adc	r31, r31
    2dac:	a2 17       	cp	r26, r18
    2dae:	b3 07       	cpc	r27, r19
    2db0:	e4 07       	cpc	r30, r20
    2db2:	f5 07       	cpc	r31, r21
    2db4:	20 f0       	brcs	.+8      	; 0x2dbe <__udivmodsi4_ep>
    2db6:	a2 1b       	sub	r26, r18
    2db8:	b3 0b       	sbc	r27, r19
    2dba:	e4 0b       	sbc	r30, r20
    2dbc:	f5 0b       	sbc	r31, r21

00002dbe <__udivmodsi4_ep>:
    2dbe:	66 1f       	adc	r22, r22
    2dc0:	77 1f       	adc	r23, r23
    2dc2:	88 1f       	adc	r24, r24
    2dc4:	99 1f       	adc	r25, r25
    2dc6:	1a 94       	dec	r1
    2dc8:	69 f7       	brne	.-38     	; 0x2da4 <__udivmodsi4_loop>
    2dca:	60 95       	com	r22
    2dcc:	70 95       	com	r23
    2dce:	80 95       	com	r24
    2dd0:	90 95       	com	r25
    2dd2:	9b 01       	movw	r18, r22
    2dd4:	ac 01       	movw	r20, r24
    2dd6:	bd 01       	movw	r22, r26
    2dd8:	cf 01       	movw	r24, r30
    2dda:	08 95       	ret

00002ddc <_exit>:
    2ddc:	f8 94       	cli

00002dde <__stop_program>:
    2dde:	ff cf       	rjmp	.-2      	; 0x2dde <__stop_program>
