
solution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00002792  00002826  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002792  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000230  00800196  00800196  000028bc  2**0
                  ALLOC
  3 .debug_aranges 000001f0  00000000  00000000  000028bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004ac  00000000  00000000  00002aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022ae  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d8a  00000000  00000000  00005206  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001aa7  00000000  00000000  00005f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  00007a38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e7  00000000  00000000  00007d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014eb  00000000  00000000  000083ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000260  00000000  00000000  000098ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c1       	rjmp	.+650    	; 0x28c <__ctors_end>
       2:	00 00       	nop
       4:	60 c1       	rjmp	.+704    	; 0x2c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c1       	rjmp	.+700    	; 0x2c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c1       	rjmp	.+696    	; 0x2c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c1       	rjmp	.+692    	; 0x2c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c1       	rjmp	.+688    	; 0x2c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c1       	rjmp	.+684    	; 0x2c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c1       	rjmp	.+680    	; 0x2c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c1       	rjmp	.+676    	; 0x2c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	81 c4       	rjmp	.+2306   	; 0x928 <__vector_9>
      26:	00 00       	nop
      28:	4e c1       	rjmp	.+668    	; 0x2c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c1       	rjmp	.+664    	; 0x2c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c1       	rjmp	.+660    	; 0x2c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c1       	rjmp	.+656    	; 0x2c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c1       	rjmp	.+652    	; 0x2c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c1       	rjmp	.+648    	; 0x2c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c1       	rjmp	.+644    	; 0x2c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c1       	rjmp	.+640    	; 0x2c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c1       	rjmp	.+636    	; 0x2c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c1       	rjmp	.+632    	; 0x2c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c1       	rjmp	.+628    	; 0x2c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c1       	rjmp	.+624    	; 0x2c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c1       	rjmp	.+620    	; 0x2c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__vector_23>
      60:	32 c1       	rjmp	.+612    	; 0x2c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c1       	rjmp	.+608    	; 0x2c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c1       	rjmp	.+604    	; 0x2c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c1       	rjmp	.+600    	; 0x2c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c1       	rjmp	.+596    	; 0x2c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c1       	rjmp	.+592    	; 0x2c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c1       	rjmp	.+588    	; 0x2c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c1       	rjmp	.+584    	; 0x2c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c1       	rjmp	.+580    	; 0x2c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c1       	rjmp	.+576    	; 0x2c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c1       	rjmp	.+572    	; 0x2c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1c c1       	rjmp	.+568    	; 0x2c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1a c1       	rjmp	.+564    	; 0x2c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	18 c1       	rjmp	.+560    	; 0x2c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	16 c1       	rjmp	.+556    	; 0x2c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	14 c1       	rjmp	.+552    	; 0x2c6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	12 c1       	rjmp	.+548    	; 0x2c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	10 c1       	rjmp	.+544    	; 0x2c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0e c1       	rjmp	.+540    	; 0x2c6 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ASCII>:
      ac:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      bc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      cc:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      dc:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      ec:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      fc:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     10c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     11c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     12c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     13c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     14c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     15c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     16c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     17c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     18c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     19c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1ac:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1bc:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1cc:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1dc:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1ec:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1fc:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     20c:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     21c:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     22c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     23c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     24c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     25c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     26c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     27c:	00 00 41 36 08 00 10 08 08 10 08 78 46 41 46 78     ..A6.......xFAFx

0000028c <__ctors_end>:
     28c:	11 24       	eor	r1, r1
     28e:	1f be       	out	0x3f, r1	; 63
     290:	cf ef       	ldi	r28, 0xFF	; 255
     292:	da e0       	ldi	r29, 0x0A	; 10
     294:	de bf       	out	0x3e, r29	; 62
     296:	cd bf       	out	0x3d, r28	; 61

00000298 <__do_copy_data>:
     298:	11 e0       	ldi	r17, 0x01	; 1
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b1 e0       	ldi	r27, 0x01	; 1
     29e:	e2 e9       	ldi	r30, 0x92	; 146
     2a0:	f7 e2       	ldi	r31, 0x27	; 39
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <.do_copy_data_start>

000002a4 <.do_copy_data_loop>:
     2a4:	05 90       	lpm	r0, Z+
     2a6:	0d 92       	st	X+, r0

000002a8 <.do_copy_data_start>:
     2a8:	a6 39       	cpi	r26, 0x96	; 150
     2aa:	b1 07       	cpc	r27, r17
     2ac:	d9 f7       	brne	.-10     	; 0x2a4 <.do_copy_data_loop>

000002ae <__do_clear_bss>:
     2ae:	13 e0       	ldi	r17, 0x03	; 3
     2b0:	a6 e9       	ldi	r26, 0x96	; 150
     2b2:	b1 e0       	ldi	r27, 0x01	; 1
     2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <.do_clear_bss_start>

000002b6 <.do_clear_bss_loop>:
     2b6:	1d 92       	st	X+, r1

000002b8 <.do_clear_bss_start>:
     2b8:	a6 3c       	cpi	r26, 0xC6	; 198
     2ba:	b1 07       	cpc	r27, r17
     2bc:	e1 f7       	brne	.-8      	; 0x2b6 <.do_clear_bss_loop>
     2be:	0e 94 15 0c 	call	0x182a	; 0x182a <main>
     2c2:	0c 94 c7 13 	jmp	0x278e	; 0x278e <_exit>

000002c6 <__bad_interrupt>:
     2c6:	9c ce       	rjmp	.-712    	; 0x0 <__vectors>

000002c8 <__mulsf3>:
     2c8:	a0 e2       	ldi	r26, 0x20	; 32
     2ca:	b0 e0       	ldi	r27, 0x00	; 0
     2cc:	ea e6       	ldi	r30, 0x6A	; 106
     2ce:	f1 e0       	ldi	r31, 0x01	; 1
     2d0:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__>
     2d4:	69 83       	std	Y+1, r22	; 0x01
     2d6:	7a 83       	std	Y+2, r23	; 0x02
     2d8:	8b 83       	std	Y+3, r24	; 0x03
     2da:	9c 83       	std	Y+4, r25	; 0x04
     2dc:	2d 83       	std	Y+5, r18	; 0x05
     2de:	3e 83       	std	Y+6, r19	; 0x06
     2e0:	4f 83       	std	Y+7, r20	; 0x07
     2e2:	58 87       	std	Y+8, r21	; 0x08
     2e4:	ce 01       	movw	r24, r28
     2e6:	01 96       	adiw	r24, 0x01	; 1
     2e8:	be 01       	movw	r22, r28
     2ea:	67 5f       	subi	r22, 0xF7	; 247
     2ec:	7f 4f       	sbci	r23, 0xFF	; 255
     2ee:	61 d2       	rcall	.+1218   	; 0x7b2 <__unpack_f>
     2f0:	ce 01       	movw	r24, r28
     2f2:	05 96       	adiw	r24, 0x05	; 5
     2f4:	be 01       	movw	r22, r28
     2f6:	6f 5e       	subi	r22, 0xEF	; 239
     2f8:	7f 4f       	sbci	r23, 0xFF	; 255
     2fa:	5b d2       	rcall	.+1206   	; 0x7b2 <__unpack_f>
     2fc:	99 85       	ldd	r25, Y+9	; 0x09
     2fe:	92 30       	cpi	r25, 0x02	; 2
     300:	88 f0       	brcs	.+34     	; 0x324 <__mulsf3+0x5c>
     302:	89 89       	ldd	r24, Y+17	; 0x11
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	c8 f0       	brcs	.+50     	; 0x33a <__mulsf3+0x72>
     308:	94 30       	cpi	r25, 0x04	; 4
     30a:	19 f4       	brne	.+6      	; 0x312 <__mulsf3+0x4a>
     30c:	82 30       	cpi	r24, 0x02	; 2
     30e:	51 f4       	brne	.+20     	; 0x324 <__mulsf3+0x5c>
     310:	04 c0       	rjmp	.+8      	; 0x31a <__mulsf3+0x52>
     312:	84 30       	cpi	r24, 0x04	; 4
     314:	29 f4       	brne	.+10     	; 0x320 <__mulsf3+0x58>
     316:	92 30       	cpi	r25, 0x02	; 2
     318:	81 f4       	brne	.+32     	; 0x33a <__mulsf3+0x72>
     31a:	8a e8       	ldi	r24, 0x8A	; 138
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	c6 c0       	rjmp	.+396    	; 0x4ac <__mulsf3+0x1e4>
     320:	92 30       	cpi	r25, 0x02	; 2
     322:	49 f4       	brne	.+18     	; 0x336 <__mulsf3+0x6e>
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	9a 85       	ldd	r25, Y+10	; 0x0a
     328:	8a 89       	ldd	r24, Y+18	; 0x12
     32a:	98 13       	cpse	r25, r24
     32c:	21 e0       	ldi	r18, 0x01	; 1
     32e:	2a 87       	std	Y+10, r18	; 0x0a
     330:	ce 01       	movw	r24, r28
     332:	09 96       	adiw	r24, 0x09	; 9
     334:	bb c0       	rjmp	.+374    	; 0x4ac <__mulsf3+0x1e4>
     336:	82 30       	cpi	r24, 0x02	; 2
     338:	49 f4       	brne	.+18     	; 0x34c <__mulsf3+0x84>
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	9a 85       	ldd	r25, Y+10	; 0x0a
     33e:	8a 89       	ldd	r24, Y+18	; 0x12
     340:	98 13       	cpse	r25, r24
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	2a 8b       	std	Y+18, r18	; 0x12
     346:	ce 01       	movw	r24, r28
     348:	41 96       	adiw	r24, 0x11	; 17
     34a:	b0 c0       	rjmp	.+352    	; 0x4ac <__mulsf3+0x1e4>
     34c:	2d 84       	ldd	r2, Y+13	; 0x0d
     34e:	3e 84       	ldd	r3, Y+14	; 0x0e
     350:	4f 84       	ldd	r4, Y+15	; 0x0f
     352:	58 88       	ldd	r5, Y+16	; 0x10
     354:	6d 88       	ldd	r6, Y+21	; 0x15
     356:	7e 88       	ldd	r7, Y+22	; 0x16
     358:	8f 88       	ldd	r8, Y+23	; 0x17
     35a:	98 8c       	ldd	r9, Y+24	; 0x18
     35c:	ee 24       	eor	r14, r14
     35e:	ff 24       	eor	r15, r15
     360:	87 01       	movw	r16, r14
     362:	aa 24       	eor	r10, r10
     364:	bb 24       	eor	r11, r11
     366:	65 01       	movw	r12, r10
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	e0 e0       	ldi	r30, 0x00	; 0
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	c1 01       	movw	r24, r2
     376:	81 70       	andi	r24, 0x01	; 1
     378:	90 70       	andi	r25, 0x00	; 0
     37a:	89 2b       	or	r24, r25
     37c:	e9 f0       	breq	.+58     	; 0x3b8 <__mulsf3+0xf0>
     37e:	e6 0c       	add	r14, r6
     380:	f7 1c       	adc	r15, r7
     382:	08 1d       	adc	r16, r8
     384:	19 1d       	adc	r17, r9
     386:	9a 01       	movw	r18, r20
     388:	ab 01       	movw	r20, r22
     38a:	2a 0d       	add	r18, r10
     38c:	3b 1d       	adc	r19, r11
     38e:	4c 1d       	adc	r20, r12
     390:	5d 1d       	adc	r21, r13
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	a0 e0       	ldi	r26, 0x00	; 0
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e6 14       	cp	r14, r6
     39c:	f7 04       	cpc	r15, r7
     39e:	08 05       	cpc	r16, r8
     3a0:	19 05       	cpc	r17, r9
     3a2:	20 f4       	brcc	.+8      	; 0x3ac <__mulsf3+0xe4>
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	a0 e0       	ldi	r26, 0x00	; 0
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	ba 01       	movw	r22, r20
     3ae:	a9 01       	movw	r20, r18
     3b0:	48 0f       	add	r20, r24
     3b2:	59 1f       	adc	r21, r25
     3b4:	6a 1f       	adc	r22, r26
     3b6:	7b 1f       	adc	r23, r27
     3b8:	aa 0c       	add	r10, r10
     3ba:	bb 1c       	adc	r11, r11
     3bc:	cc 1c       	adc	r12, r12
     3be:	dd 1c       	adc	r13, r13
     3c0:	97 fe       	sbrs	r9, 7
     3c2:	08 c0       	rjmp	.+16     	; 0x3d4 <__mulsf3+0x10c>
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	a8 2a       	or	r10, r24
     3ce:	b9 2a       	or	r11, r25
     3d0:	ca 2a       	or	r12, r26
     3d2:	db 2a       	or	r13, r27
     3d4:	31 96       	adiw	r30, 0x01	; 1
     3d6:	e0 32       	cpi	r30, 0x20	; 32
     3d8:	f1 05       	cpc	r31, r1
     3da:	49 f0       	breq	.+18     	; 0x3ee <__mulsf3+0x126>
     3dc:	66 0c       	add	r6, r6
     3de:	77 1c       	adc	r7, r7
     3e0:	88 1c       	adc	r8, r8
     3e2:	99 1c       	adc	r9, r9
     3e4:	56 94       	lsr	r5
     3e6:	47 94       	ror	r4
     3e8:	37 94       	ror	r3
     3ea:	27 94       	ror	r2
     3ec:	c3 cf       	rjmp	.-122    	; 0x374 <__mulsf3+0xac>
     3ee:	fa 85       	ldd	r31, Y+10	; 0x0a
     3f0:	ea 89       	ldd	r30, Y+18	; 0x12
     3f2:	2b 89       	ldd	r18, Y+19	; 0x13
     3f4:	3c 89       	ldd	r19, Y+20	; 0x14
     3f6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3f8:	9c 85       	ldd	r25, Y+12	; 0x0c
     3fa:	28 0f       	add	r18, r24
     3fc:	39 1f       	adc	r19, r25
     3fe:	2e 5f       	subi	r18, 0xFE	; 254
     400:	3f 4f       	sbci	r19, 0xFF	; 255
     402:	17 c0       	rjmp	.+46     	; 0x432 <__mulsf3+0x16a>
     404:	ca 01       	movw	r24, r20
     406:	81 70       	andi	r24, 0x01	; 1
     408:	90 70       	andi	r25, 0x00	; 0
     40a:	89 2b       	or	r24, r25
     40c:	61 f0       	breq	.+24     	; 0x426 <__mulsf3+0x15e>
     40e:	16 95       	lsr	r17
     410:	07 95       	ror	r16
     412:	f7 94       	ror	r15
     414:	e7 94       	ror	r14
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	a0 e0       	ldi	r26, 0x00	; 0
     41c:	b0 e8       	ldi	r27, 0x80	; 128
     41e:	e8 2a       	or	r14, r24
     420:	f9 2a       	or	r15, r25
     422:	0a 2b       	or	r16, r26
     424:	1b 2b       	or	r17, r27
     426:	76 95       	lsr	r23
     428:	67 95       	ror	r22
     42a:	57 95       	ror	r21
     42c:	47 95       	ror	r20
     42e:	2f 5f       	subi	r18, 0xFF	; 255
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	77 fd       	sbrc	r23, 7
     434:	e7 cf       	rjmp	.-50     	; 0x404 <__mulsf3+0x13c>
     436:	0c c0       	rjmp	.+24     	; 0x450 <__mulsf3+0x188>
     438:	44 0f       	add	r20, r20
     43a:	55 1f       	adc	r21, r21
     43c:	66 1f       	adc	r22, r22
     43e:	77 1f       	adc	r23, r23
     440:	17 fd       	sbrc	r17, 7
     442:	41 60       	ori	r20, 0x01	; 1
     444:	ee 0c       	add	r14, r14
     446:	ff 1c       	adc	r15, r15
     448:	00 1f       	adc	r16, r16
     44a:	11 1f       	adc	r17, r17
     44c:	21 50       	subi	r18, 0x01	; 1
     44e:	30 40       	sbci	r19, 0x00	; 0
     450:	40 30       	cpi	r20, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	59 07       	cpc	r21, r25
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	69 07       	cpc	r22, r25
     45a:	90 e4       	ldi	r25, 0x40	; 64
     45c:	79 07       	cpc	r23, r25
     45e:	60 f3       	brcs	.-40     	; 0x438 <__mulsf3+0x170>
     460:	2b 8f       	std	Y+27, r18	; 0x1b
     462:	3c 8f       	std	Y+28, r19	; 0x1c
     464:	db 01       	movw	r26, r22
     466:	ca 01       	movw	r24, r20
     468:	8f 77       	andi	r24, 0x7F	; 127
     46a:	90 70       	andi	r25, 0x00	; 0
     46c:	a0 70       	andi	r26, 0x00	; 0
     46e:	b0 70       	andi	r27, 0x00	; 0
     470:	80 34       	cpi	r24, 0x40	; 64
     472:	91 05       	cpc	r25, r1
     474:	a1 05       	cpc	r26, r1
     476:	b1 05       	cpc	r27, r1
     478:	61 f4       	brne	.+24     	; 0x492 <__mulsf3+0x1ca>
     47a:	47 fd       	sbrc	r20, 7
     47c:	0a c0       	rjmp	.+20     	; 0x492 <__mulsf3+0x1ca>
     47e:	e1 14       	cp	r14, r1
     480:	f1 04       	cpc	r15, r1
     482:	01 05       	cpc	r16, r1
     484:	11 05       	cpc	r17, r1
     486:	29 f0       	breq	.+10     	; 0x492 <__mulsf3+0x1ca>
     488:	40 5c       	subi	r20, 0xC0	; 192
     48a:	5f 4f       	sbci	r21, 0xFF	; 255
     48c:	6f 4f       	sbci	r22, 0xFF	; 255
     48e:	7f 4f       	sbci	r23, 0xFF	; 255
     490:	40 78       	andi	r20, 0x80	; 128
     492:	1a 8e       	std	Y+26, r1	; 0x1a
     494:	fe 17       	cp	r31, r30
     496:	11 f0       	breq	.+4      	; 0x49c <__mulsf3+0x1d4>
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	8a 8f       	std	Y+26, r24	; 0x1a
     49c:	4d 8f       	std	Y+29, r20	; 0x1d
     49e:	5e 8f       	std	Y+30, r21	; 0x1e
     4a0:	6f 8f       	std	Y+31, r22	; 0x1f
     4a2:	78 a3       	std	Y+32, r23	; 0x20
     4a4:	83 e0       	ldi	r24, 0x03	; 3
     4a6:	89 8f       	std	Y+25, r24	; 0x19
     4a8:	ce 01       	movw	r24, r28
     4aa:	49 96       	adiw	r24, 0x19	; 25
     4ac:	ad d0       	rcall	.+346    	; 0x608 <__pack_f>
     4ae:	a0 96       	adiw	r28, 0x20	; 32
     4b0:	e2 e1       	ldi	r30, 0x12	; 18
     4b2:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__>

000004b6 <__divsf3>:
     4b6:	a8 e1       	ldi	r26, 0x18	; 24
     4b8:	b0 e0       	ldi	r27, 0x00	; 0
     4ba:	e1 e6       	ldi	r30, 0x61	; 97
     4bc:	f2 e0       	ldi	r31, 0x02	; 2
     4be:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <__prologue_saves__+0x10>
     4c2:	69 83       	std	Y+1, r22	; 0x01
     4c4:	7a 83       	std	Y+2, r23	; 0x02
     4c6:	8b 83       	std	Y+3, r24	; 0x03
     4c8:	9c 83       	std	Y+4, r25	; 0x04
     4ca:	2d 83       	std	Y+5, r18	; 0x05
     4cc:	3e 83       	std	Y+6, r19	; 0x06
     4ce:	4f 83       	std	Y+7, r20	; 0x07
     4d0:	58 87       	std	Y+8, r21	; 0x08
     4d2:	b9 e0       	ldi	r27, 0x09	; 9
     4d4:	eb 2e       	mov	r14, r27
     4d6:	f1 2c       	mov	r15, r1
     4d8:	ec 0e       	add	r14, r28
     4da:	fd 1e       	adc	r15, r29
     4dc:	ce 01       	movw	r24, r28
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	b7 01       	movw	r22, r14
     4e2:	67 d1       	rcall	.+718    	; 0x7b2 <__unpack_f>
     4e4:	8e 01       	movw	r16, r28
     4e6:	0f 5e       	subi	r16, 0xEF	; 239
     4e8:	1f 4f       	sbci	r17, 0xFF	; 255
     4ea:	ce 01       	movw	r24, r28
     4ec:	05 96       	adiw	r24, 0x05	; 5
     4ee:	b8 01       	movw	r22, r16
     4f0:	60 d1       	rcall	.+704    	; 0x7b2 <__unpack_f>
     4f2:	29 85       	ldd	r18, Y+9	; 0x09
     4f4:	22 30       	cpi	r18, 0x02	; 2
     4f6:	08 f4       	brcc	.+2      	; 0x4fa <__divsf3+0x44>
     4f8:	7e c0       	rjmp	.+252    	; 0x5f6 <__divsf3+0x140>
     4fa:	39 89       	ldd	r19, Y+17	; 0x11
     4fc:	32 30       	cpi	r19, 0x02	; 2
     4fe:	10 f4       	brcc	.+4      	; 0x504 <__divsf3+0x4e>
     500:	b8 01       	movw	r22, r16
     502:	7c c0       	rjmp	.+248    	; 0x5fc <__divsf3+0x146>
     504:	8a 85       	ldd	r24, Y+10	; 0x0a
     506:	9a 89       	ldd	r25, Y+18	; 0x12
     508:	89 27       	eor	r24, r25
     50a:	8a 87       	std	Y+10, r24	; 0x0a
     50c:	24 30       	cpi	r18, 0x04	; 4
     50e:	11 f0       	breq	.+4      	; 0x514 <__divsf3+0x5e>
     510:	22 30       	cpi	r18, 0x02	; 2
     512:	31 f4       	brne	.+12     	; 0x520 <__divsf3+0x6a>
     514:	23 17       	cp	r18, r19
     516:	09 f0       	breq	.+2      	; 0x51a <__divsf3+0x64>
     518:	6e c0       	rjmp	.+220    	; 0x5f6 <__divsf3+0x140>
     51a:	6a e8       	ldi	r22, 0x8A	; 138
     51c:	71 e0       	ldi	r23, 0x01	; 1
     51e:	6e c0       	rjmp	.+220    	; 0x5fc <__divsf3+0x146>
     520:	34 30       	cpi	r19, 0x04	; 4
     522:	39 f4       	brne	.+14     	; 0x532 <__divsf3+0x7c>
     524:	1d 86       	std	Y+13, r1	; 0x0d
     526:	1e 86       	std	Y+14, r1	; 0x0e
     528:	1f 86       	std	Y+15, r1	; 0x0f
     52a:	18 8a       	std	Y+16, r1	; 0x10
     52c:	1c 86       	std	Y+12, r1	; 0x0c
     52e:	1b 86       	std	Y+11, r1	; 0x0b
     530:	04 c0       	rjmp	.+8      	; 0x53a <__divsf3+0x84>
     532:	32 30       	cpi	r19, 0x02	; 2
     534:	21 f4       	brne	.+8      	; 0x53e <__divsf3+0x88>
     536:	84 e0       	ldi	r24, 0x04	; 4
     538:	89 87       	std	Y+9, r24	; 0x09
     53a:	b7 01       	movw	r22, r14
     53c:	5f c0       	rjmp	.+190    	; 0x5fc <__divsf3+0x146>
     53e:	2b 85       	ldd	r18, Y+11	; 0x0b
     540:	3c 85       	ldd	r19, Y+12	; 0x0c
     542:	8b 89       	ldd	r24, Y+19	; 0x13
     544:	9c 89       	ldd	r25, Y+20	; 0x14
     546:	28 1b       	sub	r18, r24
     548:	39 0b       	sbc	r19, r25
     54a:	3c 87       	std	Y+12, r19	; 0x0c
     54c:	2b 87       	std	Y+11, r18	; 0x0b
     54e:	ed 84       	ldd	r14, Y+13	; 0x0d
     550:	fe 84       	ldd	r15, Y+14	; 0x0e
     552:	0f 85       	ldd	r16, Y+15	; 0x0f
     554:	18 89       	ldd	r17, Y+16	; 0x10
     556:	ad 88       	ldd	r10, Y+21	; 0x15
     558:	be 88       	ldd	r11, Y+22	; 0x16
     55a:	cf 88       	ldd	r12, Y+23	; 0x17
     55c:	d8 8c       	ldd	r13, Y+24	; 0x18
     55e:	ea 14       	cp	r14, r10
     560:	fb 04       	cpc	r15, r11
     562:	0c 05       	cpc	r16, r12
     564:	1d 05       	cpc	r17, r13
     566:	40 f4       	brcc	.+16     	; 0x578 <__divsf3+0xc2>
     568:	ee 0c       	add	r14, r14
     56a:	ff 1c       	adc	r15, r15
     56c:	00 1f       	adc	r16, r16
     56e:	11 1f       	adc	r17, r17
     570:	21 50       	subi	r18, 0x01	; 1
     572:	30 40       	sbci	r19, 0x00	; 0
     574:	3c 87       	std	Y+12, r19	; 0x0c
     576:	2b 87       	std	Y+11, r18	; 0x0b
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e4       	ldi	r27, 0x40	; 64
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	ea 14       	cp	r14, r10
     58e:	fb 04       	cpc	r15, r11
     590:	0c 05       	cpc	r16, r12
     592:	1d 05       	cpc	r17, r13
     594:	40 f0       	brcs	.+16     	; 0x5a6 <__divsf3+0xf0>
     596:	28 2b       	or	r18, r24
     598:	39 2b       	or	r19, r25
     59a:	4a 2b       	or	r20, r26
     59c:	5b 2b       	or	r21, r27
     59e:	ea 18       	sub	r14, r10
     5a0:	fb 08       	sbc	r15, r11
     5a2:	0c 09       	sbc	r16, r12
     5a4:	1d 09       	sbc	r17, r13
     5a6:	b6 95       	lsr	r27
     5a8:	a7 95       	ror	r26
     5aa:	97 95       	ror	r25
     5ac:	87 95       	ror	r24
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	6f 5f       	subi	r22, 0xFF	; 255
     5b8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ba:	6f 31       	cpi	r22, 0x1F	; 31
     5bc:	71 05       	cpc	r23, r1
     5be:	31 f7       	brne	.-52     	; 0x58c <__divsf3+0xd6>
     5c0:	da 01       	movw	r26, r20
     5c2:	c9 01       	movw	r24, r18
     5c4:	8f 77       	andi	r24, 0x7F	; 127
     5c6:	90 70       	andi	r25, 0x00	; 0
     5c8:	a0 70       	andi	r26, 0x00	; 0
     5ca:	b0 70       	andi	r27, 0x00	; 0
     5cc:	80 34       	cpi	r24, 0x40	; 64
     5ce:	91 05       	cpc	r25, r1
     5d0:	a1 05       	cpc	r26, r1
     5d2:	b1 05       	cpc	r27, r1
     5d4:	61 f4       	brne	.+24     	; 0x5ee <__divsf3+0x138>
     5d6:	27 fd       	sbrc	r18, 7
     5d8:	0a c0       	rjmp	.+20     	; 0x5ee <__divsf3+0x138>
     5da:	e1 14       	cp	r14, r1
     5dc:	f1 04       	cpc	r15, r1
     5de:	01 05       	cpc	r16, r1
     5e0:	11 05       	cpc	r17, r1
     5e2:	29 f0       	breq	.+10     	; 0x5ee <__divsf3+0x138>
     5e4:	20 5c       	subi	r18, 0xC0	; 192
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	4f 4f       	sbci	r20, 0xFF	; 255
     5ea:	5f 4f       	sbci	r21, 0xFF	; 255
     5ec:	20 78       	andi	r18, 0x80	; 128
     5ee:	2d 87       	std	Y+13, r18	; 0x0d
     5f0:	3e 87       	std	Y+14, r19	; 0x0e
     5f2:	4f 87       	std	Y+15, r20	; 0x0f
     5f4:	58 8b       	std	Y+16, r21	; 0x10
     5f6:	be 01       	movw	r22, r28
     5f8:	67 5f       	subi	r22, 0xF7	; 247
     5fa:	7f 4f       	sbci	r23, 0xFF	; 255
     5fc:	cb 01       	movw	r24, r22
     5fe:	04 d0       	rcall	.+8      	; 0x608 <__pack_f>
     600:	68 96       	adiw	r28, 0x18	; 24
     602:	ea e0       	ldi	r30, 0x0A	; 10
     604:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__epilogue_restores__+0x10>

00000608 <__pack_f>:
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	fc 01       	movw	r30, r24
     614:	e4 80       	ldd	r14, Z+4	; 0x04
     616:	f5 80       	ldd	r15, Z+5	; 0x05
     618:	06 81       	ldd	r16, Z+6	; 0x06
     61a:	17 81       	ldd	r17, Z+7	; 0x07
     61c:	d1 80       	ldd	r13, Z+1	; 0x01
     61e:	80 81       	ld	r24, Z
     620:	82 30       	cpi	r24, 0x02	; 2
     622:	48 f4       	brcc	.+18     	; 0x636 <__pack_f+0x2e>
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	a0 e1       	ldi	r26, 0x10	; 16
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	e8 2a       	or	r14, r24
     62e:	f9 2a       	or	r15, r25
     630:	0a 2b       	or	r16, r26
     632:	1b 2b       	or	r17, r27
     634:	a5 c0       	rjmp	.+330    	; 0x780 <__pack_f+0x178>
     636:	84 30       	cpi	r24, 0x04	; 4
     638:	09 f4       	brne	.+2      	; 0x63c <__pack_f+0x34>
     63a:	9f c0       	rjmp	.+318    	; 0x77a <__pack_f+0x172>
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	21 f4       	brne	.+8      	; 0x648 <__pack_f+0x40>
     640:	ee 24       	eor	r14, r14
     642:	ff 24       	eor	r15, r15
     644:	87 01       	movw	r16, r14
     646:	05 c0       	rjmp	.+10     	; 0x652 <__pack_f+0x4a>
     648:	e1 14       	cp	r14, r1
     64a:	f1 04       	cpc	r15, r1
     64c:	01 05       	cpc	r16, r1
     64e:	11 05       	cpc	r17, r1
     650:	19 f4       	brne	.+6      	; 0x658 <__pack_f+0x50>
     652:	e0 e0       	ldi	r30, 0x00	; 0
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	96 c0       	rjmp	.+300    	; 0x784 <__pack_f+0x17c>
     658:	62 81       	ldd	r22, Z+2	; 0x02
     65a:	73 81       	ldd	r23, Z+3	; 0x03
     65c:	9f ef       	ldi	r25, 0xFF	; 255
     65e:	62 38       	cpi	r22, 0x82	; 130
     660:	79 07       	cpc	r23, r25
     662:	0c f0       	brlt	.+2      	; 0x666 <__pack_f+0x5e>
     664:	5b c0       	rjmp	.+182    	; 0x71c <__pack_f+0x114>
     666:	22 e8       	ldi	r18, 0x82	; 130
     668:	3f ef       	ldi	r19, 0xFF	; 255
     66a:	26 1b       	sub	r18, r22
     66c:	37 0b       	sbc	r19, r23
     66e:	2a 31       	cpi	r18, 0x1A	; 26
     670:	31 05       	cpc	r19, r1
     672:	2c f0       	brlt	.+10     	; 0x67e <__pack_f+0x76>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	2a c0       	rjmp	.+84     	; 0x6d2 <__pack_f+0xca>
     67e:	b8 01       	movw	r22, r16
     680:	a7 01       	movw	r20, r14
     682:	02 2e       	mov	r0, r18
     684:	04 c0       	rjmp	.+8      	; 0x68e <__pack_f+0x86>
     686:	76 95       	lsr	r23
     688:	67 95       	ror	r22
     68a:	57 95       	ror	r21
     68c:	47 95       	ror	r20
     68e:	0a 94       	dec	r0
     690:	d2 f7       	brpl	.-12     	; 0x686 <__pack_f+0x7e>
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	a0 e0       	ldi	r26, 0x00	; 0
     698:	b0 e0       	ldi	r27, 0x00	; 0
     69a:	04 c0       	rjmp	.+8      	; 0x6a4 <__pack_f+0x9c>
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	aa 1f       	adc	r26, r26
     6a2:	bb 1f       	adc	r27, r27
     6a4:	2a 95       	dec	r18
     6a6:	d2 f7       	brpl	.-12     	; 0x69c <__pack_f+0x94>
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	a1 09       	sbc	r26, r1
     6ac:	b1 09       	sbc	r27, r1
     6ae:	8e 21       	and	r24, r14
     6b0:	9f 21       	and	r25, r15
     6b2:	a0 23       	and	r26, r16
     6b4:	b1 23       	and	r27, r17
     6b6:	00 97       	sbiw	r24, 0x00	; 0
     6b8:	a1 05       	cpc	r26, r1
     6ba:	b1 05       	cpc	r27, r1
     6bc:	21 f0       	breq	.+8      	; 0x6c6 <__pack_f+0xbe>
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	a0 e0       	ldi	r26, 0x00	; 0
     6c4:	b0 e0       	ldi	r27, 0x00	; 0
     6c6:	9a 01       	movw	r18, r20
     6c8:	ab 01       	movw	r20, r22
     6ca:	28 2b       	or	r18, r24
     6cc:	39 2b       	or	r19, r25
     6ce:	4a 2b       	or	r20, r26
     6d0:	5b 2b       	or	r21, r27
     6d2:	da 01       	movw	r26, r20
     6d4:	c9 01       	movw	r24, r18
     6d6:	8f 77       	andi	r24, 0x7F	; 127
     6d8:	90 70       	andi	r25, 0x00	; 0
     6da:	a0 70       	andi	r26, 0x00	; 0
     6dc:	b0 70       	andi	r27, 0x00	; 0
     6de:	80 34       	cpi	r24, 0x40	; 64
     6e0:	91 05       	cpc	r25, r1
     6e2:	a1 05       	cpc	r26, r1
     6e4:	b1 05       	cpc	r27, r1
     6e6:	39 f4       	brne	.+14     	; 0x6f6 <__pack_f+0xee>
     6e8:	27 ff       	sbrs	r18, 7
     6ea:	09 c0       	rjmp	.+18     	; 0x6fe <__pack_f+0xf6>
     6ec:	20 5c       	subi	r18, 0xC0	; 192
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
     6f0:	4f 4f       	sbci	r20, 0xFF	; 255
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <__pack_f+0xf6>
     6f6:	21 5c       	subi	r18, 0xC1	; 193
     6f8:	3f 4f       	sbci	r19, 0xFF	; 255
     6fa:	4f 4f       	sbci	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	e0 e0       	ldi	r30, 0x00	; 0
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	20 30       	cpi	r18, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	3a 07       	cpc	r19, r26
     708:	a0 e0       	ldi	r26, 0x00	; 0
     70a:	4a 07       	cpc	r20, r26
     70c:	a0 e4       	ldi	r26, 0x40	; 64
     70e:	5a 07       	cpc	r21, r26
     710:	10 f0       	brcs	.+4      	; 0x716 <__pack_f+0x10e>
     712:	e1 e0       	ldi	r30, 0x01	; 1
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	79 01       	movw	r14, r18
     718:	8a 01       	movw	r16, r20
     71a:	27 c0       	rjmp	.+78     	; 0x76a <__pack_f+0x162>
     71c:	60 38       	cpi	r22, 0x80	; 128
     71e:	71 05       	cpc	r23, r1
     720:	64 f5       	brge	.+88     	; 0x77a <__pack_f+0x172>
     722:	fb 01       	movw	r30, r22
     724:	e1 58       	subi	r30, 0x81	; 129
     726:	ff 4f       	sbci	r31, 0xFF	; 255
     728:	d8 01       	movw	r26, r16
     72a:	c7 01       	movw	r24, r14
     72c:	8f 77       	andi	r24, 0x7F	; 127
     72e:	90 70       	andi	r25, 0x00	; 0
     730:	a0 70       	andi	r26, 0x00	; 0
     732:	b0 70       	andi	r27, 0x00	; 0
     734:	80 34       	cpi	r24, 0x40	; 64
     736:	91 05       	cpc	r25, r1
     738:	a1 05       	cpc	r26, r1
     73a:	b1 05       	cpc	r27, r1
     73c:	39 f4       	brne	.+14     	; 0x74c <__pack_f+0x144>
     73e:	e7 fe       	sbrs	r14, 7
     740:	0d c0       	rjmp	.+26     	; 0x75c <__pack_f+0x154>
     742:	80 e4       	ldi	r24, 0x40	; 64
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	a0 e0       	ldi	r26, 0x00	; 0
     748:	b0 e0       	ldi	r27, 0x00	; 0
     74a:	04 c0       	rjmp	.+8      	; 0x754 <__pack_f+0x14c>
     74c:	8f e3       	ldi	r24, 0x3F	; 63
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	a0 e0       	ldi	r26, 0x00	; 0
     752:	b0 e0       	ldi	r27, 0x00	; 0
     754:	e8 0e       	add	r14, r24
     756:	f9 1e       	adc	r15, r25
     758:	0a 1f       	adc	r16, r26
     75a:	1b 1f       	adc	r17, r27
     75c:	17 ff       	sbrs	r17, 7
     75e:	05 c0       	rjmp	.+10     	; 0x76a <__pack_f+0x162>
     760:	16 95       	lsr	r17
     762:	07 95       	ror	r16
     764:	f7 94       	ror	r15
     766:	e7 94       	ror	r14
     768:	31 96       	adiw	r30, 0x01	; 1
     76a:	87 e0       	ldi	r24, 0x07	; 7
     76c:	16 95       	lsr	r17
     76e:	07 95       	ror	r16
     770:	f7 94       	ror	r15
     772:	e7 94       	ror	r14
     774:	8a 95       	dec	r24
     776:	d1 f7       	brne	.-12     	; 0x76c <__pack_f+0x164>
     778:	05 c0       	rjmp	.+10     	; 0x784 <__pack_f+0x17c>
     77a:	ee 24       	eor	r14, r14
     77c:	ff 24       	eor	r15, r15
     77e:	87 01       	movw	r16, r14
     780:	ef ef       	ldi	r30, 0xFF	; 255
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	6e 2f       	mov	r22, r30
     786:	67 95       	ror	r22
     788:	66 27       	eor	r22, r22
     78a:	67 95       	ror	r22
     78c:	90 2f       	mov	r25, r16
     78e:	9f 77       	andi	r25, 0x7F	; 127
     790:	d7 94       	ror	r13
     792:	dd 24       	eor	r13, r13
     794:	d7 94       	ror	r13
     796:	8e 2f       	mov	r24, r30
     798:	86 95       	lsr	r24
     79a:	49 2f       	mov	r20, r25
     79c:	46 2b       	or	r20, r22
     79e:	58 2f       	mov	r21, r24
     7a0:	5d 29       	or	r21, r13
     7a2:	b7 01       	movw	r22, r14
     7a4:	ca 01       	movw	r24, r20
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	08 95       	ret

000007b2 <__unpack_f>:
     7b2:	fc 01       	movw	r30, r24
     7b4:	db 01       	movw	r26, r22
     7b6:	40 81       	ld	r20, Z
     7b8:	51 81       	ldd	r21, Z+1	; 0x01
     7ba:	22 81       	ldd	r18, Z+2	; 0x02
     7bc:	62 2f       	mov	r22, r18
     7be:	6f 77       	andi	r22, 0x7F	; 127
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	22 1f       	adc	r18, r18
     7c4:	22 27       	eor	r18, r18
     7c6:	22 1f       	adc	r18, r18
     7c8:	93 81       	ldd	r25, Z+3	; 0x03
     7ca:	89 2f       	mov	r24, r25
     7cc:	88 0f       	add	r24, r24
     7ce:	82 2b       	or	r24, r18
     7d0:	28 2f       	mov	r18, r24
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	99 1f       	adc	r25, r25
     7d6:	99 27       	eor	r25, r25
     7d8:	99 1f       	adc	r25, r25
     7da:	11 96       	adiw	r26, 0x01	; 1
     7dc:	9c 93       	st	X, r25
     7de:	11 97       	sbiw	r26, 0x01	; 1
     7e0:	21 15       	cp	r18, r1
     7e2:	31 05       	cpc	r19, r1
     7e4:	a9 f5       	brne	.+106    	; 0x850 <__unpack_f+0x9e>
     7e6:	41 15       	cp	r20, r1
     7e8:	51 05       	cpc	r21, r1
     7ea:	61 05       	cpc	r22, r1
     7ec:	71 05       	cpc	r23, r1
     7ee:	11 f4       	brne	.+4      	; 0x7f4 <__unpack_f+0x42>
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	37 c0       	rjmp	.+110    	; 0x862 <__unpack_f+0xb0>
     7f4:	82 e8       	ldi	r24, 0x82	; 130
     7f6:	9f ef       	ldi	r25, 0xFF	; 255
     7f8:	13 96       	adiw	r26, 0x03	; 3
     7fa:	9c 93       	st	X, r25
     7fc:	8e 93       	st	-X, r24
     7fe:	12 97       	sbiw	r26, 0x02	; 2
     800:	9a 01       	movw	r18, r20
     802:	ab 01       	movw	r20, r22
     804:	67 e0       	ldi	r22, 0x07	; 7
     806:	22 0f       	add	r18, r18
     808:	33 1f       	adc	r19, r19
     80a:	44 1f       	adc	r20, r20
     80c:	55 1f       	adc	r21, r21
     80e:	6a 95       	dec	r22
     810:	d1 f7       	brne	.-12     	; 0x806 <__unpack_f+0x54>
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	8c 93       	st	X, r24
     816:	0d c0       	rjmp	.+26     	; 0x832 <__unpack_f+0x80>
     818:	22 0f       	add	r18, r18
     81a:	33 1f       	adc	r19, r19
     81c:	44 1f       	adc	r20, r20
     81e:	55 1f       	adc	r21, r21
     820:	12 96       	adiw	r26, 0x02	; 2
     822:	8d 91       	ld	r24, X+
     824:	9c 91       	ld	r25, X
     826:	13 97       	sbiw	r26, 0x03	; 3
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	13 96       	adiw	r26, 0x03	; 3
     82c:	9c 93       	st	X, r25
     82e:	8e 93       	st	-X, r24
     830:	12 97       	sbiw	r26, 0x02	; 2
     832:	20 30       	cpi	r18, 0x00	; 0
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	38 07       	cpc	r19, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	48 07       	cpc	r20, r24
     83c:	80 e4       	ldi	r24, 0x40	; 64
     83e:	58 07       	cpc	r21, r24
     840:	58 f3       	brcs	.-42     	; 0x818 <__unpack_f+0x66>
     842:	14 96       	adiw	r26, 0x04	; 4
     844:	2d 93       	st	X+, r18
     846:	3d 93       	st	X+, r19
     848:	4d 93       	st	X+, r20
     84a:	5c 93       	st	X, r21
     84c:	17 97       	sbiw	r26, 0x07	; 7
     84e:	08 95       	ret
     850:	2f 3f       	cpi	r18, 0xFF	; 255
     852:	31 05       	cpc	r19, r1
     854:	79 f4       	brne	.+30     	; 0x874 <__unpack_f+0xc2>
     856:	41 15       	cp	r20, r1
     858:	51 05       	cpc	r21, r1
     85a:	61 05       	cpc	r22, r1
     85c:	71 05       	cpc	r23, r1
     85e:	19 f4       	brne	.+6      	; 0x866 <__unpack_f+0xb4>
     860:	84 e0       	ldi	r24, 0x04	; 4
     862:	8c 93       	st	X, r24
     864:	08 95       	ret
     866:	64 ff       	sbrs	r22, 4
     868:	03 c0       	rjmp	.+6      	; 0x870 <__unpack_f+0xbe>
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	8c 93       	st	X, r24
     86e:	12 c0       	rjmp	.+36     	; 0x894 <__unpack_f+0xe2>
     870:	1c 92       	st	X, r1
     872:	10 c0       	rjmp	.+32     	; 0x894 <__unpack_f+0xe2>
     874:	2f 57       	subi	r18, 0x7F	; 127
     876:	30 40       	sbci	r19, 0x00	; 0
     878:	13 96       	adiw	r26, 0x03	; 3
     87a:	3c 93       	st	X, r19
     87c:	2e 93       	st	-X, r18
     87e:	12 97       	sbiw	r26, 0x02	; 2
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	8c 93       	st	X, r24
     884:	87 e0       	ldi	r24, 0x07	; 7
     886:	44 0f       	add	r20, r20
     888:	55 1f       	adc	r21, r21
     88a:	66 1f       	adc	r22, r22
     88c:	77 1f       	adc	r23, r23
     88e:	8a 95       	dec	r24
     890:	d1 f7       	brne	.-12     	; 0x886 <__unpack_f+0xd4>
     892:	70 64       	ori	r23, 0x40	; 64
     894:	14 96       	adiw	r26, 0x04	; 4
     896:	4d 93       	st	X+, r20
     898:	5d 93       	st	X+, r21
     89a:	6d 93       	st	X+, r22
     89c:	7c 93       	st	X, r23
     89e:	17 97       	sbiw	r26, 0x07	; 7
     8a0:	08 95       	ret

000008a2 <buttonCheck>:
	}
}

void buttonCheck() {

	RIGHT = 0; LEFT = 0;
     8a2:	10 92 99 01 	sts	0x0199, r1
     8a6:	10 92 98 01 	sts	0x0198, r1
     8aa:	10 92 97 01 	sts	0x0197, r1
     8ae:	10 92 96 01 	sts	0x0196, r1
	
	if(PINB & 0b00000010) {
     8b2:	19 9b       	sbis	0x03, 1	; 3
     8b4:	11 c0       	rjmp	.+34     	; 0x8d8 <buttonCheck+0x36>
     8b6:	84 ef       	ldi	r24, 0xF4	; 244
     8b8:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8ba:	20 e9       	ldi	r18, 0x90	; 144
     8bc:	31 e0       	ldi	r19, 0x01	; 1
     8be:	f9 01       	movw	r30, r18
     8c0:	31 97       	sbiw	r30, 0x01	; 1
     8c2:	f1 f7       	brne	.-4      	; 0x8c0 <buttonCheck+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c6:	d9 f7       	brne	.-10     	; 0x8be <buttonCheck+0x1c>
	_delay_ms(50);
	if(PINB & 0b00000010) {
     8c8:	19 9b       	sbis	0x03, 1	; 3
     8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <buttonCheck+0x36>
		// Send output to PORTD.
		//PORTB |= (1<<3); //PORTB = 0b11111111;
		RIGHT = 1;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	90 93 99 01 	sts	0x0199, r25
     8d4:	80 93 98 01 	sts	0x0198, r24
	}
	}
	
	if (PINB & 0b00000001 ) {
     8d8:	18 9b       	sbis	0x03, 0	; 3
     8da:	11 c0       	rjmp	.+34     	; 0x8fe <buttonCheck+0x5c>
     8dc:	84 ef       	ldi	r24, 0xF4	; 244
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	20 e9       	ldi	r18, 0x90	; 144
     8e2:	31 e0       	ldi	r19, 0x01	; 1
     8e4:	f9 01       	movw	r30, r18
     8e6:	31 97       	sbiw	r30, 0x01	; 1
     8e8:	f1 f7       	brne	.-4      	; 0x8e6 <buttonCheck+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ec:	d9 f7       	brne	.-10     	; 0x8e4 <buttonCheck+0x42>
	_delay_ms(50);
	if (PINB & 0b00000001 ) {
     8ee:	18 9b       	sbis	0x03, 0	; 3
     8f0:	06 c0       	rjmp	.+12     	; 0x8fe <buttonCheck+0x5c>
		//PORTB |= (1<<2);
		LEFT = 1;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	90 93 97 01 	sts	0x0197, r25
     8fa:	80 93 96 01 	sts	0x0196, r24
     8fe:	08 95       	ret

00000900 <PinChangeInit>:
}

void PinChangeInit(void)
{
	//Enable PCINT0 and PCINT1 (both buttons) in the PCMSK0 register
	PCMSK0 |= (1<<PCINT0);
     900:	eb e6       	ldi	r30, 0x6B	; 107
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	81 60       	ori	r24, 0x01	; 1
     908:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT1);
     90a:	80 81       	ld	r24, Z
     90c:	82 60       	ori	r24, 0x02	; 2
     90e:	80 83       	st	Z, r24

	//Enable Pin change interrupts in the Pin Change Interrupt Control Register
	PCICR |= (1<<PCIE0);
     910:	e8 e6       	ldi	r30, 0x68	; 104
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	81 60       	ori	r24, 0x01	; 1
     918:	80 83       	st	Z, r24
	
	//Set the PCINT0 and PCINT1 interrupts to trigger on rising edge
	EICRA |= ((1<<ISC00)&&(1<<ISC01)&&(1<<ISC10)&&(1<<ISC11));
     91a:	e9 e6       	ldi	r30, 0x69	; 105
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	81 60       	ori	r24, 0x01	; 1
     922:	80 83       	st	Z, r24
		
	//Ensure to enable global interrupts as well.
	sei();
     924:	78 94       	sei
}
     926:	08 95       	ret

00000928 <__vector_9>:

ISR(PCINT0_vect) {	
     928:	1f 92       	push	r1
     92a:	0f 92       	push	r0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	0f 92       	push	r0
     930:	11 24       	eor	r1, r1
     932:	8f 93       	push	r24
     934:	9f 93       	push	r25
	RIGHT = 0; LEFT = 0;
     936:	10 92 99 01 	sts	0x0199, r1
     93a:	10 92 98 01 	sts	0x0198, r1
     93e:	10 92 97 01 	sts	0x0197, r1
     942:	10 92 96 01 	sts	0x0196, r1
	
	if(PINB & 0b00000010) {
     946:	19 9b       	sbis	0x03, 1	; 3
     948:	06 c0       	rjmp	.+12     	; 0x956 <__vector_9+0x2e>
	//_delay_ms(50);
	//if(PINB & 0b00000010) {
		// Send output to PORTD.
		//PORTB |= (1<<3); //PORTB = 0b11111111;
		RIGHT = 1;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	90 93 99 01 	sts	0x0199, r25
     952:	80 93 98 01 	sts	0x0198, r24
	//}
	}
	
	if (PINB & 0b00000001 ) {
     956:	18 9b       	sbis	0x03, 0	; 3
     958:	06 c0       	rjmp	.+12     	; 0x966 <__vector_9+0x3e>
	//_delay_ms(50);
	//if (PINB & 0b00000001 ) {
		//PORTB |= (1<<2);
		LEFT = 1;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	90 93 97 01 	sts	0x0197, r25
     962:	80 93 96 01 	sts	0x0196, r24
	}
	clear();
	draw_character('*',heroX,heroY);
	refresh();
	*/
}
     966:	9f 91       	pop	r25
     968:	8f 91       	pop	r24
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0
     970:	1f 90       	pop	r1
     972:	18 95       	reti

00000974 <TimerInit>:

void TimerInit(void)
{
	//Set to Normal Timer Mode using TCCR0A and TCCR0B
	TCCR0A &= ~((1<<WGM01)|(WGM00));
     974:	84 b5       	in	r24, 0x24	; 36
     976:	8d 7f       	andi	r24, 0xFD	; 253
     978:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~((1<<WGM02));
     97a:	85 b5       	in	r24, 0x25	; 37
     97c:	87 7f       	andi	r24, 0xF7	; 247
     97e:	85 bd       	out	0x25, r24	; 37
	
	//Set Prescaler using TCCR0B, using Clock Speed find timer speed = 1/(Clock Speed/Prescaler)
	//Prescaler = 1024
	//Timer Speed = 128 nano seconds NOT 16MHZ
	//Timer Overflow Speed = 32640 nano seconds (Timer Speed * 255) - (255 since 8-bit timer) NOT 16MHZ
	TCCR0B |= (1<<CS02)|(1<<CS00);
     980:	85 b5       	in	r24, 0x25	; 37
     982:	85 60       	ori	r24, 0x05	; 5
     984:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~((1<<CS01));
     986:	85 b5       	in	r24, 0x25	; 37
     988:	8d 7f       	andi	r24, 0xFD	; 253
     98a:	85 bd       	out	0x25, r24	; 37
	
	//Enable TOIE0 interrupt in the TIMSK0 register
	TIMSK0 |= (1<<TOIE0);
     98c:	ee e6       	ldi	r30, 0x6E	; 110
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	81 60       	ori	r24, 0x01	; 1
     994:	80 83       	st	Z, r24
	
	//Ensure to enable global interrupts as well.
	sei();
     996:	78 94       	sei
}
     998:	08 95       	ret

0000099a <setupHero>:
	for (int i = 0; i<8; i++) {
	zDirection[i] = randInRange(0,3);
	}
}

void setupHero(void) {
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
	int middle_x = screen_x/2;
	int middle_y = screen_y/2 + 5;
     9a6:	80 91 63 01 	lds	r24, 0x0163
     9aa:	90 91 64 01 	lds	r25, 0x0164
     9ae:	62 e0       	ldi	r22, 0x02	; 2
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	0e 94 b6 12 	call	0x256c	; 0x256c <__divmodhi4>
     9b6:	7b 01       	movw	r14, r22
     9b8:	85 e0       	ldi	r24, 0x05	; 5
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	e8 0e       	add	r14, r24
     9be:	f9 1e       	adc	r15, r25
	my_pointer -> x = middle_x;
     9c0:	c0 90 b6 01 	lds	r12, 0x01B6
     9c4:	d0 90 b7 01 	lds	r13, 0x01B7
     9c8:	80 91 5f 01 	lds	r24, 0x015F
     9cc:	90 91 60 01 	lds	r25, 0x0160
     9d0:	62 e0       	ldi	r22, 0x02	; 2
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	0e 94 b6 12 	call	0x256c	; 0x256c <__divmodhi4>
     9d8:	88 27       	eor	r24, r24
     9da:	77 fd       	sbrc	r23, 7
     9dc:	80 95       	com	r24
     9de:	98 2f       	mov	r25, r24
     9e0:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__floatsisf>
     9e4:	f6 01       	movw	r30, r12
     9e6:	60 83       	st	Z, r22
     9e8:	71 83       	std	Z+1, r23	; 0x01
     9ea:	82 83       	std	Z+2, r24	; 0x02
     9ec:	93 83       	std	Z+3, r25	; 0x03
	my_pointer -> y = middle_y;
     9ee:	00 27       	eor	r16, r16
     9f0:	f7 fc       	sbrc	r15, 7
     9f2:	00 95       	com	r16
     9f4:	10 2f       	mov	r17, r16
     9f6:	c8 01       	movw	r24, r16
     9f8:	b7 01       	movw	r22, r14
     9fa:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__floatsisf>
     9fe:	f6 01       	movw	r30, r12
     a00:	64 83       	std	Z+4, r22	; 0x04
     a02:	75 83       	std	Z+5, r23	; 0x05
     a04:	86 83       	std	Z+6, r24	; 0x06
     a06:	97 83       	std	Z+7, r25	; 0x07
}
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12
     a14:	08 95       	ret

00000a16 <isInPit>:
	draw_line(pitLeft,pitTop,pitLeft,pitBottom);
	draw_line(pitRight,pitTop,pitRight,pitBottom);
	
}

int isInPit(Sprite *sprite) {
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	8c 01       	movw	r16, r24
	int x = sprite -> x;
     a1c:	dc 01       	movw	r26, r24
     a1e:	6d 91       	ld	r22, X+
     a20:	7d 91       	ld	r23, X+
     a22:	8d 91       	ld	r24, X+
     a24:	9c 91       	ld	r25, X
     a26:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__fixsfsi>
     a2a:	fb 01       	movw	r30, r22
	int y = sprite -> y;
     a2c:	d8 01       	movw	r26, r16
     a2e:	14 96       	adiw	r26, 0x04	; 4
     a30:	4d 91       	ld	r20, X+
     a32:	5d 91       	ld	r21, X+
     a34:	6d 91       	ld	r22, X+
     a36:	7c 91       	ld	r23, X
     a38:	17 97       	sbiw	r26, 0x07	; 7
	if ((x > pitLeft && x < pitRight - width +1 && y > pitTop && y < pitBottom - height +1)) {
     a3a:	80 91 b4 01 	lds	r24, 0x01B4
     a3e:	90 91 b5 01 	lds	r25, 0x01B5
     a42:	8e 17       	cp	r24, r30
     a44:	9f 07       	cpc	r25, r31
     a46:	44 f5       	brge	.+80     	; 0xa98 <isInPit+0x82>
     a48:	20 91 7d 01 	lds	r18, 0x017D
     a4c:	80 91 ae 01 	lds	r24, 0x01AE
     a50:	90 91 af 01 	lds	r25, 0x01AF
     a54:	82 1b       	sub	r24, r18
     a56:	91 09       	sbc	r25, r1
     a58:	8e 17       	cp	r24, r30
     a5a:	9f 07       	cpc	r25, r31
     a5c:	ec f0       	brlt	.+58     	; 0xa98 <isInPit+0x82>
	
}

int isInPit(Sprite *sprite) {
	int x = sprite -> x;
	int y = sprite -> y;
     a5e:	cb 01       	movw	r24, r22
     a60:	ba 01       	movw	r22, r20
     a62:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__fixsfsi>
	if ((x > pitLeft && x < pitRight - width +1 && y > pitTop && y < pitBottom - height +1)) {
     a66:	80 91 b8 01 	lds	r24, 0x01B8
     a6a:	90 91 b9 01 	lds	r25, 0x01B9
     a6e:	86 17       	cp	r24, r22
     a70:	97 07       	cpc	r25, r23
     a72:	94 f4       	brge	.+36     	; 0xa98 <isInPit+0x82>
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	20 91 7e 01 	lds	r18, 0x017E
     a7a:	80 91 b2 01 	lds	r24, 0x01B2
     a7e:	90 91 b3 01 	lds	r25, 0x01B3
     a82:	82 1b       	sub	r24, r18
     a84:	91 09       	sbc	r25, r1
     a86:	86 17       	cp	r24, r22
     a88:	97 07       	cpc	r25, r23
     a8a:	0c f4       	brge	.+2      	; 0xa8e <isInPit+0x78>
     a8c:	31 e0       	ldi	r19, 0x01	; 1
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	38 27       	eor	r19, r24
     a92:	23 2f       	mov	r18, r19
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <isInPit+0x86>
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
	}
	else {
	return 0;
	}

}
     a9c:	c9 01       	movw	r24, r18
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	08 95       	ret

00000aa4 <heroForward>:
		}
		heroForward();
	}
}

void heroForward(void) {
     aa4:	6f 92       	push	r6
     aa6:	7f 92       	push	r7
     aa8:	8f 92       	push	r8
     aaa:	9f 92       	push	r9
     aac:	af 92       	push	r10
     aae:	bf 92       	push	r11
     ab0:	cf 92       	push	r12
     ab2:	df 92       	push	r13
     ab4:	ef 92       	push	r14
     ab6:	ff 92       	push	r15
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
	int HeroX = 1;
	int HeroY = 0;
	int Up,Down,Left,Right;
	
	// is hero in pit?
	if (isInPit(my_pointer)) {
     ac0:	c0 91 b6 01 	lds	r28, 0x01B6
     ac4:	d0 91 b7 01 	lds	r29, 0x01B7
     ac8:	ce 01       	movw	r24, r28
     aca:	a5 df       	rcall	.-182    	; 0xa16 <isInPit>
     acc:	89 2b       	or	r24, r25
     ace:	f9 f0       	breq	.+62     	; 0xb0e <__stack+0xf>
	Up = pitTop+2;
     ad0:	60 90 b8 01 	lds	r6, 0x01B8
     ad4:	70 90 b9 01 	lds	r7, 0x01B9
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	68 0e       	add	r6, r24
     ade:	79 1e       	adc	r7, r25
	Down = pitBottom - 4;
     ae0:	80 90 b2 01 	lds	r8, 0x01B2
     ae4:	90 90 b3 01 	lds	r9, 0x01B3
     ae8:	8c ef       	ldi	r24, 0xFC	; 252
     aea:	9f ef       	ldi	r25, 0xFF	; 255
     aec:	88 0e       	add	r8, r24
     aee:	99 1e       	adc	r9, r25
	Left = pitLeft+2;
     af0:	a0 90 b4 01 	lds	r10, 0x01B4
     af4:	b0 90 b5 01 	lds	r11, 0x01B5
     af8:	82 e0       	ldi	r24, 0x02	; 2
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	a8 0e       	add	r10, r24
     afe:	b9 1e       	adc	r11, r25
	Right = pitRight -4;
     b00:	00 91 ae 01 	lds	r16, 0x01AE
     b04:	10 91 af 01 	lds	r17, 0x01AF
     b08:	04 50       	subi	r16, 0x04	; 4
     b0a:	10 40       	sbci	r17, 0x00	; 0
     b0c:	13 c0       	rjmp	.+38     	; 0xb34 <__stack+0x35>
	} else {
	Up = 10;
	Down = screen_y-1;
     b0e:	80 90 63 01 	lds	r8, 0x0163
     b12:	90 90 64 01 	lds	r9, 0x0164
     b16:	08 94       	sec
     b18:	81 08       	sbc	r8, r1
     b1a:	91 08       	sbc	r9, r1
	Left = 2;
	Right = screen_x-1;
     b1c:	00 91 5f 01 	lds	r16, 0x015F
     b20:	10 91 60 01 	lds	r17, 0x0160
     b24:	01 50       	subi	r16, 0x01	; 1
     b26:	10 40       	sbci	r17, 0x00	; 0
     b28:	4a e0       	ldi	r20, 0x0A	; 10
     b2a:	64 2e       	mov	r6, r20
     b2c:	71 2c       	mov	r7, r1
     b2e:	32 e0       	ldi	r19, 0x02	; 2
     b30:	a3 2e       	mov	r10, r19
     b32:	b1 2c       	mov	r11, r1
	}

	// update direction of movement
	if (Direction == 0) {
     b34:	80 91 6b 01 	lds	r24, 0x016B
     b38:	90 91 6c 01 	lds	r25, 0x016C
     b3c:	89 2b       	or	r24, r25
     b3e:	21 f0       	breq	.+8      	; 0xb48 <__stack+0x49>
     b40:	21 e0       	ldi	r18, 0x01	; 1
     b42:	c2 2e       	mov	r12, r18
     b44:	d1 2c       	mov	r13, r1
     b46:	13 c0       	rjmp	.+38     	; 0xb6e <__stack+0x6f>
		HeroY = 1;
		HeroX = 0;
		if (my_pointer -> y > Down) {
     b48:	b4 01       	movw	r22, r8
     b4a:	88 27       	eor	r24, r24
     b4c:	77 fd       	sbrc	r23, 7
     b4e:	80 95       	com	r24
     b50:	98 2f       	mov	r25, r24
     b52:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__floatsisf>
     b56:	9b 01       	movw	r18, r22
     b58:	ac 01       	movw	r20, r24
     b5a:	6c 81       	ldd	r22, Y+4	; 0x04
     b5c:	7d 81       	ldd	r23, Y+5	; 0x05
     b5e:	8e 81       	ldd	r24, Y+6	; 0x06
     b60:	9f 81       	ldd	r25, Y+7	; 0x07
     b62:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gesf2>
     b66:	18 16       	cp	r1, r24
     b68:	2c f4       	brge	.+10     	; 0xb74 <__stack+0x75>
     b6a:	cc 24       	eor	r12, r12
     b6c:	dd 24       	eor	r13, r13
     b6e:	ee 24       	eor	r14, r14
     b70:	ff 24       	eor	r15, r15
     b72:	05 c0       	rjmp	.+10     	; 0xb7e <__stack+0x7f>
     b74:	cc 24       	eor	r12, r12
     b76:	dd 24       	eor	r13, r13
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	e9 2e       	mov	r14, r25
     b7c:	f1 2c       	mov	r15, r1
		HeroY = 0;
		}
	}
	if (Direction == 1) {
     b7e:	80 91 6b 01 	lds	r24, 0x016B
     b82:	90 91 6c 01 	lds	r25, 0x016C
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	c9 f4       	brne	.+50     	; 0xbbc <__stack+0xbd>
		HeroX = 1;
		HeroY = 0;
		if (my_pointer -> x > Right) {
     b8a:	b8 01       	movw	r22, r16
     b8c:	88 27       	eor	r24, r24
     b8e:	77 fd       	sbrc	r23, 7
     b90:	80 95       	com	r24
     b92:	98 2f       	mov	r25, r24
     b94:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__floatsisf>
     b98:	9b 01       	movw	r18, r22
     b9a:	ac 01       	movw	r20, r24
     b9c:	68 81       	ld	r22, Y
     b9e:	79 81       	ldd	r23, Y+1	; 0x01
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	9b 81       	ldd	r25, Y+3	; 0x03
     ba4:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__gesf2>
     ba8:	18 16       	cp	r1, r24
     baa:	1c f4       	brge	.+6      	; 0xbb2 <__stack+0xb3>
     bac:	cc 24       	eor	r12, r12
     bae:	dd 24       	eor	r13, r13
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <__stack+0xb9>
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	c8 2e       	mov	r12, r24
     bb6:	d1 2c       	mov	r13, r1
     bb8:	ee 24       	eor	r14, r14
     bba:	ff 24       	eor	r15, r15
		HeroX = 0;
		}
	}
	if (Direction == 2) {
     bbc:	80 91 6b 01 	lds	r24, 0x016B
     bc0:	90 91 6c 01 	lds	r25, 0x016C
     bc4:	02 97       	sbiw	r24, 0x02	; 2
     bc6:	d1 f4       	brne	.+52     	; 0xbfc <__stack+0xfd>
		HeroY = -1;
		HeroX = 0;
		if (my_pointer -> y < Up) {
     bc8:	b3 01       	movw	r22, r6
     bca:	88 27       	eor	r24, r24
     bcc:	77 fd       	sbrc	r23, 7
     bce:	80 95       	com	r24
     bd0:	98 2f       	mov	r25, r24
     bd2:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__floatsisf>
     bd6:	9b 01       	movw	r18, r22
     bd8:	ac 01       	movw	r20, r24
     bda:	6c 81       	ldd	r22, Y+4	; 0x04
     bdc:	7d 81       	ldd	r23, Y+5	; 0x05
     bde:	8e 81       	ldd	r24, Y+6	; 0x06
     be0:	9f 81       	ldd	r25, Y+7	; 0x07
     be2:	f5 d7       	rcall	.+4074   	; 0x1bce <__cmpsf2>
     be4:	88 23       	and	r24, r24
     be6:	2c f4       	brge	.+10     	; 0xbf2 <__stack+0xf3>
     be8:	cc 24       	eor	r12, r12
     bea:	dd 24       	eor	r13, r13
     bec:	ee 24       	eor	r14, r14
     bee:	ff 24       	eor	r15, r15
     bf0:	05 c0       	rjmp	.+10     	; 0xbfc <__stack+0xfd>
     bf2:	cc 24       	eor	r12, r12
     bf4:	dd 24       	eor	r13, r13
     bf6:	ee 24       	eor	r14, r14
     bf8:	ea 94       	dec	r14
     bfa:	fe 2c       	mov	r15, r14
		HeroY = 0;
		}
	}
	if (Direction == 3) {
     bfc:	80 91 6b 01 	lds	r24, 0x016B
     c00:	90 91 6c 01 	lds	r25, 0x016C
     c04:	03 97       	sbiw	r24, 0x03	; 3
     c06:	c1 f4       	brne	.+48     	; 0xc38 <__stack+0x139>
		HeroX = -1;
		HeroY = 0;
		if (my_pointer -> x < Left) {
     c08:	b5 01       	movw	r22, r10
     c0a:	88 27       	eor	r24, r24
     c0c:	77 fd       	sbrc	r23, 7
     c0e:	80 95       	com	r24
     c10:	98 2f       	mov	r25, r24
     c12:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__floatsisf>
     c16:	9b 01       	movw	r18, r22
     c18:	ac 01       	movw	r20, r24
     c1a:	68 81       	ld	r22, Y
     c1c:	79 81       	ldd	r23, Y+1	; 0x01
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	9b 81       	ldd	r25, Y+3	; 0x03
     c22:	d5 d7       	rcall	.+4010   	; 0x1bce <__cmpsf2>
     c24:	88 23       	and	r24, r24
     c26:	1c f4       	brge	.+6      	; 0xc2e <__stack+0x12f>
     c28:	cc 24       	eor	r12, r12
     c2a:	dd 24       	eor	r13, r13
     c2c:	03 c0       	rjmp	.+6      	; 0xc34 <__stack+0x135>
     c2e:	cc 24       	eor	r12, r12
     c30:	ca 94       	dec	r12
     c32:	dc 2c       	mov	r13, r12
     c34:	ee 24       	eor	r14, r14
     c36:	ff 24       	eor	r15, r15
		HeroX = 0;
		}
	}
	int x = my_pointer -> x;
     c38:	68 81       	ld	r22, Y
     c3a:	79 81       	ldd	r23, Y+1	; 0x01
     c3c:	8a 81       	ldd	r24, Y+2	; 0x02
     c3e:	9b 81       	ldd	r25, Y+3	; 0x03
     c40:	ca d7       	rcall	.+3988   	; 0x1bd6 <__fixsfsi>
	int y = my_pointer -> y;
     c42:	2c 81       	ldd	r18, Y+4	; 0x04
     c44:	3d 81       	ldd	r19, Y+5	; 0x05
     c46:	4e 81       	ldd	r20, Y+6	; 0x06
     c48:	5f 81       	ldd	r21, Y+7	; 0x07
	if (LEFT && RIGHT && x > Right ) {
     c4a:	80 91 96 01 	lds	r24, 0x0196
     c4e:	90 91 97 01 	lds	r25, 0x0197
     c52:	89 2b       	or	r24, r25
     c54:	89 f0       	breq	.+34     	; 0xc78 <__stack+0x179>
     c56:	80 91 98 01 	lds	r24, 0x0198
     c5a:	90 91 99 01 	lds	r25, 0x0199
     c5e:	89 2b       	or	r24, r25
     c60:	59 f0       	breq	.+22     	; 0xc78 <__stack+0x179>
     c62:	06 17       	cp	r16, r22
     c64:	17 07       	cpc	r17, r23
     c66:	44 f4       	brge	.+16     	; 0xc78 <__stack+0x179>
	
	my_pointer -> x = Right + 4;	
     c68:	0c 5f       	subi	r16, 0xFC	; 252
     c6a:	1f 4f       	sbci	r17, 0xFF	; 255
     c6c:	b8 01       	movw	r22, r16
     c6e:	88 27       	eor	r24, r24
     c70:	77 fd       	sbrc	r23, 7
     c72:	80 95       	com	r24
     c74:	98 2f       	mov	r25, r24
     c76:	18 c0       	rjmp	.+48     	; 0xca8 <__stack+0x1a9>
	
	} else if (LEFT && RIGHT && x < Left ) {
     c78:	80 91 96 01 	lds	r24, 0x0196
     c7c:	90 91 97 01 	lds	r25, 0x0197
     c80:	89 2b       	or	r24, r25
     c82:	c1 f0       	breq	.+48     	; 0xcb4 <__stack+0x1b5>
     c84:	80 91 98 01 	lds	r24, 0x0198
     c88:	90 91 99 01 	lds	r25, 0x0199
     c8c:	89 2b       	or	r24, r25
     c8e:	91 f0       	breq	.+36     	; 0xcb4 <__stack+0x1b5>
     c90:	6a 15       	cp	r22, r10
     c92:	7b 05       	cpc	r23, r11
     c94:	7c f4       	brge	.+30     	; 0xcb4 <__stack+0x1b5>
	
	my_pointer -> x = Left - 4;
     c96:	8c ef       	ldi	r24, 0xFC	; 252
     c98:	9f ef       	ldi	r25, 0xFF	; 255
     c9a:	a8 0e       	add	r10, r24
     c9c:	b9 1e       	adc	r11, r25
     c9e:	b5 01       	movw	r22, r10
     ca0:	88 27       	eor	r24, r24
     ca2:	77 fd       	sbrc	r23, 7
     ca4:	80 95       	com	r24
     ca6:	98 2f       	mov	r25, r24
     ca8:	c9 d7       	rcall	.+3986   	; 0x1c3c <__floatsisf>
     caa:	68 83       	st	Y, r22
     cac:	79 83       	std	Y+1, r23	; 0x01
     cae:	8a 83       	std	Y+2, r24	; 0x02
     cb0:	9b 83       	std	Y+3, r25	; 0x03
     cb2:	39 c0       	rjmp	.+114    	; 0xd26 <__stack+0x227>
		if (my_pointer -> x < Left) {
		HeroX = 0;
		}
	}
	int x = my_pointer -> x;
	int y = my_pointer -> y;
     cb4:	ca 01       	movw	r24, r20
     cb6:	b9 01       	movw	r22, r18
     cb8:	8e d7       	rcall	.+3868   	; 0x1bd6 <__fixsfsi>
	
	} else if (LEFT && RIGHT && x < Left ) {
	
	my_pointer -> x = Left - 4;
	
	} else if (LEFT && RIGHT && y < Up ) {
     cba:	80 91 96 01 	lds	r24, 0x0196
     cbe:	90 91 97 01 	lds	r25, 0x0197
     cc2:	89 2b       	or	r24, r25
     cc4:	99 f0       	breq	.+38     	; 0xcec <__stack+0x1ed>
     cc6:	80 91 98 01 	lds	r24, 0x0198
     cca:	90 91 99 01 	lds	r25, 0x0199
     cce:	89 2b       	or	r24, r25
     cd0:	69 f0       	breq	.+26     	; 0xcec <__stack+0x1ed>
     cd2:	66 15       	cp	r22, r6
     cd4:	77 05       	cpc	r23, r7
     cd6:	54 f4       	brge	.+20     	; 0xcec <__stack+0x1ed>
	
	my_pointer -> y = Up - 4;
     cd8:	8c ef       	ldi	r24, 0xFC	; 252
     cda:	9f ef       	ldi	r25, 0xFF	; 255
     cdc:	68 0e       	add	r6, r24
     cde:	79 1e       	adc	r7, r25
     ce0:	b3 01       	movw	r22, r6
     ce2:	88 27       	eor	r24, r24
     ce4:	77 fd       	sbrc	r23, 7
     ce6:	80 95       	com	r24
     ce8:	98 2f       	mov	r25, r24
     cea:	18 c0       	rjmp	.+48     	; 0xd1c <__stack+0x21d>
	
	} else if (LEFT && RIGHT && y > Down ) {
     cec:	80 91 96 01 	lds	r24, 0x0196
     cf0:	90 91 97 01 	lds	r25, 0x0197
     cf4:	89 2b       	or	r24, r25
     cf6:	b9 f0       	breq	.+46     	; 0xd26 <__stack+0x227>
     cf8:	80 91 98 01 	lds	r24, 0x0198
     cfc:	90 91 99 01 	lds	r25, 0x0199
     d00:	89 2b       	or	r24, r25
     d02:	89 f0       	breq	.+34     	; 0xd26 <__stack+0x227>
     d04:	86 16       	cp	r8, r22
     d06:	97 06       	cpc	r9, r23
     d08:	74 f4       	brge	.+28     	; 0xd26 <__stack+0x227>
	
	my_pointer -> y = Down + 4;
     d0a:	84 e0       	ldi	r24, 0x04	; 4
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	88 0e       	add	r8, r24
     d10:	99 1e       	adc	r9, r25
     d12:	b4 01       	movw	r22, r8
     d14:	88 27       	eor	r24, r24
     d16:	77 fd       	sbrc	r23, 7
     d18:	80 95       	com	r24
     d1a:	98 2f       	mov	r25, r24
     d1c:	8f d7       	rcall	.+3870   	; 0x1c3c <__floatsisf>
     d1e:	6c 83       	std	Y+4, r22	; 0x04
     d20:	7d 83       	std	Y+5, r23	; 0x05
     d22:	8e 83       	std	Y+6, r24	; 0x06
     d24:	9f 83       	std	Y+7, r25	; 0x07
	
	}
	
	my_pointer -> x += HeroX;
     d26:	b6 01       	movw	r22, r12
     d28:	88 27       	eor	r24, r24
     d2a:	77 fd       	sbrc	r23, 7
     d2c:	80 95       	com	r24
     d2e:	98 2f       	mov	r25, r24
     d30:	85 d7       	rcall	.+3850   	; 0x1c3c <__floatsisf>
     d32:	9b 01       	movw	r18, r22
     d34:	ac 01       	movw	r20, r24
     d36:	68 81       	ld	r22, Y
     d38:	79 81       	ldd	r23, Y+1	; 0x01
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	9b 81       	ldd	r25, Y+3	; 0x03
     d3e:	e3 d6       	rcall	.+3526   	; 0x1b06 <__addsf3>
     d40:	68 83       	st	Y, r22
     d42:	79 83       	std	Y+1, r23	; 0x01
     d44:	8a 83       	std	Y+2, r24	; 0x02
     d46:	9b 83       	std	Y+3, r25	; 0x03
	my_pointer -> y += HeroY;
     d48:	b7 01       	movw	r22, r14
     d4a:	88 27       	eor	r24, r24
     d4c:	77 fd       	sbrc	r23, 7
     d4e:	80 95       	com	r24
     d50:	98 2f       	mov	r25, r24
     d52:	74 d7       	rcall	.+3816   	; 0x1c3c <__floatsisf>
     d54:	9b 01       	movw	r18, r22
     d56:	ac 01       	movw	r20, r24
     d58:	6c 81       	ldd	r22, Y+4	; 0x04
     d5a:	7d 81       	ldd	r23, Y+5	; 0x05
     d5c:	8e 81       	ldd	r24, Y+6	; 0x06
     d5e:	9f 81       	ldd	r25, Y+7	; 0x07
     d60:	d2 d6       	rcall	.+3492   	; 0x1b06 <__addsf3>
     d62:	6c 83       	std	Y+4, r22	; 0x04
     d64:	7d 83       	std	Y+5, r23	; 0x05
     d66:	8e 83       	std	Y+6, r24	; 0x06
     d68:	9f 83       	std	Y+7, r25	; 0x07

}
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	ff 90       	pop	r15
     d74:	ef 90       	pop	r14
     d76:	df 90       	pop	r13
     d78:	cf 90       	pop	r12
     d7a:	bf 90       	pop	r11
     d7c:	af 90       	pop	r10
     d7e:	9f 90       	pop	r9
     d80:	8f 90       	pop	r8
     d82:	7f 90       	pop	r7
     d84:	6f 90       	pop	r6
     d86:	08 95       	ret

00000d88 <drawPit>:

}

void drawPit(void) {

	draw_line(pitLeft,pitTop,pitRight,pitTop);
     d88:	20 91 b8 01 	lds	r18, 0x01B8
     d8c:	80 91 b4 01 	lds	r24, 0x01B4
     d90:	62 2f       	mov	r22, r18
     d92:	40 91 ae 01 	lds	r20, 0x01AE
     d96:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <draw_line>
	draw_line(pitLeft,pitBottom,pitRight,pitBottom);
     d9a:	20 91 b2 01 	lds	r18, 0x01B2
     d9e:	80 91 b4 01 	lds	r24, 0x01B4
     da2:	62 2f       	mov	r22, r18
     da4:	40 91 ae 01 	lds	r20, 0x01AE
     da8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <draw_line>
	draw_line(pitLeft,pitTop,pitLeft,pitBottom);
     dac:	40 91 b4 01 	lds	r20, 0x01B4
     db0:	84 2f       	mov	r24, r20
     db2:	60 91 b8 01 	lds	r22, 0x01B8
     db6:	20 91 b2 01 	lds	r18, 0x01B2
     dba:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <draw_line>
	draw_line(pitRight,pitTop,pitRight,pitBottom);
     dbe:	40 91 ae 01 	lds	r20, 0x01AE
     dc2:	84 2f       	mov	r24, r20
     dc4:	60 91 b8 01 	lds	r22, 0x01B8
     dc8:	20 91 b2 01 	lds	r18, 0x01B2
     dcc:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <draw_line>

00000dd0 <drawScreen>:
	}
	
}

void drawScreen(void) {
	draw_line(0,8,screen_x_Full,8);
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	68 e0       	ldi	r22, 0x08	; 8
     dd4:	40 91 61 01 	lds	r20, 0x0161
     dd8:	28 e0       	ldi	r18, 0x08	; 8
     dda:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <draw_line>
	draw_line(0,8,0,screen_y_Full);
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	68 e0       	ldi	r22, 0x08	; 8
     de2:	40 e0       	ldi	r20, 0x00	; 0
     de4:	20 91 65 01 	lds	r18, 0x0165
     de8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <draw_line>
	draw_line(screen_x_Full,8,screen_x_Full,screen_y_Full);
     dec:	40 91 61 01 	lds	r20, 0x0161
     df0:	84 2f       	mov	r24, r20
     df2:	68 e0       	ldi	r22, 0x08	; 8
     df4:	20 91 65 01 	lds	r18, 0x0165
     df8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <draw_line>
	draw_line(0,screen_y_Full,screen_x_Full,screen_y_Full);
     dfc:	20 91 65 01 	lds	r18, 0x0165
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	62 2f       	mov	r22, r18
     e04:	40 91 61 01 	lds	r20, 0x0161
     e08:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <draw_line>
	draw_string("L: ",0,0);
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	0e 94 44 11 	call	0x2288	; 0x2288 <draw_string>
	draw_character((0x30 + Lives),11,0);
     e18:	80 91 7f 01 	lds	r24, 0x017F
     e1c:	80 5d       	subi	r24, 0xD0	; 208
     e1e:	6b e0       	ldi	r22, 0x0B	; 11
     e20:	40 e0       	ldi	r20, 0x00	; 0
     e22:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <draw_character>
	draw_string("S: ", 21,0);
     e26:	84 e0       	ldi	r24, 0x04	; 4
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	65 e1       	ldi	r22, 0x15	; 21
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	0e 94 44 11 	call	0x2288	; 0x2288 <draw_string>
	draw_character((0x30 + Score),31,0);
     e32:	80 91 a8 01 	lds	r24, 0x01A8
     e36:	80 5d       	subi	r24, 0xD0	; 208
     e38:	6f e1       	ldi	r22, 0x1F	; 31
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <draw_character>
	draw_character((0x30 + Direction),78,0);
     e40:	80 91 6b 01 	lds	r24, 0x016B
     e44:	90 91 6c 01 	lds	r25, 0x016C
     e48:	80 5d       	subi	r24, 0xD0	; 208
     e4a:	6e e4       	ldi	r22, 0x4E	; 78
     e4c:	40 e0       	ldi	r20, 0x00	; 0
     e4e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <draw_character>
	draw_character((0x30 + isInPit(my_pointer)),60,0);
     e52:	80 91 b6 01 	lds	r24, 0x01B6
     e56:	90 91 b7 01 	lds	r25, 0x01B7
     e5a:	dd dd       	rcall	.-1094   	; 0xa16 <isInPit>
     e5c:	80 5d       	subi	r24, 0xD0	; 208
     e5e:	6c e3       	ldi	r22, 0x3C	; 60
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <draw_character>

00000e66 <CountDown>:
	CountDown();
	Lives = 3;
	
}

void CountDown() {
     e66:	1f 93       	push	r17
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	13 e3       	ldi	r17, 0x33	; 51
     e6e:	c0 e9       	ldi	r28, 0x90	; 144
     e70:	d1 e0       	ldi	r29, 0x01	; 1
	for (char i= 0x3; i>0x0; i--) {
		clear();
     e72:	98 d7       	rcall	.+3888   	; 0x1da4 <clear>
		draw_string("Game Start In: ", 2,22); // 15*5 = 75 (84 - 75)/2 = 4
     e74:	88 e0       	ldi	r24, 0x08	; 8
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	62 e0       	ldi	r22, 0x02	; 2
     e7a:	46 e1       	ldi	r20, 0x16	; 22
     e7c:	0e 94 44 11 	call	0x2288	; 0x2288 <draw_string>
		draw_character((0x30 + i), 75,22);
     e80:	81 2f       	mov	r24, r17
     e82:	6b e4       	ldi	r22, 0x4B	; 75
     e84:	46 e1       	ldi	r20, 0x16	; 22
     e86:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <draw_character>
		refresh();
     e8a:	0e 94 59 11 	call	0x22b2	; 0x22b2 <refresh>
     e8e:	80 e1       	ldi	r24, 0x10	; 16
     e90:	97 e2       	ldi	r25, 0x27	; 39
     e92:	fe 01       	movw	r30, r28
     e94:	31 97       	sbiw	r30, 0x01	; 1
     e96:	f1 f7       	brne	.-4      	; 0xe94 <CountDown+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e98:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9a:	d9 f7       	brne	.-10     	; 0xe92 <CountDown+0x2c>
     e9c:	11 50       	subi	r17, 0x01	; 1
	Lives = 3;
	
}

void CountDown() {
	for (char i= 0x3; i>0x0; i--) {
     e9e:	10 33       	cpi	r17, 0x30	; 48
     ea0:	41 f7       	brne	.-48     	; 0xe72 <CountDown+0xc>
		draw_string("Game Start In: ", 2,22); // 15*5 = 75 (84 - 75)/2 = 4
		draw_character((0x30 + i), 75,22);
		refresh();
		_delay_ms(1000);
	}
}
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	08 95       	ret

00000eaa <seedWithButtonPress>:
	return out;
}

void seedWithButtonPress() {
// turn on teensy LED
PORTD |= 0b01000000;
     eaa:	5e 9a       	sbi	0x0b, 6	; 11
// Configure port B for the buttons....
DDRB |= 0b00001100;
     eac:	84 b1       	in	r24, 0x04	; 4
     eae:	8c 60       	ori	r24, 0x0C	; 12
     eb0:	84 b9       	out	0x04, r24	; 4
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <seedWithButtonPress+0x12>
// Wait for the button press on SW0 while iterating the seed
unsigned int seed = 0;
while (!RIGHT && !LEFT) {
seed++;
     eb8:	2f 5f       	subi	r18, 0xFF	; 255
     eba:	3f 4f       	sbci	r19, 0xFF	; 255
PORTD |= 0b01000000;
// Configure port B for the buttons....
DDRB |= 0b00001100;
// Wait for the button press on SW0 while iterating the seed
unsigned int seed = 0;
while (!RIGHT && !LEFT) {
     ebc:	80 91 98 01 	lds	r24, 0x0198
     ec0:	90 91 99 01 	lds	r25, 0x0199
     ec4:	89 2b       	or	r24, r25
     ec6:	31 f4       	brne	.+12     	; 0xed4 <seedWithButtonPress+0x2a>
     ec8:	80 91 96 01 	lds	r24, 0x0196
     ecc:	90 91 97 01 	lds	r25, 0x0197
     ed0:	89 2b       	or	r24, r25
     ed2:	91 f3       	breq	.-28     	; 0xeb8 <seedWithButtonPress+0xe>
seed++;
}
// Seed the random number generator
srand(seed);
     ed4:	c9 01       	movw	r24, r18
     ed6:	0e 94 60 13 	call	0x26c0	; 0x26c0 <srand>
// What does dgbI do? where is it from?
// dbgI((int) seed, 10);
// turn off teensy LED
PORTD = 0b00000000;
     eda:	1b b8       	out	0x0b, r1	; 11
}
     edc:	08 95       	ret

00000ede <randInRange>:
		LEFT = 0;
	}
	*/
}

int randInRange(int min, int max) {
     ede:	ef 92       	push	r14
     ee0:	ff 92       	push	r15
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	8c 01       	movw	r16, r24
     ee8:	7b 01       	movw	r14, r22
	int out = min + rand()%(max+1 - min);
     eea:	0e 94 5d 13 	call	0x26ba	; 0x26ba <rand>
     eee:	e0 1a       	sub	r14, r16
     ef0:	f1 0a       	sbc	r15, r17
     ef2:	08 94       	sec
     ef4:	e1 1c       	adc	r14, r1
     ef6:	f1 1c       	adc	r15, r1
     ef8:	b7 01       	movw	r22, r14
     efa:	0e 94 b6 12 	call	0x256c	; 0x256c <__divmodhi4>
     efe:	9c 01       	movw	r18, r24
     f00:	20 0f       	add	r18, r16
     f02:	31 1f       	adc	r19, r17
	return out;
}
     f04:	c9 01       	movw	r24, r18
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	08 95       	ret

00000f10 <setupSword>:
	return 0;
	}

}

void setupSword(void) {
     f10:	8f 92       	push	r8
     f12:	9f 92       	push	r9
     f14:	af 92       	push	r10
     f16:	bf 92       	push	r11
     f18:	cf 92       	push	r12
     f1a:	df 92       	push	r13
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
	int x = randInRange(2,screen_x);
     f24:	60 91 5f 01 	lds	r22, 0x015F
     f28:	70 91 60 01 	lds	r23, 0x0160
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	d6 df       	rcall	.-84     	; 0xede <randInRange>
     f32:	7c 01       	movw	r14, r24
	int y = randInRange(9,screen_y);
     f34:	60 91 63 01 	lds	r22, 0x0163
     f38:	70 91 64 01 	lds	r23, 0x0164
     f3c:	89 e0       	ldi	r24, 0x09	; 9
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	ce df       	rcall	.-100    	; 0xede <randInRange>
     f42:	5c 01       	movw	r10, r24
	sword -> x = x;
     f44:	80 90 aa 01 	lds	r8, 0x01AA
     f48:	90 90 ab 01 	lds	r9, 0x01AB
     f4c:	00 27       	eor	r16, r16
     f4e:	f7 fc       	sbrc	r15, 7
     f50:	00 95       	com	r16
     f52:	10 2f       	mov	r17, r16
     f54:	c8 01       	movw	r24, r16
     f56:	b7 01       	movw	r22, r14
     f58:	71 d6       	rcall	.+3298   	; 0x1c3c <__floatsisf>
     f5a:	f4 01       	movw	r30, r8
     f5c:	60 83       	st	Z, r22
     f5e:	71 83       	std	Z+1, r23	; 0x01
     f60:	82 83       	std	Z+2, r24	; 0x02
     f62:	93 83       	std	Z+3, r25	; 0x03
	sword -> y = y;
     f64:	cc 24       	eor	r12, r12
     f66:	b7 fc       	sbrc	r11, 7
     f68:	c0 94       	com	r12
     f6a:	dc 2c       	mov	r13, r12
     f6c:	c6 01       	movw	r24, r12
     f6e:	b5 01       	movw	r22, r10
     f70:	65 d6       	rcall	.+3274   	; 0x1c3c <__floatsisf>
     f72:	f4 01       	movw	r30, r8
     f74:	64 83       	std	Z+4, r22	; 0x04
     f76:	75 83       	std	Z+5, r23	; 0x05
     f78:	86 83       	std	Z+6, r24	; 0x06
     f7a:	97 83       	std	Z+7, r25	; 0x07
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	ff 90       	pop	r15
     f82:	ef 90       	pop	r14
     f84:	df 90       	pop	r13
     f86:	cf 90       	pop	r12
     f88:	bf 90       	pop	r11
     f8a:	af 90       	pop	r10
     f8c:	9f 90       	pop	r9
     f8e:	8f 90       	pop	r8
     f90:	08 95       	ret

00000f92 <setupPit>:
	
	} 

}

void setupPit(void) {
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17

	int pitwidth = randInRange(6,12);
     f9a:	86 e0       	ldi	r24, 0x06	; 6
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	6c e0       	ldi	r22, 0x0C	; 12
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	9d df       	rcall	.-198    	; 0xede <randInRange>
     fa4:	8c 01       	movw	r16, r24
	int pitheight = randInRange(6,12);
     fa6:	86 e0       	ldi	r24, 0x06	; 6
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	6c e0       	ldi	r22, 0x0C	; 12
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	97 df       	rcall	.-210    	; 0xede <randInRange>
     fb0:	7c 01       	movw	r14, r24
	pitLeft = randInRange(20,screen_x_Full-20);
     fb2:	60 91 61 01 	lds	r22, 0x0161
     fb6:	70 91 62 01 	lds	r23, 0x0162
     fba:	64 51       	subi	r22, 0x14	; 20
     fbc:	70 40       	sbci	r23, 0x00	; 0
     fbe:	84 e1       	ldi	r24, 0x14	; 20
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	8d df       	rcall	.-230    	; 0xede <randInRange>
     fc4:	90 93 b5 01 	sts	0x01B5, r25
     fc8:	80 93 b4 01 	sts	0x01B4, r24
	pitRight = pitLeft + pitwidth;
     fcc:	80 0f       	add	r24, r16
     fce:	91 1f       	adc	r25, r17
     fd0:	90 93 af 01 	sts	0x01AF, r25
     fd4:	80 93 ae 01 	sts	0x01AE, r24
	pitTop = randInRange(9+20,screen_y_Full-20);
     fd8:	60 91 65 01 	lds	r22, 0x0165
     fdc:	70 91 66 01 	lds	r23, 0x0166
     fe0:	64 51       	subi	r22, 0x14	; 20
     fe2:	70 40       	sbci	r23, 0x00	; 0
     fe4:	8d e1       	ldi	r24, 0x1D	; 29
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	7a df       	rcall	.-268    	; 0xede <randInRange>
     fea:	90 93 b9 01 	sts	0x01B9, r25
     fee:	80 93 b8 01 	sts	0x01B8, r24
	pitBottom = pitTop + pitheight;
     ff2:	8e 0d       	add	r24, r14
     ff4:	9f 1d       	adc	r25, r15
     ff6:	90 93 b3 01 	sts	0x01B3, r25
     ffa:	80 93 b2 01 	sts	0x01B2, r24
	drawPit();
     ffe:	c4 de       	rcall	.-632    	; 0xd88 <drawPit>

}
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	08 95       	ret

0000100a <setupZombies>:
	draw_character((0x30 + Direction),78,0);
	draw_character((0x30 + isInPit(my_pointer)),60,0);

}

void setupZombies(void ) {
    100a:	2f 92       	push	r2
    100c:	3f 92       	push	r3
    100e:	4f 92       	push	r4
    1010:	5f 92       	push	r5
    1012:	6f 92       	push	r6
    1014:	7f 92       	push	r7
    1016:	8f 92       	push	r8
    1018:	9f 92       	push	r9
    101a:	af 92       	push	r10
    101c:	bf 92       	push	r11
    101e:	cf 92       	push	r12
    1020:	df 92       	push	r13
    1022:	ef 92       	push	r14
    1024:	ff 92       	push	r15
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29

	int middle_x = screen_x/2;
    102e:	80 91 5f 01 	lds	r24, 0x015F
    1032:	90 91 60 01 	lds	r25, 0x0160
    1036:	62 e0       	ldi	r22, 0x02	; 2
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	0e 94 b6 12 	call	0x256c	; 0x256c <__divmodhi4>
    103e:	4b 01       	movw	r8, r22
	int middle_y = screen_y/2 + 5;
    1040:	80 91 63 01 	lds	r24, 0x0163
    1044:	90 91 64 01 	lds	r25, 0x0164
    1048:	62 e0       	ldi	r22, 0x02	; 2
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	0e 94 b6 12 	call	0x256c	; 0x256c <__divmodhi4>
    1050:	1b 01       	movw	r2, r22
	byte x, y;
	
	for (int i = 0; i<2; i++) {
		x = randInRange(1,middle_x-10);
    1052:	66 ef       	ldi	r22, 0xF6	; 246
    1054:	46 2e       	mov	r4, r22
    1056:	6f ef       	ldi	r22, 0xFF	; 255
    1058:	56 2e       	mov	r5, r22
    105a:	48 0c       	add	r4, r8
    105c:	59 1c       	adc	r5, r9
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	b2 01       	movw	r22, r4
    1064:	3c df       	rcall	.-392    	; 0xede <randInRange>
    1066:	a8 2e       	mov	r10, r24
		y = randInRange(9, screen_y-1);
    1068:	60 91 63 01 	lds	r22, 0x0163
    106c:	70 91 64 01 	lds	r23, 0x0164
    1070:	61 50       	subi	r22, 0x01	; 1
    1072:	70 40       	sbci	r23, 0x00	; 0
    1074:	89 e0       	ldi	r24, 0x09	; 9
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	32 df       	rcall	.-412    	; 0xede <randInRange>
    107a:	e8 2e       	mov	r14, r24
		zombie[i] -> x = x;
    107c:	60 90 ba 01 	lds	r6, 0x01BA
    1080:	70 90 bb 01 	lds	r7, 0x01BB
    1084:	bb 24       	eor	r11, r11
    1086:	cc 24       	eor	r12, r12
    1088:	dd 24       	eor	r13, r13
    108a:	c6 01       	movw	r24, r12
    108c:	b5 01       	movw	r22, r10
    108e:	d4 d5       	rcall	.+2984   	; 0x1c38 <__floatunsisf>
    1090:	f3 01       	movw	r30, r6
    1092:	60 83       	st	Z, r22
    1094:	71 83       	std	Z+1, r23	; 0x01
    1096:	82 83       	std	Z+2, r24	; 0x02
    1098:	93 83       	std	Z+3, r25	; 0x03
		zombie[i] -> y = y;
    109a:	ff 24       	eor	r15, r15
    109c:	00 e0       	ldi	r16, 0x00	; 0
    109e:	10 e0       	ldi	r17, 0x00	; 0
    10a0:	c8 01       	movw	r24, r16
    10a2:	b7 01       	movw	r22, r14
    10a4:	c9 d5       	rcall	.+2962   	; 0x1c38 <__floatunsisf>
    10a6:	f3 01       	movw	r30, r6
    10a8:	64 83       	std	Z+4, r22	; 0x04
    10aa:	75 83       	std	Z+5, r23	; 0x05
    10ac:	86 83       	std	Z+6, r24	; 0x06
    10ae:	97 83       	std	Z+7, r25	; 0x07
	int middle_x = screen_x/2;
	int middle_y = screen_y/2 + 5;
	byte x, y;
	
	for (int i = 0; i<2; i++) {
		x = randInRange(1,middle_x-10);
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	b2 01       	movw	r22, r4
    10b6:	13 df       	rcall	.-474    	; 0xede <randInRange>
    10b8:	a8 2e       	mov	r10, r24
		y = randInRange(9, screen_y-1);
    10ba:	60 91 63 01 	lds	r22, 0x0163
    10be:	70 91 64 01 	lds	r23, 0x0164
    10c2:	61 50       	subi	r22, 0x01	; 1
    10c4:	70 40       	sbci	r23, 0x00	; 0
    10c6:	89 e0       	ldi	r24, 0x09	; 9
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	09 df       	rcall	.-494    	; 0xede <randInRange>
    10cc:	e8 2e       	mov	r14, r24
		zombie[i] -> x = x;
    10ce:	60 90 bc 01 	lds	r6, 0x01BC
    10d2:	70 90 bd 01 	lds	r7, 0x01BD
    10d6:	bb 24       	eor	r11, r11
    10d8:	cc 24       	eor	r12, r12
    10da:	dd 24       	eor	r13, r13
    10dc:	c6 01       	movw	r24, r12
    10de:	b5 01       	movw	r22, r10
    10e0:	ab d5       	rcall	.+2902   	; 0x1c38 <__floatunsisf>
    10e2:	f3 01       	movw	r30, r6
    10e4:	60 83       	st	Z, r22
    10e6:	71 83       	std	Z+1, r23	; 0x01
    10e8:	82 83       	std	Z+2, r24	; 0x02
    10ea:	93 83       	std	Z+3, r25	; 0x03
		zombie[i] -> y = y;
    10ec:	ff 24       	eor	r15, r15
    10ee:	00 e0       	ldi	r16, 0x00	; 0
    10f0:	10 e0       	ldi	r17, 0x00	; 0
    10f2:	c8 01       	movw	r24, r16
    10f4:	b7 01       	movw	r22, r14
    10f6:	a0 d5       	rcall	.+2880   	; 0x1c38 <__floatunsisf>
    10f8:	f3 01       	movw	r30, r6
    10fa:	64 83       	std	Z+4, r22	; 0x04
    10fc:	75 83       	std	Z+5, r23	; 0x05
    10fe:	86 83       	std	Z+6, r24	; 0x06
    1100:	97 83       	std	Z+7, r25	; 0x07
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(middle_x+10,screen_x);
    1102:	8a e0       	ldi	r24, 0x0A	; 10
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	88 0e       	add	r8, r24
    1108:	99 1e       	adc	r9, r25
    110a:	60 91 5f 01 	lds	r22, 0x015F
    110e:	70 91 60 01 	lds	r23, 0x0160
    1112:	c4 01       	movw	r24, r8
    1114:	e4 de       	rcall	.-568    	; 0xede <randInRange>
    1116:	a8 2e       	mov	r10, r24
		y = randInRange(9, screen_y-1);
    1118:	60 91 63 01 	lds	r22, 0x0163
    111c:	70 91 64 01 	lds	r23, 0x0164
    1120:	61 50       	subi	r22, 0x01	; 1
    1122:	70 40       	sbci	r23, 0x00	; 0
    1124:	89 e0       	ldi	r24, 0x09	; 9
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	da de       	rcall	.-588    	; 0xede <randInRange>
    112a:	e8 2e       	mov	r14, r24
		zombie[i+2] -> x = x;
    112c:	60 90 be 01 	lds	r6, 0x01BE
    1130:	70 90 bf 01 	lds	r7, 0x01BF
    1134:	bb 24       	eor	r11, r11
    1136:	cc 24       	eor	r12, r12
    1138:	dd 24       	eor	r13, r13
    113a:	c6 01       	movw	r24, r12
    113c:	b5 01       	movw	r22, r10
    113e:	7c d5       	rcall	.+2808   	; 0x1c38 <__floatunsisf>
    1140:	f3 01       	movw	r30, r6
    1142:	60 83       	st	Z, r22
    1144:	71 83       	std	Z+1, r23	; 0x01
    1146:	82 83       	std	Z+2, r24	; 0x02
    1148:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+2] -> y = y;
    114a:	ff 24       	eor	r15, r15
    114c:	00 e0       	ldi	r16, 0x00	; 0
    114e:	10 e0       	ldi	r17, 0x00	; 0
    1150:	c8 01       	movw	r24, r16
    1152:	b7 01       	movw	r22, r14
    1154:	71 d5       	rcall	.+2786   	; 0x1c38 <__floatunsisf>
    1156:	f3 01       	movw	r30, r6
    1158:	64 83       	std	Z+4, r22	; 0x04
    115a:	75 83       	std	Z+5, r23	; 0x05
    115c:	86 83       	std	Z+6, r24	; 0x06
    115e:	97 83       	std	Z+7, r25	; 0x07
		y = randInRange(9, screen_y-1);
		zombie[i] -> x = x;
		zombie[i] -> y = y;
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(middle_x+10,screen_x);
    1160:	60 91 5f 01 	lds	r22, 0x015F
    1164:	70 91 60 01 	lds	r23, 0x0160
    1168:	c4 01       	movw	r24, r8
    116a:	b9 de       	rcall	.-654    	; 0xede <randInRange>
    116c:	a8 2e       	mov	r10, r24
		y = randInRange(9, screen_y-1);
    116e:	60 91 63 01 	lds	r22, 0x0163
    1172:	70 91 64 01 	lds	r23, 0x0164
    1176:	61 50       	subi	r22, 0x01	; 1
    1178:	70 40       	sbci	r23, 0x00	; 0
    117a:	89 e0       	ldi	r24, 0x09	; 9
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	af de       	rcall	.-674    	; 0xede <randInRange>
    1180:	e8 2e       	mov	r14, r24
		zombie[i+2] -> x = x;
    1182:	80 90 c0 01 	lds	r8, 0x01C0
    1186:	90 90 c1 01 	lds	r9, 0x01C1
    118a:	bb 24       	eor	r11, r11
    118c:	cc 24       	eor	r12, r12
    118e:	dd 24       	eor	r13, r13
    1190:	c6 01       	movw	r24, r12
    1192:	b5 01       	movw	r22, r10
    1194:	51 d5       	rcall	.+2722   	; 0x1c38 <__floatunsisf>
    1196:	f4 01       	movw	r30, r8
    1198:	60 83       	st	Z, r22
    119a:	71 83       	std	Z+1, r23	; 0x01
    119c:	82 83       	std	Z+2, r24	; 0x02
    119e:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+2] -> y = y;
    11a0:	ff 24       	eor	r15, r15
    11a2:	00 e0       	ldi	r16, 0x00	; 0
    11a4:	10 e0       	ldi	r17, 0x00	; 0
    11a6:	c8 01       	movw	r24, r16
    11a8:	b7 01       	movw	r22, r14
    11aa:	46 d5       	rcall	.+2700   	; 0x1c38 <__floatunsisf>
    11ac:	f4 01       	movw	r30, r8
    11ae:	64 83       	std	Z+4, r22	; 0x04
    11b0:	75 83       	std	Z+5, r23	; 0x05
    11b2:	86 83       	std	Z+6, r24	; 0x06
    11b4:	97 83       	std	Z+7, r25	; 0x07
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(1,screen_x);
    11b6:	60 91 5f 01 	lds	r22, 0x015F
    11ba:	70 91 60 01 	lds	r23, 0x0160
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	8d de       	rcall	.-742    	; 0xede <randInRange>
    11c4:	e8 2e       	mov	r14, r24
		y = randInRange(9, middle_y-10);
    11c6:	5b ef       	ldi	r21, 0xFB	; 251
    11c8:	65 2e       	mov	r6, r21
    11ca:	5f ef       	ldi	r21, 0xFF	; 255
    11cc:	75 2e       	mov	r7, r21
    11ce:	62 0c       	add	r6, r2
    11d0:	73 1c       	adc	r7, r3
    11d2:	89 e0       	ldi	r24, 0x09	; 9
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	b3 01       	movw	r22, r6
    11d8:	82 de       	rcall	.-764    	; 0xede <randInRange>
    11da:	a8 2e       	mov	r10, r24
		zombie[i+4] -> x = x;
    11dc:	80 90 c2 01 	lds	r8, 0x01C2
    11e0:	90 90 c3 01 	lds	r9, 0x01C3
    11e4:	ff 24       	eor	r15, r15
    11e6:	00 e0       	ldi	r16, 0x00	; 0
    11e8:	10 e0       	ldi	r17, 0x00	; 0
    11ea:	c8 01       	movw	r24, r16
    11ec:	b7 01       	movw	r22, r14
    11ee:	24 d5       	rcall	.+2632   	; 0x1c38 <__floatunsisf>
    11f0:	f4 01       	movw	r30, r8
    11f2:	60 83       	st	Z, r22
    11f4:	71 83       	std	Z+1, r23	; 0x01
    11f6:	82 83       	std	Z+2, r24	; 0x02
    11f8:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+4] -> y = y;
    11fa:	bb 24       	eor	r11, r11
    11fc:	cc 24       	eor	r12, r12
    11fe:	dd 24       	eor	r13, r13
    1200:	c6 01       	movw	r24, r12
    1202:	b5 01       	movw	r22, r10
    1204:	19 d5       	rcall	.+2610   	; 0x1c38 <__floatunsisf>
    1206:	f4 01       	movw	r30, r8
    1208:	64 83       	std	Z+4, r22	; 0x04
    120a:	75 83       	std	Z+5, r23	; 0x05
    120c:	86 83       	std	Z+6, r24	; 0x06
    120e:	97 83       	std	Z+7, r25	; 0x07
		y = randInRange(9, screen_y-1);
		zombie[i+2] -> x = x;
		zombie[i+2] -> y = y;
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(1,screen_x);
    1210:	60 91 5f 01 	lds	r22, 0x015F
    1214:	70 91 60 01 	lds	r23, 0x0160
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	60 de       	rcall	.-832    	; 0xede <randInRange>
    121e:	e8 2e       	mov	r14, r24
		y = randInRange(9, middle_y-10);
    1220:	89 e0       	ldi	r24, 0x09	; 9
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	b3 01       	movw	r22, r6
    1226:	5b de       	rcall	.-842    	; 0xede <randInRange>
    1228:	a8 2e       	mov	r10, r24
		zombie[i+4] -> x = x;
    122a:	80 90 c4 01 	lds	r8, 0x01C4
    122e:	90 90 c5 01 	lds	r9, 0x01C5
    1232:	ff 24       	eor	r15, r15
    1234:	00 e0       	ldi	r16, 0x00	; 0
    1236:	10 e0       	ldi	r17, 0x00	; 0
    1238:	c8 01       	movw	r24, r16
    123a:	b7 01       	movw	r22, r14
    123c:	fd d4       	rcall	.+2554   	; 0x1c38 <__floatunsisf>
    123e:	f4 01       	movw	r30, r8
    1240:	60 83       	st	Z, r22
    1242:	71 83       	std	Z+1, r23	; 0x01
    1244:	82 83       	std	Z+2, r24	; 0x02
    1246:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+4] -> y = y;
    1248:	bb 24       	eor	r11, r11
    124a:	cc 24       	eor	r12, r12
    124c:	dd 24       	eor	r13, r13
    124e:	c6 01       	movw	r24, r12
    1250:	b5 01       	movw	r22, r10
    1252:	f2 d4       	rcall	.+2532   	; 0x1c38 <__floatunsisf>
    1254:	f4 01       	movw	r30, r8
    1256:	64 83       	std	Z+4, r22	; 0x04
    1258:	75 83       	std	Z+5, r23	; 0x05
    125a:	86 83       	std	Z+6, r24	; 0x06
    125c:	97 83       	std	Z+7, r25	; 0x07
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(1,screen_x);
    125e:	60 91 5f 01 	lds	r22, 0x015F
    1262:	70 91 60 01 	lds	r23, 0x0160
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	39 de       	rcall	.-910    	; 0xede <randInRange>
    126c:	a8 2e       	mov	r10, r24
		y = randInRange(middle_y+10,screen_y);
    126e:	8f e0       	ldi	r24, 0x0F	; 15
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	28 0e       	add	r2, r24
    1274:	39 1e       	adc	r3, r25
    1276:	60 91 63 01 	lds	r22, 0x0163
    127a:	70 91 64 01 	lds	r23, 0x0164
    127e:	c1 01       	movw	r24, r2
    1280:	2e de       	rcall	.-932    	; 0xede <randInRange>
    1282:	e8 2e       	mov	r14, r24
		zombie[i+6] -> x = x;
    1284:	80 90 c6 01 	lds	r8, 0x01C6
    1288:	90 90 c7 01 	lds	r9, 0x01C7
    128c:	bb 24       	eor	r11, r11
    128e:	cc 24       	eor	r12, r12
    1290:	dd 24       	eor	r13, r13
    1292:	c6 01       	movw	r24, r12
    1294:	b5 01       	movw	r22, r10
    1296:	d0 d4       	rcall	.+2464   	; 0x1c38 <__floatunsisf>
    1298:	f4 01       	movw	r30, r8
    129a:	60 83       	st	Z, r22
    129c:	71 83       	std	Z+1, r23	; 0x01
    129e:	82 83       	std	Z+2, r24	; 0x02
    12a0:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+6] -> y = y;
    12a2:	ff 24       	eor	r15, r15
    12a4:	00 e0       	ldi	r16, 0x00	; 0
    12a6:	10 e0       	ldi	r17, 0x00	; 0
    12a8:	c8 01       	movw	r24, r16
    12aa:	b7 01       	movw	r22, r14
    12ac:	c5 d4       	rcall	.+2442   	; 0x1c38 <__floatunsisf>
    12ae:	f4 01       	movw	r30, r8
    12b0:	64 83       	std	Z+4, r22	; 0x04
    12b2:	75 83       	std	Z+5, r23	; 0x05
    12b4:	86 83       	std	Z+6, r24	; 0x06
    12b6:	97 83       	std	Z+7, r25	; 0x07
		y = randInRange(9, middle_y-10);
		zombie[i+4] -> x = x;
		zombie[i+4] -> y = y;
	}
	for (int i = 0; i<2; i++) {
		x = randInRange(1,screen_x);
    12b8:	60 91 5f 01 	lds	r22, 0x015F
    12bc:	70 91 60 01 	lds	r23, 0x0160
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0c de       	rcall	.-1000   	; 0xede <randInRange>
    12c6:	e8 2e       	mov	r14, r24
		y = randInRange(middle_y+10,screen_y);
    12c8:	60 91 63 01 	lds	r22, 0x0163
    12cc:	70 91 64 01 	lds	r23, 0x0164
    12d0:	c1 01       	movw	r24, r2
    12d2:	05 de       	rcall	.-1014   	; 0xede <randInRange>
    12d4:	a8 2e       	mov	r10, r24
		zombie[i+6] -> x = x;
    12d6:	80 90 c8 01 	lds	r8, 0x01C8
    12da:	90 90 c9 01 	lds	r9, 0x01C9
    12de:	ff 24       	eor	r15, r15
    12e0:	00 e0       	ldi	r16, 0x00	; 0
    12e2:	10 e0       	ldi	r17, 0x00	; 0
    12e4:	c8 01       	movw	r24, r16
    12e6:	b7 01       	movw	r22, r14
    12e8:	a7 d4       	rcall	.+2382   	; 0x1c38 <__floatunsisf>
    12ea:	f4 01       	movw	r30, r8
    12ec:	60 83       	st	Z, r22
    12ee:	71 83       	std	Z+1, r23	; 0x01
    12f0:	82 83       	std	Z+2, r24	; 0x02
    12f2:	93 83       	std	Z+3, r25	; 0x03
		zombie[i+6] -> y = y;
    12f4:	bb 24       	eor	r11, r11
    12f6:	cc 24       	eor	r12, r12
    12f8:	dd 24       	eor	r13, r13
    12fa:	c6 01       	movw	r24, r12
    12fc:	b5 01       	movw	r22, r10
    12fe:	9c d4       	rcall	.+2360   	; 0x1c38 <__floatunsisf>
    1300:	f4 01       	movw	r30, r8
    1302:	64 83       	std	Z+4, r22	; 0x04
    1304:	75 83       	std	Z+5, r23	; 0x05
    1306:	86 83       	std	Z+6, r24	; 0x06
    1308:	97 83       	std	Z+7, r25	; 0x07
    130a:	cd e6       	ldi	r28, 0x6D	; 109
    130c:	d1 e0       	ldi	r29, 0x01	; 1
	}
	for (int i = 0; i<8; i++) {
	zDirection[i] = randInRange(0,3);
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	63 e0       	ldi	r22, 0x03	; 3
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	e3 dd       	rcall	.-1082   	; 0xede <randInRange>
    1318:	89 93       	st	Y+, r24
    131a:	99 93       	st	Y+, r25
		x = randInRange(1,screen_x);
		y = randInRange(middle_y+10,screen_y);
		zombie[i+6] -> x = x;
		zombie[i+6] -> y = y;
	}
	for (int i = 0; i<8; i++) {
    131c:	f1 e0       	ldi	r31, 0x01	; 1
    131e:	cd 37       	cpi	r28, 0x7D	; 125
    1320:	df 07       	cpc	r29, r31
    1322:	a9 f7       	brne	.-22     	; 0x130e <setupZombies+0x304>
	zDirection[i] = randInRange(0,3);
	}
}
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	ff 90       	pop	r15
    132e:	ef 90       	pop	r14
    1330:	df 90       	pop	r13
    1332:	cf 90       	pop	r12
    1334:	bf 90       	pop	r11
    1336:	af 90       	pop	r10
    1338:	9f 90       	pop	r9
    133a:	8f 90       	pop	r8
    133c:	7f 90       	pop	r7
    133e:	6f 90       	pop	r6
    1340:	5f 90       	pop	r5
    1342:	4f 90       	pop	r4
    1344:	3f 90       	pop	r3
    1346:	2f 90       	pop	r2
    1348:	08 95       	ret

0000134a <zombiesForward>:
	my_pointer -> x += HeroX;
	my_pointer -> y += HeroY;

}

void zombiesForward(void) {
    134a:	2f 92       	push	r2
    134c:	3f 92       	push	r3
    134e:	4f 92       	push	r4
    1350:	5f 92       	push	r5
    1352:	6f 92       	push	r6
    1354:	7f 92       	push	r7
    1356:	8f 92       	push	r8
    1358:	9f 92       	push	r9
    135a:	af 92       	push	r10
    135c:	bf 92       	push	r11
    135e:	cf 92       	push	r12
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	1a eb       	ldi	r17, 0xBA	; 186
    1370:	21 2e       	mov	r2, r17
    1372:	11 e0       	ldi	r17, 0x01	; 1
    1374:	31 2e       	mov	r3, r17
    1376:	bd e6       	ldi	r27, 0x6D	; 109
    1378:	6b 2e       	mov	r6, r27
    137a:	b1 e0       	ldi	r27, 0x01	; 1
    137c:	7b 2e       	mov	r7, r27
    137e:	cc 24       	eor	r12, r12
    1380:	dd 24       	eor	r13, r13
    1382:	44 24       	eor	r4, r4
    1384:	55 24       	eor	r5, r5
	
	//for all zombies
	for (int i = 0; i<8; i++) {
		
		// change of direction with probability 5% each way
		range = randInRange(1,100);
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	64 e6       	ldi	r22, 0x64	; 100
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	a7 dd       	rcall	.-1202   	; 0xede <randInRange>
		if (range < 6) {
    1390:	86 30       	cpi	r24, 0x06	; 6
    1392:	91 05       	cpc	r25, r1
    1394:	5c f4       	brge	.+22     	; 0x13ac <zombiesForward+0x62>
			zDirection[i] = (zDirection[i]-1);
    1396:	f3 01       	movw	r30, r6
    1398:	80 81       	ld	r24, Z
    139a:	91 81       	ldd	r25, Z+1	; 0x01
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	80 83       	st	Z, r24
			if (zDirection[i] < 0) {
    13a2:	97 ff       	sbrs	r25, 7
    13a4:	10 c0       	rjmp	.+32     	; 0x13c6 <zombiesForward+0x7c>
			zDirection[i] = 3;
    13a6:	83 e0       	ldi	r24, 0x03	; 3
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	0b c0       	rjmp	.+22     	; 0x13c2 <zombiesForward+0x78>
			}
		}
		else if (range > 95) {
    13ac:	80 36       	cpi	r24, 0x60	; 96
    13ae:	91 05       	cpc	r25, r1
    13b0:	54 f0       	brlt	.+20     	; 0x13c6 <zombiesForward+0x7c>
			zDirection[i] = (zDirection[i]+1)%4;
    13b2:	f3 01       	movw	r30, r6
    13b4:	80 81       	ld	r24, Z
    13b6:	91 81       	ldd	r25, Z+1	; 0x01
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	64 e0       	ldi	r22, 0x04	; 4
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	0e 94 b6 12 	call	0x256c	; 0x256c <__divmodhi4>
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	80 83       	st	Z, r24
		}
		
		// is zombie in pit?
		if (isInPit(zombie[i])) {
    13c6:	f1 01       	movw	r30, r2
    13c8:	a0 80       	ld	r10, Z
    13ca:	b1 80       	ldd	r11, Z+1	; 0x01
    13cc:	c5 01       	movw	r24, r10
    13ce:	23 db       	rcall	.-2490   	; 0xa16 <isInPit>
    13d0:	89 2b       	or	r24, r25
    13d2:	d1 f0       	breq	.+52     	; 0x1408 <zombiesForward+0xbe>
			Up = pitTop+2;
    13d4:	e0 90 b8 01 	lds	r14, 0x01B8
    13d8:	f0 90 b9 01 	lds	r15, 0x01B9
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	e8 0e       	add	r14, r24
    13e2:	f9 1e       	adc	r15, r25
			Down = pitBottom - 4;
    13e4:	20 91 b2 01 	lds	r18, 0x01B2
    13e8:	30 91 b3 01 	lds	r19, 0x01B3
    13ec:	24 50       	subi	r18, 0x04	; 4
    13ee:	30 40       	sbci	r19, 0x00	; 0
			Left = pitLeft+2;
    13f0:	80 90 b4 01 	lds	r8, 0x01B4
    13f4:	90 90 b5 01 	lds	r9, 0x01B5
    13f8:	88 0e       	add	r8, r24
    13fa:	99 1e       	adc	r9, r25
			Right = pitRight -4;
    13fc:	c0 91 ae 01 	lds	r28, 0x01AE
    1400:	d0 91 af 01 	lds	r29, 0x01AF
    1404:	24 97       	sbiw	r28, 0x04	; 4
    1406:	11 c0       	rjmp	.+34     	; 0x142a <zombiesForward+0xe0>
		} else {
			Up = 10;
			Down = screen_y-1;
    1408:	20 91 63 01 	lds	r18, 0x0163
    140c:	30 91 64 01 	lds	r19, 0x0164
    1410:	21 50       	subi	r18, 0x01	; 1
    1412:	30 40       	sbci	r19, 0x00	; 0
			Left = 2;
			Right = screen_x-1;
    1414:	c0 91 5f 01 	lds	r28, 0x015F
    1418:	d0 91 60 01 	lds	r29, 0x0160
    141c:	21 97       	sbiw	r28, 0x01	; 1
    141e:	aa e0       	ldi	r26, 0x0A	; 10
    1420:	ea 2e       	mov	r14, r26
    1422:	f1 2c       	mov	r15, r1
    1424:	f2 e0       	ldi	r31, 0x02	; 2
    1426:	8f 2e       	mov	r8, r31
    1428:	91 2c       	mov	r9, r1
		}
	
		if (zDirection[i] == 0) {
    142a:	f3 01       	movw	r30, r6
    142c:	00 81       	ld	r16, Z
    142e:	11 81       	ldd	r17, Z+1	; 0x01
    1430:	01 15       	cp	r16, r1
    1432:	11 05       	cpc	r17, r1
    1434:	b1 f4       	brne	.+44     	; 0x1462 <zombiesForward+0x118>
			ZY = 1;
			ZX = 0;
			if ((zombie[i] -> y > Down)) {
    1436:	b9 01       	movw	r22, r18
    1438:	88 27       	eor	r24, r24
    143a:	77 fd       	sbrc	r23, 7
    143c:	80 95       	com	r24
    143e:	98 2f       	mov	r25, r24
    1440:	fd d3       	rcall	.+2042   	; 0x1c3c <__floatsisf>
    1442:	9b 01       	movw	r18, r22
    1444:	ac 01       	movw	r20, r24
    1446:	f5 01       	movw	r30, r10
    1448:	64 81       	ldd	r22, Z+4	; 0x04
    144a:	75 81       	ldd	r23, Z+5	; 0x05
    144c:	86 81       	ldd	r24, Z+6	; 0x06
    144e:	97 81       	ldd	r25, Z+7	; 0x07
    1450:	a5 d4       	rcall	.+2378   	; 0x1d9c <__gesf2>
    1452:	18 16       	cp	r1, r24
    1454:	0c f4       	brge	.+2      	; 0x1458 <zombiesForward+0x10e>
    1456:	4e c0       	rjmp	.+156    	; 0x14f4 <zombiesForward+0x1aa>
    1458:	e1 e0       	ldi	r30, 0x01	; 1
    145a:	ce 2e       	mov	r12, r30
    145c:	d1 2c       	mov	r13, r1
    145e:	44 24       	eor	r4, r4
    1460:	55 24       	eor	r5, r5
			ZY = 0;
			}
		}
		if (zDirection[i] == 1) {
    1462:	01 30       	cpi	r16, 0x01	; 1
    1464:	11 05       	cpc	r17, r1
    1466:	89 f4       	brne	.+34     	; 0x148a <zombiesForward+0x140>
			ZX = 1;
			ZY = 0;
			if ((zombie[i] -> x > Right)) {
    1468:	be 01       	movw	r22, r28
    146a:	88 27       	eor	r24, r24
    146c:	77 fd       	sbrc	r23, 7
    146e:	80 95       	com	r24
    1470:	98 2f       	mov	r25, r24
    1472:	e4 d3       	rcall	.+1992   	; 0x1c3c <__floatsisf>
    1474:	9b 01       	movw	r18, r22
    1476:	ac 01       	movw	r20, r24
    1478:	f5 01       	movw	r30, r10
    147a:	60 81       	ld	r22, Z
    147c:	71 81       	ldd	r23, Z+1	; 0x01
    147e:	82 81       	ldd	r24, Z+2	; 0x02
    1480:	93 81       	ldd	r25, Z+3	; 0x03
    1482:	8c d4       	rcall	.+2328   	; 0x1d9c <__gesf2>
    1484:	18 16       	cp	r1, r24
    1486:	b4 f1       	brlt	.+108    	; 0x14f4 <zombiesForward+0x1aa>
    1488:	17 c0       	rjmp	.+46     	; 0x14b8 <zombiesForward+0x16e>
			ZX = 0;
			}
		}
		if (zDirection[i] == 2) {
    148a:	02 30       	cpi	r16, 0x02	; 2
    148c:	11 05       	cpc	r17, r1
    148e:	c9 f4       	brne	.+50     	; 0x14c2 <zombiesForward+0x178>
			ZY = -1;
			ZX = 0;
			if ((zombie[i] -> y < Up)) {
    1490:	b7 01       	movw	r22, r14
    1492:	88 27       	eor	r24, r24
    1494:	77 fd       	sbrc	r23, 7
    1496:	80 95       	com	r24
    1498:	98 2f       	mov	r25, r24
    149a:	d0 d3       	rcall	.+1952   	; 0x1c3c <__floatsisf>
    149c:	9b 01       	movw	r18, r22
    149e:	ac 01       	movw	r20, r24
    14a0:	f5 01       	movw	r30, r10
    14a2:	64 81       	ldd	r22, Z+4	; 0x04
    14a4:	75 81       	ldd	r23, Z+5	; 0x05
    14a6:	86 81       	ldd	r24, Z+6	; 0x06
    14a8:	97 81       	ldd	r25, Z+7	; 0x07
    14aa:	91 d3       	rcall	.+1826   	; 0x1bce <__cmpsf2>
    14ac:	87 fd       	sbrc	r24, 7
    14ae:	22 c0       	rjmp	.+68     	; 0x14f4 <zombiesForward+0x1aa>
    14b0:	cc 24       	eor	r12, r12
    14b2:	ca 94       	dec	r12
    14b4:	dc 2c       	mov	r13, r12
    14b6:	20 c0       	rjmp	.+64     	; 0x14f8 <zombiesForward+0x1ae>
    14b8:	cc 24       	eor	r12, r12
    14ba:	dd 24       	eor	r13, r13
    14bc:	71 e0       	ldi	r23, 0x01	; 1
    14be:	47 2e       	mov	r4, r23
    14c0:	51 2c       	mov	r5, r1
			ZY = 0;
			}
		}
		if (zDirection[i] == 3) {
    14c2:	03 30       	cpi	r16, 0x03	; 3
    14c4:	11 05       	cpc	r17, r1
    14c6:	d1 f4       	brne	.+52     	; 0x14fc <zombiesForward+0x1b2>
			ZX = -1;
			ZY = 0;
			if ((zombie[i] -> x < Left)) {
    14c8:	b4 01       	movw	r22, r8
    14ca:	88 27       	eor	r24, r24
    14cc:	77 fd       	sbrc	r23, 7
    14ce:	80 95       	com	r24
    14d0:	98 2f       	mov	r25, r24
    14d2:	b4 d3       	rcall	.+1896   	; 0x1c3c <__floatsisf>
    14d4:	9b 01       	movw	r18, r22
    14d6:	ac 01       	movw	r20, r24
    14d8:	f5 01       	movw	r30, r10
    14da:	60 81       	ld	r22, Z
    14dc:	71 81       	ldd	r23, Z+1	; 0x01
    14de:	82 81       	ldd	r24, Z+2	; 0x02
    14e0:	93 81       	ldd	r25, Z+3	; 0x03
    14e2:	75 d3       	rcall	.+1770   	; 0x1bce <__cmpsf2>
    14e4:	87 fd       	sbrc	r24, 7
    14e6:	06 c0       	rjmp	.+12     	; 0x14f4 <zombiesForward+0x1aa>
    14e8:	cc 24       	eor	r12, r12
    14ea:	dd 24       	eor	r13, r13
    14ec:	44 24       	eor	r4, r4
    14ee:	4a 94       	dec	r4
    14f0:	54 2c       	mov	r5, r4
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <zombiesForward+0x1b2>
    14f4:	cc 24       	eor	r12, r12
    14f6:	dd 24       	eor	r13, r13
    14f8:	44 24       	eor	r4, r4
    14fa:	55 24       	eor	r5, r5
			ZX = 0;
			}
		}

		zombie[i] -> x += ZX;
    14fc:	b2 01       	movw	r22, r4
    14fe:	88 27       	eor	r24, r24
    1500:	77 fd       	sbrc	r23, 7
    1502:	80 95       	com	r24
    1504:	98 2f       	mov	r25, r24
    1506:	9a d3       	rcall	.+1844   	; 0x1c3c <__floatsisf>
    1508:	9b 01       	movw	r18, r22
    150a:	ac 01       	movw	r20, r24
    150c:	f5 01       	movw	r30, r10
    150e:	60 81       	ld	r22, Z
    1510:	71 81       	ldd	r23, Z+1	; 0x01
    1512:	82 81       	ldd	r24, Z+2	; 0x02
    1514:	93 81       	ldd	r25, Z+3	; 0x03
    1516:	f7 d2       	rcall	.+1518   	; 0x1b06 <__addsf3>
    1518:	f5 01       	movw	r30, r10
    151a:	60 83       	st	Z, r22
    151c:	71 83       	std	Z+1, r23	; 0x01
    151e:	82 83       	std	Z+2, r24	; 0x02
    1520:	93 83       	std	Z+3, r25	; 0x03
		zombie[i] -> y += ZY;
    1522:	f1 01       	movw	r30, r2
    1524:	01 91       	ld	r16, Z+
    1526:	11 91       	ld	r17, Z+
    1528:	1f 01       	movw	r2, r30
    152a:	b6 01       	movw	r22, r12
    152c:	88 27       	eor	r24, r24
    152e:	77 fd       	sbrc	r23, 7
    1530:	80 95       	com	r24
    1532:	98 2f       	mov	r25, r24
    1534:	83 d3       	rcall	.+1798   	; 0x1c3c <__floatsisf>
    1536:	9b 01       	movw	r18, r22
    1538:	ac 01       	movw	r20, r24
    153a:	f8 01       	movw	r30, r16
    153c:	64 81       	ldd	r22, Z+4	; 0x04
    153e:	75 81       	ldd	r23, Z+5	; 0x05
    1540:	86 81       	ldd	r24, Z+6	; 0x06
    1542:	97 81       	ldd	r25, Z+7	; 0x07
    1544:	e0 d2       	rcall	.+1472   	; 0x1b06 <__addsf3>
    1546:	f8 01       	movw	r30, r16
    1548:	64 83       	std	Z+4, r22	; 0x04
    154a:	75 83       	std	Z+5, r23	; 0x05
    154c:	86 83       	std	Z+6, r24	; 0x06
    154e:	97 83       	std	Z+7, r25	; 0x07
    1550:	82 e0       	ldi	r24, 0x02	; 2
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	68 0e       	add	r6, r24
    1556:	79 1e       	adc	r7, r25
	int range, ZX = 0;
	int ZY = 0;
	int Up,Left,Down,Right;
	
	//for all zombies
	for (int i = 0; i<8; i++) {
    1558:	9a ec       	ldi	r25, 0xCA	; 202
    155a:	29 16       	cp	r2, r25
    155c:	91 e0       	ldi	r25, 0x01	; 1
    155e:	39 06       	cpc	r3, r25
    1560:	09 f0       	breq	.+2      	; 0x1564 <zombiesForward+0x21a>
    1562:	11 cf       	rjmp	.-478    	; 0x1386 <zombiesForward+0x3c>
		zombie[i] -> x += ZX;
		zombie[i] -> y += ZY;

	}
	
}
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	8f 90       	pop	r8
    157c:	7f 90       	pop	r7
    157e:	6f 90       	pop	r6
    1580:	5f 90       	pop	r5
    1582:	4f 90       	pop	r4
    1584:	3f 90       	pop	r3
    1586:	2f 90       	pop	r2
    1588:	08 95       	ret

0000158a <__vector_23>:
	sei();
}


ISR(TIMER0_OVF_vect)
{
    158a:	1f 92       	push	r1
    158c:	0f 92       	push	r0
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	0f 92       	push	r0
    1592:	11 24       	eor	r1, r1
    1594:	2f 93       	push	r18
    1596:	3f 93       	push	r19
    1598:	4f 93       	push	r20
    159a:	5f 93       	push	r21
    159c:	6f 93       	push	r22
    159e:	7f 93       	push	r23
    15a0:	8f 93       	push	r24
    15a2:	9f 93       	push	r25
    15a4:	af 93       	push	r26
    15a6:	bf 93       	push	r27
    15a8:	ef 93       	push	r30
    15aa:	ff 93       	push	r31
	//Clear the flag by writing a one
	TIFR0 |= (1<<TOV0);
    15ac:	a8 9a       	sbi	0x15, 0	; 21
	//Add one to our clockCounter
	clockCounter++;
    15ae:	80 91 a2 01 	lds	r24, 0x01A2
    15b2:	90 91 a3 01 	lds	r25, 0x01A3
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	90 93 a3 01 	sts	0x01A3, r25
    15bc:	80 93 a2 01 	sts	0x01A2, r24
	//DEBUG LED
	//PORTB ^= (1<<PINB2);
	//Check to see if our clockCounter is greater/equal to than our MAX_CLOCK_COUNTER_FOR_100MSECOND
	if(clockCounter >= MAX_CLOCK_COUNTER_FOR_100MSECOND && GAMEON)
    15c0:	80 91 a2 01 	lds	r24, 0x01A2
    15c4:	90 91 a3 01 	lds	r25, 0x01A3
    15c8:	05 97       	sbiw	r24, 0x05	; 5
    15ca:	fc f0       	brlt	.+62     	; 0x160a <__vector_23+0x80>
    15cc:	80 91 a6 01 	lds	r24, 0x01A6
    15d0:	90 91 a7 01 	lds	r25, 0x01A7
    15d4:	89 2b       	or	r24, r25
    15d6:	c9 f0       	breq	.+50     	; 0x160a <__vector_23+0x80>
	{
		//PORTB ^= (1<<PINB3);
		//Reset clockCounter
		clockCounter = 0;
    15d8:	10 92 a3 01 	sts	0x01A3, r1
    15dc:	10 92 a2 01 	sts	0x01A2, r1
		stepsCounter++;
    15e0:	80 91 a4 01 	lds	r24, 0x01A4
    15e4:	90 91 a5 01 	lds	r25, 0x01A5
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	90 93 a5 01 	sts	0x01A5, r25
    15ee:	80 93 a4 01 	sts	0x01A4, r24
		if (stepsCounter>9) {
    15f2:	80 91 a4 01 	lds	r24, 0x01A4
    15f6:	90 91 a5 01 	lds	r25, 0x01A5
    15fa:	0a 97       	sbiw	r24, 0x0a	; 10
    15fc:	2c f0       	brlt	.+10     	; 0x1608 <__vector_23+0x7e>
		stepsCounter = 0;
    15fe:	10 92 a5 01 	sts	0x01A5, r1
    1602:	10 92 a4 01 	sts	0x01A4, r1
		zombiesForward();		
    1606:	a1 de       	rcall	.-702    	; 0x134a <zombiesForward>
		}
		heroForward();
    1608:	4d da       	rcall	.-2918   	; 0xaa4 <heroForward>
	}
}
    160a:	ff 91       	pop	r31
    160c:	ef 91       	pop	r30
    160e:	bf 91       	pop	r27
    1610:	af 91       	pop	r26
    1612:	9f 91       	pop	r25
    1614:	8f 91       	pop	r24
    1616:	7f 91       	pop	r23
    1618:	6f 91       	pop	r22
    161a:	5f 91       	pop	r21
    161c:	4f 91       	pop	r20
    161e:	3f 91       	pop	r19
    1620:	2f 91       	pop	r18
    1622:	0f 90       	pop	r0
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	0f 90       	pop	r0
    1628:	1f 90       	pop	r1
    162a:	18 95       	reti

0000162c <setupGame>:
void setupGame() {

	// SW0 and SW1 are connected to pins B0 and B1
	// LED1 and LED2 connected to pins B2 and B3
	// 0 for input 1 for output
	DDRB |= 0b00001100;
    162c:	84 b1       	in	r24, 0x04	; 4
    162e:	8c 60       	ori	r24, 0x0C	; 12
    1630:	84 b9       	out	0x04, r24	; 4
    // Teensy LED is connected to D6
    DDRD |= 0b01000000;
    1632:	56 9a       	sbi	0x0a, 6	; 10
    // turn OFF LED initially
	PORTD |= 0b00000000;
    1634:	8b b1       	in	r24, 0x0b	; 11
    1636:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<2)||(1<<3); //not sure why this is here
    1638:	28 9a       	sbi	0x05, 0	; 5
	
	//initialise clock
	//CLKPR |= 1 << CLKPCE;
	//CLKPR |= 1 << CLKPS0;
	CPU_PRESCALE(CPU_16MHz);
    163a:	e1 e6       	ldi	r30, 0x61	; 97
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 e8       	ldi	r24, 0x80	; 128
    1640:	80 83       	st	Z, r24
    1642:	10 82       	st	Z, r1
	
	
	LCDInitialise(LCD_DEFAULT_CONTRAST);
    1644:	8f e3       	ldi	r24, 0x3F	; 63
    1646:	67 d6       	rcall	.+3278   	; 0x2316 <LCDInitialise>
	clear();
    1648:	ad d3       	rcall	.+1882   	; 0x1da4 <clear>
	
	PinChangeInit();
    164a:	5a d9       	rcall	.-3404   	; 0x900 <PinChangeInit>
	TimerInit();
    164c:	93 d9       	rcall	.-3290   	; 0x974 <TimerInit>
	
	clear();
    164e:	aa d3       	rcall	.+1876   	; 0x1da4 <clear>
	draw_string("ZombieDash v1.0", 4,0); // 15*5 = 75 (84 - 75)/2 = 4
    1650:	88 e1       	ldi	r24, 0x18	; 24
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	64 e0       	ldi	r22, 0x04	; 4
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	17 d6       	rcall	.+3118   	; 0x2288 <draw_string>
	draw_string("Lachlan Robinson", 2,9); // 16*5 = 80 (84 - 80)/2 = 2
    165a:	88 e2       	ldi	r24, 0x28	; 40
    165c:	91 e0       	ldi	r25, 0x01	; 1
    165e:	62 e0       	ldi	r22, 0x02	; 2
    1660:	49 e0       	ldi	r20, 0x09	; 9
    1662:	12 d6       	rcall	.+3108   	; 0x2288 <draw_string>
	draw_string("n8845409", 22, 28); // 8*5 = 40 (84 - 40)/2 = 22
    1664:	89 e3       	ldi	r24, 0x39	; 57
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	66 e1       	ldi	r22, 0x16	; 22
    166a:	4c e1       	ldi	r20, 0x1C	; 28
    166c:	0d d6       	rcall	.+3098   	; 0x2288 <draw_string>
	refresh();
    166e:	21 d6       	rcall	.+3138   	; 0x22b2 <refresh>
	
	seedWithButtonPress();
    1670:	1c dc       	rcall	.-1992   	; 0xeaa <seedWithButtonPress>
	buttonCheck();
    1672:	17 d9       	rcall	.-3538   	; 0x8a2 <buttonCheck>
	CountDown();
    1674:	f8 db       	rcall	.-2064   	; 0xe66 <CountDown>
	Lives = 3;
    1676:	83 e0       	ldi	r24, 0x03	; 3
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	90 93 80 01 	sts	0x0180, r25
    167e:	80 93 7f 01 	sts	0x017F, r24
	
}
    1682:	08 95       	ret

00001684 <collision>:
	int middle_y = screen_y/2 + 5;
	my_pointer -> x = middle_x;
	my_pointer -> y = middle_y;
}

void collision(void) {
    1684:	4f 92       	push	r4
    1686:	5f 92       	push	r5
    1688:	6f 92       	push	r6
    168a:	7f 92       	push	r7
    168c:	8f 92       	push	r8
    168e:	9f 92       	push	r9
    1690:	af 92       	push	r10
    1692:	bf 92       	push	r11
    1694:	cf 92       	push	r12
    1696:	df 92       	push	r13
    1698:	ef 92       	push	r14
    169a:	ff 92       	push	r15
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29

	int middle_x = screen_x/2;
    16a4:	80 91 5f 01 	lds	r24, 0x015F
    16a8:	90 91 60 01 	lds	r25, 0x0160
    16ac:	62 e0       	ldi	r22, 0x02	; 2
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	5d d7       	rcall	.+3770   	; 0x256c <__divmodhi4>
    16b2:	b6 2e       	mov	r11, r22
	int middle_y = screen_y/2;
    16b4:	80 91 63 01 	lds	r24, 0x0163
    16b8:	90 91 64 01 	lds	r25, 0x0164
    16bc:	62 e0       	ldi	r22, 0x02	; 2
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	55 d7       	rcall	.+3754   	; 0x256c <__divmodhi4>
    16c2:	a6 2e       	mov	r10, r22
	
	byte x = my_pointer -> x;
    16c4:	00 91 b6 01 	lds	r16, 0x01B6
    16c8:	10 91 b7 01 	lds	r17, 0x01B7
    16cc:	f8 01       	movw	r30, r16
    16ce:	60 81       	ld	r22, Z
    16d0:	71 81       	ldd	r23, Z+1	; 0x01
    16d2:	82 81       	ldd	r24, Z+2	; 0x02
    16d4:	93 81       	ldd	r25, Z+3	; 0x03
    16d6:	84 d2       	rcall	.+1288   	; 0x1be0 <__fixunssfsi>
    16d8:	6b 01       	movw	r12, r22
    16da:	7c 01       	movw	r14, r24
	byte y = my_pointer -> y;
    16dc:	f8 01       	movw	r30, r16
    16de:	64 81       	ldd	r22, Z+4	; 0x04
    16e0:	75 81       	ldd	r23, Z+5	; 0x05
    16e2:	86 81       	ldd	r24, Z+6	; 0x06
    16e4:	97 81       	ldd	r25, Z+7	; 0x07
    16e6:	7c d2       	rcall	.+1272   	; 0x1be0 <__fixunssfsi>
    16e8:	ca eb       	ldi	r28, 0xBA	; 186
    16ea:	d1 e0       	ldi	r29, 0x01	; 1
	
	for (int i = 0; i<8; i++) {
		byte zx = zombie[i] -> x;
		byte zy = zombie[i] -> y;
		
		if (x > zx - width && x < zx + width && y > zy - height && y < zy + height) {
    16ec:	6c 2c       	mov	r6, r12
    16ee:	77 24       	eor	r7, r7
    16f0:	86 2e       	mov	r8, r22
    16f2:	99 24       	eor	r9, r9
				setupGame();
				setupHero();
				setupZombies();	
				setupPit();
			}
		GAMEON = 1;	
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	48 2e       	mov	r4, r24
    16f8:	51 2c       	mov	r5, r1
    16fa:	00 e9       	ldi	r16, 0x90	; 144
    16fc:	c0 2e       	mov	r12, r16
    16fe:	01 e0       	ldi	r16, 0x01	; 1
    1700:	d0 2e       	mov	r13, r16
				setupZombies();
			}
			else {
				_delay_ms(300);
				clear();
				draw_string("Game OVER!", middle_x-25,middle_y);
    1702:	f7 ee       	ldi	r31, 0xE7	; 231
    1704:	bf 0e       	add	r11, r31
	
	byte x = my_pointer -> x;
	byte y = my_pointer -> y;
	
	for (int i = 0; i<8; i++) {
		byte zx = zombie[i] -> x;
    1706:	e8 81       	ld	r30, Y
    1708:	f9 81       	ldd	r31, Y+1	; 0x01
		byte zy = zombie[i] -> y;
    170a:	e4 80       	ldd	r14, Z+4	; 0x04
    170c:	f5 80       	ldd	r15, Z+5	; 0x05
    170e:	06 81       	ldd	r16, Z+6	; 0x06
    1710:	17 81       	ldd	r17, Z+7	; 0x07
		
		if (x > zx - width && x < zx + width && y > zy - height && y < zy + height) {
    1712:	60 81       	ld	r22, Z
    1714:	71 81       	ldd	r23, Z+1	; 0x01
    1716:	82 81       	ldd	r24, Z+2	; 0x02
    1718:	93 81       	ldd	r25, Z+3	; 0x03
    171a:	62 d2       	rcall	.+1220   	; 0x1be0 <__fixunssfsi>
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	80 91 7d 01 	lds	r24, 0x017D
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	cb 01       	movw	r24, r22
    1728:	82 1b       	sub	r24, r18
    172a:	93 0b       	sbc	r25, r19
    172c:	86 15       	cp	r24, r6
    172e:	97 05       	cpc	r25, r7
    1730:	0c f0       	brlt	.+2      	; 0x1734 <collision+0xb0>
    1732:	64 c0       	rjmp	.+200    	; 0x17fc <collision+0x178>
    1734:	62 0f       	add	r22, r18
    1736:	73 1f       	adc	r23, r19
    1738:	66 16       	cp	r6, r22
    173a:	77 06       	cpc	r7, r23
    173c:	0c f0       	brlt	.+2      	; 0x1740 <collision+0xbc>
    173e:	5e c0       	rjmp	.+188    	; 0x17fc <collision+0x178>
    1740:	c8 01       	movw	r24, r16
    1742:	b7 01       	movw	r22, r14
    1744:	4d d2       	rcall	.+1178   	; 0x1be0 <__fixunssfsi>
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	80 91 7e 01 	lds	r24, 0x017E
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	cb 01       	movw	r24, r22
    1752:	82 1b       	sub	r24, r18
    1754:	93 0b       	sbc	r25, r19
    1756:	88 15       	cp	r24, r8
    1758:	99 05       	cpc	r25, r9
    175a:	0c f0       	brlt	.+2      	; 0x175e <collision+0xda>
    175c:	4f c0       	rjmp	.+158    	; 0x17fc <collision+0x178>
    175e:	62 0f       	add	r22, r18
    1760:	73 1f       	adc	r23, r19
    1762:	86 16       	cp	r8, r22
    1764:	97 06       	cpc	r9, r23
    1766:	0c f0       	brlt	.+2      	; 0x176a <collision+0xe6>
    1768:	49 c0       	rjmp	.+146    	; 0x17fc <collision+0x178>
		GAMEON = 0;
    176a:	10 92 a7 01 	sts	0x01A7, r1
    176e:	10 92 a6 01 	sts	0x01A6, r1
			if (Lives>0) {
    1772:	80 91 7f 01 	lds	r24, 0x017F
    1776:	90 91 80 01 	lds	r25, 0x0180
    177a:	18 16       	cp	r1, r24
    177c:	19 06       	cpc	r1, r25
    177e:	0c f5       	brge	.+66     	; 0x17c2 <collision+0x13e>
    1780:	88 eb       	ldi	r24, 0xB8	; 184
    1782:	9b e0       	ldi	r25, 0x0B	; 11
    1784:	f6 01       	movw	r30, r12
    1786:	31 97       	sbiw	r30, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <collision+0x102>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178c:	d9 f7       	brne	.-10     	; 0x1784 <collision+0x100>
				_delay_ms(300);
				clear();
    178e:	0a d3       	rcall	.+1556   	; 0x1da4 <clear>
				draw_string("Touched A Zombie!",0,middle_y);
    1790:	82 e4       	ldi	r24, 0x42	; 66
    1792:	91 e0       	ldi	r25, 0x01	; 1
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	4a 2d       	mov	r20, r10
    1798:	77 d5       	rcall	.+2798   	; 0x2288 <draw_string>
				refresh();
    179a:	8b d5       	rcall	.+2838   	; 0x22b2 <refresh>
    179c:	88 e9       	ldi	r24, 0x98	; 152
    179e:	9a e3       	ldi	r25, 0x3A	; 58
    17a0:	f6 01       	movw	r30, r12
    17a2:	31 97       	sbiw	r30, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <collision+0x11e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a8:	d9 f7       	brne	.-10     	; 0x17a0 <collision+0x11c>
				_delay_ms(1500);
				Lives--;
    17aa:	80 91 7f 01 	lds	r24, 0x017F
    17ae:	90 91 80 01 	lds	r25, 0x0180
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	90 93 80 01 	sts	0x0180, r25
    17b8:	80 93 7f 01 	sts	0x017F, r24
				setupHero();
    17bc:	ee d8       	rcall	.-3620   	; 0x99a <setupHero>
				setupZombies();
    17be:	25 dc       	rcall	.-1974   	; 0x100a <setupZombies>
    17c0:	19 c0       	rjmp	.+50     	; 0x17f4 <collision+0x170>
    17c2:	88 eb       	ldi	r24, 0xB8	; 184
    17c4:	9b e0       	ldi	r25, 0x0B	; 11
    17c6:	f6 01       	movw	r30, r12
    17c8:	31 97       	sbiw	r30, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <collision+0x144>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ce:	d9 f7       	brne	.-10     	; 0x17c6 <collision+0x142>
			}
			else {
				_delay_ms(300);
				clear();
    17d0:	e9 d2       	rcall	.+1490   	; 0x1da4 <clear>
				draw_string("Game OVER!", middle_x-25,middle_y);
    17d2:	84 e5       	ldi	r24, 0x54	; 84
    17d4:	91 e0       	ldi	r25, 0x01	; 1
    17d6:	6b 2d       	mov	r22, r11
    17d8:	4a 2d       	mov	r20, r10
    17da:	56 d5       	rcall	.+2732   	; 0x2288 <draw_string>
				refresh();
    17dc:	6a d5       	rcall	.+2772   	; 0x22b2 <refresh>
    17de:	88 e9       	ldi	r24, 0x98	; 152
    17e0:	9a e3       	ldi	r25, 0x3A	; 58
    17e2:	f6 01       	movw	r30, r12
    17e4:	31 97       	sbiw	r30, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <collision+0x160>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ea:	d9 f7       	brne	.-10     	; 0x17e2 <collision+0x15e>
				_delay_ms(1500);
				setupGame();
    17ec:	1f df       	rcall	.-450    	; 0x162c <setupGame>
				setupHero();
    17ee:	d5 d8       	rcall	.-3670   	; 0x99a <setupHero>
				setupZombies();	
    17f0:	0c dc       	rcall	.-2024   	; 0x100a <setupZombies>
				setupPit();
    17f2:	cf db       	rcall	.-2146   	; 0xf92 <setupPit>
			}
		GAMEON = 1;	
    17f4:	50 92 a7 01 	sts	0x01A7, r5
    17f8:	40 92 a6 01 	sts	0x01A6, r4
    17fc:	22 96       	adiw	r28, 0x02	; 2
	int middle_y = screen_y/2;
	
	byte x = my_pointer -> x;
	byte y = my_pointer -> y;
	
	for (int i = 0; i<8; i++) {
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	ca 3c       	cpi	r28, 0xCA	; 202
    1802:	d8 07       	cpc	r29, r24
    1804:	09 f0       	breq	.+2      	; 0x1808 <collision+0x184>
    1806:	7f cf       	rjmp	.-258    	; 0x1706 <collision+0x82>
		}
	
	
	} 

}
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	ff 90       	pop	r15
    1812:	ef 90       	pop	r14
    1814:	df 90       	pop	r13
    1816:	cf 90       	pop	r12
    1818:	bf 90       	pop	r11
    181a:	af 90       	pop	r10
    181c:	9f 90       	pop	r9
    181e:	8f 90       	pop	r8
    1820:	7f 90       	pop	r7
    1822:	6f 90       	pop	r6
    1824:	5f 90       	pop	r5
    1826:	4f 90       	pop	r4
    1828:	08 95       	ret

0000182a <main>:
#include "my_functions.h"

#define NUM_BLOCKS 10
#define MAX_CLOCK_COUNTER_FOR_100MSECOND 5

int main() {
    182a:	5f 92       	push	r5
    182c:	6f 92       	push	r6
    182e:	7f 92       	push	r7
    1830:	8f 92       	push	r8
    1832:	9f 92       	push	r9
    1834:	af 92       	push	r10
    1836:	bf 92       	push	r11
    1838:	cf 92       	push	r12
    183a:	df 92       	push	r13
    183c:	ef 92       	push	r14
    183e:	ff 92       	push	r15
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	c0 5f       	subi	r28, 0xF0	; 240
    184e:	d0 40       	sbci	r29, 0x00	; 0
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
	
	// INSERT_CODE_HERE
	//draw_string("eWWZ begins!",0,0);

	// screen setup etc
	setupGame();
    185a:	e8 de       	rcall	.-560    	; 0x162c <setupGame>
	clear();
    185c:	a3 d2       	rcall	.+1350   	; 0x1da4 <clear>
	refresh();
    185e:	29 d5       	rcall	.+2642   	; 0x22b2 <refresh>
	// sprites
	byte bitHero [] = {
		BYTE( 10100000),
		BYTE( 11100000),
		BYTE( 10100000),
	};
    1860:	de 01       	movw	r26, r28
    1862:	11 96       	adiw	r26, 0x01	; 1
    1864:	e7 e8       	ldi	r30, 0x87	; 135
    1866:	f1 e0       	ldi	r31, 0x01	; 1
    1868:	83 e0       	ldi	r24, 0x03	; 3
    186a:	01 90       	ld	r0, Z+
    186c:	0d 92       	st	X+, r0
    186e:	81 50       	subi	r24, 0x01	; 1
    1870:	e1 f7       	brne	.-8      	; 0x186a <main+0x40>
		
	byte bitZombie [] = {
		BYTE( 11100000),
		BYTE( 01000000),
		BYTE( 11100000),
	};
    1872:	de 01       	movw	r26, r28
    1874:	14 96       	adiw	r26, 0x04	; 4
    1876:	e4 e8       	ldi	r30, 0x84	; 132
    1878:	f1 e0       	ldi	r31, 0x01	; 1
    187a:	83 e0       	ldi	r24, 0x03	; 3
    187c:	01 90       	ld	r0, Z+
    187e:	0d 92       	st	X+, r0
    1880:	81 50       	subi	r24, 0x01	; 1
    1882:	e1 f7       	brne	.-8      	; 0x187c <main+0x52>
	
	byte bitSword [] = {
		BYTE( 00100000),
		BYTE( 11100000),
		BYTE( 00100000),
	};
    1884:	de 01       	movw	r26, r28
    1886:	17 96       	adiw	r26, 0x07	; 7
    1888:	e1 e8       	ldi	r30, 0x81	; 129
    188a:	f1 e0       	ldi	r31, 0x01	; 1
    188c:	83 e0       	ldi	r24, 0x03	; 3
    188e:	01 90       	ld	r0, Z+
    1890:	0d 92       	st	X+, r0
    1892:	81 50       	subi	r24, 0x01	; 1
    1894:	e1 f7       	brne	.-8      	; 0x188e <main+0x64>
		BYTE( 10100000),
		BYTE( 01000000),	
	};
	
	// screen parameters
	screen_x -= width;
    1896:	80 91 7d 01 	lds	r24, 0x017D
    189a:	20 91 5f 01 	lds	r18, 0x015F
    189e:	30 91 60 01 	lds	r19, 0x0160
    18a2:	28 1b       	sub	r18, r24
    18a4:	31 09       	sbc	r19, r1
    18a6:	30 93 60 01 	sts	0x0160, r19
    18aa:	20 93 5f 01 	sts	0x015F, r18
	screen_y -= height;
    18ae:	40 91 7e 01 	lds	r20, 0x017E
    18b2:	80 91 63 01 	lds	r24, 0x0163
    18b6:	90 91 64 01 	lds	r25, 0x0164
    18ba:	84 1b       	sub	r24, r20
    18bc:	91 09       	sbc	r25, r1
    18be:	90 93 64 01 	sts	0x0164, r25
    18c2:	80 93 63 01 	sts	0x0163, r24

	int middle_x = screen_x/2;
	int middle_y = screen_y/2 + 5;
    18c6:	62 e0       	ldi	r22, 0x02	; 2
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	50 d6       	rcall	.+3232   	; 0x256c <__divmodhi4>
    18cc:	4b 01       	movw	r8, r22
    18ce:	85 e0       	ldi	r24, 0x05	; 5
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	88 0e       	add	r8, r24
    18d4:	99 1e       	adc	r9, r25
    18d6:	f9 e4       	ldi	r31, 0x49	; 73
    18d8:	cf 2e       	mov	r12, r31
    18da:	d1 2c       	mov	r13, r1
    18dc:	cc 0e       	add	r12, r28
    18de:	dd 1e       	adc	r13, r29
    18e0:	c9 01       	movw	r24, r18
    18e2:	62 e0       	ldi	r22, 0x02	; 2
    18e4:	70 e0       	ldi	r23, 0x00	; 0
    18e6:	42 d6       	rcall	.+3204   	; 0x256c <__divmodhi4>
    18e8:	56 2e       	mov	r5, r22
    18ea:	ea eb       	ldi	r30, 0xBA	; 186
    18ec:	ae 2e       	mov	r10, r30
    18ee:	e1 e0       	ldi	r30, 0x01	; 1
    18f0:	be 2e       	mov	r11, r30
    18f2:	16 2f       	mov	r17, r22
	}*/
	
	Sprite zombies[8]; 
	for (int i = 0; i<8; i++) {
	zombie[i] = &zombies[i];
	init_sprite(zombie[i], middle_x + 3*i, middle_y, width, height, bitZombie);
    18f4:	74 e0       	ldi	r23, 0x04	; 4
    18f6:	67 2e       	mov	r6, r23
    18f8:	71 2c       	mov	r7, r1
    18fa:	6c 0e       	add	r6, r28
    18fc:	7d 1e       	adc	r7, r29
	
	}*/
	
	Sprite zombies[8]; 
	for (int i = 0; i<8; i++) {
	zombie[i] = &zombies[i];
    18fe:	f5 01       	movw	r30, r10
    1900:	c0 82       	st	Z, r12
    1902:	d1 82       	std	Z+1, r13	; 0x01
	init_sprite(zombie[i], middle_x + 3*i, middle_y, width, height, bitZombie);
    1904:	c6 01       	movw	r24, r12
    1906:	61 2f       	mov	r22, r17
    1908:	48 2d       	mov	r20, r8
    190a:	20 91 7d 01 	lds	r18, 0x017D
    190e:	00 91 7e 01 	lds	r16, 0x017E
    1912:	73 01       	movw	r14, r6
    1914:	33 d5       	rcall	.+2662   	; 0x237c <init_sprite>
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	a8 0e       	add	r10, r24
    191c:	b9 1e       	adc	r11, r25
    191e:	e5 e1       	ldi	r30, 0x15	; 21
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	ce 0e       	add	r12, r30
    1924:	df 1e       	adc	r13, r31
    1926:	1d 5f       	subi	r17, 0xFD	; 253
		_delay_ms(500);
	
	}*/
	
	Sprite zombies[8]; 
	for (int i = 0; i<8; i++) {
    1928:	fa ec       	ldi	r31, 0xCA	; 202
    192a:	af 16       	cp	r10, r31
    192c:	f1 e0       	ldi	r31, 0x01	; 1
    192e:	bf 06       	cpc	r11, r31
    1930:	31 f7       	brne	.-52     	; 0x18fe <main+0xd4>
	zombie[i] = &zombies[i];
	init_sprite(zombie[i], middle_x + 3*i, middle_y, width, height, bitZombie);
	}
	
	Sprite swords, swordsStatus;
	sword = &swords;
    1932:	ce 01       	movw	r24, r28
    1934:	0a 96       	adiw	r24, 0x0a	; 10
    1936:	90 93 ab 01 	sts	0x01AB, r25
    193a:	80 93 aa 01 	sts	0x01AA, r24
	swordStatus = &swordsStatus;
    193e:	9e 01       	movw	r18, r28
    1940:	21 5e       	subi	r18, 0xE1	; 225
    1942:	3f 4f       	sbci	r19, 0xFF	; 255
    1944:	30 93 b1 01 	sts	0x01B1, r19
    1948:	20 93 b0 01 	sts	0x01B0, r18
	init_sprite(sword, -10,-10, width, height, bitSword);
    194c:	67 e0       	ldi	r22, 0x07	; 7
    194e:	c6 2e       	mov	r12, r22
    1950:	d1 2c       	mov	r13, r1
    1952:	cc 0e       	add	r12, r28
    1954:	dd 1e       	adc	r13, r29
    1956:	66 ef       	ldi	r22, 0xF6	; 246
    1958:	46 ef       	ldi	r20, 0xF6	; 246
    195a:	20 91 7d 01 	lds	r18, 0x017D
    195e:	00 91 7e 01 	lds	r16, 0x017E
    1962:	76 01       	movw	r14, r12
    1964:	0b d5       	rcall	.+2582   	; 0x237c <init_sprite>
	init_sprite(swordStatus, -10,-10, width, height, bitSword);
    1966:	80 91 b0 01 	lds	r24, 0x01B0
    196a:	90 91 b1 01 	lds	r25, 0x01B1
    196e:	66 ef       	ldi	r22, 0xF6	; 246
    1970:	46 ef       	ldi	r20, 0xF6	; 246
    1972:	20 91 7d 01 	lds	r18, 0x017D
    1976:	00 91 7e 01 	lds	r16, 0x017E
    197a:	00 d5       	rcall	.+2560   	; 0x237c <init_sprite>

	setupSword();
    197c:	c9 da       	rcall	.-2670   	; 0xf10 <setupSword>
	setupZombies();
    197e:	45 db       	rcall	.-2422   	; 0x100a <setupZombies>
	setupPit();
    1980:	08 db       	rcall	.-2544   	; 0xf92 <setupPit>
	// Hero sprite parameters
	x = screen_x/2 - width;
	y = screen_y/2 + 9/2;
	
	Sprite my_sprite;
	my_pointer = &my_sprite;
    1982:	ce 01       	movw	r24, r28
    1984:	c4 96       	adiw	r24, 0x34	; 52
    1986:	90 93 b7 01 	sts	0x01B7, r25
    198a:	80 93 b6 01 	sts	0x01B6, r24

	init_sprite(my_pointer, middle_x, middle_y, width, height, bitHero);
    198e:	65 2d       	mov	r22, r5
    1990:	48 2d       	mov	r20, r8
    1992:	20 91 7d 01 	lds	r18, 0x017D
    1996:	00 91 7e 01 	lds	r16, 0x017E
    199a:	7e 01       	movw	r14, r28
    199c:	08 94       	sec
    199e:	e1 1c       	adc	r14, r1
    19a0:	f1 1c       	adc	r15, r1
    19a2:	ec d4       	rcall	.+2520   	; 0x237c <init_sprite>
	draw_sprite(my_pointer);
    19a4:	80 91 b6 01 	lds	r24, 0x01B6
    19a8:	90 91 b7 01 	lds	r25, 0x01B7
    19ac:	17 d5       	rcall	.+2606   	; 0x23dc <draw_sprite>
    19ae:	50 ef       	ldi	r21, 0xF0	; 240
    19b0:	e5 2e       	mov	r14, r21
    19b2:	5f ef       	ldi	r21, 0xFF	; 255
    19b4:	f5 2e       	mov	r15, r21
    19b6:	ea 0c       	add	r14, r10
    19b8:	fb 1c       	adc	r15, r11
	for (int i = 0; i<8; i++) {
	draw_sprite(zombie[i]);
    19ba:	f7 01       	movw	r30, r14
    19bc:	81 91       	ld	r24, Z+
    19be:	91 91       	ld	r25, Z+
    19c0:	7f 01       	movw	r14, r30
    19c2:	0c d5       	rcall	.+2584   	; 0x23dc <draw_sprite>
	Sprite my_sprite;
	my_pointer = &my_sprite;

	init_sprite(my_pointer, middle_x, middle_y, width, height, bitHero);
	draw_sprite(my_pointer);
	for (int i = 0; i<8; i++) {
    19c4:	fa ec       	ldi	r31, 0xCA	; 202
    19c6:	ef 16       	cp	r14, r31
    19c8:	f1 e0       	ldi	r31, 0x01	; 1
    19ca:	ff 06       	cpc	r15, r31
    19cc:	b1 f7       	brne	.-20     	; 0x19ba <main+0x190>
	draw_sprite(zombie[i]);
	}
	
	refresh();
    19ce:	71 d4       	rcall	.+2274   	; 0x22b2 <refresh>
    19d0:	88 ee       	ldi	r24, 0xE8	; 232
    19d2:	93 e0       	ldi	r25, 0x03	; 3
    19d4:	20 e9       	ldi	r18, 0x90	; 144
    19d6:	31 e0       	ldi	r19, 0x01	; 1
    19d8:	f9 01       	movw	r30, r18
    19da:	31 97       	sbiw	r30, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <main+0x1b0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e0:	d9 f7       	brne	.-10     	; 0x19d8 <main+0x1ae>
	//int add = 1;
	
	// initialise vars
	int notRIGHT = 1;
	int notLEFT = 1;
	GAMEON = 1;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	90 93 a7 01 	sts	0x01A7, r25
    19ea:	80 93 a6 01 	sts	0x01A6, r24
    19ee:	01 e0       	ldi	r16, 0x01	; 1
    19f0:	10 e0       	ldi	r17, 0x00	; 0
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	c4 2e       	mov	r12, r20
    19f6:	d1 2c       	mov	r13, r1
		
		if (RIGHT && notRIGHT) {
			notRIGHT = 0;
			Direction = (Direction-1);
			if (Direction < 0) {
			Direction = 3;
    19f8:	33 e0       	ldi	r19, 0x03	; 3
    19fa:	a3 2e       	mov	r10, r19
    19fc:	b1 2c       	mov	r11, r1
    19fe:	62 c0       	rjmp	.+196    	; 0x1ac4 <main+0x29a>
		my_pointer -> y += add;
		my_pointer2 -> y -= add;
		if (my_pointer -> y < 1) add = -add;
		if (my_pointer -> y > screen_y) add = -add;
	*/
		clear();
    1a00:	d1 d1       	rcall	.+930    	; 0x1da4 <clear>

		if (RIGHT == 0) {
    1a02:	80 91 98 01 	lds	r24, 0x0198
    1a06:	90 91 99 01 	lds	r25, 0x0199
    1a0a:	89 2b       	or	r24, r25
    1a0c:	11 f4       	brne	.+4      	; 0x1a12 <main+0x1e8>
    1a0e:	01 e0       	ldi	r16, 0x01	; 1
    1a10:	10 e0       	ldi	r17, 0x00	; 0
			notRIGHT = 1;
		}
		if (LEFT == 0) {
    1a12:	80 91 96 01 	lds	r24, 0x0196
    1a16:	90 91 97 01 	lds	r25, 0x0197
    1a1a:	89 2b       	or	r24, r25
    1a1c:	19 f4       	brne	.+6      	; 0x1a24 <main+0x1fa>
    1a1e:	21 e0       	ldi	r18, 0x01	; 1
    1a20:	c2 2e       	mov	r12, r18
    1a22:	d1 2c       	mov	r13, r1
			notLEFT = 1;
		}
		
		if (RIGHT && notRIGHT) {
    1a24:	80 91 98 01 	lds	r24, 0x0198
    1a28:	90 91 99 01 	lds	r25, 0x0199
    1a2c:	89 2b       	or	r24, r25
    1a2e:	c1 f0       	breq	.+48     	; 0x1a60 <main+0x236>
    1a30:	01 15       	cp	r16, r1
    1a32:	11 05       	cpc	r17, r1
    1a34:	a9 f0       	breq	.+42     	; 0x1a60 <main+0x236>
			notRIGHT = 0;
			Direction = (Direction-1);
    1a36:	80 91 6b 01 	lds	r24, 0x016B
    1a3a:	90 91 6c 01 	lds	r25, 0x016C
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	90 93 6c 01 	sts	0x016C, r25
    1a44:	80 93 6b 01 	sts	0x016B, r24
			if (Direction < 0) {
    1a48:	80 91 6b 01 	lds	r24, 0x016B
    1a4c:	90 91 6c 01 	lds	r25, 0x016C
    1a50:	97 ff       	sbrs	r25, 7
    1a52:	04 c0       	rjmp	.+8      	; 0x1a5c <main+0x232>
			Direction = 3;
    1a54:	b0 92 6c 01 	sts	0x016C, r11
    1a58:	a0 92 6b 01 	sts	0x016B, r10
    1a5c:	00 e0       	ldi	r16, 0x00	; 0
    1a5e:	10 e0       	ldi	r17, 0x00	; 0
			//bitmapb = bitmaptemp;
			//my_pointer -> bitmap = bitmapa;
			//my_pointer2 -> bitmap = bitmapb;
			
		}
		if (LEFT & notLEFT) {
    1a60:	80 91 96 01 	lds	r24, 0x0196
    1a64:	90 91 97 01 	lds	r25, 0x0197
    1a68:	8c 21       	and	r24, r12
    1a6a:	9d 21       	and	r25, r13
    1a6c:	89 2b       	or	r24, r25
    1a6e:	71 f0       	breq	.+28     	; 0x1a8c <main+0x262>
			notLEFT = 0;
			Direction = (Direction+1)%4;
    1a70:	80 91 6b 01 	lds	r24, 0x016B
    1a74:	90 91 6c 01 	lds	r25, 0x016C
    1a78:	01 96       	adiw	r24, 0x01	; 1
    1a7a:	64 e0       	ldi	r22, 0x04	; 4
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	76 d5       	rcall	.+2796   	; 0x256c <__divmodhi4>
    1a80:	90 93 6c 01 	sts	0x016C, r25
    1a84:	80 93 6b 01 	sts	0x016B, r24
    1a88:	cc 24       	eor	r12, r12
    1a8a:	dd 24       	eor	r13, r13
			
		}
		
		draw_sprite(my_pointer);
    1a8c:	80 91 b6 01 	lds	r24, 0x01B6
    1a90:	90 91 b7 01 	lds	r25, 0x01B7
    1a94:	a3 d4       	rcall	.+2374   	; 0x23dc <draw_sprite>
		draw_sprite(sword);
    1a96:	80 91 aa 01 	lds	r24, 0x01AA
    1a9a:	90 91 ab 01 	lds	r25, 0x01AB
    1a9e:	9e d4       	rcall	.+2364   	; 0x23dc <draw_sprite>
    1aa0:	9a eb       	ldi	r25, 0xBA	; 186
    1aa2:	e9 2e       	mov	r14, r25
    1aa4:	91 e0       	ldi	r25, 0x01	; 1
    1aa6:	f9 2e       	mov	r15, r25
		for (int i = 0; i<8; i++) {
		draw_sprite(zombie[i]);
    1aa8:	f7 01       	movw	r30, r14
    1aaa:	81 91       	ld	r24, Z+
    1aac:	91 91       	ld	r25, Z+
    1aae:	7f 01       	movw	r14, r30
    1ab0:	95 d4       	rcall	.+2346   	; 0x23dc <draw_sprite>
			
		}
		
		draw_sprite(my_pointer);
		draw_sprite(sword);
		for (int i = 0; i<8; i++) {
    1ab2:	fa ec       	ldi	r31, 0xCA	; 202
    1ab4:	ef 16       	cp	r14, r31
    1ab6:	f1 e0       	ldi	r31, 0x01	; 1
    1ab8:	ff 06       	cpc	r15, r31
    1aba:	b1 f7       	brne	.-20     	; 0x1aa8 <main+0x27e>
		draw_sprite(zombie[i]);
		}
		drawPit();
    1abc:	65 d9       	rcall	.-3382   	; 0xd88 <drawPit>
		drawScreen();
    1abe:	88 d9       	rcall	.-3312   	; 0xdd0 <drawScreen>
		refresh();
    1ac0:	f8 d3       	rcall	.+2032   	; 0x22b2 <refresh>
		collision();
    1ac2:	e0 dd       	rcall	.-1088   	; 0x1684 <collision>
	
	// initialise vars
	int notRIGHT = 1;
	int notLEFT = 1;
	GAMEON = 1;
	while(GAMEON){
    1ac4:	80 91 a6 01 	lds	r24, 0x01A6
    1ac8:	90 91 a7 01 	lds	r25, 0x01A7
    1acc:	89 2b       	or	r24, r25
    1ace:	09 f0       	breq	.+2      	; 0x1ad2 <main+0x2a8>
    1ad0:	97 cf       	rjmp	.-210    	; 0x1a00 <main+0x1d6>
		collision();
	}
	
	
	return 0;
}
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	c0 51       	subi	r28, 0x10	; 16
    1ad8:	df 4f       	sbci	r29, 0xFF	; 255
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	1f 91       	pop	r17
    1aea:	0f 91       	pop	r16
    1aec:	ff 90       	pop	r15
    1aee:	ef 90       	pop	r14
    1af0:	df 90       	pop	r13
    1af2:	cf 90       	pop	r12
    1af4:	bf 90       	pop	r11
    1af6:	af 90       	pop	r10
    1af8:	9f 90       	pop	r9
    1afa:	8f 90       	pop	r8
    1afc:	7f 90       	pop	r7
    1afe:	6f 90       	pop	r6
    1b00:	5f 90       	pop	r5
    1b02:	08 95       	ret

00001b04 <__subsf3>:
    1b04:	50 58       	subi	r21, 0x80	; 128

00001b06 <__addsf3>:
    1b06:	bb 27       	eor	r27, r27
    1b08:	aa 27       	eor	r26, r26
    1b0a:	0e d0       	rcall	.+28     	; 0x1b28 <__addsf3x>
    1b0c:	0d c1       	rjmp	.+538    	; 0x1d28 <__fp_round>
    1b0e:	fe d0       	rcall	.+508    	; 0x1d0c <__fp_pscA>
    1b10:	30 f0       	brcs	.+12     	; 0x1b1e <__addsf3+0x18>
    1b12:	03 d1       	rcall	.+518    	; 0x1d1a <__fp_pscB>
    1b14:	20 f0       	brcs	.+8      	; 0x1b1e <__addsf3+0x18>
    1b16:	31 f4       	brne	.+12     	; 0x1b24 <__addsf3+0x1e>
    1b18:	9f 3f       	cpi	r25, 0xFF	; 255
    1b1a:	11 f4       	brne	.+4      	; 0x1b20 <__addsf3+0x1a>
    1b1c:	1e f4       	brtc	.+6      	; 0x1b24 <__addsf3+0x1e>
    1b1e:	f3 c0       	rjmp	.+486    	; 0x1d06 <__fp_nan>
    1b20:	0e f4       	brtc	.+2      	; 0x1b24 <__addsf3+0x1e>
    1b22:	e0 95       	com	r30
    1b24:	e7 fb       	bst	r30, 7
    1b26:	e9 c0       	rjmp	.+466    	; 0x1cfa <__fp_inf>

00001b28 <__addsf3x>:
    1b28:	e9 2f       	mov	r30, r25
    1b2a:	0f d1       	rcall	.+542    	; 0x1d4a <__fp_split3>
    1b2c:	80 f3       	brcs	.-32     	; 0x1b0e <__addsf3+0x8>
    1b2e:	ba 17       	cp	r27, r26
    1b30:	62 07       	cpc	r22, r18
    1b32:	73 07       	cpc	r23, r19
    1b34:	84 07       	cpc	r24, r20
    1b36:	95 07       	cpc	r25, r21
    1b38:	18 f0       	brcs	.+6      	; 0x1b40 <__addsf3x+0x18>
    1b3a:	71 f4       	brne	.+28     	; 0x1b58 <__addsf3x+0x30>
    1b3c:	9e f5       	brtc	.+102    	; 0x1ba4 <__addsf3x+0x7c>
    1b3e:	27 c1       	rjmp	.+590    	; 0x1d8e <__fp_zero>
    1b40:	0e f4       	brtc	.+2      	; 0x1b44 <__addsf3x+0x1c>
    1b42:	e0 95       	com	r30
    1b44:	0b 2e       	mov	r0, r27
    1b46:	ba 2f       	mov	r27, r26
    1b48:	a0 2d       	mov	r26, r0
    1b4a:	0b 01       	movw	r0, r22
    1b4c:	b9 01       	movw	r22, r18
    1b4e:	90 01       	movw	r18, r0
    1b50:	0c 01       	movw	r0, r24
    1b52:	ca 01       	movw	r24, r20
    1b54:	a0 01       	movw	r20, r0
    1b56:	11 24       	eor	r1, r1
    1b58:	ff 27       	eor	r31, r31
    1b5a:	59 1b       	sub	r21, r25
    1b5c:	99 f0       	breq	.+38     	; 0x1b84 <__addsf3x+0x5c>
    1b5e:	59 3f       	cpi	r21, 0xF9	; 249
    1b60:	50 f4       	brcc	.+20     	; 0x1b76 <__addsf3x+0x4e>
    1b62:	50 3e       	cpi	r21, 0xE0	; 224
    1b64:	68 f1       	brcs	.+90     	; 0x1bc0 <__addsf3x+0x98>
    1b66:	1a 16       	cp	r1, r26
    1b68:	f0 40       	sbci	r31, 0x00	; 0
    1b6a:	a2 2f       	mov	r26, r18
    1b6c:	23 2f       	mov	r18, r19
    1b6e:	34 2f       	mov	r19, r20
    1b70:	44 27       	eor	r20, r20
    1b72:	58 5f       	subi	r21, 0xF8	; 248
    1b74:	f3 cf       	rjmp	.-26     	; 0x1b5c <__addsf3x+0x34>
    1b76:	46 95       	lsr	r20
    1b78:	37 95       	ror	r19
    1b7a:	27 95       	ror	r18
    1b7c:	a7 95       	ror	r26
    1b7e:	f0 40       	sbci	r31, 0x00	; 0
    1b80:	53 95       	inc	r21
    1b82:	c9 f7       	brne	.-14     	; 0x1b76 <__addsf3x+0x4e>
    1b84:	7e f4       	brtc	.+30     	; 0x1ba4 <__addsf3x+0x7c>
    1b86:	1f 16       	cp	r1, r31
    1b88:	ba 0b       	sbc	r27, r26
    1b8a:	62 0b       	sbc	r22, r18
    1b8c:	73 0b       	sbc	r23, r19
    1b8e:	84 0b       	sbc	r24, r20
    1b90:	ba f0       	brmi	.+46     	; 0x1bc0 <__addsf3x+0x98>
    1b92:	91 50       	subi	r25, 0x01	; 1
    1b94:	a1 f0       	breq	.+40     	; 0x1bbe <__addsf3x+0x96>
    1b96:	ff 0f       	add	r31, r31
    1b98:	bb 1f       	adc	r27, r27
    1b9a:	66 1f       	adc	r22, r22
    1b9c:	77 1f       	adc	r23, r23
    1b9e:	88 1f       	adc	r24, r24
    1ba0:	c2 f7       	brpl	.-16     	; 0x1b92 <__addsf3x+0x6a>
    1ba2:	0e c0       	rjmp	.+28     	; 0x1bc0 <__addsf3x+0x98>
    1ba4:	ba 0f       	add	r27, r26
    1ba6:	62 1f       	adc	r22, r18
    1ba8:	73 1f       	adc	r23, r19
    1baa:	84 1f       	adc	r24, r20
    1bac:	48 f4       	brcc	.+18     	; 0x1bc0 <__addsf3x+0x98>
    1bae:	87 95       	ror	r24
    1bb0:	77 95       	ror	r23
    1bb2:	67 95       	ror	r22
    1bb4:	b7 95       	ror	r27
    1bb6:	f7 95       	ror	r31
    1bb8:	9e 3f       	cpi	r25, 0xFE	; 254
    1bba:	08 f0       	brcs	.+2      	; 0x1bbe <__addsf3x+0x96>
    1bbc:	b3 cf       	rjmp	.-154    	; 0x1b24 <__addsf3+0x1e>
    1bbe:	93 95       	inc	r25
    1bc0:	88 0f       	add	r24, r24
    1bc2:	08 f0       	brcs	.+2      	; 0x1bc6 <__addsf3x+0x9e>
    1bc4:	99 27       	eor	r25, r25
    1bc6:	ee 0f       	add	r30, r30
    1bc8:	97 95       	ror	r25
    1bca:	87 95       	ror	r24
    1bcc:	08 95       	ret

00001bce <__cmpsf2>:
    1bce:	71 d0       	rcall	.+226    	; 0x1cb2 <__fp_cmp>
    1bd0:	08 f4       	brcc	.+2      	; 0x1bd4 <__cmpsf2+0x6>
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	08 95       	ret

00001bd6 <__fixsfsi>:
    1bd6:	04 d0       	rcall	.+8      	; 0x1be0 <__fixunssfsi>
    1bd8:	68 94       	set
    1bda:	b1 11       	cpse	r27, r1
    1bdc:	d9 c0       	rjmp	.+434    	; 0x1d90 <__fp_szero>
    1bde:	08 95       	ret

00001be0 <__fixunssfsi>:
    1be0:	bc d0       	rcall	.+376    	; 0x1d5a <__fp_splitA>
    1be2:	88 f0       	brcs	.+34     	; 0x1c06 <__fixunssfsi+0x26>
    1be4:	9f 57       	subi	r25, 0x7F	; 127
    1be6:	90 f0       	brcs	.+36     	; 0x1c0c <__fixunssfsi+0x2c>
    1be8:	b9 2f       	mov	r27, r25
    1bea:	99 27       	eor	r25, r25
    1bec:	b7 51       	subi	r27, 0x17	; 23
    1bee:	a0 f0       	brcs	.+40     	; 0x1c18 <__fixunssfsi+0x38>
    1bf0:	d1 f0       	breq	.+52     	; 0x1c26 <__fixunssfsi+0x46>
    1bf2:	66 0f       	add	r22, r22
    1bf4:	77 1f       	adc	r23, r23
    1bf6:	88 1f       	adc	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	1a f0       	brmi	.+6      	; 0x1c02 <__fixunssfsi+0x22>
    1bfc:	ba 95       	dec	r27
    1bfe:	c9 f7       	brne	.-14     	; 0x1bf2 <__fixunssfsi+0x12>
    1c00:	12 c0       	rjmp	.+36     	; 0x1c26 <__fixunssfsi+0x46>
    1c02:	b1 30       	cpi	r27, 0x01	; 1
    1c04:	81 f0       	breq	.+32     	; 0x1c26 <__fixunssfsi+0x46>
    1c06:	c3 d0       	rcall	.+390    	; 0x1d8e <__fp_zero>
    1c08:	b1 e0       	ldi	r27, 0x01	; 1
    1c0a:	08 95       	ret
    1c0c:	c0 c0       	rjmp	.+384    	; 0x1d8e <__fp_zero>
    1c0e:	67 2f       	mov	r22, r23
    1c10:	78 2f       	mov	r23, r24
    1c12:	88 27       	eor	r24, r24
    1c14:	b8 5f       	subi	r27, 0xF8	; 248
    1c16:	39 f0       	breq	.+14     	; 0x1c26 <__fixunssfsi+0x46>
    1c18:	b9 3f       	cpi	r27, 0xF9	; 249
    1c1a:	cc f3       	brlt	.-14     	; 0x1c0e <__fixunssfsi+0x2e>
    1c1c:	86 95       	lsr	r24
    1c1e:	77 95       	ror	r23
    1c20:	67 95       	ror	r22
    1c22:	b3 95       	inc	r27
    1c24:	d9 f7       	brne	.-10     	; 0x1c1c <__fixunssfsi+0x3c>
    1c26:	3e f4       	brtc	.+14     	; 0x1c36 <__fixunssfsi+0x56>
    1c28:	90 95       	com	r25
    1c2a:	80 95       	com	r24
    1c2c:	70 95       	com	r23
    1c2e:	61 95       	neg	r22
    1c30:	7f 4f       	sbci	r23, 0xFF	; 255
    1c32:	8f 4f       	sbci	r24, 0xFF	; 255
    1c34:	9f 4f       	sbci	r25, 0xFF	; 255
    1c36:	08 95       	ret

00001c38 <__floatunsisf>:
    1c38:	e8 94       	clt
    1c3a:	09 c0       	rjmp	.+18     	; 0x1c4e <__floatsisf+0x12>

00001c3c <__floatsisf>:
    1c3c:	97 fb       	bst	r25, 7
    1c3e:	3e f4       	brtc	.+14     	; 0x1c4e <__floatsisf+0x12>
    1c40:	90 95       	com	r25
    1c42:	80 95       	com	r24
    1c44:	70 95       	com	r23
    1c46:	61 95       	neg	r22
    1c48:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4e:	99 23       	and	r25, r25
    1c50:	a9 f0       	breq	.+42     	; 0x1c7c <__floatsisf+0x40>
    1c52:	f9 2f       	mov	r31, r25
    1c54:	96 e9       	ldi	r25, 0x96	; 150
    1c56:	bb 27       	eor	r27, r27
    1c58:	93 95       	inc	r25
    1c5a:	f6 95       	lsr	r31
    1c5c:	87 95       	ror	r24
    1c5e:	77 95       	ror	r23
    1c60:	67 95       	ror	r22
    1c62:	b7 95       	ror	r27
    1c64:	f1 11       	cpse	r31, r1
    1c66:	f8 cf       	rjmp	.-16     	; 0x1c58 <__floatsisf+0x1c>
    1c68:	fa f4       	brpl	.+62     	; 0x1ca8 <__floatsisf+0x6c>
    1c6a:	bb 0f       	add	r27, r27
    1c6c:	11 f4       	brne	.+4      	; 0x1c72 <__floatsisf+0x36>
    1c6e:	60 ff       	sbrs	r22, 0
    1c70:	1b c0       	rjmp	.+54     	; 0x1ca8 <__floatsisf+0x6c>
    1c72:	6f 5f       	subi	r22, 0xFF	; 255
    1c74:	7f 4f       	sbci	r23, 0xFF	; 255
    1c76:	8f 4f       	sbci	r24, 0xFF	; 255
    1c78:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7a:	16 c0       	rjmp	.+44     	; 0x1ca8 <__floatsisf+0x6c>
    1c7c:	88 23       	and	r24, r24
    1c7e:	11 f0       	breq	.+4      	; 0x1c84 <__floatsisf+0x48>
    1c80:	96 e9       	ldi	r25, 0x96	; 150
    1c82:	11 c0       	rjmp	.+34     	; 0x1ca6 <__floatsisf+0x6a>
    1c84:	77 23       	and	r23, r23
    1c86:	21 f0       	breq	.+8      	; 0x1c90 <__floatsisf+0x54>
    1c88:	9e e8       	ldi	r25, 0x8E	; 142
    1c8a:	87 2f       	mov	r24, r23
    1c8c:	76 2f       	mov	r23, r22
    1c8e:	05 c0       	rjmp	.+10     	; 0x1c9a <__floatsisf+0x5e>
    1c90:	66 23       	and	r22, r22
    1c92:	71 f0       	breq	.+28     	; 0x1cb0 <__floatsisf+0x74>
    1c94:	96 e8       	ldi	r25, 0x86	; 134
    1c96:	86 2f       	mov	r24, r22
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	2a f0       	brmi	.+10     	; 0x1ca8 <__floatsisf+0x6c>
    1c9e:	9a 95       	dec	r25
    1ca0:	66 0f       	add	r22, r22
    1ca2:	77 1f       	adc	r23, r23
    1ca4:	88 1f       	adc	r24, r24
    1ca6:	da f7       	brpl	.-10     	; 0x1c9e <__floatsisf+0x62>
    1ca8:	88 0f       	add	r24, r24
    1caa:	96 95       	lsr	r25
    1cac:	87 95       	ror	r24
    1cae:	97 f9       	bld	r25, 7
    1cb0:	08 95       	ret

00001cb2 <__fp_cmp>:
    1cb2:	99 0f       	add	r25, r25
    1cb4:	00 08       	sbc	r0, r0
    1cb6:	55 0f       	add	r21, r21
    1cb8:	aa 0b       	sbc	r26, r26
    1cba:	e0 e8       	ldi	r30, 0x80	; 128
    1cbc:	fe ef       	ldi	r31, 0xFE	; 254
    1cbe:	16 16       	cp	r1, r22
    1cc0:	17 06       	cpc	r1, r23
    1cc2:	e8 07       	cpc	r30, r24
    1cc4:	f9 07       	cpc	r31, r25
    1cc6:	c0 f0       	brcs	.+48     	; 0x1cf8 <__fp_cmp+0x46>
    1cc8:	12 16       	cp	r1, r18
    1cca:	13 06       	cpc	r1, r19
    1ccc:	e4 07       	cpc	r30, r20
    1cce:	f5 07       	cpc	r31, r21
    1cd0:	98 f0       	brcs	.+38     	; 0x1cf8 <__fp_cmp+0x46>
    1cd2:	62 1b       	sub	r22, r18
    1cd4:	73 0b       	sbc	r23, r19
    1cd6:	84 0b       	sbc	r24, r20
    1cd8:	95 0b       	sbc	r25, r21
    1cda:	39 f4       	brne	.+14     	; 0x1cea <__fp_cmp+0x38>
    1cdc:	0a 26       	eor	r0, r26
    1cde:	61 f0       	breq	.+24     	; 0x1cf8 <__fp_cmp+0x46>
    1ce0:	23 2b       	or	r18, r19
    1ce2:	24 2b       	or	r18, r20
    1ce4:	25 2b       	or	r18, r21
    1ce6:	21 f4       	brne	.+8      	; 0x1cf0 <__fp_cmp+0x3e>
    1ce8:	08 95       	ret
    1cea:	0a 26       	eor	r0, r26
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <__fp_cmp+0x3e>
    1cee:	a1 40       	sbci	r26, 0x01	; 1
    1cf0:	a6 95       	lsr	r26
    1cf2:	8f ef       	ldi	r24, 0xFF	; 255
    1cf4:	81 1d       	adc	r24, r1
    1cf6:	81 1d       	adc	r24, r1
    1cf8:	08 95       	ret

00001cfa <__fp_inf>:
    1cfa:	97 f9       	bld	r25, 7
    1cfc:	9f 67       	ori	r25, 0x7F	; 127
    1cfe:	80 e8       	ldi	r24, 0x80	; 128
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	60 e0       	ldi	r22, 0x00	; 0
    1d04:	08 95       	ret

00001d06 <__fp_nan>:
    1d06:	9f ef       	ldi	r25, 0xFF	; 255
    1d08:	80 ec       	ldi	r24, 0xC0	; 192
    1d0a:	08 95       	ret

00001d0c <__fp_pscA>:
    1d0c:	00 24       	eor	r0, r0
    1d0e:	0a 94       	dec	r0
    1d10:	16 16       	cp	r1, r22
    1d12:	17 06       	cpc	r1, r23
    1d14:	18 06       	cpc	r1, r24
    1d16:	09 06       	cpc	r0, r25
    1d18:	08 95       	ret

00001d1a <__fp_pscB>:
    1d1a:	00 24       	eor	r0, r0
    1d1c:	0a 94       	dec	r0
    1d1e:	12 16       	cp	r1, r18
    1d20:	13 06       	cpc	r1, r19
    1d22:	14 06       	cpc	r1, r20
    1d24:	05 06       	cpc	r0, r21
    1d26:	08 95       	ret

00001d28 <__fp_round>:
    1d28:	09 2e       	mov	r0, r25
    1d2a:	03 94       	inc	r0
    1d2c:	00 0c       	add	r0, r0
    1d2e:	11 f4       	brne	.+4      	; 0x1d34 <__fp_round+0xc>
    1d30:	88 23       	and	r24, r24
    1d32:	52 f0       	brmi	.+20     	; 0x1d48 <__fp_round+0x20>
    1d34:	bb 0f       	add	r27, r27
    1d36:	40 f4       	brcc	.+16     	; 0x1d48 <__fp_round+0x20>
    1d38:	bf 2b       	or	r27, r31
    1d3a:	11 f4       	brne	.+4      	; 0x1d40 <__fp_round+0x18>
    1d3c:	60 ff       	sbrs	r22, 0
    1d3e:	04 c0       	rjmp	.+8      	; 0x1d48 <__fp_round+0x20>
    1d40:	6f 5f       	subi	r22, 0xFF	; 255
    1d42:	7f 4f       	sbci	r23, 0xFF	; 255
    1d44:	8f 4f       	sbci	r24, 0xFF	; 255
    1d46:	9f 4f       	sbci	r25, 0xFF	; 255
    1d48:	08 95       	ret

00001d4a <__fp_split3>:
    1d4a:	57 fd       	sbrc	r21, 7
    1d4c:	90 58       	subi	r25, 0x80	; 128
    1d4e:	44 0f       	add	r20, r20
    1d50:	55 1f       	adc	r21, r21
    1d52:	59 f0       	breq	.+22     	; 0x1d6a <__fp_splitA+0x10>
    1d54:	5f 3f       	cpi	r21, 0xFF	; 255
    1d56:	71 f0       	breq	.+28     	; 0x1d74 <__fp_splitA+0x1a>
    1d58:	47 95       	ror	r20

00001d5a <__fp_splitA>:
    1d5a:	88 0f       	add	r24, r24
    1d5c:	97 fb       	bst	r25, 7
    1d5e:	99 1f       	adc	r25, r25
    1d60:	61 f0       	breq	.+24     	; 0x1d7a <__fp_splitA+0x20>
    1d62:	9f 3f       	cpi	r25, 0xFF	; 255
    1d64:	79 f0       	breq	.+30     	; 0x1d84 <__fp_splitA+0x2a>
    1d66:	87 95       	ror	r24
    1d68:	08 95       	ret
    1d6a:	12 16       	cp	r1, r18
    1d6c:	13 06       	cpc	r1, r19
    1d6e:	14 06       	cpc	r1, r20
    1d70:	55 1f       	adc	r21, r21
    1d72:	f2 cf       	rjmp	.-28     	; 0x1d58 <__fp_split3+0xe>
    1d74:	46 95       	lsr	r20
    1d76:	f1 df       	rcall	.-30     	; 0x1d5a <__fp_splitA>
    1d78:	08 c0       	rjmp	.+16     	; 0x1d8a <__fp_splitA+0x30>
    1d7a:	16 16       	cp	r1, r22
    1d7c:	17 06       	cpc	r1, r23
    1d7e:	18 06       	cpc	r1, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	f1 cf       	rjmp	.-30     	; 0x1d66 <__fp_splitA+0xc>
    1d84:	86 95       	lsr	r24
    1d86:	71 05       	cpc	r23, r1
    1d88:	61 05       	cpc	r22, r1
    1d8a:	08 94       	sec
    1d8c:	08 95       	ret

00001d8e <__fp_zero>:
    1d8e:	e8 94       	clt

00001d90 <__fp_szero>:
    1d90:	bb 27       	eor	r27, r27
    1d92:	66 27       	eor	r22, r22
    1d94:	77 27       	eor	r23, r23
    1d96:	cb 01       	movw	r24, r22
    1d98:	97 f9       	bld	r25, 7
    1d9a:	08 95       	ret

00001d9c <__gesf2>:
    1d9c:	8a df       	rcall	.-236    	; 0x1cb2 <__fp_cmp>
    1d9e:	08 f4       	brcc	.+2      	; 0x1da2 <__gesf2+0x6>
    1da0:	8f ef       	ldi	r24, 0xFF	; 255
    1da2:	08 95       	ret

00001da4 <clear>:
    1da4:	ee ec       	ldi	r30, 0xCE	; 206
    1da6:	f1 e0       	ldi	r31, 0x01	; 1
    1da8:	11 92       	st	Z+, r1
    1daa:	83 e0       	ldi	r24, 0x03	; 3
    1dac:	e6 3c       	cpi	r30, 0xC6	; 198
    1dae:	f8 07       	cpc	r31, r24
    1db0:	d9 f7       	brne	.-10     	; 0x1da8 <clear+0x4>
    1db2:	08 95       	ret

00001db4 <set_pixel>:
    1db4:	84 35       	cpi	r24, 0x54	; 84
    1db6:	80 f5       	brcc	.+96     	; 0x1e18 <set_pixel+0x64>
    1db8:	60 33       	cpi	r22, 0x30	; 48
    1dba:	70 f5       	brcc	.+92     	; 0x1e18 <set_pixel+0x64>
    1dbc:	26 2f       	mov	r18, r22
    1dbe:	26 95       	lsr	r18
    1dc0:	26 95       	lsr	r18
    1dc2:	26 95       	lsr	r18
    1dc4:	67 70       	andi	r22, 0x07	; 7
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	44 23       	and	r20, r20
    1dca:	99 f0       	breq	.+38     	; 0x1df2 <set_pixel+0x3e>
    1dcc:	e4 e5       	ldi	r30, 0x54	; 84
    1dce:	2e 9f       	mul	r18, r30
    1dd0:	f0 01       	movw	r30, r0
    1dd2:	11 24       	eor	r1, r1
    1dd4:	e8 0f       	add	r30, r24
    1dd6:	f9 1f       	adc	r31, r25
    1dd8:	e2 53       	subi	r30, 0x32	; 50
    1dda:	fe 4f       	sbci	r31, 0xFE	; 254
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <set_pixel+0x32>
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	6a 95       	dec	r22
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <set_pixel+0x2e>
    1dea:	20 81       	ld	r18, Z
    1dec:	28 2b       	or	r18, r24
    1dee:	20 83       	st	Z, r18
    1df0:	08 95       	ret
    1df2:	e4 e5       	ldi	r30, 0x54	; 84
    1df4:	2e 9f       	mul	r18, r30
    1df6:	f0 01       	movw	r30, r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	e8 0f       	add	r30, r24
    1dfc:	f9 1f       	adc	r31, r25
    1dfe:	e2 53       	subi	r30, 0x32	; 50
    1e00:	fe 4f       	sbci	r31, 0xFE	; 254
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <set_pixel+0x58>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	6a 95       	dec	r22
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <set_pixel+0x54>
    1e10:	80 95       	com	r24
    1e12:	20 81       	ld	r18, Z
    1e14:	28 23       	and	r18, r24
    1e16:	20 83       	st	Z, r18
    1e18:	08 95       	ret

00001e1a <draw_line>:
    1e1a:	2f 92       	push	r2
    1e1c:	3f 92       	push	r3
    1e1e:	4f 92       	push	r4
    1e20:	5f 92       	push	r5
    1e22:	6f 92       	push	r6
    1e24:	7f 92       	push	r7
    1e26:	8f 92       	push	r8
    1e28:	9f 92       	push	r9
    1e2a:	af 92       	push	r10
    1e2c:	bf 92       	push	r11
    1e2e:	cf 92       	push	r12
    1e30:	df 92       	push	r13
    1e32:	ef 92       	push	r14
    1e34:	ff 92       	push	r15
    1e36:	0f 93       	push	r16
    1e38:	1f 93       	push	r17
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	66 97       	sbiw	r28, 0x16	; 22
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	c8 2e       	mov	r12, r24
    1e50:	d6 2e       	mov	r13, r22
    1e52:	49 87       	std	Y+9, r20	; 0x09
    1e54:	2a 87       	std	Y+10, r18	; 0x0a
    1e56:	84 17       	cp	r24, r20
    1e58:	59 f4       	brne	.+22     	; 0x1e70 <draw_line+0x56>
    1e5a:	16 2f       	mov	r17, r22
    1e5c:	05 c0       	rjmp	.+10     	; 0x1e68 <draw_line+0x4e>
    1e5e:	8c 2d       	mov	r24, r12
    1e60:	61 2f       	mov	r22, r17
    1e62:	41 e0       	ldi	r20, 0x01	; 1
    1e64:	a7 df       	rcall	.-178    	; 0x1db4 <set_pixel>
    1e66:	1f 5f       	subi	r17, 0xFF	; 255
    1e68:	2a 85       	ldd	r18, Y+10	; 0x0a
    1e6a:	21 17       	cp	r18, r17
    1e6c:	c0 f7       	brcc	.-16     	; 0x1e5e <draw_line+0x44>
    1e6e:	a3 c1       	rjmp	.+838    	; 0x21b6 <draw_line+0x39c>
    1e70:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e72:	63 17       	cp	r22, r19
    1e74:	59 f4       	brne	.+22     	; 0x1e8c <draw_line+0x72>
    1e76:	18 2f       	mov	r17, r24
    1e78:	05 c0       	rjmp	.+10     	; 0x1e84 <draw_line+0x6a>
    1e7a:	81 2f       	mov	r24, r17
    1e7c:	6d 2d       	mov	r22, r13
    1e7e:	41 e0       	ldi	r20, 0x01	; 1
    1e80:	99 df       	rcall	.-206    	; 0x1db4 <set_pixel>
    1e82:	1f 5f       	subi	r17, 0xFF	; 255
    1e84:	49 85       	ldd	r20, Y+9	; 0x09
    1e86:	41 17       	cp	r20, r17
    1e88:	c0 f7       	brcc	.-16     	; 0x1e7a <draw_line+0x60>
    1e8a:	95 c1       	rjmp	.+810    	; 0x21b6 <draw_line+0x39c>
    1e8c:	5a 85       	ldd	r21, Y+10	; 0x0a
    1e8e:	65 2f       	mov	r22, r21
    1e90:	70 e0       	ldi	r23, 0x00	; 0
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	d0 de       	rcall	.-608    	; 0x1c38 <__floatunsisf>
    1e98:	7b 01       	movw	r14, r22
    1e9a:	8c 01       	movw	r16, r24
    1e9c:	8d 2d       	mov	r24, r13
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	9c 87       	std	Y+12, r25	; 0x0c
    1ea2:	8b 87       	std	Y+11, r24	; 0x0b
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	bf 01       	movw	r22, r30
    1ea8:	88 27       	eor	r24, r24
    1eaa:	77 fd       	sbrc	r23, 7
    1eac:	80 95       	com	r24
    1eae:	98 2f       	mov	r25, r24
    1eb0:	c5 de       	rcall	.-630    	; 0x1c3c <__floatsisf>
    1eb2:	9b 01       	movw	r18, r22
    1eb4:	ac 01       	movw	r20, r24
    1eb6:	c8 01       	movw	r24, r16
    1eb8:	b7 01       	movw	r22, r14
    1eba:	24 de       	rcall	.-952    	; 0x1b04 <__subsf3>
    1ebc:	1b 01       	movw	r2, r22
    1ebe:	2c 01       	movw	r4, r24
    1ec0:	f9 85       	ldd	r31, Y+9	; 0x09
    1ec2:	6f 2f       	mov	r22, r31
    1ec4:	70 e0       	ldi	r23, 0x00	; 0
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	b6 de       	rcall	.-660    	; 0x1c38 <__floatunsisf>
    1ecc:	7b 01       	movw	r14, r22
    1ece:	8c 01       	movw	r16, r24
    1ed0:	ac 2c       	mov	r10, r12
    1ed2:	bb 24       	eor	r11, r11
    1ed4:	b5 01       	movw	r22, r10
    1ed6:	88 27       	eor	r24, r24
    1ed8:	77 fd       	sbrc	r23, 7
    1eda:	80 95       	com	r24
    1edc:	98 2f       	mov	r25, r24
    1ede:	ae de       	rcall	.-676    	; 0x1c3c <__floatsisf>
    1ee0:	9b 01       	movw	r18, r22
    1ee2:	ac 01       	movw	r20, r24
    1ee4:	c8 01       	movw	r24, r16
    1ee6:	b7 01       	movw	r22, r14
    1ee8:	0d de       	rcall	.-998    	; 0x1b04 <__subsf3>
    1eea:	3b 01       	movw	r6, r22
    1eec:	4c 01       	movw	r8, r24
    1eee:	c2 01       	movw	r24, r4
    1ef0:	b1 01       	movw	r22, r2
    1ef2:	a4 01       	movw	r20, r8
    1ef4:	93 01       	movw	r18, r6
    1ef6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__divsf3>
    1efa:	7b 01       	movw	r14, r22
    1efc:	8c 01       	movw	r16, r24
    1efe:	29 85       	ldd	r18, Y+9	; 0x09
    1f00:	c2 16       	cp	r12, r18
    1f02:	08 f0       	brcs	.+2      	; 0x1f06 <draw_line+0xec>
    1f04:	38 c0       	rjmp	.+112    	; 0x1f76 <draw_line+0x15c>
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e8       	ldi	r20, 0x80	; 128
    1f0c:	5f e3       	ldi	r21, 0x3F	; 63
    1f0e:	46 df       	rcall	.-372    	; 0x1d9c <__gesf2>
    1f10:	18 16       	cp	r1, r24
    1f12:	24 f4       	brge	.+8      	; 0x1f1c <draw_line+0x102>
    1f14:	71 e0       	ldi	r23, 0x01	; 1
    1f16:	c7 2e       	mov	r12, r23
    1f18:	d1 2c       	mov	r13, r1
    1f1a:	37 c1       	rjmp	.+622    	; 0x218a <draw_line+0x370>
    1f1c:	c8 01       	movw	r24, r16
    1f1e:	b7 01       	movw	r22, r14
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e8       	ldi	r20, 0x80	; 128
    1f26:	5f e3       	ldi	r21, 0x3F	; 63
    1f28:	52 de       	rcall	.-860    	; 0x1bce <__cmpsf2>
    1f2a:	18 16       	cp	r1, r24
    1f2c:	64 f0       	brlt	.+24     	; 0x1f46 <draw_line+0x12c>
    1f2e:	c8 01       	movw	r24, r16
    1f30:	b7 01       	movw	r22, r14
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	40 e0       	ldi	r20, 0x00	; 0
    1f38:	50 e0       	ldi	r21, 0x00	; 0
    1f3a:	30 df       	rcall	.-416    	; 0x1d9c <__gesf2>
    1f3c:	18 16       	cp	r1, r24
    1f3e:	1c f4       	brge	.+6      	; 0x1f46 <draw_line+0x12c>
    1f40:	cc 24       	eor	r12, r12
    1f42:	dd 24       	eor	r13, r13
    1f44:	50 c0       	rjmp	.+160    	; 0x1fe6 <draw_line+0x1cc>
    1f46:	c8 01       	movw	r24, r16
    1f48:	b7 01       	movw	r22, r14
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e0       	ldi	r20, 0x00	; 0
    1f50:	50 e0       	ldi	r21, 0x00	; 0
    1f52:	3d de       	rcall	.-902    	; 0x1bce <__cmpsf2>
    1f54:	18 16       	cp	r1, r24
    1f56:	0c f4       	brge	.+2      	; 0x1f5a <draw_line+0x140>
    1f58:	11 c1       	rjmp	.+546    	; 0x217c <draw_line+0x362>
    1f5a:	c8 01       	movw	r24, r16
    1f5c:	b7 01       	movw	r22, r14
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e8       	ldi	r20, 0x80	; 128
    1f64:	5f eb       	ldi	r21, 0xBF	; 191
    1f66:	1a df       	rcall	.-460    	; 0x1d9c <__gesf2>
    1f68:	18 16       	cp	r1, r24
    1f6a:	0c f0       	brlt	.+2      	; 0x1f6e <draw_line+0x154>
    1f6c:	07 c1       	rjmp	.+526    	; 0x217c <draw_line+0x362>
    1f6e:	67 e0       	ldi	r22, 0x07	; 7
    1f70:	c6 2e       	mov	r12, r22
    1f72:	d1 2c       	mov	r13, r1
    1f74:	38 c0       	rjmp	.+112    	; 0x1fe6 <draw_line+0x1cc>
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e8       	ldi	r20, 0x80	; 128
    1f7c:	5f e3       	ldi	r21, 0x3F	; 63
    1f7e:	0e df       	rcall	.-484    	; 0x1d9c <__gesf2>
    1f80:	18 16       	cp	r1, r24
    1f82:	24 f4       	brge	.+8      	; 0x1f8c <draw_line+0x172>
    1f84:	55 e0       	ldi	r21, 0x05	; 5
    1f86:	c5 2e       	mov	r12, r21
    1f88:	d1 2c       	mov	r13, r1
    1f8a:	ff c0       	rjmp	.+510    	; 0x218a <draw_line+0x370>
    1f8c:	c8 01       	movw	r24, r16
    1f8e:	b7 01       	movw	r22, r14
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e8       	ldi	r20, 0x80	; 128
    1f96:	5f e3       	ldi	r21, 0x3F	; 63
    1f98:	1a de       	rcall	.-972    	; 0x1bce <__cmpsf2>
    1f9a:	18 16       	cp	r1, r24
    1f9c:	6c f0       	brlt	.+26     	; 0x1fb8 <draw_line+0x19e>
    1f9e:	c8 01       	movw	r24, r16
    1fa0:	b7 01       	movw	r22, r14
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	50 e0       	ldi	r21, 0x00	; 0
    1faa:	f8 de       	rcall	.-528    	; 0x1d9c <__gesf2>
    1fac:	18 16       	cp	r1, r24
    1fae:	24 f4       	brge	.+8      	; 0x1fb8 <draw_line+0x19e>
    1fb0:	44 e0       	ldi	r20, 0x04	; 4
    1fb2:	c4 2e       	mov	r12, r20
    1fb4:	d1 2c       	mov	r13, r1
    1fb6:	17 c0       	rjmp	.+46     	; 0x1fe6 <draw_line+0x1cc>
    1fb8:	c8 01       	movw	r24, r16
    1fba:	b7 01       	movw	r22, r14
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	04 de       	rcall	.-1016   	; 0x1bce <__cmpsf2>
    1fc6:	18 16       	cp	r1, r24
    1fc8:	0c f4       	brge	.+2      	; 0x1fcc <draw_line+0x1b2>
    1fca:	dc c0       	rjmp	.+440    	; 0x2184 <draw_line+0x36a>
    1fcc:	c8 01       	movw	r24, r16
    1fce:	b7 01       	movw	r22, r14
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e8       	ldi	r20, 0x80	; 128
    1fd6:	5f eb       	ldi	r21, 0xBF	; 191
    1fd8:	e1 de       	rcall	.-574    	; 0x1d9c <__gesf2>
    1fda:	18 16       	cp	r1, r24
    1fdc:	0c f0       	brlt	.+2      	; 0x1fe0 <draw_line+0x1c6>
    1fde:	d2 c0       	rjmp	.+420    	; 0x2184 <draw_line+0x36a>
    1fe0:	33 e0       	ldi	r19, 0x03	; 3
    1fe2:	c3 2e       	mov	r12, r19
    1fe4:	d1 2c       	mov	r13, r1
    1fe6:	4b 85       	ldd	r20, Y+11	; 0x0b
    1fe8:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fea:	5a 83       	std	Y+2, r21	; 0x02
    1fec:	49 83       	std	Y+1, r20	; 0x01
    1fee:	be 82       	std	Y+6, r11	; 0x06
    1ff0:	ad 82       	std	Y+5, r10	; 0x05
    1ff2:	99 85       	ldd	r25, Y+9	; 0x09
    1ff4:	89 2f       	mov	r24, r25
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9c 83       	std	Y+4, r25	; 0x04
    1ffa:	8b 83       	std	Y+3, r24	; 0x03
    1ffc:	17 01       	movw	r2, r14
    1ffe:	28 01       	movw	r4, r16
    2000:	e1 e0       	ldi	r30, 0x01	; 1
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	f8 87       	std	Y+8, r31	; 0x08
    2006:	ef 83       	std	Y+7, r30	; 0x07
    2008:	f7 e0       	ldi	r31, 0x07	; 7
    200a:	cf 16       	cp	r12, r31
    200c:	d1 04       	cpc	r13, r1
    200e:	28 f4       	brcc	.+10     	; 0x201a <draw_line+0x200>
    2010:	23 e0       	ldi	r18, 0x03	; 3
    2012:	c2 16       	cp	r12, r18
    2014:	d1 04       	cpc	r13, r1
    2016:	40 f4       	brcc	.+16     	; 0x2028 <draw_line+0x20e>
    2018:	04 c0       	rjmp	.+8      	; 0x2022 <draw_line+0x208>
    201a:	37 e0       	ldi	r19, 0x07	; 7
    201c:	c3 16       	cp	r12, r19
    201e:	d1 04       	cpc	r13, r1
    2020:	29 f4       	brne	.+10     	; 0x202c <draw_line+0x212>
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	02 c0       	rjmp	.+4      	; 0x202c <draw_line+0x212>
    2028:	8f ef       	ldi	r24, 0xFF	; 255
    202a:	9f ef       	ldi	r25, 0xFF	; 255
    202c:	ad 80       	ldd	r10, Y+5	; 0x05
    202e:	be 80       	ldd	r11, Y+6	; 0x06
    2030:	0f 2e       	mov	r0, r31
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	6f 2e       	mov	r6, r31
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	7f 2e       	mov	r7, r31
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	8f 2e       	mov	r8, r31
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	9f 2e       	mov	r9, r31
    2042:	f0 2d       	mov	r31, r0
    2044:	a2 01       	movw	r20, r4
    2046:	91 01       	movw	r18, r2
    2048:	50 58       	subi	r21, 0x80	; 128
    204a:	2d 87       	std	Y+13, r18	; 0x0d
    204c:	3e 87       	std	Y+14, r19	; 0x0e
    204e:	4f 87       	std	Y+15, r20	; 0x0f
    2050:	58 8b       	std	Y+16, r21	; 0x10
    2052:	9c 01       	movw	r18, r24
    2054:	44 27       	eor	r20, r20
    2056:	37 fd       	sbrc	r19, 7
    2058:	40 95       	com	r20
    205a:	54 2f       	mov	r21, r20
    205c:	29 8b       	std	Y+17, r18	; 0x11
    205e:	3a 8b       	std	Y+18, r19	; 0x12
    2060:	4b 8b       	std	Y+19, r20	; 0x13
    2062:	5c 8b       	std	Y+20, r21	; 0x14
    2064:	7a c0       	rjmp	.+244    	; 0x215a <draw_line+0x340>
    2066:	4f 81       	ldd	r20, Y+7	; 0x07
    2068:	58 85       	ldd	r21, Y+8	; 0x08
    206a:	45 2b       	or	r20, r21
    206c:	19 f0       	breq	.+6      	; 0x2074 <draw_line+0x25a>
    206e:	8a 2d       	mov	r24, r10
    2070:	69 81       	ldd	r22, Y+1	; 0x01
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <draw_line+0x25e>
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	6a 2d       	mov	r22, r10
    2078:	41 e0       	ldi	r20, 0x01	; 1
    207a:	9c de       	rcall	.-712    	; 0x1db4 <set_pixel>
    207c:	c2 01       	movw	r24, r4
    207e:	b1 01       	movw	r22, r2
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	40 e0       	ldi	r20, 0x00	; 0
    2086:	50 e0       	ldi	r21, 0x00	; 0
    2088:	89 de       	rcall	.-750    	; 0x1d9c <__gesf2>
    208a:	88 23       	and	r24, r24
    208c:	1c f0       	brlt	.+6      	; 0x2094 <draw_line+0x27a>
    208e:	a2 01       	movw	r20, r4
    2090:	91 01       	movw	r18, r2
    2092:	04 c0       	rjmp	.+8      	; 0x209c <draw_line+0x282>
    2094:	2d 85       	ldd	r18, Y+13	; 0x0d
    2096:	3e 85       	ldd	r19, Y+14	; 0x0e
    2098:	4f 85       	ldd	r20, Y+15	; 0x0f
    209a:	58 89       	ldd	r21, Y+16	; 0x10
    209c:	c4 01       	movw	r24, r8
    209e:	b3 01       	movw	r22, r6
    20a0:	32 dd       	rcall	.-1436   	; 0x1b06 <__addsf3>
    20a2:	3b 01       	movw	r6, r22
    20a4:	4c 01       	movw	r8, r24
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	5f e3       	ldi	r21, 0x3F	; 63
    20ae:	76 de       	rcall	.-788    	; 0x1d9c <__gesf2>
    20b0:	18 16       	cp	r1, r24
    20b2:	0c f0       	brlt	.+2      	; 0x20b6 <draw_line+0x29c>
    20b4:	44 c0       	rjmp	.+136    	; 0x213e <draw_line+0x324>
    20b6:	69 89       	ldd	r22, Y+17	; 0x11
    20b8:	7a 89       	ldd	r23, Y+18	; 0x12
    20ba:	8b 89       	ldd	r24, Y+19	; 0x13
    20bc:	9c 89       	ldd	r25, Y+20	; 0x14
    20be:	be dd       	rcall	.-1156   	; 0x1c3c <__floatsisf>
    20c0:	9b 01       	movw	r18, r22
    20c2:	ac 01       	movw	r20, r24
    20c4:	c2 01       	movw	r24, r4
    20c6:	b1 01       	movw	r22, r2
    20c8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__mulsf3>
    20cc:	7b 01       	movw	r14, r22
    20ce:	8c 01       	movw	r16, r24
    20d0:	1e 8a       	std	Y+22, r1	; 0x16
    20d2:	1d 8a       	std	Y+21, r1	; 0x15
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	5f de       	rcall	.-834    	; 0x1d9c <__gesf2>
    20de:	18 16       	cp	r1, r24
    20e0:	24 f4       	brge	.+8      	; 0x20ea <draw_line+0x2d0>
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	9e 8b       	std	Y+22, r25	; 0x16
    20e8:	8d 8b       	std	Y+21, r24	; 0x15
    20ea:	cc 24       	eor	r12, r12
    20ec:	dd 24       	eor	r13, r13
    20ee:	c8 01       	movw	r24, r16
    20f0:	b7 01       	movw	r22, r14
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e0       	ldi	r20, 0x00	; 0
    20f8:	50 e0       	ldi	r21, 0x00	; 0
    20fa:	69 dd       	rcall	.-1326   	; 0x1bce <__cmpsf2>
    20fc:	88 23       	and	r24, r24
    20fe:	1c f4       	brge	.+6      	; 0x2106 <draw_line+0x2ec>
    2100:	21 e0       	ldi	r18, 0x01	; 1
    2102:	c2 2e       	mov	r12, r18
    2104:	d1 2c       	mov	r13, r1
    2106:	ed 89       	ldd	r30, Y+21	; 0x15
    2108:	fe 89       	ldd	r31, Y+22	; 0x16
    210a:	ec 19       	sub	r30, r12
    210c:	fd 09       	sbc	r31, r13
    210e:	31 97       	sbiw	r30, 0x01	; 1
    2110:	39 f4       	brne	.+14     	; 0x2120 <draw_line+0x306>
    2112:	29 81       	ldd	r18, Y+1	; 0x01
    2114:	3a 81       	ldd	r19, Y+2	; 0x02
    2116:	2f 5f       	subi	r18, 0xFF	; 255
    2118:	3f 4f       	sbci	r19, 0xFF	; 255
    211a:	3a 83       	std	Y+2, r19	; 0x02
    211c:	29 83       	std	Y+1, r18	; 0x01
    211e:	06 c0       	rjmp	.+12     	; 0x212c <draw_line+0x312>
    2120:	49 81       	ldd	r20, Y+1	; 0x01
    2122:	5a 81       	ldd	r21, Y+2	; 0x02
    2124:	41 50       	subi	r20, 0x01	; 1
    2126:	50 40       	sbci	r21, 0x00	; 0
    2128:	5a 83       	std	Y+2, r21	; 0x02
    212a:	49 83       	std	Y+1, r20	; 0x01
    212c:	c4 01       	movw	r24, r8
    212e:	b3 01       	movw	r22, r6
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	e5 dc       	rcall	.-1590   	; 0x1b04 <__subsf3>
    213a:	3b 01       	movw	r6, r22
    213c:	4c 01       	movw	r8, r24
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	9c 81       	ldd	r25, Y+4	; 0x04
    2142:	ed 81       	ldd	r30, Y+5	; 0x05
    2144:	fe 81       	ldd	r31, Y+6	; 0x06
    2146:	e8 17       	cp	r30, r24
    2148:	f9 07       	cpc	r31, r25
    214a:	20 f4       	brcc	.+8      	; 0x2154 <draw_line+0x33a>
    214c:	08 94       	sec
    214e:	a1 1c       	adc	r10, r1
    2150:	b1 1c       	adc	r11, r1
    2152:	03 c0       	rjmp	.+6      	; 0x215a <draw_line+0x340>
    2154:	08 94       	sec
    2156:	a1 08       	sbc	r10, r1
    2158:	b1 08       	sbc	r11, r1
    215a:	2b 81       	ldd	r18, Y+3	; 0x03
    215c:	3c 81       	ldd	r19, Y+4	; 0x04
    215e:	4d 81       	ldd	r20, Y+5	; 0x05
    2160:	5e 81       	ldd	r21, Y+6	; 0x06
    2162:	42 17       	cp	r20, r18
    2164:	53 07       	cpc	r21, r19
    2166:	20 f4       	brcc	.+8      	; 0x2170 <draw_line+0x356>
    2168:	2a 15       	cp	r18, r10
    216a:	3b 05       	cpc	r19, r11
    216c:	20 f1       	brcs	.+72     	; 0x21b6 <draw_line+0x39c>
    216e:	7b cf       	rjmp	.-266    	; 0x2066 <draw_line+0x24c>
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	a8 16       	cp	r10, r24
    2176:	b9 06       	cpc	r11, r25
    2178:	f0 f0       	brcs	.+60     	; 0x21b6 <draw_line+0x39c>
    217a:	75 cf       	rjmp	.-278    	; 0x2066 <draw_line+0x24c>
    217c:	96 e0       	ldi	r25, 0x06	; 6
    217e:	c9 2e       	mov	r12, r25
    2180:	d1 2c       	mov	r13, r1
    2182:	03 c0       	rjmp	.+6      	; 0x218a <draw_line+0x370>
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	c8 2e       	mov	r12, r24
    2188:	d1 2c       	mov	r13, r1
    218a:	c4 01       	movw	r24, r8
    218c:	b3 01       	movw	r22, r6
    218e:	a2 01       	movw	r20, r4
    2190:	91 01       	movw	r18, r2
    2192:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__divsf3>
    2196:	1b 01       	movw	r2, r22
    2198:	2c 01       	movw	r4, r24
    219a:	ba 82       	std	Y+2, r11	; 0x02
    219c:	a9 82       	std	Y+1, r10	; 0x01
    219e:	eb 85       	ldd	r30, Y+11	; 0x0b
    21a0:	fc 85       	ldd	r31, Y+12	; 0x0c
    21a2:	fe 83       	std	Y+6, r31	; 0x06
    21a4:	ed 83       	std	Y+5, r30	; 0x05
    21a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    21a8:	23 2f       	mov	r18, r19
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	3c 83       	std	Y+4, r19	; 0x04
    21ae:	2b 83       	std	Y+3, r18	; 0x03
    21b0:	18 86       	std	Y+8, r1	; 0x08
    21b2:	1f 82       	std	Y+7, r1	; 0x07
    21b4:	29 cf       	rjmp	.-430    	; 0x2008 <draw_line+0x1ee>
    21b6:	66 96       	adiw	r28, 0x16	; 22
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	1f 91       	pop	r17
    21c8:	0f 91       	pop	r16
    21ca:	ff 90       	pop	r15
    21cc:	ef 90       	pop	r14
    21ce:	df 90       	pop	r13
    21d0:	cf 90       	pop	r12
    21d2:	bf 90       	pop	r11
    21d4:	af 90       	pop	r10
    21d6:	9f 90       	pop	r9
    21d8:	8f 90       	pop	r8
    21da:	7f 90       	pop	r7
    21dc:	6f 90       	pop	r6
    21de:	5f 90       	pop	r5
    21e0:	4f 90       	pop	r4
    21e2:	3f 90       	pop	r3
    21e4:	2f 90       	pop	r2
    21e6:	08 95       	ret

000021e8 <draw_character>:
    21e8:	8f 92       	push	r8
    21ea:	9f 92       	push	r9
    21ec:	af 92       	push	r10
    21ee:	bf 92       	push	r11
    21f0:	cf 92       	push	r12
    21f2:	df 92       	push	r13
    21f4:	ef 92       	push	r14
    21f6:	ff 92       	push	r15
    21f8:	0f 93       	push	r16
    21fa:	1f 93       	push	r17
    21fc:	cf 93       	push	r28
    21fe:	df 93       	push	r29
    2200:	d6 2e       	mov	r13, r22
    2202:	c4 2e       	mov	r12, r20
    2204:	95 e0       	ldi	r25, 0x05	; 5
    2206:	89 9f       	mul	r24, r25
    2208:	c0 01       	movw	r24, r0
    220a:	11 24       	eor	r1, r1
    220c:	8c 01       	movw	r16, r24
    220e:	04 5f       	subi	r16, 0xF4	; 244
    2210:	1f 4f       	sbci	r17, 0xFF	; 255
    2212:	f1 e0       	ldi	r31, 0x01	; 1
    2214:	8f 2e       	mov	r8, r31
    2216:	91 2c       	mov	r9, r1
    2218:	e1 e1       	ldi	r30, 0x11	; 17
    221a:	ae 2e       	mov	r10, r30
    221c:	e0 e0       	ldi	r30, 0x00	; 0
    221e:	be 2e       	mov	r11, r30
    2220:	a8 0e       	add	r10, r24
    2222:	b9 1e       	adc	r11, r25
    2224:	1d c0       	rjmp	.+58     	; 0x2260 <draw_character+0x78>
    2226:	6c 2d       	mov	r22, r12
    2228:	6c 0f       	add	r22, r28
    222a:	a4 01       	movw	r20, r8
    222c:	0c 2e       	mov	r0, r28
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <draw_character+0x4c>
    2230:	44 0f       	add	r20, r20
    2232:	55 1f       	adc	r21, r21
    2234:	0a 94       	dec	r0
    2236:	e2 f7       	brpl	.-8      	; 0x2230 <draw_character+0x48>
    2238:	4e 21       	and	r20, r14
    223a:	5f 21       	and	r21, r15
    223c:	0c 2e       	mov	r0, r28
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <draw_character+0x5c>
    2240:	55 95       	asr	r21
    2242:	47 95       	ror	r20
    2244:	0a 94       	dec	r0
    2246:	e2 f7       	brpl	.-8      	; 0x2240 <draw_character+0x58>
    2248:	8d 2d       	mov	r24, r13
    224a:	b4 dd       	rcall	.-1176   	; 0x1db4 <set_pixel>
    224c:	21 96       	adiw	r28, 0x01	; 1
    224e:	c8 30       	cpi	r28, 0x08	; 8
    2250:	d1 05       	cpc	r29, r1
    2252:	49 f7       	brne	.-46     	; 0x2226 <draw_character+0x3e>
    2254:	0f 5f       	subi	r16, 0xFF	; 255
    2256:	1f 4f       	sbci	r17, 0xFF	; 255
    2258:	d3 94       	inc	r13
    225a:	0a 15       	cp	r16, r10
    225c:	1b 05       	cpc	r17, r11
    225e:	39 f0       	breq	.+14     	; 0x226e <draw_character+0x86>
    2260:	c0 e0       	ldi	r28, 0x00	; 0
    2262:	d0 e0       	ldi	r29, 0x00	; 0
    2264:	f8 01       	movw	r30, r16
    2266:	84 91       	lpm	r24, Z+
    2268:	e8 2e       	mov	r14, r24
    226a:	ff 24       	eor	r15, r15
    226c:	dc cf       	rjmp	.-72     	; 0x2226 <draw_character+0x3e>
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	1f 91       	pop	r17
    2274:	0f 91       	pop	r16
    2276:	ff 90       	pop	r15
    2278:	ef 90       	pop	r14
    227a:	df 90       	pop	r13
    227c:	cf 90       	pop	r12
    227e:	bf 90       	pop	r11
    2280:	af 90       	pop	r10
    2282:	9f 90       	pop	r9
    2284:	8f 90       	pop	r8
    2286:	08 95       	ret

00002288 <draw_string>:
    2288:	0f 93       	push	r16
    228a:	1f 93       	push	r17
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	ec 01       	movw	r28, r24
    2292:	16 2f       	mov	r17, r22
    2294:	04 2f       	mov	r16, r20
    2296:	05 c0       	rjmp	.+10     	; 0x22a2 <draw_string+0x1a>
    2298:	61 2f       	mov	r22, r17
    229a:	40 2f       	mov	r20, r16
    229c:	a5 df       	rcall	.-182    	; 0x21e8 <draw_character>
    229e:	21 96       	adiw	r28, 0x01	; 1
    22a0:	1b 5f       	subi	r17, 0xFB	; 251
    22a2:	88 81       	ld	r24, Y
    22a4:	88 23       	and	r24, r24
    22a6:	c1 f7       	brne	.-16     	; 0x2298 <draw_string+0x10>
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	1f 91       	pop	r17
    22ae:	0f 91       	pop	r16
    22b0:	08 95       	ret

000022b2 <refresh>:
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	60 e0       	ldi	r22, 0x00	; 0
    22ba:	55 d0       	rcall	.+170    	; 0x2366 <LCDPosition>
    22bc:	ce ec       	ldi	r28, 0xCE	; 206
    22be:	d1 e0       	ldi	r29, 0x01	; 1
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	69 91       	ld	r22, Y+
    22c4:	07 d0       	rcall	.+14     	; 0x22d4 <LCDWrite>
    22c6:	83 e0       	ldi	r24, 0x03	; 3
    22c8:	c6 3c       	cpi	r28, 0xC6	; 198
    22ca:	d8 07       	cpc	r29, r24
    22cc:	c9 f7       	brne	.-14     	; 0x22c0 <refresh+0xe>
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	08 95       	ret

000022d4 <LCDWrite>:
    22d4:	95 b1       	in	r25, 0x05	; 5
    22d6:	82 95       	swap	r24
    22d8:	88 0f       	add	r24, r24
    22da:	80 7e       	andi	r24, 0xE0	; 224
    22dc:	9f 7d       	andi	r25, 0xDF	; 223
    22de:	98 2b       	or	r25, r24
    22e0:	95 b9       	out	0x05, r25	; 5
    22e2:	5f 98       	cbi	0x0b, 7	; 11
    22e4:	27 e0       	ldi	r18, 0x07	; 7
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	70 e0       	ldi	r23, 0x00	; 0
    22ea:	8f 98       	cbi	0x11, 7	; 17
    22ec:	cb 01       	movw	r24, r22
    22ee:	02 2e       	mov	r0, r18
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <LCDWrite+0x22>
    22f2:	95 95       	asr	r25
    22f4:	87 95       	ror	r24
    22f6:	0a 94       	dec	r0
    22f8:	e2 f7       	brpl	.-8      	; 0x22f2 <LCDWrite+0x1e>
    22fa:	80 ff       	sbrs	r24, 0
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <LCDWrite+0x2e>
    22fe:	2e 9a       	sbi	0x05, 6	; 5
    2300:	01 c0       	rjmp	.+2      	; 0x2304 <LCDWrite+0x30>
    2302:	2e 98       	cbi	0x05, 6	; 5
    2304:	8f 9a       	sbi	0x11, 7	; 17
    2306:	21 50       	subi	r18, 0x01	; 1
    2308:	30 40       	sbci	r19, 0x00	; 0
    230a:	8f ef       	ldi	r24, 0xFF	; 255
    230c:	2f 3f       	cpi	r18, 0xFF	; 255
    230e:	38 07       	cpc	r19, r24
    2310:	61 f7       	brne	.-40     	; 0x22ea <LCDWrite+0x16>
    2312:	5f 9a       	sbi	0x0b, 7	; 11
    2314:	08 95       	ret

00002316 <LCDInitialise>:
    2316:	1f 93       	push	r17
    2318:	18 2f       	mov	r17, r24
    231a:	57 9a       	sbi	0x0a, 7	; 10
    231c:	24 9a       	sbi	0x04, 4	; 4
    231e:	25 9a       	sbi	0x04, 5	; 4
    2320:	26 9a       	sbi	0x04, 6	; 4
    2322:	87 9a       	sbi	0x10, 7	; 16
    2324:	2c 98       	cbi	0x05, 4	; 5
    2326:	5f 9a       	sbi	0x0b, 7	; 11
    2328:	2c 9a       	sbi	0x05, 4	; 5
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	61 e2       	ldi	r22, 0x21	; 33
    232e:	d2 df       	rcall	.-92     	; 0x22d4 <LCDWrite>
    2330:	10 68       	ori	r17, 0x80	; 128
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	61 2f       	mov	r22, r17
    2336:	ce df       	rcall	.-100    	; 0x22d4 <LCDWrite>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	64 e0       	ldi	r22, 0x04	; 4
    233c:	cb df       	rcall	.-106    	; 0x22d4 <LCDWrite>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	63 e1       	ldi	r22, 0x13	; 19
    2342:	c8 df       	rcall	.-112    	; 0x22d4 <LCDWrite>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	6c e0       	ldi	r22, 0x0C	; 12
    2348:	c5 df       	rcall	.-118    	; 0x22d4 <LCDWrite>
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	60 e2       	ldi	r22, 0x20	; 32
    234e:	c2 df       	rcall	.-124    	; 0x22d4 <LCDWrite>
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	6c e0       	ldi	r22, 0x0C	; 12
    2354:	bf df       	rcall	.-130    	; 0x22d4 <LCDWrite>
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	60 e4       	ldi	r22, 0x40	; 64
    235a:	bc df       	rcall	.-136    	; 0x22d4 <LCDWrite>
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	60 e8       	ldi	r22, 0x80	; 128
    2360:	b9 df       	rcall	.-142    	; 0x22d4 <LCDWrite>
    2362:	1f 91       	pop	r17
    2364:	08 95       	ret

00002366 <LCDPosition>:
    2366:	1f 93       	push	r17
    2368:	18 2f       	mov	r17, r24
    236a:	60 64       	ori	r22, 0x40	; 64
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	b2 df       	rcall	.-156    	; 0x22d4 <LCDWrite>
    2370:	10 68       	ori	r17, 0x80	; 128
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	61 2f       	mov	r22, r17
    2376:	ae df       	rcall	.-164    	; 0x22d4 <LCDWrite>
    2378:	1f 91       	pop	r17
    237a:	08 95       	ret

0000237c <init_sprite>:
    237c:	8f 92       	push	r8
    237e:	9f 92       	push	r9
    2380:	af 92       	push	r10
    2382:	bf 92       	push	r11
    2384:	cf 92       	push	r12
    2386:	df 92       	push	r13
    2388:	ef 92       	push	r14
    238a:	ff 92       	push	r15
    238c:	0f 93       	push	r16
    238e:	1f 93       	push	r17
    2390:	4c 01       	movw	r8, r24
    2392:	a4 2e       	mov	r10, r20
    2394:	12 2f       	mov	r17, r18
    2396:	70 e0       	ldi	r23, 0x00	; 0
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	4d dc       	rcall	.-1894   	; 0x1c38 <__floatunsisf>
    239e:	f4 01       	movw	r30, r8
    23a0:	60 83       	st	Z, r22
    23a2:	71 83       	std	Z+1, r23	; 0x01
    23a4:	82 83       	std	Z+2, r24	; 0x02
    23a6:	93 83       	std	Z+3, r25	; 0x03
    23a8:	bb 24       	eor	r11, r11
    23aa:	cc 24       	eor	r12, r12
    23ac:	dd 24       	eor	r13, r13
    23ae:	c6 01       	movw	r24, r12
    23b0:	b5 01       	movw	r22, r10
    23b2:	42 dc       	rcall	.-1916   	; 0x1c38 <__floatunsisf>
    23b4:	f4 01       	movw	r30, r8
    23b6:	64 83       	std	Z+4, r22	; 0x04
    23b8:	75 83       	std	Z+5, r23	; 0x05
    23ba:	86 83       	std	Z+6, r24	; 0x06
    23bc:	97 83       	std	Z+7, r25	; 0x07
    23be:	10 87       	std	Z+8, r17	; 0x08
    23c0:	01 87       	std	Z+9, r16	; 0x09
    23c2:	f4 86       	std	Z+12, r15	; 0x0c
    23c4:	e3 86       	std	Z+11, r14	; 0x0b
    23c6:	1f 91       	pop	r17
    23c8:	0f 91       	pop	r16
    23ca:	ff 90       	pop	r15
    23cc:	ef 90       	pop	r14
    23ce:	df 90       	pop	r13
    23d0:	cf 90       	pop	r12
    23d2:	bf 90       	pop	r11
    23d4:	af 90       	pop	r10
    23d6:	9f 90       	pop	r9
    23d8:	8f 90       	pop	r8
    23da:	08 95       	ret

000023dc <draw_sprite>:
    23dc:	2f 92       	push	r2
    23de:	3f 92       	push	r3
    23e0:	4f 92       	push	r4
    23e2:	5f 92       	push	r5
    23e4:	7f 92       	push	r7
    23e6:	8f 92       	push	r8
    23e8:	9f 92       	push	r9
    23ea:	af 92       	push	r10
    23ec:	bf 92       	push	r11
    23ee:	cf 92       	push	r12
    23f0:	df 92       	push	r13
    23f2:	ef 92       	push	r14
    23f4:	ff 92       	push	r15
    23f6:	0f 93       	push	r16
    23f8:	1f 93       	push	r17
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	00 d0       	rcall	.+0      	; 0x2400 <draw_sprite+0x24>
    2400:	00 d0       	rcall	.+0      	; 0x2402 <draw_sprite+0x26>
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	2c 01       	movw	r4, r24
    2408:	dc 01       	movw	r26, r24
    240a:	1a 96       	adiw	r26, 0x0a	; 10
    240c:	8c 91       	ld	r24, X
    240e:	88 23       	and	r24, r24
    2410:	09 f4       	brne	.+2      	; 0x2414 <draw_sprite+0x38>
    2412:	96 c0       	rjmp	.+300    	; 0x2540 <draw_sprite+0x164>
    2414:	22 24       	eor	r2, r2
    2416:	33 24       	eor	r3, r3
    2418:	1a 82       	std	Y+2, r1	; 0x02
    241a:	19 82       	std	Y+1, r1	; 0x01
    241c:	87 c0       	rjmp	.+270    	; 0x252c <draw_sprite+0x150>
    241e:	e9 81       	ldd	r30, Y+1	; 0x01
    2420:	fa 81       	ldd	r31, Y+2	; 0x02
    2422:	bf 01       	movw	r22, r30
    2424:	88 27       	eor	r24, r24
    2426:	77 fd       	sbrc	r23, 7
    2428:	80 95       	com	r24
    242a:	98 2f       	mov	r25, r24
    242c:	07 dc       	rcall	.-2034   	; 0x1c3c <__floatsisf>
    242e:	d2 01       	movw	r26, r4
    2430:	14 96       	adiw	r26, 0x04	; 4
    2432:	2d 91       	ld	r18, X+
    2434:	3d 91       	ld	r19, X+
    2436:	4d 91       	ld	r20, X+
    2438:	5c 91       	ld	r21, X
    243a:	17 97       	sbiw	r26, 0x07	; 7
    243c:	64 db       	rcall	.-2360   	; 0x1b06 <__addsf3>
    243e:	5b 01       	movw	r10, r22
    2440:	6c 01       	movw	r12, r24
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e0       	ldi	r20, 0x00	; 0
    2448:	50 e0       	ldi	r21, 0x00	; 0
    244a:	c1 db       	rcall	.-2174   	; 0x1bce <__cmpsf2>
    244c:	87 fd       	sbrc	r24, 7
    244e:	68 c0       	rjmp	.+208    	; 0x2520 <draw_sprite+0x144>
    2450:	c6 01       	movw	r24, r12
    2452:	b5 01       	movw	r22, r10
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e4       	ldi	r20, 0x40	; 64
    245a:	52 e4       	ldi	r21, 0x42	; 66
    245c:	9f dc       	rcall	.-1730   	; 0x1d9c <__gesf2>
    245e:	87 ff       	sbrs	r24, 7
    2460:	6f c0       	rjmp	.+222    	; 0x2540 <draw_sprite+0x164>
    2462:	1c 82       	std	Y+4, r1	; 0x04
    2464:	1b 82       	std	Y+3, r1	; 0x03
    2466:	45 c0       	rjmp	.+138    	; 0x24f2 <draw_sprite+0x116>
    2468:	d2 01       	movw	r26, r4
    246a:	1b 96       	adiw	r26, 0x0b	; 11
    246c:	ed 91       	ld	r30, X+
    246e:	fc 91       	ld	r31, X
    2470:	1c 97       	sbiw	r26, 0x0c	; 12
    2472:	e2 0d       	add	r30, r2
    2474:	f3 1d       	adc	r31, r3
    2476:	70 80       	ld	r7, Z
    2478:	eb 81       	ldd	r30, Y+3	; 0x03
    247a:	fc 81       	ldd	r31, Y+4	; 0x04
    247c:	bf 01       	movw	r22, r30
    247e:	88 27       	eor	r24, r24
    2480:	77 fd       	sbrc	r23, 7
    2482:	80 95       	com	r24
    2484:	98 2f       	mov	r25, r24
    2486:	da db       	rcall	.-2124   	; 0x1c3c <__floatsisf>
    2488:	d2 01       	movw	r26, r4
    248a:	2d 91       	ld	r18, X+
    248c:	3d 91       	ld	r19, X+
    248e:	4d 91       	ld	r20, X+
    2490:	5c 91       	ld	r21, X
    2492:	39 db       	rcall	.-2446   	; 0x1b06 <__addsf3>
    2494:	7b 01       	movw	r14, r22
    2496:	8c 01       	movw	r16, r24
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e0       	ldi	r20, 0x00	; 0
    249e:	50 e0       	ldi	r21, 0x00	; 0
    24a0:	7d dc       	rcall	.-1798   	; 0x1d9c <__gesf2>
    24a2:	88 23       	and	r24, r24
    24a4:	cc f0       	brlt	.+50     	; 0x24d8 <draw_sprite+0xfc>
    24a6:	c8 01       	movw	r24, r16
    24a8:	b7 01       	movw	r22, r14
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	48 ea       	ldi	r20, 0xA8	; 168
    24b0:	52 e4       	ldi	r21, 0x42	; 66
    24b2:	8d db       	rcall	.-2278   	; 0x1bce <__cmpsf2>
    24b4:	88 23       	and	r24, r24
    24b6:	84 f4       	brge	.+32     	; 0x24d8 <draw_sprite+0xfc>
    24b8:	78 20       	and	r7, r8
    24ba:	71 f0       	breq	.+28     	; 0x24d8 <draw_sprite+0xfc>
    24bc:	c8 01       	movw	r24, r16
    24be:	b7 01       	movw	r22, r14
    24c0:	8f db       	rcall	.-2274   	; 0x1be0 <__fixunssfsi>
    24c2:	7b 01       	movw	r14, r22
    24c4:	8c 01       	movw	r16, r24
    24c6:	c6 01       	movw	r24, r12
    24c8:	b5 01       	movw	r22, r10
    24ca:	8a db       	rcall	.-2284   	; 0x1be0 <__fixunssfsi>
    24cc:	9b 01       	movw	r18, r22
    24ce:	ac 01       	movw	r20, r24
    24d0:	8e 2d       	mov	r24, r14
    24d2:	62 2f       	mov	r22, r18
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	6e dc       	rcall	.-1828   	; 0x1db4 <set_pixel>
    24d8:	eb 81       	ldd	r30, Y+3	; 0x03
    24da:	fc 81       	ldd	r31, Y+4	; 0x04
    24dc:	31 96       	adiw	r30, 0x01	; 1
    24de:	fc 83       	std	Y+4, r31	; 0x04
    24e0:	eb 83       	std	Y+3, r30	; 0x03
    24e2:	cf 01       	movw	r24, r30
    24e4:	87 70       	andi	r24, 0x07	; 7
    24e6:	90 70       	andi	r25, 0x00	; 0
    24e8:	89 2b       	or	r24, r25
    24ea:	39 f4       	brne	.+14     	; 0x24fa <draw_sprite+0x11e>
    24ec:	08 94       	sec
    24ee:	21 1c       	adc	r2, r1
    24f0:	31 1c       	adc	r3, r1
    24f2:	90 e8       	ldi	r25, 0x80	; 128
    24f4:	89 2e       	mov	r8, r25
    24f6:	91 2c       	mov	r9, r1
    24f8:	02 c0       	rjmp	.+4      	; 0x24fe <draw_sprite+0x122>
    24fa:	95 94       	asr	r9
    24fc:	87 94       	ror	r8
    24fe:	d2 01       	movw	r26, r4
    2500:	18 96       	adiw	r26, 0x08	; 8
    2502:	8c 91       	ld	r24, X
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	eb 81       	ldd	r30, Y+3	; 0x03
    2508:	fc 81       	ldd	r31, Y+4	; 0x04
    250a:	e8 17       	cp	r30, r24
    250c:	f9 07       	cpc	r31, r25
    250e:	0c f4       	brge	.+2      	; 0x2512 <draw_sprite+0x136>
    2510:	ab cf       	rjmp	.-170    	; 0x2468 <draw_sprite+0x8c>
    2512:	87 70       	andi	r24, 0x07	; 7
    2514:	90 70       	andi	r25, 0x00	; 0
    2516:	89 2b       	or	r24, r25
    2518:	19 f0       	breq	.+6      	; 0x2520 <draw_sprite+0x144>
    251a:	08 94       	sec
    251c:	21 1c       	adc	r2, r1
    251e:	31 1c       	adc	r3, r1
    2520:	29 81       	ldd	r18, Y+1	; 0x01
    2522:	3a 81       	ldd	r19, Y+2	; 0x02
    2524:	2f 5f       	subi	r18, 0xFF	; 255
    2526:	3f 4f       	sbci	r19, 0xFF	; 255
    2528:	3a 83       	std	Y+2, r19	; 0x02
    252a:	29 83       	std	Y+1, r18	; 0x01
    252c:	d2 01       	movw	r26, r4
    252e:	19 96       	adiw	r26, 0x09	; 9
    2530:	8c 91       	ld	r24, X
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	e9 81       	ldd	r30, Y+1	; 0x01
    2536:	fa 81       	ldd	r31, Y+2	; 0x02
    2538:	e8 17       	cp	r30, r24
    253a:	f9 07       	cpc	r31, r25
    253c:	0c f4       	brge	.+2      	; 0x2540 <draw_sprite+0x164>
    253e:	6f cf       	rjmp	.-290    	; 0x241e <draw_sprite+0x42>
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	1f 91       	pop	r17
    254e:	0f 91       	pop	r16
    2550:	ff 90       	pop	r15
    2552:	ef 90       	pop	r14
    2554:	df 90       	pop	r13
    2556:	cf 90       	pop	r12
    2558:	bf 90       	pop	r11
    255a:	af 90       	pop	r10
    255c:	9f 90       	pop	r9
    255e:	8f 90       	pop	r8
    2560:	7f 90       	pop	r7
    2562:	5f 90       	pop	r5
    2564:	4f 90       	pop	r4
    2566:	3f 90       	pop	r3
    2568:	2f 90       	pop	r2
    256a:	08 95       	ret

0000256c <__divmodhi4>:
    256c:	97 fb       	bst	r25, 7
    256e:	09 2e       	mov	r0, r25
    2570:	07 26       	eor	r0, r23
    2572:	0a d0       	rcall	.+20     	; 0x2588 <__divmodhi4_neg1>
    2574:	77 fd       	sbrc	r23, 7
    2576:	04 d0       	rcall	.+8      	; 0x2580 <__divmodhi4_neg2>
    2578:	0c d0       	rcall	.+24     	; 0x2592 <__udivmodhi4>
    257a:	06 d0       	rcall	.+12     	; 0x2588 <__divmodhi4_neg1>
    257c:	00 20       	and	r0, r0
    257e:	1a f4       	brpl	.+6      	; 0x2586 <__divmodhi4_exit>

00002580 <__divmodhi4_neg2>:
    2580:	70 95       	com	r23
    2582:	61 95       	neg	r22
    2584:	7f 4f       	sbci	r23, 0xFF	; 255

00002586 <__divmodhi4_exit>:
    2586:	08 95       	ret

00002588 <__divmodhi4_neg1>:
    2588:	f6 f7       	brtc	.-4      	; 0x2586 <__divmodhi4_exit>
    258a:	90 95       	com	r25
    258c:	81 95       	neg	r24
    258e:	9f 4f       	sbci	r25, 0xFF	; 255
    2590:	08 95       	ret

00002592 <__udivmodhi4>:
    2592:	aa 1b       	sub	r26, r26
    2594:	bb 1b       	sub	r27, r27
    2596:	51 e1       	ldi	r21, 0x11	; 17
    2598:	07 c0       	rjmp	.+14     	; 0x25a8 <__udivmodhi4_ep>

0000259a <__udivmodhi4_loop>:
    259a:	aa 1f       	adc	r26, r26
    259c:	bb 1f       	adc	r27, r27
    259e:	a6 17       	cp	r26, r22
    25a0:	b7 07       	cpc	r27, r23
    25a2:	10 f0       	brcs	.+4      	; 0x25a8 <__udivmodhi4_ep>
    25a4:	a6 1b       	sub	r26, r22
    25a6:	b7 0b       	sbc	r27, r23

000025a8 <__udivmodhi4_ep>:
    25a8:	88 1f       	adc	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	5a 95       	dec	r21
    25ae:	a9 f7       	brne	.-22     	; 0x259a <__udivmodhi4_loop>
    25b0:	80 95       	com	r24
    25b2:	90 95       	com	r25
    25b4:	bc 01       	movw	r22, r24
    25b6:	cd 01       	movw	r24, r26
    25b8:	08 95       	ret

000025ba <__prologue_saves__>:
    25ba:	2f 92       	push	r2
    25bc:	3f 92       	push	r3
    25be:	4f 92       	push	r4
    25c0:	5f 92       	push	r5
    25c2:	6f 92       	push	r6
    25c4:	7f 92       	push	r7
    25c6:	8f 92       	push	r8
    25c8:	9f 92       	push	r9
    25ca:	af 92       	push	r10
    25cc:	bf 92       	push	r11
    25ce:	cf 92       	push	r12
    25d0:	df 92       	push	r13
    25d2:	ef 92       	push	r14
    25d4:	ff 92       	push	r15
    25d6:	0f 93       	push	r16
    25d8:	1f 93       	push	r17
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	ca 1b       	sub	r28, r26
    25e4:	db 0b       	sbc	r29, r27
    25e6:	0f b6       	in	r0, 0x3f	; 63
    25e8:	f8 94       	cli
    25ea:	de bf       	out	0x3e, r29	; 62
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	cd bf       	out	0x3d, r28	; 61
    25f0:	09 94       	ijmp

000025f2 <__epilogue_restores__>:
    25f2:	2a 88       	ldd	r2, Y+18	; 0x12
    25f4:	39 88       	ldd	r3, Y+17	; 0x11
    25f6:	48 88       	ldd	r4, Y+16	; 0x10
    25f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    25fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    25fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    25fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2600:	9b 84       	ldd	r9, Y+11	; 0x0b
    2602:	aa 84       	ldd	r10, Y+10	; 0x0a
    2604:	b9 84       	ldd	r11, Y+9	; 0x09
    2606:	c8 84       	ldd	r12, Y+8	; 0x08
    2608:	df 80       	ldd	r13, Y+7	; 0x07
    260a:	ee 80       	ldd	r14, Y+6	; 0x06
    260c:	fd 80       	ldd	r15, Y+5	; 0x05
    260e:	0c 81       	ldd	r16, Y+4	; 0x04
    2610:	1b 81       	ldd	r17, Y+3	; 0x03
    2612:	aa 81       	ldd	r26, Y+2	; 0x02
    2614:	b9 81       	ldd	r27, Y+1	; 0x01
    2616:	ce 0f       	add	r28, r30
    2618:	d1 1d       	adc	r29, r1
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	cd bf       	out	0x3d, r28	; 61
    2624:	ed 01       	movw	r28, r26
    2626:	08 95       	ret

00002628 <do_rand>:
    2628:	a0 e0       	ldi	r26, 0x00	; 0
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	e9 e1       	ldi	r30, 0x19	; 25
    262e:	f3 e1       	ldi	r31, 0x13	; 19
    2630:	cc cf       	rjmp	.-104    	; 0x25ca <__prologue_saves__+0x10>
    2632:	ec 01       	movw	r28, r24
    2634:	a8 80       	ld	r10, Y
    2636:	b9 80       	ldd	r11, Y+1	; 0x01
    2638:	ca 80       	ldd	r12, Y+2	; 0x02
    263a:	db 80       	ldd	r13, Y+3	; 0x03
    263c:	a1 14       	cp	r10, r1
    263e:	b1 04       	cpc	r11, r1
    2640:	c1 04       	cpc	r12, r1
    2642:	d1 04       	cpc	r13, r1
    2644:	41 f4       	brne	.+16     	; 0x2656 <do_rand+0x2e>
    2646:	84 e2       	ldi	r24, 0x24	; 36
    2648:	a8 2e       	mov	r10, r24
    264a:	89 ed       	ldi	r24, 0xD9	; 217
    264c:	b8 2e       	mov	r11, r24
    264e:	8b e5       	ldi	r24, 0x5B	; 91
    2650:	c8 2e       	mov	r12, r24
    2652:	87 e0       	ldi	r24, 0x07	; 7
    2654:	d8 2e       	mov	r13, r24
    2656:	c6 01       	movw	r24, r12
    2658:	b5 01       	movw	r22, r10
    265a:	2d e1       	ldi	r18, 0x1D	; 29
    265c:	33 ef       	ldi	r19, 0xF3	; 243
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	58 d0       	rcall	.+176    	; 0x2714 <__divmodsi4>
    2664:	27 ea       	ldi	r18, 0xA7	; 167
    2666:	31 e4       	ldi	r19, 0x41	; 65
    2668:	40 e0       	ldi	r20, 0x00	; 0
    266a:	50 e0       	ldi	r21, 0x00	; 0
    266c:	34 d0       	rcall	.+104    	; 0x26d6 <__mulsi3>
    266e:	7b 01       	movw	r14, r22
    2670:	8c 01       	movw	r16, r24
    2672:	c6 01       	movw	r24, r12
    2674:	b5 01       	movw	r22, r10
    2676:	2d e1       	ldi	r18, 0x1D	; 29
    2678:	33 ef       	ldi	r19, 0xF3	; 243
    267a:	41 e0       	ldi	r20, 0x01	; 1
    267c:	50 e0       	ldi	r21, 0x00	; 0
    267e:	4a d0       	rcall	.+148    	; 0x2714 <__divmodsi4>
    2680:	ca 01       	movw	r24, r20
    2682:	b9 01       	movw	r22, r18
    2684:	2c ee       	ldi	r18, 0xEC	; 236
    2686:	34 ef       	ldi	r19, 0xF4	; 244
    2688:	4f ef       	ldi	r20, 0xFF	; 255
    268a:	5f ef       	ldi	r21, 0xFF	; 255
    268c:	24 d0       	rcall	.+72     	; 0x26d6 <__mulsi3>
    268e:	6e 0d       	add	r22, r14
    2690:	7f 1d       	adc	r23, r15
    2692:	80 1f       	adc	r24, r16
    2694:	91 1f       	adc	r25, r17
    2696:	97 ff       	sbrs	r25, 7
    2698:	04 c0       	rjmp	.+8      	; 0x26a2 <do_rand+0x7a>
    269a:	61 50       	subi	r22, 0x01	; 1
    269c:	70 40       	sbci	r23, 0x00	; 0
    269e:	80 40       	sbci	r24, 0x00	; 0
    26a0:	90 48       	sbci	r25, 0x80	; 128
    26a2:	68 83       	st	Y, r22
    26a4:	79 83       	std	Y+1, r23	; 0x01
    26a6:	8a 83       	std	Y+2, r24	; 0x02
    26a8:	9b 83       	std	Y+3, r25	; 0x03
    26aa:	9b 01       	movw	r18, r22
    26ac:	3f 77       	andi	r19, 0x7F	; 127
    26ae:	c9 01       	movw	r24, r18
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	ea e0       	ldi	r30, 0x0A	; 10
    26b6:	a5 cf       	rjmp	.-182    	; 0x2602 <__epilogue_restores__+0x10>

000026b8 <rand_r>:
    26b8:	b7 cf       	rjmp	.-146    	; 0x2628 <do_rand>

000026ba <rand>:
    26ba:	82 e9       	ldi	r24, 0x92	; 146
    26bc:	91 e0       	ldi	r25, 0x01	; 1
    26be:	b4 cf       	rjmp	.-152    	; 0x2628 <do_rand>

000026c0 <srand>:
    26c0:	a0 e0       	ldi	r26, 0x00	; 0
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	80 93 92 01 	sts	0x0192, r24
    26c8:	90 93 93 01 	sts	0x0193, r25
    26cc:	a0 93 94 01 	sts	0x0194, r26
    26d0:	b0 93 95 01 	sts	0x0195, r27
    26d4:	08 95       	ret

000026d6 <__mulsi3>:
    26d6:	62 9f       	mul	r22, r18
    26d8:	d0 01       	movw	r26, r0
    26da:	73 9f       	mul	r23, r19
    26dc:	f0 01       	movw	r30, r0
    26de:	82 9f       	mul	r24, r18
    26e0:	e0 0d       	add	r30, r0
    26e2:	f1 1d       	adc	r31, r1
    26e4:	64 9f       	mul	r22, r20
    26e6:	e0 0d       	add	r30, r0
    26e8:	f1 1d       	adc	r31, r1
    26ea:	92 9f       	mul	r25, r18
    26ec:	f0 0d       	add	r31, r0
    26ee:	83 9f       	mul	r24, r19
    26f0:	f0 0d       	add	r31, r0
    26f2:	74 9f       	mul	r23, r20
    26f4:	f0 0d       	add	r31, r0
    26f6:	65 9f       	mul	r22, r21
    26f8:	f0 0d       	add	r31, r0
    26fa:	99 27       	eor	r25, r25
    26fc:	72 9f       	mul	r23, r18
    26fe:	b0 0d       	add	r27, r0
    2700:	e1 1d       	adc	r30, r1
    2702:	f9 1f       	adc	r31, r25
    2704:	63 9f       	mul	r22, r19
    2706:	b0 0d       	add	r27, r0
    2708:	e1 1d       	adc	r30, r1
    270a:	f9 1f       	adc	r31, r25
    270c:	bd 01       	movw	r22, r26
    270e:	cf 01       	movw	r24, r30
    2710:	11 24       	eor	r1, r1
    2712:	08 95       	ret

00002714 <__divmodsi4>:
    2714:	97 fb       	bst	r25, 7
    2716:	09 2e       	mov	r0, r25
    2718:	05 26       	eor	r0, r21
    271a:	0e d0       	rcall	.+28     	; 0x2738 <__divmodsi4_neg1>
    271c:	57 fd       	sbrc	r21, 7
    271e:	04 d0       	rcall	.+8      	; 0x2728 <__divmodsi4_neg2>
    2720:	14 d0       	rcall	.+40     	; 0x274a <__udivmodsi4>
    2722:	0a d0       	rcall	.+20     	; 0x2738 <__divmodsi4_neg1>
    2724:	00 1c       	adc	r0, r0
    2726:	38 f4       	brcc	.+14     	; 0x2736 <__divmodsi4_exit>

00002728 <__divmodsi4_neg2>:
    2728:	50 95       	com	r21
    272a:	40 95       	com	r20
    272c:	30 95       	com	r19
    272e:	21 95       	neg	r18
    2730:	3f 4f       	sbci	r19, 0xFF	; 255
    2732:	4f 4f       	sbci	r20, 0xFF	; 255
    2734:	5f 4f       	sbci	r21, 0xFF	; 255

00002736 <__divmodsi4_exit>:
    2736:	08 95       	ret

00002738 <__divmodsi4_neg1>:
    2738:	f6 f7       	brtc	.-4      	; 0x2736 <__divmodsi4_exit>
    273a:	90 95       	com	r25
    273c:	80 95       	com	r24
    273e:	70 95       	com	r23
    2740:	61 95       	neg	r22
    2742:	7f 4f       	sbci	r23, 0xFF	; 255
    2744:	8f 4f       	sbci	r24, 0xFF	; 255
    2746:	9f 4f       	sbci	r25, 0xFF	; 255
    2748:	08 95       	ret

0000274a <__udivmodsi4>:
    274a:	a1 e2       	ldi	r26, 0x21	; 33
    274c:	1a 2e       	mov	r1, r26
    274e:	aa 1b       	sub	r26, r26
    2750:	bb 1b       	sub	r27, r27
    2752:	fd 01       	movw	r30, r26
    2754:	0d c0       	rjmp	.+26     	; 0x2770 <__udivmodsi4_ep>

00002756 <__udivmodsi4_loop>:
    2756:	aa 1f       	adc	r26, r26
    2758:	bb 1f       	adc	r27, r27
    275a:	ee 1f       	adc	r30, r30
    275c:	ff 1f       	adc	r31, r31
    275e:	a2 17       	cp	r26, r18
    2760:	b3 07       	cpc	r27, r19
    2762:	e4 07       	cpc	r30, r20
    2764:	f5 07       	cpc	r31, r21
    2766:	20 f0       	brcs	.+8      	; 0x2770 <__udivmodsi4_ep>
    2768:	a2 1b       	sub	r26, r18
    276a:	b3 0b       	sbc	r27, r19
    276c:	e4 0b       	sbc	r30, r20
    276e:	f5 0b       	sbc	r31, r21

00002770 <__udivmodsi4_ep>:
    2770:	66 1f       	adc	r22, r22
    2772:	77 1f       	adc	r23, r23
    2774:	88 1f       	adc	r24, r24
    2776:	99 1f       	adc	r25, r25
    2778:	1a 94       	dec	r1
    277a:	69 f7       	brne	.-38     	; 0x2756 <__udivmodsi4_loop>
    277c:	60 95       	com	r22
    277e:	70 95       	com	r23
    2780:	80 95       	com	r24
    2782:	90 95       	com	r25
    2784:	9b 01       	movw	r18, r22
    2786:	ac 01       	movw	r20, r24
    2788:	bd 01       	movw	r22, r26
    278a:	cf 01       	movw	r24, r30
    278c:	08 95       	ret

0000278e <_exit>:
    278e:	f8 94       	cli

00002790 <__stop_program>:
    2790:	ff cf       	rjmp	.-2      	; 0x2790 <__stop_program>
